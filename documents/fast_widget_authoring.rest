Fast Widget Authoring With Dojo
===============================

:Author: Alex Russell
:Version: 0.1
:Copyright: Dojo Foundation, 2005
:Date: 2005/04/18

.. contents::

Intro
----------------------------------

The Dojo project is working to build a modern, capable, "webish", and easy to
use DHTML toolkit. By saying "easy to use", we imply the question "easy for
who?". Dojo tries to provide multiple points of entry into the system, and
thereby make Dojo easy to use for many different classes of users. Making the
development of DHTML/Ajax GUIs easy is a herculean task, and Dojo is attempting
it. One step at a time. In order to make it eventually simpler for the
"average IT developer" to build UIs, we must first make it simpler for the
people that build tools the tools they use to construct solid and capable
components. Often, these building blocks are a combination of new, old, custom,
and off-the-shelf components. Simplifying the creation and use of these
components is of paramount importance. Until now, developers building DHTML UI
components have either had to rely on hard-to-maintain innerHTML techniques or
verbosely construct UI components one node at a time with
document.createElement() calls. Given these unappealing options, most
developers punt and scramble back to the relative sanity of the server-side.

This article takes a deeper look at the status quo, proposes a hybrid way of
constructing UI components, and discuss the APIs and tools that Dojo provides
today to implement this new approach.

The Workflow Problem
----------------------------------

So it's hard, fine, but that's an invitation for a clever solution not a reason
to give up. Cross-browser issues aside, there are practical considerations of
usage and construction of components. Those who go the innerHTML route soon
find themselves building huge string variables and dealing with all manner of
string encoding issues. Worse, they quickly find out how sub-optimal it is to
attach programmatic logic to the newly built elements. What good is getting a
reference to a DOM node that could be blown away the next time your need to
repaint the UI in response to user input? Things go downhill from there.

The other side of the fence is the "clean" method of programmatically
constructing the UI with pure DOM manipulation in JavaScript. This is the
approach that toolkits like DomAPI and nWidgets take (for the most part). While
functional and avoiding most escaping issues, this approach carries with it
reduced prodctivity on the part of the widget author. It's so verbose and time
consuming to build UIs this way that once your widget or component works, the
last thing you ever want to do is change it's DOM structure. Didn't we move to
the web to get *away* from building UIs this way?

The DOM-only approach also doesn't fit well into the basic workflow of UI
development for web applications. Regardless of what system winds up building
the markup/DOM that the user interacts with, the proceedure for developing
look, feel, and interaction design of an application almost never happens in
code. More likely, creative professionals will design the system they'd like to
see, and if the developer is lucky, will hand over (machine generated) HTML
with the final design (and when was the last time that a "final" design was
actually final, anyway?). Whether the deliverable from the interaction design
process is markup or slideware, the job of turning that design into a
functioning system falls to a web development professional. Regardless of
whether or not they've been handed slideware, the first step for this person is
almost always to prototype the UI is good markup and CSS.

This is a tremendously important point. Markup, it turns out, is perhaps the
fastest way to build a static representation of a UI for programmers and
designers alike. Classic desktop GUI toolkits are starting to adapt (GTK+ and
QT) or die (MFC will some day be replaced by XAML, Mozilla uses XUL now, etc.).
Said another way, markup has, for better and for worse, democratized the GUI
construction process.

Today, UI designers don't generate sequences of DOM commands for building a UI,
they build HTML or Photoshop mock-ups, and then hand it off to a developer to
"make it real". At this point, it's the component author's job to translate
that into a functioning, reusable, degradeable component. Doing it the DOM way
is admirable, but given the costs, often misguided. The design process demands
flexiblity, reusability, and a hundred and one special cases in order to match
the user's mental model to the actual behavior of the system.

With Dojo, we are adopting a technique for the fast prototyping and development
of GUI components in HTML environments that was first introduced in the
netWindows toolkit but has never been given much discussion or attention. The
method we outline allows component authors to continue to realize the
advantages of HTML and CSS markup for creating the initial state of widgets
while maintaining the advantages of direct DOM manipulation for
post-initialization changes a component's look and feel.

Prototype 
---------

So you've been handed an HTML and CSS from a designer. Wouldn't it be great if
you could prototype, test, and tweak the itneraction without 

Connect 
-------

FIXME: fill it in!

Deploy
------

FIXME: fill it in!

Making It A Tag
---------------

FIXME: fill it in!

Remainders
---------------

FIXME: fill it in!

Getting Involved with Dojo
##########################

Comitters to Dojo are currently an invite-only group, but that doesn't mean it
can't include you. If you'd like to contribute to the future of Dojo and
responsive web applications, do something that impress us (either with Dojo, or
with JS/DHTML/DSVG in general). Our license is intentionally non-political
(Academic Free License 2.1) and we support your use of Dojo in software that's
licensed in other ways, but will not accept differently-licensed patches. We're
not trying to be exclusive, just productive.

About The Author
#########################

Alex Russell is just another geek. He can be reached at <alex@dojotoolkit.org>.
His mostly pointless blog is at: http://alex.nwidgets.com

.. vim:ts=4:et:tw=0:shiftwidth=4:
