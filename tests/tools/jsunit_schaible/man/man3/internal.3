.TH "internal" 3 "9 Nov 2002" "JsUnit" \" -*- nroff -*-
.ad l
.nh
.SH NAME
internal \- Internals
 
.SS "Document Conventions"
.PP
The documentation of JavaScript code follows the JavaDoc conventions. The generation is done using a Perl script generating Pseudo C++ code with the comments that is processed afterwards with DoxyGen. A lot of the features of DoxyGen are supported including the QT style of the comments. See following chapter how to generate the documentation.
.PP
Documentation blocks within the code are embedded with:
.PP
First element of such a block has to be a tag identifying the documented element or is directly a brief description of the next code element. Within the code following elements are supported:
.PP
.TP
@class 
.TP
@ctor 
.TP
@file 
.TP
@fn 
.TP
@interface 
.TP
@var 
.PP
Other elements like \fI@type\fP or \fI@enum\fP are ignored. The element type \fI@ctor\fP is introduced by the Perl script to allow a separate description of the class' constructor that is simply the initializer function of the class. The class itself is identified by assigning elements to its prototype. For an interface only functions should be added to the prototype.
.PP
Unlike C++ JavaScript has no idea about variable or function types. Since this information is nevertheless valuable for the documentation the script supports some tags that allow the type specification to be generated in the pseudo code:
.PP
.TP
\fI@tparam TYPE PARAM COMMENT\fP
.br
This command sets the type of a parameter. It is replaced in the documentation comment with the \fI@param PARAM COMMENT\fP command (without the \fITYPE\fP).
.PP
.TP
\fI@tparam TYPE COMMENT\fP
.br
This command sets the return type of a function. It is replaced in the documentation comment with the \fI@return COMMENT\fP command (without the \fITYPE\fP). This comand is a short cut of the normal \fI@return\fP command and the \fI@type\fP command supported by this program.
.PP
.TP
\fI@type TYPE\fP
.br
This command sets the type of a variable or the return type of a function.
.PP
Keep in mind that pseude C++ is produced. Unlike in C++ it is quite not clear which elements will belong in the end to a class. Therefore the script cannot support the grouping commands of DoxyGen.
.PP
.SS "Script Manual"
.PP
.nf



.fi
.PP
.SS "Rebuilding Documentation"
.PP
Like everyone I am not very keen on writing documentation. The best way I can live with it is the way javadoc supports this. Luckily there are some other tools out there that can be used for other languages, but most of these tools are only available for object-oriented languages. While JavaScript allows to write object-oriented code, most people are not aware of this. Therefore I use a perl script to transform JavaScript code that follow the coding conventions above in some kind of pseudo C++ that can be used to fool Doxygen, my favorite non-Java source code documentation tool.
.PP
Use the script \fIjsdoc\fP to rebuild the documentation. It is located in the utils directory. It depends on a Unix environment including Perl. Personally I use Cygwin that comes nowadays with quite complete Unix packages. Additionally you have to install Doxygen and Graphviz a cross-platform drawing toolkit from AT&T. My script expects both tools either in the PATH or at /opt/doxygen and /opt/graphviz. In Windows I have mounted my Windows program directory to /opt using Cygwin functionality.
.PP
My script will call the Perl script \fIjs2doxy.pl\fP to generate pseudo C++. Then it calls Doxygen to generate the first version of the HTML documentation and the Unix man pages. A last sed processing is done to generate this JsUnit color style in the headers.
.PP

