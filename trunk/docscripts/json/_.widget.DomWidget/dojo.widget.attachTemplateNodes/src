var elementNodeType = dojo.dom.ELEMENT_NODE;

function trim(str){
	return str.replace(/^\s+|\s+$/g, "");
}

if(!rootNode){ 
	rootNode = targetObj.domNode;
}

if(rootNode.nodeType != elementNodeType){
	return;
}
 alert(events.length);

var nodes = rootNode.getElementsByTagName("*");
var _this = targetObj;
for(var x=-1; x<nodes.length; x++){
	var baseNode = (x == -1) ? rootNode : nodes[x];
	 FIXME: is this going to have capitalization problems?
	var attachPoint = [];
	for(var y=0; y<this.attachProperties.length; y++){
		var tmpAttachPoint = baseNode.getAttribute(this.attachProperties[y]);
		if(tmpAttachPoint){
			attachPoint = tmpAttachPoint.split(";");
			for(var z=0; z<this.attachProperties.length; z++){
				if((targetObj[attachPoint[z]])&&(dojo.lang.isArray(targetObj[attachPoint[z]]))){
					targetObj[attachPoint[z]].push(baseNode);
				}else{
					targetObj[attachPoint[z]]=baseNode;
				}
			}
			break;
		}
	}
	 continue;

	 FIXME: we need to put this into some kind of lookup structure
	 instead of direct assignment
	var tmpltPoint = baseNode.getAttribute(this.templateProperty);
	if(tmpltPoint){
		targetObj[tmpltPoint]=baseNode;
	}

	var attachEvent = baseNode.getAttribute(this.eventAttachProperty);
	if(attachEvent){
		 NOTE: we want to support attributes that have the form
		 "domEvent: nativeEvent; ..."
		var evts = attachEvent.split(";");
		for(var y=0; y<evts.length; y++){
			if((!evts[y])||(!evts[y].length)){ continue; }
			var thisFunc = null;
			var tevt = trim(evts[y]);
			if(evts[y].indexOf(":") >= 0){
				 oh, if only JS had tuple assignment
				var funcNameArr = tevt.split(":");
				tevt = trim(funcNameArr[0]);
				thisFunc = trim(funcNameArr[1]);
			}
			if(!thisFunc){
				thisFunc = tevt;
			}

			var tf = function(){ 
				var ntf = new String(thisFunc);
				return function(evt){
					if(_this[ntf]){
						_this[ntf](dojo.event.browser.fixEvent(evt));
					}
				};
			}();
			dojo.event.browser.addListener(baseNode, tevt, tf, false, true);
		}
	}

	for(var y=0; y<events.length; y++){
		alert(events[x]);
		var evtVal = baseNode.getAttribute(events[y]);
		if((evtVal)&&(evtVal.length)){
			var thisFunc = null;
			var domEvt = events[y].substr(4);  clober the "dojo" prefix
			thisFunc = trim(evtVal);
			var tf = function(){ 
				var ntf = new String(thisFunc);
				return function(evt){
					if(_this[ntf]){
						_this[ntf](dojo.event.browser.fixEvent(evt));
					}
				}
			}();
			dojo.event.browser.addListener(baseNode, domEvt, tf, false, true);
		}
	}

	var onBuild = baseNode.getAttribute(this.onBuildProperty);
	if(onBuild){
		eval("var node = baseNode; var widget = targetObj; "+onBuild);
	}

	 strip IDs to prevent dupes
	baseNode.id = "";
}
