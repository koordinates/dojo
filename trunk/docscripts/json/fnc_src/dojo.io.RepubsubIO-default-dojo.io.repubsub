this.initDoc = "init.html";
this.isInitialized = false;
this.subscriptionBacklog = [];
this.debug = true;
this.rcvNodeName = null;
this.sndNodeName = null;
this.rcvNode = null;
this.sndNode = null;
this.canRcv = false;
this.canSnd = false;
this.canLog = false;
this.sndTimer = null;
this.windowRef = window;
this.backlog = [];
this.tunnelInitCount = 0;
this.tunnelFrameKey = "tunnel_frame";
this.serverBaseURL = location.protocol+""+location.host+location.pathname;
this.logBacklog = [];
this.userid = "guest";
this.tunnelID = this.getRandStr();
this.attachPathList = [];
this.topics = [];  list of topics we have listeners to

 actually, now that I think about it a little bit more, it would sure be
 useful to parse out the <script> src attributes. We're looking for
 something with a "do_method=lib", since that's what would have included
 us in the first place (in the common case).

 parse URL params and use them as default vals
var getOpts = this.parseGetStr();
for(var x in getOpts){
	 FIXME: should I be checking for undefined here before setting? Does
			that buy me anything?
	this[x] = getOpts[x];
}

if(!this["tunnelURI"]){
	this.tunnelURI = [	"/who/", escape(this.userid), "/s/", 
						this.getRandStr(), "/kn_journal"].join("");
	 this.tunnelURI = this.absoluteTopicURI(this.tunnelURI);
}

if (self.kn_tunnelID) kn.tunnelID = self.kn_tunnelID;  the server says
if (kn._argv.kn_tunnelID) kn.tunnelID = kn._argv.kn_tunnelID;  the url says

 check the options object if it exists and use its properties as an
 over-ride
if(window["repubsubOpts"]||window["rpsOpts"]){
	var optObj = window["repubsubOpts"]||window["rpsOpts"];
	for(var x in optObj){
		this[x] = optObj[x];  copy the option object properties
	}
}

 things that get called directly from our iframe to inform us of events

 FIXME: parseCookie and setCookie should be methods that are more broadly
 available. Perhaps in htmlUtils?

 FIXME: need to replace w/ dojo.log.*

 this handles local event propigation

 the "publish" method is really a misnomer, since it really means "take
 this event and send it to the server". Note that the "dispatch" method
 handles local event promigulation, and therefore we emulate both sides
 of a real event router without having to swallow all of the complexity.
