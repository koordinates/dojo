var padChar = null;
function _ (s, n) {
	s = String(s);
	n = (n || 2) - s.length;
	while (n-- > 0) { s = (padChar == null ? "0" : padChar) + s; }
	return s;
}

function $ (property) {
	switch (property) {
		case "a":  abbreviated weekday name according to the current locale
			return dojo.date.getDayShortName(dateObject); break;

		case "A":  full weekday name according to the current locale
			return dojo.date.getDayName(dateObject); break;

		case "b":
		case "h":  abbreviated month name according to the current locale
			return dojo.date.getMonthShortName(dateObject); break;
			
		case "B":  full month name according to the current locale
			return dojo.date.getMonthName(dateObject); break;
			
		case "c":  preferred date and time representation for the current
				   locale
			return dateObject.toLocaleString(); break;

		case "C":  century number (the year divided by 100 and truncated
				   to an integer, range 00 to 99)
			return _(Math.floor(dateObject.getFullYear()/100)); break;
			
		case "d":  day of the month as a decimal number (range 01 to 31)
			return _(dateObject.getDate()); break;
			
		case "D":  same as %m/%d/%y
			return $("m") + "/" + $("d") + "/" + $("y"); break;
				
		case "e":  day of the month as a decimal number, a single digit is
				   preceded by a space (range ' 1' to '31')
			if (padChar == null) { padChar = " "; }
			return _(dateObject.getDate(), 2); break;
		
		case "g":  like %G, but without the century.
			break;
		
		case "G":  The 4-digit year corresponding to the ISO week number
				   (see %V).  This has the same format and value as %Y,
				   except that if the ISO week number belongs to the
				   previous or next year, that year is used instead.
			break;
		
		case "F":  same as %Y-%m-%d
			return $("Y") + "-" + $("m") + "-" + $("d"); break;
			
		case "H":  hour as a decimal number using a 24-hour clock (range
				   00 to 23)
			return _(dateObject.getHours()); break;
			
		case "I":  hour as a decimal number using a 12-hour clock (range
				   01 to 12)
			return _(dateObject.getHours() % 12 || 12); break;
			
		case "j":  day of the year as a decimal number (range 001 to 366)
			return _(dojo.date.getDayOfYear(dateObject), 3); break;
			
		case "m":  month as a decimal number (range 01 to 12)
			return _(dateObject.getMonth() + 1); break;
			
		case "M":  minute as a decimal numbe
			return _(dateObject.getMinutes()); break;
		
		case "n":
			return "\n"; break;

		case "p":  either `am' or `pm' according to the given time value,
				   or the corresponding strings for the current locale
			return dateObject.getHours() < 12 ? "am" : "pm"; break;
			
		case "r":  time in a.m. and p.m. notation
			return $("I") + ":" + $("M") + ":" + $("S") + " " + $("p"); break;
			
		case "R":  time in 24 hour notation
			return $("H") + ":" + $("M"); break;
			
		case "S":  second as a decimal number
			return _(dateObject.getSeconds()); break;

		case "t":
			return "\t"; break;

		case "T":  current time, equal to %H:%M:%S
			return $("H") + ":" + $("M") + ":" + $("S"); break;
			
		case "u":  weekday as a decimal number [1,7], with 1 representing
				   Monday
			return String(dateObject.getDay() || 7); break;
			
		case "U":  week number of the current year as a decimal number,
				   starting with the first Sunday as the first day of the
				   first week
			return _(dojo.date.getWeekOfYear(dateObject)); break;

		case "V":  week number of the year (Monday as the first day of the
				   week) as a decimal number [01,53]. If the week containing
				   1 January has four or more days in the new year, then it 
				   is considered week 1. Otherwise, it is the last week of 
				   the previous year, and the next week is week 1.
			return _(dojo.date.getIsoWeekOfYear(dateObject)); break;
			
		case "W":  week number of the current year as a decimal number,
				   starting with the first Monday as the first day of the
				   first week
			return _(dojo.date.getWeekOfYear(dateObject, 1)); break;
			
		case "w":  day of the week as a decimal, Sunday being 0
			return String(dateObject.getDay()); break;

		case "x":  preferred date representation for the current locale
				   without the time
			break;

		case "X":  preferred date representation for the current locale
				   without the time
			break;

		case "y":  year as a decimal number without a century (range 00 to
				   99)
			return _(dateObject.getFullYear()%100); break;
			
		case "Y":  year as a decimal number including the century
			return String(dateObject.getFullYear()); break;
		
		case "z":  time zone or name or abbreviation
			var timezoneOffset = dateObject.getTimezoneOffset();
			return (timezoneOffset < 0 ? "-" : "+") + 
				_(Math.floor(Math.abs(timezoneOffset)/60)) + ":" +
				_(Math.abs(timezoneOffset)%60); break;
			
		case "Z":  time zone or name or abbreviation
			return dojo.date.getTimezoneName(dateObject); break;
		
		case "%":
			return "%"; break;
	}
}

 parse the formatting string and construct the resulting string
var string = "";
var i = 0, index = 0, switchCase;
while ((index = format.indexOf("%", i)) != -1) {
	string += format.substring(i, index++);
	
	 inspect modifier flag
	switch (format.charAt(index++)) {
		case "_":  Pad a numeric result string with spaces.
			padChar = " "; break;
		case "-":  Do not pad a numeric result string.
			padChar = ""; break;
		case "0":  Pad a numeric result string with zeros.
			padChar = "0"; break;
		case "^":  Convert characters in result string to upper case.
			switchCase = "upper"; break;
		case "#":  Swap the case of the result string.
			switchCase = "swap"; break;
		default:  no modifer flag so decremenet the index
			padChar = null; index--; break;
	}

	 toggle case if a flag is set
	property = $(format.charAt(index++));
	if (switchCase == "upper" ||
		(switchCase == "swap" && /[a-z]/.test(property))) {
		property = property.toUpperCase();
	} else if (switchCase == "swap" && !/[a-z]/.test(property)) {
		property = property.toLowerCase();
	}
	swicthCase = null;
	
	string += property;
	i = index;
}
string += format.substring(i);

return string;