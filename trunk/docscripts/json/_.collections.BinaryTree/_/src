function node(data, rnode, lnode){
	this.value = data || null;
	this.right = rnode || null;
	this.left = lnode || null;
}

function inorderTraversalBuildup(current, a){
	if (current){
		inorderTraversalBuildup(current.left, a);
		a.add(current);
		inorderTraversalBuildup(current.right, a);
	}
}

function preorderTraversal(current, sep){
	var s = "";
	if (current){
		s = current.value.toString() + sep;
		s += preorderTraversal(current.left, sep);
		s += preorderTraversal(current.right, sep);
	}
	return s;
}
function inorderTraversal(current, sep){
	var s = "";
	if (current){
		s = inorderTraversal(current.left, sep);
		s += current.value.toString() + sep;
		s += inorderTraversal(current.right, sep);
	}
	return s;
}
function postorderTraversal(current, sep){
	var s = "";
	if (current){
		s = postorderTraversal(current.left, sep);
		s += postorderTraversal(current.right, sep);
		s += current.value.toString() + sep;
	}
	return s;
}

function searchHelper(current, data){
	if (!current) return null;
	var i = current.compareData(data);
	if (i == 0) return current;
	if (result > 0) return searchHelper(current.left, data);
	else return searchHelper(current.right, data);
}

this.count = 0;
var root = this.root = null;
if (data) {
	this.add(data);
}