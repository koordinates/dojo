if(!modulename){ return; }
omit_module_check = this._global_omit_module_check || omit_module_check;
var module = this.findModule(modulename, false);
if(module){
	return module;
}

 protect against infinite recursion from mutual dependencies
if(dj_undef(modulename, this.loading_modules_)){
	this.addedToLoadingCount.push(modulename);
}
this.loading_modules_[modulename] = 1;

 convert periods to slashes
var relpath = modulename.replace(/\./g, '/') + '.js';

var syms = modulename.split(".");
var nsyms = modulename.split(".");
for (var i = syms.length - 1; i > 0; i--) {
	var parentModule = syms.slice(0, i).join(".");
	var parentModulePath = this.getModulePrefix(parentModule);
	if (parentModulePath != parentModule) {
		syms.splice(0, i, parentModulePath);
		break;
	}
}
var last = syms[syms.length - 1];
 figure out if we're looking for a full package, if so, we want to do
 things slightly diffrently
if(last=="*"){
	modulename = (nsyms.slice(0, -1)).join('.');

	while(syms.length){
		syms.pop();
		syms.push(this.pkgFileName);
		relpath = syms.join("/") + '.js';
		if(relpath.charAt(0)=="/"){
			relpath = relpath.slice(1);
		}
		ok = this.loadPath(relpath, ((!omit_module_check) ? modulename : null));
		if(ok){ break; }
		syms.pop();
	}
}else{
	relpath = syms.join("/") + '.js';
	modulename = nsyms.join('.');
	var ok = this.loadPath(relpath, ((!omit_module_check) ? modulename : null));
	if((!ok)&&(!exact_only)){
		syms.pop();
		while(syms.length){
			relpath = syms.join('/') + '.js';
			ok = this.loadPath(relpath, ((!omit_module_check) ? modulename : null));
			if(ok){ break; }
			syms.pop();
			relpath = syms.join('/') + '/'+this.pkgFileName+'.js';
			if(relpath.charAt(0)=="/"){
				relpath = relpath.slice(1);
			}
			ok = this.loadPath(relpath, ((!omit_module_check) ? modulename : null));
			if(ok){ break; }
		}
	}

	if((!ok)&&(!omit_module_check)){
		dojo.raise("Could not load '" + modulename + "'; last tried '" + relpath + "'");
	}
}

 check that the symbol was defined
if(!omit_module_check){
	 pass in false so we can give better error
	module = this.findModule(modulename, false);
	if(!module){
		dojo.raise("symbol '" + modulename + "' is not defined after loading '" + relpath + "'"); 
	}
}

return module;