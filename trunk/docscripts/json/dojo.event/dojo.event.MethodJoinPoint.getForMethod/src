if(!obj){ obj = dj_global; }
if(!obj[methname]){
	 supply a do-nothing method implementation
	obj[methname] = function(){};
}else if((!dojo.lang.isFunction(obj[methname]))&&(!dojo.lang.isAlien(obj[methname]))){
	return null;  
}
 we hide our joinpoint instance in obj[methname + '$joinpoint']
var jpname = methname + "$joinpoint";
var jpfuncname = methname + "$joinpoint$method";
var joinpoint = obj[jpname];
if(!joinpoint){
	var isNode = false;
	if(dojo.event["browser"]){
		if( (obj["attachEvent"])||
			(obj["nodeType"])||
			(obj["addEventListener"]) ){
			isNode = true;
			dojo.event.browser.addClobberNodeAttrs(obj, [jpname, jpfuncname, methname]);
		}
	}
	obj[jpfuncname] = obj[methname];
	 joinpoint = obj[jpname] = new dojo.event.MethodJoinPoint(obj, methname);
	joinpoint = obj[jpname] = new dojo.event.MethodJoinPoint(obj, jpfuncname);
	obj[methname] = function(){ 
		var args = [];

		if((isNode)&&(!arguments.length)){
			var evt = null;
			try {
				if(obj.ownerDocument) {
					evt = obj.ownerDocument.parentWindow.event;
				} else if(obj.documentElement) {
					evt = obj.documentElement.ownerDocument.parentWindow.event;
				} else {
					evt = window.event;
				}
			} catch(E) {
				evt = window.event;
			}

			if(evt) {
				args.push(dojo.event.browser.fixEvent(evt));
			}
		}else{
			for(var x=0; x<arguments.length; x++){
				if((x==0)&&(isNode)&&(dojo.event.browser.isEvent(arguments[x]))){
					args.push(dojo.event.browser.fixEvent(arguments[x]));
				}else{
					args.push(arguments[x]);
				}
			}
		}
		 return joinpoint.run.apply(joinpoint, arguments); 
		return joinpoint.run.apply(joinpoint, args); 
	}
}
return joinpoint;