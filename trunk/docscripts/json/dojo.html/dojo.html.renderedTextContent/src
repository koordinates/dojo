node = dojo.byId(node);
var result = "";
if (node == null) { return result; }
for (var i = 0; i < node.childNodes.length; i++) {
	switch (node.childNodes[i].nodeType) {
		case 1:  ELEMENT_NODE
		case 5:  ENTITY_REFERENCE_NODE
			var display = "unknown";
			try {
				display = dojo.style.getStyle(node.childNodes[i], "display");
			} catch(E) {}
			switch (display) {
				case "block": case "list-item": case "run-in":
				case "table": case "table-row-group": case "table-header-group":
				case "table-footer-group": case "table-row": case "table-column-group":
				case "table-column": case "table-cell": case "table-caption":
					 TODO: this shouldn't insert double spaces on aligning blocks
					result += "\n";
					result += dojo.html.renderedTextContent(node.childNodes[i]);
					result += "\n";
					break;
				
				case "none": break;
				
				default:
					if(node.childNodes[i].tagName && node.childNodes[i].tagName.toLowerCase() == "br") {
						result += "\n";
					} else {
						result += dojo.html.renderedTextContent(node.childNodes[i]);
					}
					break;
			}
			break;
		case 3:  TEXT_NODE
		case 2:  ATTRIBUTE_NODE
		case 4:  CDATA_SECTION_NODE
			var text = node.childNodes[i].nodeValue;
			var textTransform = "unknown";
			try {
				textTransform = dojo.style.getStyle(node, "text-transform");
			} catch(E) {}
			switch (textTransform){
				case "capitalize": text = dojo.string.capitalize(text); break;
				case "uppercase": text = text.toUpperCase(); break;
				case "lowercase": text = text.toLowerCase(); break;
				default: break;  leave as is
			}
			 TODO: implement
			switch (textTransform){
				case "nowrap": break;
				case "pre-wrap": break;
				case "pre-line": break;
				case "pre": break;  leave as is
				default:
					 remove whitespace and collapse first space
					text = text.replace(/\s+/, " ");
					if (/\s$/.test(result)) { text.replace(/^\s/, ""); }
					break;
			}
			result += text;
			break;
		default:
			break;
	}
}
return result;