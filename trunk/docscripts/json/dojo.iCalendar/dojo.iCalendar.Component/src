if (!this.name) {
	this.name = "COMPONENT"
}

this.properties = [];
this.components = [];

if (body) {
	for (var i = 0, context = ''; i < body.length; i++) {
		if (context == '') {
			if (body[i].name == 'BEGIN') {
				context = body[i].value;
				var childprops = [];
				dojo.debug("Context: " + context);
			} else {
				this.addProperty(new dojo.iCalendar.Property(body[i]));
			}
		} else if (body[i].name == 'END' && body[i].value == context) {
			if (context=="VEVENT") {
				this.addComponent(new dojo.iCalendar.VEvent(childprops));
			} else if (context=="VTIMEZONE") {
				this.addComponent(new dojo.iCalendar.VTimeZone(childprops));
			} else if (context=="VTODO") {
				this.addComponent(new dojo.iCalendar.VTodo(childprops));
			} else if (context=="VJOURNAL") {
				this.addComponent(new dojo.iCalendar.VJournal(childprops));
			} else if (context=="VFREEBUSY") {
				this.addComponent(new dojo.iCalendar.VFreeBusy(childprops));
			} else if (context=="STANDARD") {
				this.addComponent(new dojo.iCalendar.Standard(childprops));
			} else if (context=="DAYLIGHT") {
				this.addComponent(new dojo.iCalendar.Daylight(childprops));
			} else if (context=="VALARM") {
				this.addComponent(new dojo.iCalendar.VAlarm(childprops));
			}else {
				dojo.unimplemented("dojo.iCalendar." + context);
			}
			context = '';
		} else {
			childprops.push(body[i]);
		}
	}

	if (this._ValidProperties) {
		this.postCreate();
	}
}