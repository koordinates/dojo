var plugin = dojo.flash.obj.get();

 cut up the string into pieces, and push over each piece one
 at a time
var numSegments = Math.ceil(value.length / 1024);
for(var i = 0; i < numSegments; i++){
	var startCut = i * 1024;
	var endCut = i * 1024 + 1024;
	if(i == (numSegments - 1)){
		endCut = i * 1024 + value.length;
	}
	
	var piece = value.substring(startCut, endCut);
	
	 encode each piece seperately, rather than the entire
	 argument data, because ocassionally a special 
	 character, such as an entity like &foobar;, will fall between
	 piece boundaries, and we _don't_ want to encode that value if
	 it falls between boundaries, or else we will end up with incorrect
	 data when we patch the pieces back together on the other side
	piece = this._encodeData(piece);
	
	 directly use the underlying CallFunction method used by
	 ExternalInterface, which is vastly faster for large strings
	 and lets us bypass some Flash serialization bugs
	plugin.CallFunction('<invoke name="chunkArgumentData" '
												+ 'returntype="javascript">'
												+ '<arguments>'
												+ '<string>' + piece + '</string>'
												+ '<number>' + argIndex + '</number>'
												+ '</arguments>'
												+ '</invoke>');
}