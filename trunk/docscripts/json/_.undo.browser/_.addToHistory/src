var hash = null;
if(!this.historyIframe){
	this.historyIframe = window.frames["djhistory"];
}
if(!this.bookmarkAnchor){
	this.bookmarkAnchor = document.createElement("a");
	(document.body||document.getElementsByTagName("body")[0]).appendChild(this.bookmarkAnchor);
	this.bookmarkAnchor.style.display = "none";
}
if((!args["changeUrl"])||(dojo.render.html.ie)){
	var url = dojo.hostenv.getBaseScriptUri()+"iframe_history.html?"+(new Date()).getTime();
	this.moveForward = true;
	dojo.io.setIFrameSrc(this.historyIframe, url, false);
}
if(args["changeUrl"]){
	hash = "#"+ ((args["changeUrl"]!==true) ? args["changeUrl"] : (new Date()).getTime());
	setTimeout("window.location.href = '"+hash+"';", 1);
	this.bookmarkAnchor.href = hash;
	
	if(dojo.render.html.ie){
		var oldCB = args["back"]||args["backButton"]||args["handle"];

		The function takes handleName as a parameter, in case the
		callback we are overriding was "handle". In that case,
		we will need to pass the handle name to handle.
		var tcb = function(handleName){
			if(window.location.hash != ""){
				setTimeout("window.location.href = '"+hash+"';", 1);
			}
			Use apply to set "this" to args, and to try to avoid memory leaks.
			oldCB.apply(this, [handleName]);
		}

		Set interceptor function in the right place.
		if(args["back"]){
			args.back = tcb;
		}else if(args["backButton"]){
			args.backButton = tcb;
		}else if(args["handle"]){
			args.handle = tcb;
		}

		If addToHistory is called, then that means we prune the
		forward stack -- the user went back, then wanted to
		start a new forward path.
		this.forwardStack = []; 
		var oldFW = args["forward"]||args["forwardButton"]||args["handle"];

		The function takes handleName as a parameter, in case the
		callback we are overriding was "handle". In that case,
		we will need to pass the handle name to handle.
		var tfw = function(handleName){
			if(window.location.hash != ""){
				window.location.href = hash;
			}
			if(oldFW){  we might not actually have one
				Use apply to set "this" to args, and to try to avoid memory leaks.
				oldFW.apply(this, [handleName]);
			}
		}

		Set interceptor function in the right place.
		if(args["forward"]){
			args.forward = tfw;
		}else if(args["forwardButton"]){
			args.forwardButton = tfw;
		}else if(args["handle"]){
			args.handle = tfw;
		}

	}else if(dojo.render.html.moz){
		 start the timer
		if(!this.locationTimer){
			this.locationTimer = setInterval("dojo.undo.browser.checkLocation();", 200);
		}
	}
}

this.historyStack.push({"url": url, "kwArgs": args, "urlHash": hash});