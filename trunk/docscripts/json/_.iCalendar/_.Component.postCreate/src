for (var x=0; x<this._ValidProperties.length; x++) {
	var evtProperty = this._ValidProperties[x];
	var found = false;
	
	for (var y=0; y<this.properties.length; y++) {	
		var prop = this.properties[y];
		propName = prop.name.toLowerCase();
		if (dojo.lang.isArray(evtProperty)) {

			var alreadySet = false;
			for (var z=0; z<evtProperty.length; z++) {
				var evtPropertyName = evtProperty[z].name.toLowerCase();
				if((this[evtPropertyName])  && (evtPropertyName != propName )) {
					alreadySet=true;
				} 
			}
			if (!alreadySet) {
				this[propName] = prop;
			}
		} else {
			if (propName == evtProperty.name.toLowerCase()) {
				found = true;
				if (evtProperty.occurance == 1){
					this[propName] = prop;
				} else {
					found = true;
					if (!dojo.lang.isArray(this[propName])) {
					 	this[propName] = [];
					}
					this[propName].push(prop);
				}
			}
		}
	}

	if (evtProperty.required && !found) {	
		dojo.debug("iCalendar - " + this.name + ": Required Property not found: " + evtProperty.name);
	}
}

 parse any rrules		
if (dojo.lang.isArray(this.rrule)) {
	for(var x=0; x<this.rrule.length; x++) {
		var rule = this.rrule[x].value;

		add a place to cache dates we have checked for recurrance
		var temp = rule.split(";");
		for (var y=0; y<temp.length; y++) {
			var pair = temp[y].split("=");
			var key = pair[0].toLowerCase();
			var val = pair[1];

			if ((key == "freq") || (key=="interval") || (key=="until")) {
				this.rrule[x][key]= val;
			} else {
				var valArray = val.split(",");
				this.rrule[x][key] = valArray; 
			}
		}	
	}
	this.recurring = true;
}
