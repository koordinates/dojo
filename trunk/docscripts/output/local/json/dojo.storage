{"dojo.storage._":{"meta":{"requires":{"common":["dojo.storage"],"browser":["dojo.storage.browser"],"dashboard":["dojo.storage.dashboard"]}}},"dojo.storage.browser":{"meta":{"requires":{"common":["dojo.storage","dojo.flash","dojo.json","dojo.uri.*"]},"functions":{"dojo.storage.browser.FlashStorageProvider":{"meta":{"summary":"","src":"","prototype_chain":["dojo.storage"],"prototype_variables":["namespace","initialized","_available","_statusHandler"],"instance_variables":["_available","_statusHandler","initialized"]}},"dojo.storage.browser.FlashStorageProvider.initialize":{"meta":{"summary":"","src":" \tif(djConfig[\"disableFlashStorage\"] == true){\n\t\t\treturn;\n\t\t}\n\t\t\/\/ initialize our Flash\n\t\tvar loadedListener = function(){\n\t\t\tdojo.storage._flashLoaded();\n\t\t}\n\t\tdojo.flash.addLoadedListener(loadedListener);\n\t\tvar swfloc6 = dojo.uri.dojoUri(\"Storage_version6.swf\").toString();\n\t\tvar swfloc8 = dojo.uri.dojoUri(\"Storage_version8.swf\").toString();\n\t\tdojo.flash.setSwf({flash6: swfloc6, flash8: swfloc8, visible: false});","prototype":"dojo.storage.browser.FlashStorageProvider"}},"dojo.storage.browser.FlashStorageProvider.isAvailable":{"meta":{"summary":"","src":" \tif(djConfig[\"disableFlashStorage\"] == true){\n\t\t\tthis._available = false;\n\t\t}\n\t\treturn this._available;","prototype":"dojo.storage.browser.FlashStorageProvider"}},"dojo.storage.browser.FlashStorageProvider.setNamespace":{"meta":{"summary":"","parameters":{"ns":{"type":""}},"src":" \tthis[\"namespace\"] = ns;","prototype":"dojo.storage.browser.FlashStorageProvider"}},"dojo.storage.browser.FlashStorageProvider.put":{"meta":{"summary":"","parameters":{"key":{"type":""},"value":{"type":""},"resultsHandler":{"type":""}},"src":" \tif(this.isValidKey(key) == false){\n\t\t\tdojo.raise(\"Invalid key given: \" + key);\n\t\t}\n\t\tthis._statusHandler = resultsHandler;\n\t\t\/\/ serialize the value\n\t\t\/\/ Handle strings differently so they have better performance\n\t\tif(dojo.lang.isString(value)){\n\t\t\tvalue = \"string:\" + value;\n\t\t}else{\n\t\t\tvalue = dojo.json.serialize(value);\n\t\t}\n\t\tdojo.flash.comm.put(key, value, this[\"namespace\"]);","prototype":"dojo.storage.browser.FlashStorageProvider"}},"dojo.storage.browser.FlashStorageProvider.get":{"meta":{"summary":"","parameters":{"key":{"type":""}},"src":" \tif(this.isValidKey(key) == false){\n\t\t\tdojo.raise(\"Invalid key given: \" + key);\n\t\t}\n\t\tvar results = dojo.flash.comm.get(key, this[\"namespace\"]);\n\t\tif(results == \"\"){\n\t\t\treturn null;\n\t\t}\n\t\t\/\/ destringify the content back into a \n\t\t\/\/ real JavaScript object\n\t\t\/\/ Handle strings differently so they have better performance\n\t\tif(!dojo.lang.isUndefined(results) && results != null \n\t\t\t && \/^string:\/.test(results)){\n\t\t\tresults = results.substring(\"string:\".length);\n\t\t}else{\n\t\t\tresults = dojo.json.evalJson(results);\n\t\t}\n\t\treturn results;","prototype":"dojo.storage.browser.FlashStorageProvider"}},"dojo.storage.browser.FlashStorageProvider.getKeys":{"meta":{"summary":"","src":" \tvar results = dojo.flash.comm.getKeys(this[\"namespace\"]);\n\t\tif(results == \"\"){\n\t\t\treturn [];\n\t\t}\n\t\t\/\/ the results are returned comma seperated; split them\n\t\treturn results.split(\",\");","prototype":"dojo.storage.browser.FlashStorageProvider"}},"dojo.storage.browser.FlashStorageProvider.clear":{"meta":{"summary":"","src":" \tdojo.flash.comm.clear(this[\"namespace\"]);","prototype":"dojo.storage.browser.FlashStorageProvider"}},"dojo.storage.browser.FlashStorageProvider.remove":{"meta":{"summary":"","parameters":{"key":{"type":""}},"src":"","prototype":"dojo.storage.browser.FlashStorageProvider"}},"dojo.storage.browser.FlashStorageProvider.isPermanent":{"meta":{"summary":"","src":" \treturn true;","prototype":"dojo.storage.browser.FlashStorageProvider"}},"dojo.storage.browser.FlashStorageProvider.getMaximumSize":{"meta":{"summary":"","src":" \treturn dojo.storage.SIZE_NO_LIMIT;","prototype":"dojo.storage.browser.FlashStorageProvider"}},"dojo.storage.browser.FlashStorageProvider.hasSettingsUI":{"meta":{"summary":"","src":" \treturn true;","prototype":"dojo.storage.browser.FlashStorageProvider"}},"dojo.storage.browser.FlashStorageProvider.showSettingsUI":{"meta":{"summary":"","src":" \tdojo.flash.comm.showSettings();\n\t\tdojo.flash.obj.setVisible(true);\n\t\tdojo.flash.obj.center();","prototype":"dojo.storage.browser.FlashStorageProvider"}},"dojo.storage.browser.FlashStorageProvider.hideSettingsUI":{"meta":{"summary":"","src":" \tdojo.flash.obj.setVisible(false);\n\t\t\/\/ call anyone who wants to know the dialog is\n\t\t\/\/ now hidden\n\t\tif(dojo.storage.onHideSettingsUI != null &&\n\t\t\t!dojo.lang.isUndefined(dojo.storage.onHideSettingsUI)){\n\t\t\tdojo.storage.onHideSettingsUI.call(null);\t\n\t\t}","call_chain":["dojo.storage.onHideSettingsUI"],"prototype":"dojo.storage.browser.FlashStorageProvider"}},"dojo.storage.browser.FlashStorageProvider.getType":{"meta":{"summary":"","src":" \treturn \"dojo.storage.FlashStorageProvider\";","prototype":"dojo.storage.browser.FlashStorageProvider"}},"dojo.storage.browser.FlashStorageProvider._flashLoaded":{"meta":{"summary":"","src":" \tthis.initialized = true;\n\t\t\/\/ indicate that this storage provider is now loaded\n\t\tdojo.storage.manager.loaded();","prototype":"dojo.storage.browser.FlashStorageProvider"}},"dojo.storage.browser.FlashStorageProvider._onStatus":{"meta":{"summary":"","parameters":{"statusResult":{"type":""},"key":{"type":""}},"src":" \tvar ds = dojo.storage;\n\t\tvar dfo = dojo.flash.obj;\n\t\t\/\/dojo.debug(\"_onStatus, statusResult=\"+statusResult+\", key=\"+key);\n\t\tif(statusResult == ds.PENDING){\n\t\t\tdfo.center();\n\t\t\tdfo.setVisible(true);\n\t\t}else{\n\t\t\tdfo.setVisible(false);\n\t\t}\n\t\tif((!dj_undef(\"_statusHandler\", ds))&&(ds._statusHandler != null)){\n\t\t\tds._statusHandler.call(null, statusResult, key);\t\t\n\t\t}","call_chain":["ds._statusHandler"],"prototype":"dojo.storage.browser.FlashStorageProvider"}}}}},"dojo.storage.dashboard":{"meta":{"requires":{"common":["dojo.storage","dojo.json"]},"functions":{"dojo.storage.dashboard.StorageProvider":{"meta":{"summary":"","src":" this.initialized = false;","instance_variables":["initialized"],"prototype_chain":["dojo.storage.StorageProvider"]}},"dojo.storage.dashboard.StorageProvider.storageOnLoad":{"meta":{"summary":"","src":" \tthis.initialized = true;","prototype":"dojo.storage.dashboard.StorageProvider"}},"dojo.storage.dashboard.StorageProvider.set":{"meta":{"summary":"","parameters":{"key":{"type":""},"value":{"type":""},"ns":{"type":""}},"src":" \tif (ns && widget.system){\n\t\t\twidget.system(\"\/bin\/mkdir \" + ns);\n\t\t\tvar system = widget.system(\"\/bin\/echo \" + value + \" >\" + ns + \"\/\" + key);\n\t\t\tif(system.errorString){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\treturn widget.setPreferenceForKey(dojo.json.serialize(value), key);","prototype":"dojo.storage.dashboard.StorageProvider"}},"dojo.storage.dashboard.StorageProvider.get":{"meta":{"summary":"","parameters":{"key":{"type":""},"ns":{"type":""}},"src":" \tif (ns && widget.system) {\n\t\t\tvar system = widget.system(\"\/bin\/cat \" + ns + \"\/\" + key);\n\t\t\tif(system.errorString){\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t\treturn system.outputString;\n\t\t}\n\t\treturn dojo.json.evalJson(widget.preferenceForKey(key));","prototype":"dojo.storage.dashboard.StorageProvider"}}}}},"dojo.storage":{"meta":{"requires":{"common":["dojo.lang.*","dojo.event.*"]},"functions":{"dojo.storage":{"meta":{"summary":"","parameters":{"rawNode":{"type":""}},"src":" \tif(rawNode) rawNode.setAttribute(\"dojoGfxType\", \"path\");\n\t\tthis.vmlPath = \"\";\n\t\tthis.lastControl = {};","instance_variables":["vmlPath","lastControl"]}},"dojo.storage.manager":{"meta":{"summary":"","src":" this.currentProvider = null;\n\tthis.available = false;\n\tthis.initialized = false;\n\tthis.providers = [];\n\t\/\/ TODO: Provide a way for applications to override the default namespace\n\tthis[\"namespace\"] = \"dojo.storage\";\n\tthis.initialize = function(){\n\t\t\/\/ summary: \n\t\t\/\/\t\tInitializes the storage system and autodetects the best storage\n\t\t\/\/\t\tprovider we can provide on this platform\n\t\tthis.autodetect();\n\t};\n\t\/**\n\t*\/\n\tthis.register = function(\/*string*\/ name, \/*Object*\/ instance) {\n\t\t\/\/ summary:\n\t\t\/\/\t\tRegisters the existence of a new storage provider; used by\n\t\t\/\/\t\tsubclasses to inform the manager of their existence. \n\t\t\/\/ name:\n\t\t\/\/\t\tThe full class name of this provider, such as\n\t\t\/\/\t\t\"dojo.storage.browser.Flash6StorageProvider\".\n\t\t\/\/ instance:\n\t\t\/\/\t\tAn instance of this provider, which we will use to call\n\t\t\/\/\t\tisAvailable() on. \n\t\tthis.providers[this.providers.length] = instance;\n\t\tthis.providers[name] = instance;\n\t};\n\t\/**\n\t*\/\n\tthis.setProvider = function(storageClass){\n\t\t\/\/ summary:\n\t\t\/\/\t\tInstructs the storageManager to use the given storage class for\n\t\t\/\/\t\tall storage requests.\n\t\t\/\/ description:\n\t\t\/\/\t\tExample:\n\t\t\/\/\t\t\tdojo.storage.setProvider(\n\t\t\/\/\t\t\t\tdojo.storage.browser.IEStorageProvider)\n\t};\n\tthis.autodetect = function(){\n\t\t\/\/ summary:\n\t\t\/\/\t\tAutodetects the best possible persistent storage provider\n\t\t\/\/\t\tavailable on this platform. \n\t\tif(this.initialized == true) \/\/ already finished\n\t\t\treturn;\n\t\t\/\/ go through each provider, seeing if it can be used\n\t\tvar providerToUse = null;\n\t\tfor(var i = 0; i < this.providers.length; i++) {\n\t\t\tproviderToUse = this.providers[i];\n\t\t\tif(providerToUse.isAvailable()){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\t\n\t\tif(providerToUse == null){ \/\/ no provider available\n\t\t\tthis.initialized = true;\n\t\t\tthis.available = false;\n\t\t\tthis.currentProvider = null;\n\t\t\tdojo.raise(\"No storage provider found for this platform\");\n\t\t}\n\t\t\/\/ create this provider and copy over it's properties\n\t\tthis.currentProvider = providerToUse;\n\t  \tfor(var i in providerToUse){\n\t  \t\tdojo.storage[i] = providerToUse[i];\n\t\t}\n\t\tdojo.storage.manager = this;\n\t\t\/\/ have the provider initialize itself\n\t\tdojo.storage.initialize();\n\t\tthis.initialized = true;\n\t\tthis.available = true;\n\t};\n\tthis.isAvailable = function(){ \/*Boolean*\/\n\t\t\/\/ summary: Returns whether any storage options are available.\n\t\treturn this.available;\n\t};\n\tthis.isInitialized = function(){ \/*Boolean*\/\n\t \t\/\/ summary:\n\t\t\/\/\t\tReturns whether the storage system is initialized and ready to\n\t\t\/\/\t\tbe used. \n\t\t\/\/ FIXME: This should _really_ not be in here, but it fixes a bug\n\t\tif(dojo.flash.ready == false){\n\t\t\treturn false;\n\t\t}else{\n\t\t\treturn this.initialized;\n\t\t}\n\t};\n\tthis.supportsProvider = function(\/*string*\/ storageClass){\n\t\t\/\/ summary: Determines if this platform supports the given storage provider.\n\t\t\/\/ description:\n\t\t\/\/\t\tExample:\n\t\t\/\/\t\t\tdojo.storage.manager.supportsProvider(\n\t\t\/\/\t\t\t\t\"dojo.storage.browser.InternetExplorerStorageProvider\");\n\t\t\/\/ construct this class dynamically\n\t\ttry{\n\t\t\t\/\/ dynamically call the given providers class level isAvailable()\n\t\t\t\/\/ method\n\t\t\tvar provider = eval(\"new \" + storageClass + \"()\");\n\t\t\tvar results = provider.isAvailable();\n\t\t\tif(results == null || typeof results == \"undefined\")\n\t\t\t\treturn false;\n\t\t\treturn results;\n\t\t}catch (exception){\n\t\t\tdojo.debug(\"exception=\"+exception);\n\t\t\treturn false;\n\t\t}\n\t};\n\t\/** Gets the current provider. *\/\n\tthis.getProvider = function(){\n\t\treturn this.currentProvider;\n\t};\n\tthis.loaded = function(){\n\t\t\/\/ summary:\n\t\t\/\/\t\tThe storage provider should call this method when it is loaded\n\t\t\/\/\t\tand ready to be used. Clients who will use the provider will\n\t\t\/\/\t\tconnect to this method to know when they can use the storage\n\t\t\/\/\t\tsystem:\n\t};","instance_variables":["currentProvider","available","initialized","providers","initialize","register","setProvider","autodetect","isAvailable","isInitialized","supportsProvider","getProvider","loaded"]}},"dojo.storage.initialize":{"meta":{"summary":"Initializes the storage system and autodetects the best storage provider we can provide on this platform","src":" \tthis.autodetect();"}},"dojo.storage.register":{"meta":{"summary":"Registers the existence of a new storage provider; used by subclasses to inform the manager of their existence.","parameters":{"name":{"type":"string"},"instance":{"type":"Object"}},"src":" \tthis.providers[this.providers.length] = instance;\n\t\tthis.providers[name] = instance;"},"extra":{"parameters":{"name":"The full class name of this provider, such as \"dojo.storage.browser.Flash6StorageProvider\".","instance":"An instance of this provider, which we will use to call isAvailable() on."}}},"dojo.storage.setProvider":{"meta":{"summary":"Instructs the storageManager to use the given storage class for all storage requests.","parameters":{"storageClass":{"type":""}},"src":"\t\t\/\/ summary:\n\t\t\/\/\t\tInstructs the storageManager to use the given storage class for\n\t\t\/\/\t\tall storage requests.\n\t\t\/\/ description:\n\t\t\/\/\t\tExample:\n\t\t\/\/\t\t\tdojo.storage.setProvider(\n\t\t\/\/\t\t\t\tdojo.storage.browser.IEStorageProvider)","description":"Example: dojo.storage.setProvider( dojo.storage.browser.IEStorageProvider)"}},"dojo.storage.autodetect":{"meta":{"summary":"Autodetects the best possible persistent storage provider available on this platform.","src":" \tif(this.initialized == true) \/\/ already finished\n\t\t\treturn;\n\t\t\/\/ go through each provider, seeing if it can be used\n\t\tvar providerToUse = null;\n\t\tfor(var i = 0; i < this.providers.length; i++) {\n\t\t\tproviderToUse = this.providers[i];\n\t\t\tif(providerToUse.isAvailable()){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\t\n\t\tif(providerToUse == null){ \/\/ no provider available\n\t\t\tthis.initialized = true;\n\t\t\tthis.available = false;\n\t\t\tthis.currentProvider = null;\n\t\t\tdojo.raise(\"No storage provider found for this platform\");\n\t\t}\n\t\t\/\/ create this provider and copy over it's properties\n\t\tthis.currentProvider = providerToUse;\n\t  \tfor(var i in providerToUse){\n\t  \t\tdojo.storage[i] = providerToUse[i];\n\t\t}\n\t\tdojo.storage.manager = this;\n\t\t\/\/ have the provider initialize itself\n\t\tdojo.storage.initialize();\n\t\tthis.initialized = true;\n\t\tthis.available = true;","instance_variables":["initialized","available","currentProvider"]}},"dojo.storage.isAvailable":{"meta":{"summary":"Boolean Returns whether any storage options are available.","src":" \treturn this.available;"}},"dojo.storage.isInitialized":{"meta":{"summary":"Boolean Returns whether the storage system is initialized and ready to be used.","src":"\t\t\/\/ FIXME: This should _really_ not be in here, but it fixes a bug\n\t\tif(dojo.flash.ready == false){\n\t\t\treturn false;\n\t\t}else{\n\t\t\treturn this.initialized;\n\t\t}"}},"dojo.storage.supportsProvider":{"meta":{"summary":"Determines if this platform supports the given storage provider.","parameters":{"storageClass":{"type":"string"}},"src":"\t\t\/\/ construct this class dynamically\n\t\ttry{\n\t\t\t\/\/ dynamically call the given providers class level isAvailable()\n\t\t\t\/\/ method\n\t\t\tvar provider = eval(\"new \" + storageClass + \"()\");\n\t\t\tvar results = provider.isAvailable();\n\t\t\tif(results == null || typeof results == \"undefined\")\n\t\t\t\treturn false;\n\t\t\treturn results;\n\t\t}catch (exception){\n\t\t\tdojo.debug(\"exception=\"+exception);\n\t\t\treturn false;\n\t\t}","description":"Example: dojo.storage.manager.supportsProvider( \"dojo.storage.browser.InternetExplorerStorageProvider\");"}},"dojo.storage.getProvider":{"meta":{"summary":"","src":" \treturn this.currentProvider;"}},"dojo.storage.loaded":{"meta":{"summary":"The storage provider should call this method when it is loaded and ready to be used. Clients who will use the provider will connect to this method to know when they can use the storage system:","src":"\t\t\/\/ summary:\n\t\t\/\/\t\tThe storage provider should call this method when it is loaded\n\t\t\/\/\t\tand ready to be used. Clients who will use the provider will\n\t\t\/\/\t\tconnect to this method to know when they can use the storage\n\t\t\/\/\t\tsystem:"}},"dojo.storage.StorageProvider":{"meta":{"variables":["SUCCESS","FAILED","PENDING","SIZE_NOT_AVAILABLE","SIZE_NO_LIMIT","namespace","onHideSettingsUI"]}},"dojo.storage.StorageProvider.initialize":{"meta":{"summary":"Allows this storage provider to initialize itself. This is called after the page has finished loading, so you can not do document.writes().","src":" \tdojo.unimplemented(\"dojo.storage.initialize\");"}},"dojo.storage.StorageProvider.isAvailable":{"meta":{"summary":"Boolean Returns whether this storage provider is available on this platform.","src":" \tdojo.unimplemented(\"dojo.storage.isAvailable\");"}},"dojo.storage.StorageProvider.put":{"meta":{"summary":"Puts a key and value into this storage system.","parameters":{"key":{"type":"string"},"value":{"type":"object"},"resultsHandler":{"type":"function"}},"src":"\/\/\t  Example:\n\/\/\t\tvar resultsHandler = function(status, key, message){\n\/\/\t\t  alert(\"status=\"+status+\", key=\"+key+\", message=\"+message);\n\/\/\t\t};\n\/\/\t\tdojo.storage.put(\"test\", \"hello world\", resultsHandler);\n\t\tdojo.unimplemented(\"dojo.storage.put\");"},"extra":{"parameters":{"key":"A string key to use when retrieving this value in the future.","value":"A value to store; this can be any JavaScript type.","resultsHandler":"A callback function that will receive three arguments. The first argument is one of three values: dojo.storage.SUCCESS, dojo.storage.FAILED, or dojo.storage.PENDING; these values determine how the put request went. In some storage systems users can deny a storage request, resulting in a dojo.storage.FAILED, while in other storage systems a storage request must wait for user approval, resulting in a dojo.storage.PENDING status until the request is either approved or denied, resulting in another call back with dojo.storage.SUCCESS. The second argument in the call back is the key name that was being stored. The third argument in the call back is an optional message that details possible error messages that might have occurred during the storage process."}}},"dojo.storage.StorageProvider.get":{"meta":{"summary":"Object Gets the value with the given key. Returns null if this key is not in the storage system.","parameters":{"key":{"type":"string"}},"src":" \tdojo.unimplemented(\"dojo.storage.get\");"},"extra":{"parameters":{"key":"A string key to get the value of. return: Returns any JavaScript object type; null if the key is not present"}}},"dojo.storage.StorageProvider.hasKey":{"meta":{"summary":"Boolean Determines whether the storage has the given key.","parameters":{"key":{"type":"string"}},"src":" \treturn (this.get(key) != null);"}},"dojo.storage.StorageProvider.clear":{"meta":{"summary":"Completely clears this storage system of all of it's values and keys.","src":" \tdojo.unimplemented(\"dojo.storage.clear\");"}},"dojo.storage.StorageProvider.remove":{"meta":{"summary":"","parameters":{"key":{"type":""}},"src":" \tdojo.unimplemented(\"dojo.storage.remove\");"}},"dojo.storage.StorageProvider.isPermanent":{"meta":{"summary":"Boolean Returns whether this storage provider's values are persisted when this platform is shutdown.","src":" \tdojo.unimplemented(\"dojo.storage.isPermanent\");"}},"dojo.storage.StorageProvider.getMaximumSize":{"meta":{"summary":"","src":" \tdojo.unimplemented(\"dojo.storage.getMaximumSize\");"}},"dojo.storage.StorageProvider.hasSettingsUI":{"meta":{"summary":"Boolean Determines whether this provider has a settings UI.","src":" \treturn false;"}},"dojo.storage.StorageProvider.showSettingsUI":{"meta":{"summary":"If this provider has a settings UI, it is shown.","src":" \tdojo.unimplemented(\"dojo.storage.showSettingsUI\");"}},"dojo.storage.StorageProvider.hideSettingsUI":{"meta":{"summary":"If this provider has a settings UI, hides it.","src":" \tdojo.unimplemented(\"dojo.storage.hideSettingsUI\");"}},"dojo.storage.StorageProvider.getType":{"meta":{"summary":"String The provider name as a string, such as \"dojo.storage.FlashStorageProvider\".","src":" \tdojo.unimplemented(\"dojo.storage.getType\");"}},"dojo.storage.StorageProvider.isValidKey":{"meta":{"summary":"Boolean Subclasses can call this to ensure that the key given is valid in a consistent way across different storage providers. We use the lowest common denominator for key values allowed: only letters, numbers, and underscores are allowed. No spaces.","parameters":{"keyName":{"type":"string"}},"src":" \tif((keyName == null)||(typeof keyName == \"undefined\")){\n\t\t\treturn false;\n\t\t}\n\t\treturn \/^[0-9A-Za-z_]*$\/.test(keyName);"}}}}}}