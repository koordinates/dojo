{"dojo.text._":{"meta":{"requires":{"common":["dojo.text.String","dojo.text.Builder"]}}},"dojo.text.textDirectory":{"meta":{"requires":{"common":["dojo.string"]},"methods":{"dojo.textDirectoryTokeniser":{"_":{"meta":{"summary":"","src":""}}},"dojo.textDirectoryTokeniser.Property":{"_":{"meta":{"summary":"","parameters":{"line":{"type":""}},"src":"\tvar right = dojo.string.trim(line.substr(line.indexOf(':') + 1));\n\n\t\/\/ seperate name and paramters\t\n\tvar parameters = dojo.string.splitEscaped(left,';');\n\tthis.name = parameters[0]\n\tparameters.splice(0, 1);\n\n\t\/\/ parse paramters\n\tthis.params = [];\n\tfor (var i = 0; i < parameters.length; i++) {\n\t\tvar arr = parameters[i].split(\"=\");\n\t\tvar key = dojo.string.trim(arr[0].toUpperCase());\n\t\t\n\t\tif (arr.length == 1) { this.params.push([key]); continue; }\n\t\t\n\t\tvar values = dojo.string.splitEscaped(arr[1],',');\n\t\tfor (var j = 0; j < values.length; j++) {\n\t\t\tif (dojo.string.trim(values[j]) != '') {\n\t\t\t\tthis.params.push([key, dojo.string.trim(values[j])]);\n\t\t\t}\n\t\t}\n\t}\n\n\t\/\/ seperate group\n\tif (this.name.indexOf('.') > 0) {\n\t\tvar arr = this.name.split('.');\n\t\tthis.group = arr[0];\n\t\tthis.name = arr[1];\n\t}\n\t\n\t\/\/ don't do any parsing, leave to implementation\n\tthis.value = right;","this_variables":["name","params","group","value"]}}},"dojo.textDirectoryTokeniser.tokenise":{"_":{"meta":{"summary":"","parameters":{"text":{"type":""}},"src":"\tnText = nText.replace(\/\\n[ \\t]\/g, '');\n\tnText = nText.replace(\/\\x00\/g, '');\n\t\t\n\tvar lines = nText.split(\"\\n\");\n\tvar properties = []\n\n\tfor (var i = 0; i < lines.length; i++) {\n\t\tif (dojo.string.trim(lines[i]) == '') { continue; }\n\t\tvar prop = new dojo.textDirectoryTokeniser.Property(lines[i]);\n\t\tproperties.push(prop);\n\t}\n\treturn properties;"}}}}}}}