{"dojo.data.Attribute":{"meta":{"requires":{"common":["dojo.data.Item","dojo.lang.assert"]},"methods":{"dojo.data.Attribute":{"_":{"meta":{"summary":" An Attribute object represents something like a column in a relational database.","parameters":{"dataProvider":{"type":"dojo.data.provider.Base"},"attributeId":{"type":"string"}},"src":"\tdojo.lang.assertType(attributeId, String);\n\tdojo.data.Item.call(this, dataProvider);\n\tthis._attributeId = attributeId;","this_variables":["_attributeId"],"this_inherits":["dojo.data.Item"],"inherits":["dojo.data.Item"]}}},"dojo.data.Attribute.toString":{"_":{"meta":{"summary":"","src":"\treturn this._attributeId;          ","returns":"string","this":"dojo.data.Attribute"}}},"dojo.data.Attribute.getAttributeId":{"_":{"meta":{"summary":" Returns the string token that uniquely identifies this attribute within the context of a data provider. For a data provider that accesses relational databases, typical attributeIds might be tokens like \"name\", \"age\", \"ssn\", or \"dept_key\". string","src":"","returns":"string","this":"dojo.data.Attribute"}}},"dojo.data.Attribute.getType":{"_":{"meta":{"summary":"Returns the data type of the values of this attribute. dojo.data.Type or null","src":"","returns":"dojo.data.Type or null","this":"dojo.data.Attribute"}}},"dojo.data.Attribute.setType":{"_":{"meta":{"summary":"Sets the data type for this attribute.","parameters":{"type":{"type":"dojo.data.Type or null"}},"src":"","this":"dojo.data.Attribute"}}}}}},"dojo.data.Item":{"meta":{"requires":{"common":["dojo.data.Observable","dojo.data.Value","dojo.lang.common","dojo.lang.assert"]},"methods":{"dojo.data.Item":{"_":{"meta":{"summary":" An Item has attributes and attribute values, sort of like a record in a database, or a 'struct' in C.  Instances of the Item class know how to store and retrieve their attribute values.","parameters":{"dataProvider":{"type":"dojo.data.provider.Base"}},"src":"\tdojo.data.Observable.call(this);\n\tthis._dataProvider = dataProvider;\n\tthis._dictionaryOfAttributeValues = {};","this_variables":["_dataProvider","_dictionaryOfAttributeValues"],"inherits":["dojo.data.Observable"]}}},"dojo.data.Item.compare":{"_":{"meta":{"summary":"Compares this Item to another Item, and returns 0, 1, or -1. 0, 1, or -1","parameters":{"itemOne":{"type":"dojo.data.Item"},"itemTwo":{"type":"dojo.data.Item"},"otherItem":{"type":"dojo.data.Item"}},"src":"","returns":"0, 1, or -1","this":"dojo.data.Item"}}},"dojo.data.Item.toString":{"_":{"meta":{"summary":"","src":"\tvar attributes = this.getAttributes();\n\tfor (var i in attributes) {\n\t\tvar attribute = attributes[i];\n\t\tvar arrayOfValues = this.getValues(attribute);\n\t\tvar valueString;\n\t\tif (arrayOfValues.length == 1) {\n\t\t\tvalueString = arrayOfValues[0];\n\t\t} else {\n\t\t\tvalueString = '[';\n\t\t\tvalueString += arrayOfValues.join(', ');\n\t\t\tvalueString += ']';\n\t\t}\n\t\tarrayOfStrings.push('  ' + attribute + ': ' + valueString);\n\t}\n\tvar returnString = '{ ';\n\treturnString += arrayOfStrings.join(',\\n');\n\treturnString += ' }';\n\treturn returnString; \/\/ string","returns":"string","this":"dojo.data.Item"}}},"dojo.data.Item.isEqual":{"_":{"meta":{"summary":"Returns true if this Item is equal to the otherItem, or false otherwise. boolean","parameters":{"otherItem":{"type":"dojo.data.Item"}},"src":"","returns":"boolean","this":"dojo.data.Item"}}},"dojo.data.Item.getName":{"_":{"meta":{"summary":"","src":"\treturn this.get('name');","this":"dojo.data.Item"}}},"dojo.data.Item.get":{"_":{"meta":{"summary":"Returns a single literal value, like \"foo\" or 33. dojo.lang.assertType(attributeId, [String, dojo.data.Attribute]);","parameters":{"attributeId":{"type":"string or dojo.data.Attribute"}},"src":"\tif (dojo.lang.isUndefined(literalOrValueOrArray)) {\n\t\treturn null; \/\/ null\n\t}\n\tif (literalOrValueOrArray instanceof dojo.data.Value) {\n\t\treturn literalOrValueOrArray.getValue(); \/\/ literal\n\t}\n\tif (dojo.lang.isArray(literalOrValueOrArray)) {\n\t\tvar dojoDataValue = literalOrValueOrArray[0];\n\t\treturn dojoDataValue.getValue(); \/\/ literal\n\t}\n\treturn literalOrValueOrArray; \/\/ literal","returns":"mixed","this":"dojo.data.Item"}}},"dojo.data.Item.getValue":{"_":{"meta":{"summary":"Returns a single instance of dojo.data.Value. dojo.lang.assertType(attributeId, [String, dojo.data.Attribute]);","parameters":{"attributeId":{"type":"string or dojo.data.Attribute"}},"src":"\tif (dojo.lang.isUndefined(literalOrValueOrArray)) {\n\t\treturn null; \/\/ null\n\t}\n\tif (literalOrValueOrArray instanceof dojo.data.Value) {\n\t\treturn literalOrValueOrArray; \/\/ dojo.data.Value\n\t}\n\tif (dojo.lang.isArray(literalOrValueOrArray)) {\n\t\tvar dojoDataValue = literalOrValueOrArray[0];\n\t\treturn dojoDataValue; \/\/ dojo.data.Value\n\t}\n\tvar literal = literalOrValueOrArray;\n\tdojoDataValue = new dojo.data.Value(literal);\n\tthis._dictionaryOfAttributeValues[attributeId] = dojoDataValue;\n\treturn dojoDataValue; \/\/ dojo.data.Value","returns":"mixed","this":"dojo.data.Item"}}},"dojo.data.Item.getValues":{"_":{"meta":{"summary":"Returns an array of dojo.data.Value objects. dojo.lang.assertType(attributeId, [String, dojo.data.Attribute]);","parameters":{"attributeId":{"type":"string or dojo.data.Attribute"}},"src":"\tif (dojo.lang.isUndefined(literalOrValueOrArray)) {\n\t\treturn null; \/\/ null\n\t}\n\tif (literalOrValueOrArray instanceof dojo.data.Value) {\n\t\tvar array = [literalOrValueOrArray];\n\t\tthis._dictionaryOfAttributeValues[attributeId] = array;\n\t\treturn array; \/\/ Array\n\t}\n\tif (dojo.lang.isArray(literalOrValueOrArray)) {\n\t\treturn literalOrValueOrArray; \/\/ Array\n\t}\n\tvar literal = literalOrValueOrArray;\n\tvar dojoDataValue = new dojo.data.Value(literal);\n\tarray = [dojoDataValue];\n\tthis._dictionaryOfAttributeValues[attributeId] = array;\n\treturn array; \/\/ Array","returns":"mixed","this":"dojo.data.Item"}}},"dojo.data.Item.load":{"_":{"meta":{"summary":" Used for loading an attribute value into an item when the item is first being loaded into memory from some data store (such as a file). dojo.lang.assertType(attributeId, [String, dojo.data.Attribute]);","parameters":{"attributeId":{"type":"string or dojo.data.Attribute"},"value":{"type":"anything"}},"src":"\tvar literalOrValueOrArray = this._dictionaryOfAttributeValues[attributeId];\n\tif (dojo.lang.isUndefined(literalOrValueOrArray)) {\n\t\tthis._dictionaryOfAttributeValues[attributeId] = value;\n\t\treturn;\n\t}\n\tif (!(value instanceof dojo.data.Value)) {\n\t\tvalue = new dojo.data.Value(value);\n\t}\n\tif (literalOrValueOrArray instanceof dojo.data.Value) {\n\t\tvar array = [literalOrValueOrArray, value];\n\t\tthis._dictionaryOfAttributeValues[attributeId] = array;\n\t\treturn;\n\t}\n\tif (dojo.lang.isArray(literalOrValueOrArray)) {\n\t\tliteralOrValueOrArray.push(value);\n\t\treturn;\n\t}\n\tvar literal = literalOrValueOrArray;\n\tvar dojoDataValue = new dojo.data.Value(literal);\n\tarray = [dojoDataValue, value];\n\tthis._dictionaryOfAttributeValues[attributeId] = array;","this":"dojo.data.Item"}}},"dojo.data.Item.set":{"_":{"meta":{"summary":" Used for setting an attribute value as a result of a user action. dojo.lang.assertType(attributeId, [String, dojo.data.Attribute]);","parameters":{"attributeId":{"type":"string or dojo.data.Attribute"},"value":{"type":"anything"}},"src":"\tthis._dictionaryOfAttributeValues[attributeId] = value;\n\tthis._dataProvider.noteChange(this, attributeId, value);","this":"dojo.data.Item"}}},"dojo.data.Item.setValue":{"_":{"meta":{"summary":"","parameters":{"attributeId":{"type":"string or dojo.data.Attribute"},"value":{"type":"dojo.data.Value"}},"src":"\tthis.set(attributeId, value);","this":"dojo.data.Item"}}},"dojo.data.Item.addValue":{"_":{"meta":{"summary":" Used for adding an attribute value as a result of a user action.","parameters":{"attributeId":{"type":"string or dojo.data.Attribute"},"value":{"type":"anything"}},"src":"\tthis._dataProvider.noteChange(this, attributeId, value);","this":"dojo.data.Item"}}},"dojo.data.Item.setValues":{"_":{"meta":{"summary":" Used for setting an array of attribute values as a result of a user action. dojo.lang.assertType(attributeId, [String, dojo.data.Attribute]);","parameters":{"attributeId":{"type":"string or dojo.data.Attribute"},"arrayOfValues":{"type":"Array"}},"src":"\tthis._dataProvider.registerAttribute(attributeId);\n\tvar finalArray = [];\n\tthis._dictionaryOfAttributeValues[attributeId] = finalArray;\n\tfor (var i in arrayOfValues) {\n\t\tvar value = arrayOfValues[i];\n\t\tif (!(value instanceof dojo.data.Value)) {\n\t\t\tvalue = new dojo.data.Value(value);\n\t\t}\n\t\tfinalArray.push(value);\n\t\tthis._dataProvider.noteChange(this, attributeId, value);\n\t}","this":"dojo.data.Item"}}},"dojo.data.Item.getAttributes":{"_":{"meta":{"summary":" Returns an array containing all of the attributes for which this item has attribute values.","src":"\tfor (var key in this._dictionaryOfAttributeValues) {\n\t\tarrayOfAttributes.push(this._dataProvider.getAttribute(key));\n\t}\n\treturn arrayOfAttributes; \/\/ Array","returns":"Array","this":"dojo.data.Item"}}},"dojo.data.Item.hasAttribute":{"_":{"meta":{"summary":"Returns true if the given attribute of the item has been assigned any value. dojo.lang.assertType(attributeId, [String, dojo.data.Attribute]); boolean","parameters":{"attributeId":{"type":"string or dojo.data.Attribute"}},"src":"","returns":"boolean","this":"dojo.data.Item"}}},"dojo.data.Item.hasAttributeValue":{"_":{"meta":{"summary":"Returns true if the given attribute of the item has been assigned the given value.","parameters":{"attributeId":{"type":"string or dojo.data.Attribute"},"value":{"type":"anything"}},"src":"\tfor (var i in arrayOfValues) {\n\t\tvar candidateValue = arrayOfValues[i];\n\t\tif (candidateValue.isEqual(value)) {\n\t\t\treturn true; \/\/ boolean\n\t\t}\n\t}\n\treturn false; \/\/ boolean","returns":"boolean","this":"dojo.data.Item"}}}}}},"dojo.data.Kind":{"meta":{"requires":{"common":["dojo.data.Item"]},"methods":{"dojo.data.Kind":{"_":{"meta":{"summary":" A Kind represents a kind of item.  In the dojo data model the item Snoopy might belong to the 'kind' Dog, where in a Java program the object Snoopy would belong to the 'class' Dog, and in MySQL the record for Snoopy would be in the table Dog.","parameters":{"dataProvider":{"type":"dojo.data.provider.Base"}},"src":"","this_inherits":["dojo.data.Item"],"inherits":["dojo.data.Item"]}}}}}},"dojo.data.Observable":{"meta":{"requires":{"common":["dojo.lang.common","dojo.lang.assert"]},"methods":{"dojo.data.Observable":{"_":{"meta":{"summary":"","src":"","this_variables":["_arrayOfObservers"]}}},"dojo.data.Observable.addObserver":{"_":{"meta":{"summary":"Registers an object as an observer of this item, so that the object will be notified when the item changes.","parameters":{"observer":{"type":"object"}},"src":"\tdojo.lang.assertType(observer.observedObjectHasChanged, Function);\n\tif (!this._arrayOfObservers) {\n\t\tthis._arrayOfObservers = [];\n\t}\n\tif (!dojo.lang.inArray(this._arrayOfObservers, observer)) {\n\t\tthis._arrayOfObservers.push(observer);\n\t}","this":"dojo.data.Observable"}}},"dojo.data.Observable.removeObserver":{"_":{"meta":{"summary":"Removes the observer registration for a previously registered object.","parameters":{"observer":{"type":"object"}},"src":"\t\treturn;\n\t}\n\tvar index = dojo.lang.indexOf(this._arrayOfObservers, observer);\n\tif (index != -1) {\n\t\tthis._arrayOfObservers.splice(index, 1);\n\t}","this":"dojo.data.Observable"}}},"dojo.data.Observable.getObservers":{"_":{"meta":{"summary":"Returns an array with all the observers of this item. Array or undefined","src":"","returns":"Array or undefined","this":"dojo.data.Observable"}}}}}},"dojo.data.ResultSet":{"meta":{"requires":{"common":["dojo.lang.assert","dojo.collections.Collections"]},"methods":{"dojo.data.ResultSet":{"_":{"meta":{"summary":" A ResultSet holds a collection of Items.  A data provider returns a ResultSet in reponse to a query. (The name \"Result Set\" comes from the MySQL terminology.)","parameters":{"dataProvider":{"type":"dojo.data.provider.Base"},"arrayOfItems":{"type":"Array"}},"src":"\tdojo.lang.assertType(arrayOfItems, Array, {optional: true});\n\tdojo.data.Observable.call(this);\n\tthis._dataProvider = dataProvider;\n\tthis._arrayOfItems = [];\n\tif (arrayOfItems) {\n\t\tthis._arrayOfItems = arrayOfItems;\n\t}","this_variables":["_dataProvider","_arrayOfItems"],"inherits":["dojo.data.Observable"]}}},"dojo.data.ResultSet.toString":{"_":{"meta":{"summary":"","src":"\tvar returnString = this._arrayOfItems.join(', ');\n\treturn returnString; \/\/ string","returns":"string","this":"dojo.data.ResultSet"}}},"dojo.data.ResultSet.toArray":{"_":{"meta":{"summary":"","src":"\treturn this._arrayOfItems;         ","returns":"Array","this":"dojo.data.ResultSet"}}},"dojo.data.ResultSet.getIterator":{"_":{"meta":{"summary":"","src":"\treturn new dojo.collections.Iterator(this._arrayOfItems);","this":"dojo.data.ResultSet"}}},"dojo.data.ResultSet.getLength":{"_":{"meta":{"summary":"","src":"\treturn this._arrayOfItems.length;           ","returns":"integer","this":"dojo.data.ResultSet"}}},"dojo.data.ResultSet.getItemAt":{"_":{"meta":{"summary":"","parameters":{"index":{"type":"numeric"}},"src":"\treturn this._arrayOfItems[index];","this":"dojo.data.ResultSet"}}},"dojo.data.ResultSet.indexOf":{"_":{"meta":{"summary":"","parameters":{"item":{"type":"dojo.data.Item"}},"src":"\treturn dojo.lang.indexOf(this._arrayOfItems, item);           ","returns":"integer","this":"dojo.data.ResultSet"}}},"dojo.data.ResultSet.contains":{"_":{"meta":{"summary":"","parameters":{"item":{"type":"dojo.data.Item"}},"src":"\treturn dojo.lang.inArray(this._arrayOfItems, item);           ","returns":"boolean","this":"dojo.data.ResultSet"}}},"dojo.data.ResultSet.getDataProvider":{"_":{"meta":{"summary":"","src":"\treturn this._dataProvider;                           ","returns":"dojo.data.provider.Base","this":"dojo.data.ResultSet"}}}}}},"dojo.data.SimpleStore":{"meta":{"requires":{"common":["dojo.lang","dojo.experimental"]},"methods":{"dojo.data.SimpleStore":{"_":{"meta":{"summary":" Data Store with accessor methods.","parameters":{"json":{"type":"array?"}},"src":"\tthis.keyField = \"Id\";\n\n\tthis.get = function(){\n\t\t\/\/\tsummary\n\t\t\/\/\tGet the internal data array, should not be used.\n\t\treturn data;\t\/\/\tarray\n\t};\n\tthis.getByKey = function(\/* string *\/key){\n\t\t\/\/\tsummary\n\t\t\/\/\tFind the internal data object by key.\n\t\tfor(var i=0; i<data.length; i++){\n\t\t\tif(data[i].key==key){\n\t\t\t\treturn data[i];\t\/\/ object\n\t\t\t}\n\t\t}\n\t\treturn null;\t\/\/ null\n\t};\n\tthis.getByIndex = function(\/*number*\/idx){ \n\t\t\/\/\tsummary\n\t\t\/\/\tGet the internal data object by index.\n\t\treturn data[idx]; \t\/\/ object\n\t};\n\t\n\tthis.getData = function(){\n\t\t\/\/\tsummary\n\t\t\/\/\tGet an array of source objects.\n\t\tvar arr = [];\n\t\tfor(var i=0; i<data.length; i++){\n\t\t\tarr.push(data[i]);\n\t\t}\n\t\treturn arr;\t\/\/\tarray\n\t};\n\tthis.getDataByKey = function(\/*string*\/key){\n\t\t\/\/\tsummary\n\t\t\/\/\tGet the source object by key.\n\t\tfor(var i=0; i<data.length; i++){\n\t\t\tif(data[i].key==key){\n\t\t\t\treturn data[i].src; \/\/\tobject\n\t\t\t}\n\t\t}\n\t\treturn null;\t\/\/\tnull\n\t};\n\tthis.getDataByIndex = function(\/*number*\/idx){ \n\t\t\/\/\tsummary\n\t\t\/\/\tGet the source object at index idx.\n\t\treturn data[idx].src; \t\/\/\tobject\n\t};\n\n\tthis.forEach = function(\/* function *\/fn){\n\t\t\/\/\tsummary\n\t\t\/\/\tFunctional iteration directly on the internal data array.\n\t\tif(Array.forEach){\n\t\t\tArray.forEach(data, fn, this);\n\t\t}else{\n\t\t\tfor(var i=0; i<data.length; i++){\n\t\t\t\tfn.call(this, data[i]);\n\t\t\t}\n\t\t}\n\t};\n\tthis.forEachData = function(\/* function *\/fn){\n\t\t\/\/\tsummary\n\t\t\/\/\tFunctional iteration on source objects in internal data array.\n\t\tif(Array.forEach){\n\t\t\tArray.forEach(this.getData(), fn, this);\n\t\t}else{\n\t\t\tvar a=this.getData();\n\t\t\tfor(var i=0; i<a.length; i++){\n\t\t\t\tfn.call(this, a[i]);\n\t\t\t}\n\t\t}\n\t};\n\n\tthis.setData = function(\/*array*\/arr){\n\t\t\/\/\tsummary\n\t\t\/\/\tSet up the internal data.\n\t\tdata = []; \t\/\/\tdon't fire onClearData\n\t\tfor(var i=0; i<arr.length; i++){\n\t\t\tdata.push({ \n\t\t\t\tkey:arr[i][this.keyField], \n\t\t\t\tsrc:arr[i]\n\t\t\t});\n\t\t}\n\t\tthis.onSetData();\n\t};\n\t\n\tthis.clearData = function(){\n\t\t\/\/\tsummary\n\t\t\/\/\tClears the internal data array.\n\t\tdata = [];\n\t\tthis.onClearData();\n\t};\n\n\tthis.addData = function(\/*obj*\/obj,\/*string?*\/key){ \n\t\t\/\/\tsummary\n\t\t\/\/\tAdd an object with optional key to the internal data array.\n\t\tvar o={ \n\t\t\tkey:key||obj[this.keyField], \n\t\t\tsrc:obj \n\t\t};\n\t\tdata.push(o);\n\t\tthis.onAddData(o);\n\t};\n\tthis.addDataRange = function(\/*array*\/arr){\n\t\t\/\/\tsummary\n\t\t\/\/\tAdd a range of objects to the internal data array.\n\t\tvar objects=[];\n\t\tfor(var i=0; i<arr.length; i++){\n\t\t\tvar o = { \n\t\t\t\tkey:arr[i][this.keyField], \n\t\t\t\tsrc:arr[i] \n\t\t\t};\n\t\t\tdata.push(o);\n\t\t\tobjects.push(o);\n\t\t}\n\t\tthis.onAddDataRange(objects);\n\t};\n\t\n\tthis.removeData = function(\/*obj*\/obj){\n\t\t\/\/\tsummary\n\t\t\/\/\tremove the passed object from the internal data array.\n\t\tvar idx=-1;\n\t\tvar o=null;\n\t\tfor(var i=0; i<data.length; i++){\n\t\t\tif(data[i].src==obj){\n\t\t\t\tidx=i;\n\t\t\t\to=data[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(idx>-1){\n\t\t\tdata.splice(idx,1);\n\t\t}\n\t\tthis.onRemoveData(o);\n\t};\n\tthis.removeDataByKey = function(\/*string*\/key){\n\t\t\/\/\tsummary\n\t\t\/\/\tremove the object at key from the internal data array.\n\t\tthis.removeData(this.getDataByKey(key));\n\t};\n\tthis.removeDataByIndex = function(\/*number*\/idx){\n\t\t\/\/\tsummary\n\t\t\/\/\tremove the object at idx from the internal data array.\n\t\tthis.removeData(this.getDataByIndex(idx));\n\t};\n\n\tif(json && json.length && json[0]){\n\t\tthis.setData(json);\n\t}","this_variables":["keyField","get","getByKey","getByIndex","getData","getDataByKey","getDataByIndex","forEach","forEachData","setData","clearData","addData","addDataRange","removeData","removeDataByKey","removeDataByIndex"],"returns":"mixed","this_inherits":["fn","fn"]}}},"dojo.data.SimpleStore.get":{"_":{"meta":{"summary":" Get the internal data array, should not be used. array","src":"","returns":"array"}}},"dojo.data.SimpleStore.getByKey":{"_":{"meta":{"summary":" Find the internal data object by key.","parameters":{"key":{"type":"string"}},"src":"\t\t\tif(data[i].key==key){\n\t\t\t\treturn data[i];\t\/\/ object\n\t\t\t}\n\t\t}\n\t\treturn null;\t\/\/ null","returns":"mixed"}}},"dojo.data.SimpleStore.getByIndex":{"_":{"meta":{"summary":" Get the internal data object by index. object","parameters":{"idx":{"type":"number"}},"src":"","returns":"object"}}},"dojo.data.SimpleStore.getData":{"_":{"meta":{"summary":" Get an array of source objects.","src":"\t\tfor(var i=0; i<data.length; i++){\n\t\t\tarr.push(data[i]);\n\t\t}\n\t\treturn arr;\t\/\/\tarray","returns":"array"}}},"dojo.data.SimpleStore.getDataByKey":{"_":{"meta":{"summary":" Get the source object by key.","parameters":{"key":{"type":"string"}},"src":"\t\t\tif(data[i].key==key){\n\t\t\t\treturn data[i].src; \/\/\tobject\n\t\t\t}\n\t\t}\n\t\treturn null;\t\/\/\tnull","returns":"mixed"}}},"dojo.data.SimpleStore.getDataByIndex":{"_":{"meta":{"summary":" Get the source object at index idx. object","parameters":{"idx":{"type":"number"}},"src":"","returns":"object"}}},"dojo.data.SimpleStore.forEach":{"_":{"meta":{"summary":" Functional iteration directly on the internal data array.","parameters":{"fn":{"type":"function"}},"src":"\t\t\tArray.forEach(data, fn, this);\n\t\t}else{\n\t\t\tfor(var i=0; i<data.length; i++){\n\t\t\t\tfn.call(this, data[i]);\n\t\t\t}\n\t\t}","this_inherits":["fn"]}}},"dojo.data.SimpleStore.forEachData":{"_":{"meta":{"summary":" Functional iteration on source objects in internal data array.","parameters":{"fn":{"type":"function"}},"src":"\t\t\tArray.forEach(this.getData(), fn, this);\n\t\t}else{\n\t\t\tvar a=this.getData();\n\t\t\tfor(var i=0; i<a.length; i++){\n\t\t\t\tfn.call(this, a[i]);\n\t\t\t}\n\t\t}","this_inherits":["fn"]}}},"dojo.data.SimpleStore.setData":{"_":{"meta":{"summary":" Set up the internal data. don't fire onClearData","parameters":{"arr":{"type":"array"}},"src":"\t\tfor(var i=0; i<arr.length; i++){\n\t\t\tdata.push({ \n\t\t\t\tkey:arr[i][this.keyField], \n\t\t\t\tsrc:arr[i]\n\t\t\t});\n\t\t}\n\t\tthis.onSetData();"}}},"dojo.data.SimpleStore.clearData":{"_":{"meta":{"summary":" Clears the internal data array.","src":"\t\tthis.onClearData();"}}},"dojo.data.SimpleStore.addData":{"_":{"meta":{"summary":" Add an object with optional key to the internal data array.","parameters":{"obj":{"type":"obj"},"*string?*\/key":{"type":""}},"src":"\t\t\tkey:key||obj[this.keyField], \n\t\t\tsrc:obj \n\t\t};\n\t\tdata.push(o);\n\t\tthis.onAddData(o);"}}},"dojo.data.SimpleStore.addDataRange":{"_":{"meta":{"summary":" Add a range of objects to the internal data array.","parameters":{"arr":{"type":"array"}},"src":"\t\tfor(var i=0; i<arr.length; i++){\n\t\t\tvar o = { \n\t\t\t\tkey:arr[i][this.keyField], \n\t\t\t\tsrc:arr[i] \n\t\t\t};\n\t\t\tdata.push(o);\n\t\t\tobjects.push(o);\n\t\t}\n\t\tthis.onAddDataRange(objects);"}}},"dojo.data.SimpleStore.removeData":{"_":{"meta":{"summary":" remove the passed object from the internal data array.","parameters":{"obj":{"type":"obj"}},"src":"\t\tvar o=null;\n\t\tfor(var i=0; i<data.length; i++){\n\t\t\tif(data[i].src==obj){\n\t\t\t\tidx=i;\n\t\t\t\to=data[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(idx>-1){\n\t\t\tdata.splice(idx,1);\n\t\t}\n\t\tthis.onRemoveData(o);"}}},"dojo.data.SimpleStore.removeDataByKey":{"_":{"meta":{"summary":" remove the object at key from the internal data array.","parameters":{"key":{"type":"string"}},"src":""}}},"dojo.data.SimpleStore.removeDataByIndex":{"_":{"meta":{"summary":" remove the object at idx from the internal data array.","parameters":{"idx":{"type":"number"}},"src":""}}},"dojo.data.SimpleStore.getField":{"_":{"meta":{"summary":"","parameters":{"obj":{"type":"object"},"field":{"type":"string"}},"src":"\t\tdo{ \n\t\t\tif(parts[i].indexOf(\"()\")>-1){\n\t\t\t\tvar temp=parts[i++].split(\"()\")[0];\n\t\t\t\to = o[temp]();\n\t\t\t} else {\n\t\t\t\to = o[parts[i++]];\n\t\t\t}\n\t\t} while (i<parts.length && o);\n\t\treturn (o!=dj_global)?o:null; \/\/ object","returns":"object","this":"dojo.data.SimpleStore"}}},"dojo.data.SimpleStore.o":{"_":{"meta":{"summary":"","parameters":{"obj":{"type":"object"},"field":{"type":"string"}},"src":"\t\tdo{ \n\t\t\tif(parts[i].indexOf(\"()\")>-1){\n\t\t\t\tvar temp=parts[i++].split(\"()\")[0];\n\t\t\t\to = o[temp]();\n\t\t\t} else {\n\t\t\t\to = o[parts[i++]];\n\t\t\t}\n\t\t} while (i<parts.length && o);\n\t\treturn (o!=dj_global)?o:null; \/\/ object","returns":"object","this":"dojo.data.SimpleStore"}}},"dojo.data.SimpleStore.onSetData":{"_":{"meta":{"summary":"","src":"","this":"dojo.data.SimpleStore"}}},"dojo.data.SimpleStore.onClearData":{"_":{"meta":{"summary":"","src":"","this":"dojo.data.SimpleStore"}}},"dojo.data.SimpleStore.onAddData":{"_":{"meta":{"summary":"","parameters":{"obj":{"type":""}},"src":"","this":"dojo.data.SimpleStore"}}},"dojo.data.SimpleStore.onAddDataRange":{"_":{"meta":{"summary":"","parameters":{"arr":{"type":""}},"src":"","this":"dojo.data.SimpleStore"}}},"dojo.data.SimpleStore.onRemoveData":{"_":{"meta":{"summary":"","parameters":{"obj":{"type":""}},"src":"","this":"dojo.data.SimpleStore"}}}}}},"dojo.data.Type":{"meta":{"requires":{"common":["dojo.data.Item"]},"methods":{"dojo.data.Type":{"_":{"meta":{"summary":" A Type represents a type of value, like Text, Number, Picture, or Varchar.","parameters":{"dataProvider":{"type":"dojo.data.provider.Base"}},"src":"","this_inherits":["dojo.data.Item"],"inherits":["dojo.data.Item"]}}}}}},"dojo.data.Value":{"meta":{"requires":{"common":["dojo.lang.assert"]},"methods":{"dojo.data.Value":{"_":{"meta":{"summary":" A Value represents a simple literal value (like \"foo\" or 334), or a reference value (a pointer to an Item).","parameters":{"value":{"type":"anything"}},"src":"\tthis._type = null;","this_variables":["_value","_type"]}}},"dojo.data.Value.toString":{"_":{"meta":{"summary":"","src":"\treturn this._value.toString();          ","returns":"string","this":"dojo.data.Value"}}},"dojo.data.Value.getValue":{"_":{"meta":{"summary":"Returns the value itself. anything","src":"","returns":"anything","this":"dojo.data.Value"}}},"dojo.data.Value.getType":{"_":{"meta":{"summary":"Returns the data type of the value.","src":"\treturn this._type; \/\/ dojo.data.Type","returns":"dojo.data.Type","this":"dojo.data.Value"}}},"dojo.data.Value.compare":{"_":{"meta":{"summary":"","src":"\tdojo.unimplemented('dojo.data.Value.prototype.compare');","this":"dojo.data.Value"}}},"dojo.data.Value.isEqual":{"_":{"meta":{"summary":"","src":"\tdojo.unimplemented('dojo.data.Value.prototype.isEqual');","this":"dojo.data.Value"}}}}}},"dojo.data._":{"meta":{"requires":{"common":["dojo.data.Item","dojo.data.ResultSet","dojo.data.provider.FlatFile"]}}},"dojo.data.format.Csv":{"meta":{"requires":{"common":["dojo.lang.assert"]},"methods":{"dojo.data.format.Csv.getArrayStructureFromCsvFileContents":{"_":{"meta":{"summary":"","parameters":{"csvFileContents":{"type":"string"}},"src":"\t\tvar lineEndingCharacters = new RegExp(\"\\r\\n|\\n|\\r\");\n\t\tvar leadingWhiteSpaceCharacters = new RegExp(\"^\\\\s+\",'g');\n\t\tvar trailingWhiteSpaceCharacters = new RegExp(\"\\\\s+$\",'g');\n\t\tvar doubleQuotes = new RegExp('\"\"','g');\n\t\tvar arrayOfOutputRecords = [];\n\t\t\n\t\tvar arrayOfInputLines = csvFileContents.split(lineEndingCharacters);\n\t\tfor (var i in arrayOfInputLines) {\n\t\t\tvar singleLine = arrayOfInputLines[i];\n\t\t\tif (singleLine.length > 0) {\n\t\t\t\tvar listOfFields = singleLine.split(',');\n\t\t\t\tvar j = 0;\n\t\t\t\twhile (j < listOfFields.length) {\n\t\t\t\t\tvar space_field_space = listOfFields[j];\n\t\t\t\t\tvar field_space = space_field_space.replace(leadingWhiteSpaceCharacters, ''); \/\/ trim leading whitespace\n\t\t\t\t\tvar field = field_space.replace(trailingWhiteSpaceCharacters, ''); \/\/ trim trailing whitespace\n\t\t\t\t\tvar firstChar = field.charAt(0);\n\t\t\t\t\tvar lastChar = field.charAt(field.length - 1);\n\t\t\t\t\tvar secondToLastChar = field.charAt(field.length - 2);\n\t\t\t\t\tvar thirdToLastChar = field.charAt(field.length - 3);\n\t\t\t\t\tif ((firstChar == '\"') && \n\t\t\t\t\t\t\t((lastChar != '\"') || \n\t\t\t\t\t\t\t ((lastChar == '\"') && (secondToLastChar == '\"') && (thirdToLastChar != '\"')) )) {\n\t\t\t\t\t\tif (j+1 === listOfFields.length) {\n\t\t\t\t\t\t\t\/\/ alert(\"The last field in record \" + i + \" is corrupted:\\n\" + field);\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar nextField = listOfFields[j+1];\n\t\t\t\t\t\tlistOfFields[j] = field_space + ',' + nextField;\n\t\t\t\t\t\tlistOfFields.splice(j+1, 1); \/\/ delete element [j+1] from the list\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif ((firstChar == '\"') && (lastChar == '\"')) {\n\t\t\t\t\t\t\tfield = field.slice(1, (field.length - 1)); \/\/ trim the \" characters off the ends\n\t\t\t\t\t\t\tfield = field.replace(doubleQuotes, '\"');   \/\/ replace \"\" with \"\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlistOfFields[j] = field;\n\t\t\t\t\t\tj += 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tarrayOfOutputRecords.push(listOfFields);\n\t\t\t}\n\t\t}\n\t\treturn arrayOfOutputRecords; \/\/ Array","returns":"Array"}}},"dojo.data.format.Csv.loadDataProviderFromFileContents":{"_":{"meta":{"summary":"","parameters":{"dataProvider":{"type":"dojo.data.provider.Base"},"csvFileContents":{"type":"string"}},"src":"\t\tdojo.lang.assertType(dataProvider, dojo.data.provider.Base);\n\t\tdojo.lang.assertType(csvFileContents, String);\n\t\tvar arrayOfArrays = this.getArrayStructureFromCsvFileContents(csvFileContents);\n\t\tif (arrayOfArrays) {\n\t\t\tvar arrayOfKeys = arrayOfArrays[0];\n\t\t\tfor (var i = 1; i < arrayOfArrays.length; ++i) {\n\t\t\t\tvar row = arrayOfArrays[i];\n\t\t\t\tvar item = dataProvider.getNewItemToLoad();\n\t\t\t\tfor (var j in row) {\n\t\t\t\t\tvar value = row[j];\n\t\t\t\t\tvar key = arrayOfKeys[j];\n\t\t\t\t\titem.load(key, value);\n\t\t\t\t}\n\t\t\t}\n\t\t}"}}},"dojo.data.format.Csv.getCsvStringFromResultSet":{"_":{"meta":{"summary":"","parameters":{"resultSet":{"type":"dojo.data.ResultSet"}},"src":"\t\tdojo.unimplemented('dojo.data.format.Csv.getCsvStringFromResultSet');\n\t\tvar csvString = null;\n\t\treturn csvString; \/\/ String","returns":"String"}}}}}},"dojo.data.format.Json":{"meta":{"requires":{"common":["dojo.lang.assert"]},"methods":{"dojo.data.format.Json.loadDataProviderFromFileContents":{"_":{"meta":{"summary":"","parameters":{"dataProvider":{"type":"dojo.data.provider.Base"},"jsonFileContents":{"type":"string"}},"src":"\t\tdojo.lang.assertType(dataProvider, dojo.data.provider.Base);\n\t\tdojo.lang.assertType(jsonFileContents, String);\n\t\tvar arrayOfJsonData = eval(\"(\" + jsonFileContents + \")\");\n\t\tthis.loadDataProviderFromArrayOfJsonData(dataProvider, arrayOfJsonData);"}}},"dojo.data.format.Json.loadDataProviderFromArrayOfJsonData":{"_":{"meta":{"summary":"","parameters":{"dataProvider":{"type":"dojo.data.provider.Base"},"arrayOfJsonData":{"type":"Array"}},"src":"\t\tdojo.lang.assertType(arrayOfJsonData, Array, {optional: true});\n\t\tif (arrayOfJsonData && (arrayOfJsonData.length > 0)) {\n\t\t\tvar firstRow = arrayOfJsonData[0];\n\t\t\tdojo.lang.assertType(firstRow, [Array, \"pureobject\"]);\n\t\t\tif (dojo.lang.isArray(firstRow)) {\n\t\t\t\t_loadDataProviderFromArrayOfArrays(dataProvider, arrayOfJsonData);\n\t\t\t} else {\n\t\t\t\tdojo.lang.assertType(firstRow, \"pureobject\");\n\t\t\t\t_loadDataProviderFromArrayOfObjects(dataProvider, arrayOfJsonData);\n\t\t\t}\n\t\t}"}}},"dojo.data.format.Json.getJsonStringFromResultSet":{"_":{"meta":{"summary":"","parameters":{"resultSet":{"type":"dojo.data.ResultSet"}},"src":"\t\tdojo.unimplemented('dojo.data.format.Json.getJsonStringFromResultSet');\n\t\tvar jsonString = null;\n\t\treturn jsonString; \/\/ String","returns":"String"}}}}}},"dojo.data.provider.Base":{"meta":{"requires":{"common":["dojo.lang.assert"]},"methods":{"dojo.data.provider.Base":{"_":{"meta":{"summary":" A Data Provider serves as a connection to some data source, like a relational database.  This data provider Base class serves as an abstract superclass for other data provider classes.","src":"\tthis._changesInCurrentTransaction = null;","this_variables":["_countOfNestedTransactions","_changesInCurrentTransaction","_changesInCurrentTransaction","_changesInCurrentTransaction","_countOfNestedTransactions"]}}},"dojo.data.provider.Base.beginTransaction":{"_":{"meta":{"summary":"","src":"\t\tthis._changesInCurrentTransaction = [];\n\t}\n\tthis._countOfNestedTransactions += 1;","this":"dojo.data.provider.Base"}}},"dojo.data.provider.Base.endTransaction":{"_":{"meta":{"summary":"","src":"\tdojo.lang.assert(this._countOfNestedTransactions >= 0);\n\n\tif (this._countOfNestedTransactions === 0) {\n\t\tvar listOfChangesMade = this._saveChanges();\n\t\tthis._changesInCurrentTransaction = null;\n\t\tif (listOfChangesMade.length > 0) {\n\t\t\t\/\/ dojo.debug(\"endTransaction: \" + listOfChangesMade.length + \" changes made\");\n\t\t\tthis._notifyObserversOfChanges(listOfChangesMade);\n\t\t}\n\t}","this":"dojo.data.provider.Base"}}},"dojo.data.provider.Base.getNewItemToLoad":{"_":{"meta":{"summary":"","src":"\treturn this._newItem();                  ","returns":"dojo.data.Item","this":"dojo.data.provider.Base"}}},"dojo.data.provider.Base.newItem":{"_":{"meta":{"summary":"","parameters":{"itemName":{"type":"string"}},"src":"\tvar item = this._newItem();\n\tif (itemName) {\n\t\titem.set('name', itemName);\n\t}\n\treturn item; \/\/ dojo.data.Item","returns":"dojo.data.Item","this":"dojo.data.provider.Base"}}},"dojo.data.provider.Base.newAttribute":{"_":{"meta":{"summary":"","parameters":{"attributeId":{"type":"string"}},"src":"\tvar attribute = this._newAttribute(attributeId);\n\treturn attribute; \/\/ dojo.data.Attribute","returns":"dojo.data.Attribute","this":"dojo.data.provider.Base"}}},"dojo.data.provider.Base.getAttribute":{"_":{"meta":{"summary":"","parameters":{"attributeId":{"type":"string"}},"src":"\tdojo.unimplemented('dojo.data.provider.Base');\n\tvar attribute;\n\treturn attribute; \/\/ dojo.data.Attribute","returns":"dojo.data.Attribute","this":"dojo.data.provider.Base"}}},"dojo.data.provider.Base.getAttributes":{"_":{"meta":{"summary":"","src":"\tdojo.unimplemented('dojo.data.provider.Base');\n\treturn this._arrayOfAttributes; \/\/ Array","returns":"Array","this":"dojo.data.provider.Base"}}},"dojo.data.provider.Base.fetchArray":{"_":{"meta":{"summary":"","src":"\tdojo.unimplemented('dojo.data.provider.Base');\n\treturn []; \/\/ Array","returns":"Array","this":"dojo.data.provider.Base"}}},"dojo.data.provider.Base.fetchResultSet":{"_":{"meta":{"summary":"","src":"\tdojo.unimplemented('dojo.data.provider.Base');\n\tvar resultSet;\n\treturn resultSet; \/\/ dojo.data.ResultSet","returns":"dojo.data.ResultSet","this":"dojo.data.provider.Base"}}},"dojo.data.provider.Base.noteChange":{"_":{"meta":{"summary":"","parameters":{"item":{"type":"dojo.data.Item"},"attribute":{"type":"string or dojo.data.Attribute"},"value":{"type":"anything"}},"src":"\tvar change = {item: item, attribute: attribute, value: value};\n\tif (this._countOfNestedTransactions === 0) {\n\t\tthis.beginTransaction();\n\t\tthis._changesInCurrentTransaction.push(change);\n\t\tthis.endTransaction();\n\t} else {\n\t\tthis._changesInCurrentTransaction.push(change);\n\t}","this":"dojo.data.provider.Base"}}},"dojo.data.provider.Base.addItemObserver":{"_":{"meta":{"summary":"Registers an object as an observer of an item, so that the object will be notified when the item changes.","parameters":{"item":{"type":"dojo.data.Item"},"observer":{"type":"object"}},"src":"\titem.addObserver(observer);","this":"dojo.data.provider.Base"}}},"dojo.data.provider.Base.removeItemObserver":{"_":{"meta":{"summary":"Removes the observer registration for a previously registered object.","parameters":{"item":{"type":"dojo.data.Item"},"observer":{"type":"object"}},"src":"\titem.removeObserver(observer);","this":"dojo.data.provider.Base"}}},"dojo.data.provider.Base._newItem":{"_":{"meta":{"summary":"","src":"\tvar item = new dojo.data.Item(this);\n\treturn item; \/\/ dojo.data.Item","returns":"dojo.data.Item","this":"dojo.data.provider.Base"}}},"dojo.data.provider.Base._newAttribute":{"_":{"meta":{"summary":"","parameters":{"attributeId":{"type":"String"}},"src":"\tvar attribute = new dojo.data.Attribute(this);\n\treturn attribute; \/\/ dojo.data.Attribute","returns":"dojo.data.Attribute","this":"dojo.data.provider.Base"}}},"dojo.data.provider.Base._saveChanges":{"_":{"meta":{"summary":"","src":"\tvar arrayOfChangesMade = this._changesInCurrentTransaction;\n\treturn arrayOfChangesMade; \/\/ Array","returns":"Array","this":"dojo.data.provider.Base"}}},"dojo.data.provider.Base._notifyObserversOfChanges":{"_":{"meta":{"summary":"","parameters":{"arrayOfChanges":{"type":"Array"}},"src":"\tvar arrayOfResultSets = this._getResultSets();\n\tfor (var i in arrayOfChanges) {\n\t\tvar change = arrayOfChanges[i];\n\t\tvar changedItem = change.item;\n\t\tvar arrayOfItemObservers = changedItem.getObservers();\n\t\tfor (var j in arrayOfItemObservers) {\n\t\t\tvar observer = arrayOfItemObservers[j];\n\t\t\tobserver.observedObjectHasChanged(changedItem, change);\n\t\t}\n\t\tfor (var k in arrayOfResultSets) {\n\t\t\tvar resultSet = arrayOfResultSets[k];\n\t\t\tvar arrayOfResultSetObservers = resultSet.getObservers();\n\t\t\tfor (var m in arrayOfResultSetObservers) {\n\t\t\t\tobserver = arrayOfResultSetObservers[m];\n\t\t\t\tobserver.observedObjectHasChanged(resultSet, change);\n\t\t\t}\n\t\t}\n\t}","this":"dojo.data.provider.Base"}}},"dojo.data.provider.Base._getResultSets":{"_":{"meta":{"summary":"","src":"\tdojo.unimplemented('dojo.data.provider.Base');\n\treturn []; \/\/ Array","returns":"Array","this":"dojo.data.provider.Base"}}}}}},"dojo.data.provider.Delicious":{"meta":{"requires":{"common":["dojo.data.provider.FlatFile","dojo.data.format.Json"]},"methods":{"dojo.data.provider.Delicious":{"_":{"meta":{"summary":" The Delicious Data Provider can be used to take data from del.icio.us and make it available as dojo.data.Items In order to use the Delicious Data Provider, you need to have loaded a script tag that looks like this: <script type=\"text\/javascript\" src=\"http:\/\/del.icio.us\/feeds\/json\/gumption?count=8\"><\/script>","src":"\t\/\/ Delicious = null;\n\tif (Delicious && Delicious.posts) {\n\t\tdojo.data.format.Json.loadDataProviderFromArrayOfJsonData(this, Delicious.posts);\n\t} else {\n\t\t\/\/ document.write(\"<script type='text\/javascript'>dojo.data.provider.Delicious._fetchComplete()<\/script>\");\t\t\n\t\t\/*\n\t\tdocument.write(\"<script type='text\/javascript'>alert('boo!');<\/script>\");\t\t\n\t\tdocument.write(\"<script type='text\/javascript'>var foo = 'not dojo'; alert('dojo == ' + foo);<\/script>\");\t\t\n\t\tdocument.write(\"<script type='text\/javascript'>var foo = fetchComplete; alert('dojo == ' + foo);<\/script>\");\t\t\n\t\tfetchComplete();\n\t\t*\/\n\t\t\/\/ dojo.debug(\"Delicious line 29: constructor\");\n\t}\n\tvar u = this.registerAttribute('u');\n\tvar d = this.registerAttribute('d');\n\tvar t = this.registerAttribute('t');\n\t\n\tu.load('name', 'Bookmark');\n\td.load('name', 'Description');\n\tt.load('name', 'Tags');\n\t\n\tu.load('type', 'String');\n\td.load('type', 'String');\n\tt.load('type', 'String');","inherits":["dojo.data.provider.FlatFile"]}}}}}},"dojo.data.provider.FlatFile":{"meta":{"requires":{"common":["dojo.data.provider.Base","dojo.data.Item","dojo.data.Attribute","dojo.data.ResultSet","dojo.data.format.Json","dojo.data.format.Csv","dojo.lang.assert"]},"methods":{"dojo.data.provider.FlatFile":{"_":{"meta":{"summary":" A Json Data Provider knows how to read in simple JSON data tables and make their contents accessable as Items.","parameters":{"keywordParameters":{"type":"keywords"}},"src":"\tdojo.data.provider.Base.call(this);\n\tthis._arrayOfItems = [];\n\tthis._resultSet = null;\n\tthis._dictionaryOfAttributes = {};\n\n\tif (keywordParameters) {\n\t\tvar jsonObjects = keywordParameters[\"jsonObjects\"];\n\t\tvar jsonString  = keywordParameters[\"jsonString\"];\n\t\tvar fileUrl     = keywordParameters[\"url\"];\n\t\tif (jsonObjects) {\n\t\t\tdojo.data.format.Json.loadDataProviderFromArrayOfJsonData(this, jsonObjects);\n\t\t}\n\t\tif (jsonString) {\n\t\t\tdojo.data.format.Json.loadDataProviderFromFileContents(this, jsonString);\n\t\t}\n\t\tif (fileUrl) {\n\t\t\tvar arrayOfParts = fileUrl.split('.');\n\t\t\tvar lastPart = arrayOfParts[(arrayOfParts.length - 1)];\n\t\t\tvar formatParser = null;\n\t\t\tif (lastPart == \"json\") {\n\t\t\t\tformatParser = dojo.data.format.Json;\n\t\t\t}\n\t\t\tif (lastPart == \"csv\") {\n\t\t\t\tformatParser = dojo.data.format.Csv;\n\t\t\t}\n\t\t\tif (formatParser) {\n\t\t\t\tvar fileContents = dojo.hostenv.getText(fileUrl);\n\t\t\t\tformatParser.loadDataProviderFromFileContents(this, fileContents);\n\t\t\t} else {\n\t\t\t\tdojo.lang.assert(false, \"new dojo.data.provider.FlatFile({url: }) was passed a file without a .csv or .json suffix\");\n\t\t\t}\n\t\t}\n\t}","this_variables":["_arrayOfItems","_resultSet","_dictionaryOfAttributes","_ourCapabilities","_resultSet"],"inherits":["dojo.data.provider.Base"]}}},"dojo.data.provider.FlatFile.getProviderCapabilities":{"_":{"meta":{"summary":"","parameters":{"keyword":{"type":"string"}},"src":"\tdojo.lang.assertType(keyword, String, {optional: true});\n\tif (!this._ourCapabilities) {\n\t\tthis._ourCapabilities = {\n\t\t\ttransactions: false,\n\t\t\tundo: false,\n\t\t\tlogin: false,\n\t\t\tversioning: false,\n\t\t\tanonymousRead: true,\n\t\t\tanonymousWrite: false,\n\t\t\tpermissions: false,\n\t\t\tqueries: false,\n\t\t\tstrongTyping: false,\n\t\t\tdatatypes: [String, Date, Number]\n\t\t};\n\t}\n\tif (keyword) {\n\t\treturn this._ourCapabilities[keyword];\n\t} else {\n\t\treturn this._ourCapabilities;\n\t}","this":"dojo.data.provider.FlatFile"}}},"dojo.data.provider.FlatFile.registerAttribute":{"_":{"meta":{"summary":"","parameters":{"attributeId":{"type":"string or dojo.data.Attribute"}},"src":"\tvar registeredAttribute = this.getAttribute(attributeId);\n\tif (!registeredAttribute) {\n\t\tvar newAttribute = new dojo.data.Attribute(this, attributeId);\n\t\tthis._dictionaryOfAttributes[attributeId] = newAttribute;\n\t\tregisteredAttribute = newAttribute;\n\t}\n\treturn registeredAttribute; \/\/ dojo.data.Attribute","returns":"dojo.data.Attribute","this":"dojo.data.provider.FlatFile"}}},"dojo.data.provider.FlatFile.getAttribute":{"_":{"meta":{"summary":"","parameters":{"attributeId":{"type":"string or dojo.data.Attribute"}},"src":"\tvar attribute = (this._dictionaryOfAttributes[attributeId] || null);\n\treturn attribute; \/\/ dojo.data.Attribute or null","returns":"dojo.data.Attribute or null","this":"dojo.data.provider.FlatFile"}}},"dojo.data.provider.FlatFile.getAttributes":{"_":{"meta":{"summary":"","src":"\tvar arrayOfAttributes = [];\n\tfor (var key in this._dictionaryOfAttributes) {\n\t\tvar attribute = this._dictionaryOfAttributes[key];\n\t\tarrayOfAttributes.push(attribute);\n\t}\n\treturn arrayOfAttributes; \/\/ Array","returns":"Array","this":"dojo.data.provider.FlatFile"}}},"dojo.data.provider.FlatFile.fetchArray":{"_":{"meta":{"summary":"Returns an Array containing all of the Items. Array","parameters":{"query":{"type":""}},"src":"","returns":"Array","this":"dojo.data.provider.FlatFile"}}},"dojo.data.provider.FlatFile.fetchResultSet":{"_":{"meta":{"summary":"Returns a ResultSet containing all of the Items.","parameters":{"query":{"type":""}},"src":"\t\tthis._resultSet = new dojo.data.ResultSet(this, this.fetchArray(query));\n\t}\n\treturn this._resultSet; \/\/ dojo.data.ResultSet","returns":"dojo.data.ResultSet","this":"dojo.data.provider.FlatFile"}}},"dojo.data.provider.FlatFile._newItem":{"_":{"meta":{"summary":"","src":"\tvar item = new dojo.data.Item(this);\n\tthis._arrayOfItems.push(item);\n\treturn item; \/\/ dojo.data.Item","returns":"dojo.data.Item","this":"dojo.data.provider.FlatFile"}}},"dojo.data.provider.FlatFile._newAttribute":{"_":{"meta":{"summary":"","parameters":{"attributeId":{"type":"String"}},"src":"\tdojo.lang.assertType(attributeId, String);\n\tdojo.lang.assert(this.getAttribute(attributeId) === null);\n\tvar attribute = new dojo.data.Attribute(this, attributeId);\n\tthis._dictionaryOfAttributes[attributeId] = attribute;\n\treturn attribute; \/\/ dojo.data.Attribute","returns":"dojo.data.Attribute","this":"dojo.data.provider.FlatFile"}}},"dojo.data.provider.Base._getResultSets":{"_":{"meta":{"summary":"","src":"\treturn [this._resultSet];         ","returns":"Array","this":"dojo.data.provider.Base"}}}}}},"dojo.data.provider.JotSpot":{"meta":{"requires":{"common":["dojo.data.provider.Base"]},"methods":{"dojo.data.provider.JotSpot":{"_":{"meta":{"summary":" A JotSpot Data Provider knows how to read data from a JotSpot data store and make the contents accessable as dojo.data.Items.","src":"","inherits":["dojo.data.provider.Base"]}}}}}},"dojo.data.provider.MySql":{"meta":{"requires":{"common":["dojo.data.provider.Base"]},"methods":{"dojo.data.provider.MySql":{"_":{"meta":{"summary":" A MySql Data Provider knows how to connect to a MySQL database on a server and and make the content records available as dojo.data.Items.","src":"","inherits":["dojo.data.provider.Base"]}}}}}}}