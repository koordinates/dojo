{"dojo.math.curves":{"meta":{"requires":{"common":["dojo.math"]},"methods":{"this.getValue":{"_":{"meta":{"summary":"","parameters":{"n":{"type":""},"step":{"type":""}},"src":"\t\t\tvar found = false, value = 0;\n\t\t\tfor(var i = 0; i < ranges.length; i++) {\n\t\t\t\tvar r = ranges[i];\n\t\t\t\t\/\/w(r.join(\" ... \"));\n\t\t\t\tif( n >= r[0] && n < r[1] ) {\n\t\t\t\t\tvar subN = (n - r[0]) \/ r[2];\n\t\t\t\t\tvalue = curves[i].getValue(subN);\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\/\/ FIXME: Do we want to assume we're at the end?\n\t\t\tif( !found ) {\n\t\t\t\tvalue = curves[curves.length-1].getValue(1);\n\t\t\t}\n\n\t\t\tfor(var j = 0; j < i; j++) {\n\t\t\t\tvalue = dojo.math.points.translate(value, curves[j].getValue(1));\n\t\t\t}\n\t\t\treturn value;","returns":"mixed"}}},"this.add":{"_":{"meta":{"summary":"","parameters":{"curve":{"type":""},"weight":{"type":""}},"src":"\t\t\tif( weight < 0 ) { dojo.raise(\"dojo.math.curves.Path.add: weight cannot be less than 0\"); }\n\t\t\tcurves.push(curve);\n\t\t\tweights.push(weight);\n\t\t\ttotalWeight += weight;\n\t\t\tcomputeRanges();"}}},"this.remove":{"_":{"meta":{"summary":"","parameters":{"curve":{"type":""}},"src":"\t\t\tfor(var i = 0; i < curves.length; i++) {\n\t\t\t\tif( curves[i] == curve ) {\n\t\t\t\t\tcurves.splice(i, 1);\n\t\t\t\t\ttotalWeight -= weights.splice(i, 1)[0];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcomputeRanges();"}}},"this.removeAll":{"_":{"meta":{"summary":"","src":"\t\t\tcurves = [];\n\t\t\tweights = [];\n\t\t\ttotalWeight = 0;"}}},"computeRanges":{"_":{"meta":{"summary":"","src":"\t\t\tvar start = 0;\n\t\t\tfor(var i = 0; i < weights.length; i++) {\n\t\t\t\tvar end = start + weights[i] \/ totalWeight;\n\t\t\t\tvar len = end - start;\n\t\t\t\tranges[i] = [start, end, len];\n\t\t\t\tstart = end;\n\t\t\t}"}}}}}},"dojo.math.matrix":{"meta":{"methods":{"dojo.math.matrix.multiply":{"_":{"meta":{"summary":"","parameters":{"a":{"type":""},"b":{"type":""}},"src":"\ta = dojo.math.matrix.copy(a);\n\tb = dojo.math.matrix.copy(b);\n\n\tvar ax = a[0].length;\n\tvar ay = a.length;\n\tvar bx = b[0].length;\n\tvar by = b.length;\n\n\tif (ax != by){\n\t\tdojo.debug(\"Can't multiply matricies of sizes \"+ax+','+ay+' and '+bx+','+by);\n\t\treturn [[0]];\n\t}\n\n\tvar c = [];\n\n\tfor(var k=0; k<ay; k++){\n\t\tc[k] = [];\n\t\tfor(var i=0; i<bx; i++){\n\n\t\t\tc[k][i] = 0;\n\n\t\t\tfor(var m=0; m<ax; m++){\n\n\t\t\t\tc[k][i] += a[k][m]*b[m][i];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn c;"}}},"dojo.math.matrix.inverse":{"_":{"meta":{"summary":"","parameters":{"a":{"type":""}},"src":"\ta = dojo.math.matrix.copy(a);\n\n\t\/\/ Formula used to Calculate Inverse:\n\t\/\/ inv(A) = 1\/det(A) * adj(A)\n\n\tvar tms = a.length;\n\n\tvar m = dojo.math.matrix.create(tms, tms);\n\tvar mm = dojo.math.matrix.adjoint(a);\n\n\tvar det = dojo.math.matrix.determinant(a);\n\tvar dd = 0;\n\n\tif (det == 0){\n\t\tdojo.debug(\"Determinant Equals 0, Not Invertible.\");\n\t\treturn [[0]];\n\t}else{\n\t\tdd = 1 \/ det;\n\t}\n\n\tfor (var i = 0; i < tms; i++)\n\t\tfor (var j = 0; j < tms; j++) {\n\t\t\tm[i][j] = dd * mm[i][j];\n\t\t}\n\n\treturn m;"}}},"dojo.math.matrix.determinant":{"_":{"meta":{"summary":"","parameters":{"a":{"type":""}},"src":"\ta = dojo.math.matrix.copy(a);\n\n\tif (a.length != a[0].length){\n\t\tdojo.debug(\"Can't calculate the determiant of a non-squre matrix!\");\n\t\treturn 0;\n\t}\n\n\tvar tms = a.length;\n\tvar det = 1;\n\n\tvar b = dojo.math.matrix.upperTriangle(a);\n\n\tfor (var i=0; i < tms; i++){\n\t\tdet *= b[i][i];\n\t}\n\n\tdet = det * dojo.math.matrix.iDF;\n\n\treturn det;"}}},"dojo.math.matrix.upperTriangle":{"_":{"meta":{"summary":"","parameters":{"m":{"type":""}},"src":"\tm = dojo.math.matrix.copy(m);\n\n\tvar f1 = 0;\n\tvar temp = 0;\n\tvar tms = m.length;\n\tvar v = 1;\n\n\tdojo.math.matrix.iDF = 1;\n\n\tfor (var col = 0; col < tms - 1; col++) {\n\t\tfor (var row = col + 1; row < tms; row++) {\n\t\t\tv = 1;\n\n\t\t\tvar stop_loop = 0;\n\n\t\t\t\/\/ check if 0 in diagonal\n \t\t\twhile ((m[col][col] == 0) && !stop_loop){\n\n\t\t\t\t\/\/ if so switch until not\n\t\t\t\tif (col + v >= tms){\n\n\t\t\t\t\t\/\/ check if switched all rows\n\t\t\t\t\tdojo.math.matrix.iDF = 0;\n\t\t\t\t\tstop_loop = 1;\n\t\t\t\t}else{\n\t\t\t\t\tfor (var c = 0; c < tms; c++) {\n\t\t\t\t\t\ttemp = m[col][c];\n\t\t\t\t\t\tm[col][c] = m[col + v][c]; \/\/ switch rows\n\t\t\t\t\t\tm[col + v][c] = temp;\n\t\t\t\t\t}\n\t\t\t\t\tv++; \/\/ count row switchs\n\t\t\t\t\tdojo.math.matrix.iDF *= -1; \/\/ each switch changes determinant factor\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (m[col][col] != 0) {\n\t\t\t\tf1 = (-1) * m[row][col] \/ m[col][col];\n\t\t\t\tfor (var i = col; i < tms; i++) {\n\t\t\t\t\tm[row][i] = f1 * m[col][i] + m[row][i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn m;"}}},"dojo.math.matrix.create":{"_":{"meta":{"summary":"","parameters":{"a":{"type":""},"b":{"type":""}},"src":"\tvar m = [];\n\tfor(var i=0; i<b; i++){\n\t\tm[i] = [];\n\t\tfor(var j=0; j<a; j++){\n\t\t\tm[i][j] = 0;\n\t\t}\n\t}\n\treturn m;"}}},"dojo.math.matrix.adjoint":{"_":{"meta":{"summary":"","parameters":{"a":{"type":""}},"src":"\ta = dojo.math.matrix.copy(a);\n\n\tvar tms = a.length;\n\n\tif (a.length != a[0].length){\n\t\tdojo.debug(\"Can't find the adjoint of a non-square matrix\");\n\t\treturn [[0]];\n\t}\n\n\tif (tms == 1){\n\t\tdojo.debug(\"Can't find the adjoint of a 1x1 matrix\");\n\t\treturn [[0]];\n\t}\n\n\tvar m = dojo.math.matrix.create(tms, tms);\n\n\tvar ii = 0;\n\tvar jj = 0;\n\tvar ia = 0;\n\tvar ja = 0;\n\tvar det = 0;\n\n\tfor (var i = 0; i < tms; i++){\n\t\tfor (var j = 0; j < tms; j++){\n\n\t\t\tia = 0;\n\t\t\tja = 0;\n\n\t\t\tvar ap = dojo.math.matrix.create(tms-1, tms-1);\n\n\t\t\tfor (ii = 0; ii < tms; ii++) {\n\t\t\t\tfor (jj = 0; jj < tms; jj++) {\n\n\t\t\t\t\tif ((ii != i) && (jj != j)) {\n\t\t\t\t\t\tap[ia][ja] = a[ii][jj];\n\t\t\t\t\t\tja++;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ((ii != i) && (jj != j)) {\n\t\t\t\t\tia++;\n\t\t\t\t}\n\t\t\t\tja = 0;\n\t\t\t}\n\n\t\t\tdet = dojo.math.matrix.determinant(ap);\n\t\t\tm[i][j] = Math.pow(-1 , (i + j)) * det;\n\t\t}\n\t}\n\n\tm = dojo.math.matrix.transpose(m);\n\n\treturn m;"}}},"dojo.math.matrix.transpose":{"_":{"meta":{"summary":"","parameters":{"a":{"type":""}},"src":"\ta = dojo.math.matrix.copy(a);\n\n\tvar m = dojo.math.matrix.create(a.length, a[0].length);\n\n\tfor (var i = 0; i < a.length; i++)\n\t\tfor (var j = 0; j < a[i].length; j++)\n\t\t\tm[j][i] = a[i][j];\n\treturn m;"}}},"dojo.math.matrix.format":{"_":{"meta":{"summary":"","parameters":{"a":{"type":""}},"src":"\tfunction format_int(x){\n\t\tvar dp = 5;\n\t\tvar fac = Math.pow(10 , dp);\n\t\tvar a = Math.round(x*fac)\/fac;\n\t\tvar b = a.toString();\n\t\tif (b.charAt(0) != '-'){ b = ' ' + b;}\n\t\tvar has_dp = 0;\n\t\tfor(var i=1; i<b.length; i++){\n\t\t\tif (b.charAt(i) == '.'){ has_dp = 1; }\n\t\t}\n\t\tif (!has_dp){ b += '.'; }\n\t\twhile(b.length < dp+3){ b += '0'; }\n\t\treturn b;\n\t}\n\n\tvar ya = a.length;\n\tvar xa = a[0].length;\n\n\tvar buffer = '';\n\n\tfor (var y=0; y<ya; y++){\n\t\tbuffer += '| ';\n\t\tfor (var x=0; x<xa; x++){\n\t\t\tbuffer += format_int(a[y][x]) + ' ';\n\t\t}\n\t\tbuffer += '|\\n';\n\t}\n\n\treturn buffer;"}}},"dojo.math.matrix.copy":{"_":{"meta":{"summary":"","parameters":{"a":{"type":""}},"src":"\tvar ya = a.length;\n\tvar xa = a[0].length;\n\n\tvar m = dojo.math.matrix.create(xa, ya);\n\n\tfor (var y=0; y<ya; y++){\n\t\tfor (var x=0; x<xa; x++){\n\t\t\tm[y][x] = a[y][x];\n\t\t}\n\t}\n\n\treturn m;"}}},"dojo.math.matrix.scale":{"_":{"meta":{"summary":"","parameters":{"k":{"type":""},"a":{"type":""}},"src":"\ta = dojo.math.matrix.copy(a);\n\n\tvar ya = a.length;\n\tvar xa = a[0].length;\n\n\tfor (var y=0; y<ya; y++){\n\t\tfor (var x=0; x<xa; x++){\n\t\t\ta[y][x] *= k;\n\t\t}\n\t}\n\n\treturn a;"}}}}}},"dojo.math.points":{"meta":{"requires":{"common":["dojo.math"]}}},"dojo.math.transform":{"meta":{"requires":{"common":["dojo.lang"]},"methods":{"dojo.math.Matrix":{"_":{"meta":{"summary":"","src":"\tthis.a=this.e=this.i=1;\n\tthis.b=this.c=this.d=this.f=this.g=this.h=0;","this_variables":["a","b"],"object_inherits":["reset:function(){\n\t\tthis.a=this.e=this.i=1;\n\t\tthis.b=this.c=this.d=this.f=this.g=this.h=0;\n\t},\n\tapply:function(point){\n\t\treturn {\n\t\t\tx: this.a*point.x + this.b*point.y + this.c,\n\t\t\ty: this.d*point.x + this.e*point.y + this.f\n\t\t};\n\t}\n}"]}}},"dojo.math.Transform":{"_":{"meta":{"summary":"","parameters":{"matrix":{"type":""}},"src":"\tthis.transformations=[];\n\tthis.transformations.push(matrix||new dojo.math.Matrix());","this_variables":["transformations"],"inherits":["reset:function(){\n\t\tthis.transformations=[];\n\t},\n\tadd:function(matrix){\n\t\tthis.transformations.push(matrix);\n\t},\n\tflatten:function(){\n\t\tvar matrix=this.get();\n\t\tthis.transformations=[ matrix ];\n\t},\n\tget:function(){\n\t\tvar idx=0;\n\t\tvar matrix=this.transformations[idx++];\n\t\twhile(this.transformations.length>idx){\n\t\t\tvar operand=dojo.math.Matrix();\n\t\t\tvar current=this.transformations[idx++];\n\t\t\toperand.a=matrix.a*current.a + matrix.b*current.d + matrix.c*current.g;\n\t\t\toperand.b=matrix.a*current.b + matrix.b*current.e + matrix.c*current.h;\n\t\t\toperand.c=matrix.a*current.c + matrix.b*current.f + matrix.c*current.i;\n\t\t\toperand.d=matrix.d*current.a + matrix.e*current.d + matrix.f*current.g;\n\t\t\toperand.e=matrix.d*current.b + matrix.e*current.e + matrix.f*current.h;\n\t\t\toperand.f=matrix.d*current.c + matrix.e*current.f + matrix.f*current.i;\n\t\t\toperand.g=matrix.g*current.a + matrix.h*current.d + matrix.i*current.g;\n\t\t\toperand.h=matrix.g*current.b + matrix.h*current.e + matrix.i*current.h;\n\t\t\toperand.i=matrix.g*current.c + matrix.h*current.f + matrix.i*current.i;\n\t\t\tmatrix=operand;\n\t\t}\n\t\treturn matrix;\n\t},\n\tpeek:function(){\n\t\treturn this.transformations[0];\n\t},\n\trotate:function(angle){\n\t\tangle=dojo.math.degToRad(angle);\n\t\tvar matrix=dojo.math.Matrix();\n\t\tmatrix.a=matrix.e=Math.cos(angle);\n\t\tmatrix.d=Math.sin(angle);\n\t\tmatrix.b=-1*matrix.d;\n\t\tthis.add(matrix);\n\t},\n\trotateAt:function(angle, cx, cy){\n\t\tthis.translate(cx, cy);\n\t\tthis.rotate(angle);\n\t\tthis.translate(-cx, -cy);\n\t},\n\tscale:function(sx, sy){\n\t\tvar matrix=dojo.math.Matrix();\n\t\tmatrix.a=sx;\n\t\tmatrix.e=sy;\n\t\tthis.add(matrix);\n\t},\n\tskewX:function(angle){\n\t\tangle=dojo.math.degToRad(angle);\n\t\tvar matrix=dojo.math.Matrix();\n\t\tmatrix.b=Math.tan(angle);\n\t\tthis.add(matrix);\n\t},\n\tskewY:function(angle){\n\t\tangle=dojo.math.degToRad(angle);\n\t\tvar matrix=dojo.math.Matrix();\n\t\tmatrix.d=Math.tan(angle);\n\t\tthis.add(matrix);\n\t},\n\ttranslate:function(tx, ty){\n\t\tvar matrix=dojo.math.Matrix();\n\t\tmatrix.c=tx;\n\t\tmatrix.f=ty;\n\t\tthis.add(matrix);\n\t}\n}"],"this_inherits":["reset:function(){\n\t\tthis.transformations=[];\n\t},\n\tadd:function(matrix){\n\t\tthis.transformations.push(matrix);\n\t},\n\tflatten:function(){\n\t\tvar matrix=this.get();\n\t\tthis.transformations=[ matrix ];\n\t},\n\tget:function(){\n\t\tvar idx=0;\n\t\tvar matrix=this.transformations[idx++];\n\t\twhile(this.transformations.length>idx){\n\t\t\tvar operand=dojo.math.Matrix();\n\t\t\tvar current=this.transformations[idx++];\n\t\t\toperand.a=matrix.a*current.a + matrix.b*current.d + matrix.c*current.g;\n\t\t\toperand.b=matrix.a*current.b + matrix.b*current.e + matrix.c*current.h;\n\t\t\toperand.c=matrix.a*current.c + matrix.b*current.f + matrix.c*current.i;\n\t\t\toperand.d=matrix.d*current.a + matrix.e*current.d + matrix.f*current.g;\n\t\t\toperand.e=matrix.d*current.b + matrix.e*current.e + matrix.f*current.h;\n\t\t\toperand.f=matrix.d*current.c + matrix.e*current.f + matrix.f*current.i;\n\t\t\toperand.g=matrix.g*current.a + matrix.h*current.d + matrix.i*current.g;\n\t\t\toperand.h=matrix.g*current.b + matrix.h*current.e + matrix.i*current.h;\n\t\t\toperand.i=matrix.g*current.c + matrix.h*current.f + matrix.i*current.i;\n\t\t\tmatrix=operand;\n\t\t}\n\t\treturn matrix;\n\t},\n\tpeek:function(){\n\t\treturn this.transformations[0];\n\t},\n\trotate:function(angle){\n\t\tangle=dojo.math.degToRad(angle);\n\t\tvar matrix=dojo.math.Matrix();\n\t\tmatrix.a=matrix.e=Math.cos(angle);\n\t\tmatrix.d=Math.sin(angle);\n\t\tmatrix.b=-1*matrix.d;\n\t\tthis.add(matrix);\n\t},\n\trotateAt:function(angle, cx, cy){\n\t\tthis.translate(cx, cy);\n\t\tthis.rotate(angle);\n\t\tthis.translate(-cx, -cy);\n\t},\n\tscale:function(sx, sy){\n\t\tvar matrix=dojo.math.Matrix();\n\t\tmatrix.a=sx;\n\t\tmatrix.e=sy;\n\t\tthis.add(matrix);\n\t},\n\tskewX:function(angle){\n\t\tangle=dojo.math.degToRad(angle);\n\t\tvar matrix=dojo.math.Matrix();\n\t\tmatrix.b=Math.tan(angle);\n\t\tthis.add(matrix);\n\t},\n\tskewY:function(angle){\n\t\tangle=dojo.math.degToRad(angle);\n\t\tvar matrix=dojo.math.Matrix();\n\t\tmatrix.d=Math.tan(angle);\n\t\tthis.add(matrix);\n\t},\n\ttranslate:function(tx, ty){\n\t\tvar matrix=dojo.math.Matrix();\n\t\tmatrix.c=tx;\n\t\tmatrix.f=ty;\n\t\tthis.add(matrix);\n\t}\n}"]}}}}}},"dojo.math":{"meta":{"methods":{"dojo.math.degToRad":{"_":{"meta":{"summary":"","parameters":{"x":{"type":""}},"src":"                                    return (x*Math.PI) \/ 180;   "}}},"dojo.math.radToDeg":{"_":{"meta":{"summary":"","parameters":{"x":{"type":""}},"src":"                                    return (x*180) \/ Math.PI;   "}}},"dojo.math.factorial":{"_":{"meta":{"summary":"","parameters":{"n":{"type":""}},"src":"\tif(n<1){ return 0; }\n\tvar retVal = 1;\n\tfor(var i=1;i<=n;i++){ retVal *= i; }\n\treturn retVal;"}}},"dojo.math.permutations":{"_":{"meta":{"summary":"","parameters":{"n":{"type":""},"":{"type":""}},"src":"\tif(n==0 || k==0) return 1;\n\treturn (dojo.math.factorial(n) \/ dojo.math.factorial(n-k));"}}},"dojo.math.combinations":{"_":{"meta":{"summary":"","parameters":{"n":{"type":""},"":{"type":""}},"src":"\tif(n==0 || r==0) return 1;\n\treturn (dojo.math.factorial(n) \/ (dojo.math.factorial(n-r) * dojo.math.factorial(r)));"}}},"dojo.math.bernstein":{"_":{"meta":{"summary":"","parameters":{"t":{"type":""},"":{"type":""}},"src":"\treturn (dojo.math.combinations(n,i) * Math.pow(t,i) * Math.pow(1-t,n-i));"}}},"dojo.math.gaussianRandom":{"_":{"meta":{"summary":"","src":"\tvar k = 2;\n\tdo {\n\t\tvar i = 2 * Math.random() - 1;\n\t\tvar j = 2 * Math.random() - 1;\n\t\tk = i * i + j * j;\n\t} while (k >= 1);\n\tk = Math.sqrt((-2 * Math.log(k)) \/ k);\n\treturn i * k;"}}},"dojo.math.mean":{"_":{"meta":{"summary":"","src":"\tvar array = dojo.lang.isArray(arguments[0]) ? arguments[0] : arguments;\n\tvar mean = 0;\n\tfor (var i = 0; i < array.length; i++) { mean += array[i]; }\n\treturn mean \/ array.length;"}}},"dojo.math.round":{"_":{"meta":{"summary":"","parameters":{"number":{"type":""},"places":{"type":""}},"src":"\tif (!places) { var shift = 1; }\n\telse { var shift = Math.pow(10, places); }\n\treturn Math.round(number * shift) \/ shift;"}}},"dojo.math.sd":{"_":{"meta":{"summary":"","src":"\tvar array = dojo.lang.isArray(arguments[0]) ? arguments[0] : arguments;\n\treturn Math.sqrt(dojo.math.variance(array));"}}},"dojo.math.variance":{"_":{"meta":{"summary":"","src":"\tvar array = dojo.lang.isArray(arguments[0]) ? arguments[0] : arguments;\n\tvar mean = 0, squares = 0;\n\tfor (var i = 0; i < array.length; i++) {\n\t\tmean += array[i];\n\t\tsquares += Math.pow(array[i], 2);\n\t}\n\treturn (squares \/ array.length)\n\t\t- Math.pow(mean \/ array.length, 2);"}}},"dojo.math.range":{"_":{"meta":{"summary":"","parameters":{"a":{"type":""},"b":{"type":""},"step":{"type":""}},"src":"    if(arguments.length < 2) {\n        b = a;\n        a = 0;\n    }\n    if(arguments.length < 3) {\n        step = 1;\n    }\n\n    var range = [];\n    if(step > 0) {\n        for(var i = a; i < b; i += step) {\n            range.push(i);\n        }\n    } else if(step < 0) {\n        for(var i = a; i > b; i += step) {\n            range.push(i);\n        }\n    } else {\n        throw new Error(\"dojo.math.range: step must be non-zero\");\n    }\n    return range;"}}}}}}}