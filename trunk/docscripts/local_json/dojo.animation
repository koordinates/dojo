{"dojo.animation.Animation":{"meta":{"requires":{"common":["dojo.animation.AnimationEvent","dojo.lang.func","dojo.math","dojo.math.curves"]},"functions":{"dojo.animation.Animation":{"_":{"meta":{"summary":"Animation object iterates a set of numbers over a curve for a given amount of time, calling 'onAnimate' at each step.","parameters":{"curve":{"type":"dojo.math.curves.*"},"duration":{"type":"int"},"accel":{"type":"Decimal?"},"repeatCount":{"type":"int?"},"rate":{"type":"int?"}},"description":"Calls the following events: \"onBegin\", \"onAnimate\", \"onEnd\", \"onPlay\", \"onPause\", \"onStop\" If the animation implements a \"handler\" function, that will be called before each event is called.","src":"\t\t\/\/ curve: Array\n\t\t\/\/ id: i\n\t\tcurve = new dojo.math.curves.Line(curve[0], curve[1]);\n\t}\n\tthis.curve = curve;\n\tthis.duration = duration;\n\tthis.repeatCount = repeatCount || 0;\n\tthis.rate = rate || 25;\n\tif(accel) {\n\t\t\/\/ accel: Decimal\n\t\t\/\/ id: j\n\t\tif(dojo.lang.isFunction(accel.getValue)) {\n\t\t\t\/\/ accel: dojo.math.curves.CatmullRom\n\t\t\t\/\/ id: k\n\t\t\tthis.accel = accel;\n\t\t} else {\n\t\t\tvar i = 0.35*accel+0.5;\t\/\/ 0.15 <= i <= 0.85\n\t\t\tthis.accel = new dojo.math.curves.CatmullRom([[0], [i], [1]], 0.45);\n\t\t}\n\t}","this_variables":["curve","duration","repeatCount","rate","accel","_active","_paused","_percent","_startTime","_endTime","_lastFrame","_startRepeatCount","onPlay","_paused","onPause","_active","_paused","_percent","_active","_paused","_lastFrame","_percent","_timer","_active","repeatCount","_startRepeatCount"],"protovariables":{"curve":"","duration":"","repeatCount":"","accel":"","onBegin":"","onAnimate":"","onEnd":"","onPlay":"","onPause":"","onStop":"","handler":"","_animSequence":"","_startTime":"","_endTime":"","_lastFrame":"","_timer":"","_percent":"","_active":"","_paused":"","_startRepeatCount":""}}}},"dojo.animation.Animation.play":{"_":{"meta":{"summary":"Play the animation. goToStart: If true, will restart the animation from the beginning. Otherwise, starts from current play counter.","parameters":{"gotoStart":{"type":"Boolean?","description":"Resets the animation"}},"description":"<p>Test\n<\/p>","src":"\t\t\tclearTimeout(this._timer);\n\t\t\tthis._active = false;\n\t\t\tthis._paused = false;\n\t\t\tthis._percent = 0;\n\t\t} else if( this._active && !this._paused ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._startTime = new Date().valueOf();\n\t\tif( this._paused ) {\n\t\t\tthis._startTime -= (this.duration * this._percent \/ 100);\n\t\t}\n\t\tthis._endTime = this._startTime + this.duration;\n\t\tthis._lastFrame = this._startTime;\n\n\t\tvar e = new dojo.animation.AnimationEvent(this, null, this.curve.getValue(this._percent),\n\t\t\tthis._startTime, this._startTime, this._endTime, this.duration, this._percent, 0);\n\n\t\tthis._active = true;\n\t\tthis._paused = false;\n\n\t\tif( this._percent == 0 ) {\n\t\t\tif(!this._startRepeatCount) {\n\t\t\t\tthis._startRepeatCount = this.repeatCount;\n\t\t\t}\n\t\t\te.type = \"begin\";\n\t\t\tif(typeof this.handler == \"function\") { this.handler(e); }\n\t\t\tif(typeof this.onBegin == \"function\") { this.onBegin(e); }\n\t\t}\n\n\t\te.type = \"play\";\n\t\tif(typeof this.handler == \"function\") { this.handler(e); }\n\t\tif(typeof this.onPlay == \"function\") { this.onPlay(e); }\n\n\t\tif(this._animSequence) { this._animSequence._setCurrent(this); }\n\n\t\tthis._cycle();","this":"dojo.animation.Animation","returns":{"descriptionscription":null}}}},"dojo.animation.Animation.pause":{"_":{"meta":{"summary":"Temporarily stop the animation, leaving the play counter at the current location. Resume later with sequence.play()","description":"Sends an \"onPause\" AnimationEvent to any observers.","src":"\t\tif( !this._active ) { return; }\n\t\tthis._paused = true;\n\t\tvar e = new dojo.animation.AnimationEvent(this, \"pause\", this.curve.getValue(this._percent),\n\t\t\tthis._startTime, new Date().valueOf(), this._endTime, this.duration, this._percent, 0);\n\t\tif(typeof this.handler == \"function\") { this.handler(e); }\n\t\tif(typeof this.onPause == \"function\") { this.onPause(e); }","this":"dojo.animation.Animation"}}},"dojo.animation.Animation.playPause":{"_":{"meta":{"summary":"Toggle between play and paused states.","src":"\t\t\tthis.play();\n\t\t} else {\n\t\t\tthis.pause();\n\t\t}","this":"dojo.animation.Animation"}}},"dojo.animation.Animation.gotoPercent":{"_":{"meta":{"summary":"Set the play counter at a certain point in the animation.","parameters":{"pct":{"type":"int"},"andPlay":{"type":"Boolean"}},"src":"\t\tthis._active = true;\n\t\tthis._paused = true;\n\t\tthis._percent = pct;\n\t\tif( andPlay ) { this.play(); }","this":"dojo.animation.Animation"}}},"dojo.animation.Animation.stop":{"_":{"meta":{"summary":"Stop the animation.","parameters":{"gotoEnd":{"type":"Boolean?"}},"description":"Sends an \"onStop\" AnimationEvent to any observers.","src":"\t\tvar step = this._percent \/ 100;\n\t\tif( gotoEnd ) {\n\t\t\tstep = 1;\n\t\t}\n\t\tvar e = new dojo.animation.AnimationEvent(this, \"stop\", this.curve.getValue(step),\n\t\t\tthis._startTime, new Date().valueOf(), this._endTime, this.duration, this._percent);\n\t\tif(typeof this.handler == \"function\") { this.handler(e); }\n\t\tif(typeof this.onStop == \"function\") { this.onStop(e); }\n\t\tthis._active = false;\n\t\tthis._paused = false;","this":"dojo.animation.Animation"}}},"dojo.animation.Animation.status":{"_":{"meta":{"summary":"Return the status of the animation.","description":"Returns one of \"playing\", \"paused\" or \"stopped\".","src":"\t\t\treturn this._paused ? \"paused\" : \"playing\";\t\/* String *\/\n\t\t} else {\n\t\t\treturn \"stopped\";\t\/* String *\/\n\t\t}","returns":"String *\/","this":"dojo.animation.Animation"}}},"dojo.animation.Animation._cycle":{"_":{"meta":{"summary":"Perform once 'cycle' or step of the animation.","src":"\t\tif( this._active ) {\n\t\t\tvar curr = new Date().valueOf();\n\t\t\tvar step = (curr - this._startTime) \/ (this._endTime - this._startTime);\n\t\t\tvar fps = 1000 \/ (curr - this._lastFrame);\n\t\t\tthis._lastFrame = curr;\n\n\t\t\tif( step >= 1 ) {\n\t\t\t\tstep = 1;\n\t\t\t\tthis._percent = 100;\n\t\t\t} else {\n\t\t\t\tthis._percent = step * 100;\n\t\t\t}\n\t\t\t\n\t\t\t\/\/ Perform accelleration\n\t\t\tif(this.accel && this.accel.getValue) {\n\t\t\t\tstep = this.accel.getValue(step);\n\t\t\t}\n\n\t\t\tvar e = new dojo.animation.AnimationEvent(this, \"animate\", this.curve.getValue(step),\n\t\t\t\tthis._startTime, curr, this._endTime, this.duration, this._percent, Math.round(fps));\n\n\t\t\tif(typeof this.handler == \"function\") { this.handler(e); }\n\t\t\tif(typeof this.onAnimate == \"function\") { this.onAnimate(e); }\n\n\t\t\tif( step < 1 ) {\n\t\t\t\tthis._timer = setTimeout(dojo.lang.hitch(this, \"_cycle\"), this.rate);\n\t\t\t} else {\n\t\t\t\te.type = \"end\";\n\t\t\t\tthis._active = false;\n\t\t\t\tif(typeof this.handler == \"function\") { this.handler(e); }\n\t\t\t\tif(typeof this.onEnd == \"function\") { this.onEnd(e); }\n\n\t\t\t\tif( this.repeatCount > 0 ) {\n\t\t\t\t\tthis.repeatCount--;\n\t\t\t\t\tthis.play(true);\n\t\t\t\t} else if( this.repeatCount == -1 ) {\n\t\t\t\t\tthis.play(true);\n\t\t\t\t} else {\n\t\t\t\t\tif(this._startRepeatCount) {\n\t\t\t\t\t\tthis.repeatCount = this._startRepeatCount;\n\t\t\t\t\t\tthis._startRepeatCount = 0;\n\t\t\t\t\t}\n\t\t\t\t\tif( this._animSequence ) {\n\t\t\t\t\t\tthis._animSequence._playNext();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}","this":"dojo.animation.Animation"}}}},"description":"Description\n"}},"dojo.animation.AnimationEvent":{"meta":{"requires":{"common":["dojo.lang.common"]},"functions":{"dojo.animation.AnimationEvent":{"_":{"meta":{"summary":"Event sent at various points during an Animation.","parameters":{"animation":{"type":"dojo.animation.Animation"},"type":{"type":"String"},"coords":{"type":"int[]"},"startTime":{"type":"int"},"currentTime":{"type":"int"},"endTime":{"type":"int"},"duration":{"type":"int"},"percent":{"type":"int"},"fps":{"type":"int?"}},"description":"The AnimationEvent has public properties of the same name as all constructor arguments, plus \"x\", \"y\" and \"z\". \"animate\", \"begin\", \"end\", \"play\", \"pause\", \"stop\"","src":"\tthis.animation = animation;\n\n\tthis.coords = coords;\n\tthis.x = coords[0];\n\tthis.y = coords[1];\n\tthis.z = coords[2];\n\n\tthis.startTime = startTime;\n\tthis.currentTime = currentTime;\n\tthis.endTime = endTime;\n\n\tthis.duration = duration;\n\tthis.percent = percent;\n\tthis.fps = fps;","this_variables":["type","animation","coords","x","y","z","startTime","currentTime","endTime","duration","percent","fps"]}}}}}},"dojo.animation.AnimationSequence":{"meta":{"requires":{"common":["dojo.animation.AnimationEvent","dojo.animation.Animation"]},"functions":{"dojo.animation.AnimationSequence":{"_":{"meta":{"summary":"Sequence of Animations, played one after the other.","parameters":{"repeatCount":{"type":"int?"}},"description":"Calls the following events: \"onBegin\", \"onEnd\", \"onNext\" If the animation implements a \"handler\" function, that will be called before each event is called.","src":"\tthis.repeatCount = repeatCount || 0;","this_variables":["_anims","repeatCount","_anims","_currAnim","_currAnim","onBegin","_currAnim","_currAnim","_currAnim","_currAnim"],"protovariables":{"repeatCount":"","_anims":"","_currAnim":"","onBegin":"","onEnd":"","onNext":"","handler":""}}}},"dojo.animation.AnimationSequence.add":{"_":{"meta":{"summary":"Add one or more Animations to the sequence.","description":"args: Animations (dojo.animation.Animation) to add to the sequence.","src":"\t\t\tthis._anims.push(arguments[i]);\n\t\t\targuments[i]._animSequence = this;\n\t\t}","this":"dojo.animation.AnimationSequence"}}},"dojo.animation.AnimationSequence.remove":{"_":{"meta":{"summary":"Remove one particular animation from the sequence. amim: Animation to remove.","parameters":{"anim":{"type":"dojo.animation.Animation"}},"src":"\t\t\tif( this._anims[i] == anim ) {\n\t\t\t\tthis._anims[i]._animSequence = null;\n\t\t\t\tthis._anims.splice(i, 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}","this":"dojo.animation.AnimationSequence"}}},"dojo.animation.AnimationSequence.removeAll":{"_":{"meta":{"summary":"Remove all animations from the sequence.","src":"\t\t\tthis._anims[i]._animSequence = null;\n\t\t}\n\t\tthis._anims = [];\n\t\tthis._currAnim = -1;","this":"dojo.animation.AnimationSequence"}}},"dojo.animation.AnimationSequence.clear":{"_":{"meta":{"summary":"Remove all animations from the sequence.","src":"","this":"dojo.animation.AnimationSequence"}}},"dojo.animation.AnimationSequence.play":{"_":{"meta":{"summary":"Play the animation sequence.","parameters":{"gotoStart":{"type":"Boolean?"}},"description":"Sends an \"onBegin\" event to any observers.","src":"\t\tif( gotoStart || !this._anims[this._currAnim] ) {\n\t\t\tthis._currAnim = 0;\n\t\t}\n\t\tif( this._anims[this._currAnim] ) {\n\t\t\tif( this._currAnim == 0 ) {\n\t\t\t\tvar e = {type: \"begin\", animation: this._anims[this._currAnim]};\n\t\t\t\tif(typeof this.handler == \"function\") { this.handler(e); }\n\t\t\t\tif(typeof this.onBegin == \"function\") { this.onBegin(e); }\n\t\t\t}\n\t\t\tthis._anims[this._currAnim].play(gotoStart);\n\t\t}","this":"dojo.animation.AnimationSequence"}}},"dojo.animation.AnimationSequence.type":{"_":{"meta":{"summary":"Play the next animation in the sequence.","description":"Sends an \"onNext\" event to any observers. Also sends \"onEnd\" if the last animation is finished.","src":"\t\tthis._currAnim++;\n\t\tif( this._anims[this._currAnim] ) {\n\t\t\tvar e = {type: \"next\", animation: this._anims[this._currAnim]};\n\t\t\tif(typeof this.handler == \"function\") { this.handler(e); }\n\t\t\tif(typeof this.onNext == \"function\") { this.onNext(e); }\n\t\t\tthis._anims[this._currAnim].play(true);\n\t\t} else {\n\t\t\tvar e = {type: \"end\", animation: this._anims[this._anims.length-1]};\n\t\t\tif(typeof this.handler == \"function\") { this.handler(e); }\n\t\t\tif(typeof this.onEnd == \"function\") { this.onEnd(e); }\n\t\t\tif(this.repeatCount > 0) {\n\t\t\t\tthis._currAnim = 0;\n\t\t\t\tthis.repeatCount--;\n\t\t\t\tthis._anims[this._currAnim].play(true);\n\t\t\t} else if(this.repeatCount == -1) {\n\t\t\t\tthis._currAnim = 0;\n\t\t\t\tthis._anims[this._currAnim].play(true);\n\t\t\t} else {\n\t\t\t\tthis._currAnim = -1;\n\t\t\t}\n\t\t}","this":"dojo.animation.AnimationSequence"}}},"dojo.animation.AnimationSequence.pause":{"_":{"meta":{"summary":"temporarily stop the current animation.  Resume later with sequence.play()","src":"\t\t\tthis._anims[this._currAnim].pause();\n\t\t}","this":"dojo.animation.AnimationSequence"}}},"dojo.animation.AnimationSequence.playPause":{"_":{"meta":{"summary":"Toggle between play and paused states.","src":"\t\tif( this._currAnim == -1 ) { this._currAnim = 0; }\n\t\tif( this._anims[this._currAnim] ) {\n\t\t\tthis._anims[this._currAnim].playPause();\n\t\t}","this":"dojo.animation.AnimationSequence"}}},"dojo.animation.AnimationSequence.stop":{"_":{"meta":{"summary":"Stop the current animation.","src":"\t\t\tthis._anims[this._currAnim].stop();\n\t\t}","this":"dojo.animation.AnimationSequence"}}},"dojo.animation.AnimationSequence.status":{"_":{"meta":{"summary":"Return the status of the current animation.","description":"Returns one of \"playing\", \"paused\" or \"stopped\".","src":"\t\t\treturn this._anims[this._currAnim].status();\n\t\t} else {\n\t\t\treturn \"stopped\";\n\t\t}","this":"dojo.animation.AnimationSequence"}}},"dojo.animation.AnimationSequence._setCurrent":{"_":{"meta":{"summary":"Set the current animation.","parameters":{"anim":{"type":"dojo.animation.Animation"}},"src":"\t\t\tif( this._anims[i] == anim ) {\n\t\t\t\tthis._currAnim = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}","this":"dojo.animation.AnimationSequence"}}},"dojo.animation.AnimationSequence._playNext":{"_":{"meta":{"summary":"Play the next animation in the sequence.","description":"Sends an \"onNext\" event to any observers. Also sends \"onEnd\" if the last animation is finished.","src":"\t\tthis._currAnim++;\n\t\tif( this._anims[this._currAnim] ) {\n\t\t\tvar e = {type: \"next\", animation: this._anims[this._currAnim]};\n\t\t\tif(typeof this.handler == \"function\") { this.handler(e); }\n\t\t\tif(typeof this.onNext == \"function\") { this.onNext(e); }\n\t\t\tthis._anims[this._currAnim].play(true);\n\t\t} else {\n\t\t\tvar e = {type: \"end\", animation: this._anims[this._anims.length-1]};\n\t\t\tif(typeof this.handler == \"function\") { this.handler(e); }\n\t\t\tif(typeof this.onEnd == \"function\") { this.onEnd(e); }\n\t\t\tif(this.repeatCount > 0) {\n\t\t\t\tthis._currAnim = 0;\n\t\t\t\tthis.repeatCount--;\n\t\t\t\tthis._anims[this._currAnim].play(true);\n\t\t\t} else if(this.repeatCount == -1) {\n\t\t\t\tthis._currAnim = 0;\n\t\t\t\tthis._anims[this._currAnim].play(true);\n\t\t\t} else {\n\t\t\t\tthis._currAnim = -1;\n\t\t\t}\n\t\t}","this":"dojo.animation.AnimationSequence"}}}}}},"dojo.animation.Timer":{"meta":{"requires":{"common":["dojo.lang.timing.Timer"]}}},"dojo.animation._":{"meta":{"requires":{"common":["dojo.animation.AnimationEvent","dojo.animation.Animation","dojo.animation.AnimationSequence"]}}},"dojo.animation":{"meta":{"requires":{"common":["dojo.animation.Animation"]},"description":"This allows things to be animated.<br\/>\n"}}}