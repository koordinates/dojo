{"dojo.docs":{"meta":{"requires":{"common":["dojo.io.*","dojo.event.topic","dojo.rpc.JotService","dojo.dom","dojo.uri.Uri"]},"methods":{"obj.load":{"_":{"meta":{"summary":"","parameters":{"data":{"type":""},"type":{"type":""},"evt":{"type":""}},"src":"\t\t\t\tdojo.debug(\"_buildCache() loaded for: \" + name);\n\t\t\n\t\t\t\tvar methods = data.methods;\n\t\t\t\tif(methods){\n\t\t\t\t\tfor(var method in methods){\n\t\t\t\t\t\tif (method == \"is\") {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor(var pId in methods[method]){\n\t\t\t\t\t\t\tgetCache(name, META, METHODS, method, pId, META).summary = methods[method][pId];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar requires = data.requires;\n\t\t\t\tvar cache = getCache(name, META);\n\t\t\t\tif(requires){\n\t\t\t\t\tcache.requires = requires;\n\t\t\t\t}\n\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\tcallbacks.shift()(LOAD, cache, input, input[INPUT]);\n\t\t\t\t}"}}},"obj.error":{"_":{"meta":{"summary":"","parameters":{"data":{"type":""},"type":{"type":""},"evt":{"type":""}},"src":"\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\tcallbacks.shift()(ERROR, {}, input, input[INPUT]);\n\t\t\t\t}"}}},"dojo.docs.functionNames":{"_":{"meta":{"summary":"Returns an ordered list of package and function names.","parameters":{"selectKey":{"type":"mixed"},"callback":{"type":"Function"}},"src":"\t\tif(!selectKey){\n\t\t\tselectKey = ++dojo.docs._count;\n\t\t}\n\t\t\n\t\tvar input = {};\n\t\tif(typeof selectKey == \"object\" && selectKey.selectKey){\n\t\t\tinput = selectKey;\n\t\t\tselectKey = selectKey.selectKey;\n\t\t}\n\t\t\n\t\tdojo.docs._buildCache({\n\t\t\ttype: \"function_names\",\n\t\t\tcallbacks: [dojo.docs._functionNames, callback],\n\t\t\tselectKey: selectKey,\n\t\t\tinput: input\n\t\t});"}}},"dojo.docs.type":{"_":{"meta":{"summary":"","parameters":{"selectKey":{"type":"mixed"},"name":{"type":"String"},"callback":{"type":"Function"}},"src":"\t\tdojo.debug(\"getPkgMeta(\" + name + \")\");\n\t\tvar input = {};\n\t\tif(typeof selectKey == \"object\" && selectKey.selectKey){\n\t\t\tinput = selectKey;\n\t\t\tselectKey = selectKey.selectKey;\n\t\t}else if(!selectKey){\n\t\t\tselectKey = ++dojo.docs._count;\n\t\t}\n\t\tdojo.docs._buildCache({\n\t\t\ttype: \"pkgmeta\",\n\t\t\tcallbacks: [callback],\n\t\t\tname: name,\n\t\t\tselectKey: selectKey,\n\t\t\tinput: input\n\t\t});"}}},"dojo.docs.callbacks":{"_":{"meta":{"summary":"","parameters":{"selectKey":{"type":"mixed"},"name":{"type":"String"},"callback":{"type":"Function"}},"src":"\t\tdojo.debug(\"getPkgMeta(\" + name + \")\");\n\t\tvar input = {};\n\t\tif(typeof selectKey == \"object\" && selectKey.selectKey){\n\t\t\tinput = selectKey;\n\t\t\tselectKey = selectKey.selectKey;\n\t\t}else if(!selectKey){\n\t\t\tselectKey = ++dojo.docs._count;\n\t\t}\n\t\tdojo.docs._buildCache({\n\t\t\ttype: \"pkgmeta\",\n\t\t\tcallbacks: [callback],\n\t\t\tname: name,\n\t\t\tselectKey: selectKey,\n\t\t\tinput: input\n\t\t});"}}},"dojo.docs.selectKey":{"_":{"meta":{"summary":"","parameters":{"type":{"type":"String"},"data":{"type":"Object"},"evt":{"type":"Object"},"input":{"type":"Object"}},"src":"\t\tdojo.debug(\"_onDocResults(\" + evt.name + \"\/\" + input.pkg + \") \" + type);\n\t\t++input.loaded;\n\n\t\tif(input.loaded == input.pkgs.length){\n\t\t\tvar pkgs = input.pkgs;\n\t\t\tvar name = input.pkg;\n\t\t\tvar results = {selectKey: evt.selectKey, docResults: []};\n\t\t\tvar rePrivate = \/_[^.]+$\/;\n\t\t\tdata = dojo.docs._cache;\n\n\t\t\tfor(var i = 0, pkg; pkg = pkgs[i]; i++){\n\t\t\t\tvar methods = dojo.docs._getCache(pkg, \"meta\", \"methods\");\n\t\t\t\tfor(var fn in methods){\n\t\t\t\t\tif(fn.toLowerCase().indexOf(name) == -1){\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif(fn != \"requires\" && !rePrivate.test(fn)){\n\t\t\t\t\t\tfor(var pId in methods[fn]){\n\t\t\t\t\t\t\tvar result = {\n\t\t\t\t\t\t\t\tpkg: pkg,\n\t\t\t\t\t\t\t\tname: fn,\n\t\t\t\t\t\t\t\tsummary: \"\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(methods[fn][pId].summary){\n\t\t\t\t\t\t\t\tresult.summary = methods[fn][pId].summary;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tresults.docResults.push(result);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdojo.debug(\"Publishing docResults\");\n\t\t\tdojo.docs._printFnResults(results);\n\t\t}"}}},"dojo.docs.input":{"_":{"meta":{"summary":"","parameters":{"input":{"type":"Object"}},"src":"\t\tdojo.debug(\"_buildCache(\" + input.type + \", \" + input.name + \")\");\n\t\t\/\/ Get stuff from the input object\n\t\tvar type = input.type;\n\t\tvar pkg = input.pkg;\n\t\tvar callbacks = input.callbacks;\n\t\tvar id = input.id;\n\t\tif(!id){\n\t\t\tid = input.id = \"_\";\n\t\t}\n\t\tvar name = input.name;\n\t\tvar selectKey = input.selectKey;\n\n\t\tvar META = \"meta\";\n\t\tvar METHODS = \"methods\";\n\t\tvar SRC = \"src\";\n\t\tvar DESCRIPTION = \"description\";\n\t\tvar INPUT = \"input\";\n\t\tvar LOAD = \"load\";\n\t\tvar ERROR = \"error\";\n\t\t\n\t\tvar docs = dojo.docs;\n\t\tvar getCache = docs._getCache;\n\t\t\n\t\t\/\/ Stuff to pass to RPC\n\t\tvar search = [];\n\t\n\t\tif(type == \"doc\"){\n\t\t\tif(!pkg){\n\t\t\t\tdocs.functionPackages(selectKey, name, function(){ var a = arguments; docs._withPkg.call(this, a[0], a[1], a[2], a[3], \"doc\"); }, input);\n\t\t\t\treturn;\n\t\t\t}else{\n\t\t\t\tvar cached = getCache(pkg, META, METHODS, name, id, META);\n\t\t\t\n\t\t\t\tif(cached[DESCRIPTION]){\n\t\t\t\t\tcallbacks.shift()(LOAD, cached[DESCRIPTION], input, input[INPUT]);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar obj = {};\n\t\t\t\tobj.forFormName = \"DocFnForm\";\n\t\t\t\tobj.limit = 1;\n\n\t\t\t\tobj.filter = \"it\/DocFnForm\/require = '\" + pkg + \"' and it\/DocFnForm\/name = '\" + name + \"' and \";\n\t\t\t\tif(id == \"_\"){\n\t\t\t\t\tobj.filter += \" not(it\/DocFnForm\/id)\";\n\t\t\t\t}else{\n\t\t\t\t\tobj.filter += \" it\/DocFnForm\/id = '\" + id + \"'\";\n\t\t\t\t}\n\n\t\t\t\tobj.load = function(data){\n\t\t\t\t\tvar cached = getCache(pkg, META, METHODS, name, id, META);\n\n\t\t\t\t\tvar description = \"\";\n\t\t\t\t\tvar returns = \"\";\n\t\t\t\t\tif(data.list && data.list.length){\n\t\t\t\t\t\tdescription = docs._getMainText(data.list[0][\"main\/text\"]);\n\t\t\t\t\t\treturns = data.list[0][\"DocFnForm\/returns\"];\n\t\t\t\t\t}\n\n\t\t\t\t\tcached[DESCRIPTION]  = description;\n\t\t\t\t\tif(!cached.returns){\n\t\t\t\t\t\tcached.returns = {};\n\t\t\t\t\t}\n\t\t\t\t\tcached.returns.summary = returns;\n\n\t\t\t\t\tinput.type = \"fn\";\n\t\t\t\t\tdocs._gotDoc(LOAD, cached, input, input[INPUT]);\t\t\t\t\n\t\t\t\t}\n\t\t\t\tobj.error = function(data){\n\t\t\t\t\tinput.type = \"fn\";\n\t\t\t\t\tdocs._gotDoc(ERROR, {}, input, input[INPUT]);\n\t\t\t\t}\n\t\t\t\tsearch.push(obj);\n\n\t\t\t\tobj = {};\n\t\t\t\tobj.forFormName = \"DocParamForm\";\n\n\t\t\t\tobj.filter = \"it\/DocParamForm\/fns = '\" + pkg + \"=>\" + name;\n\t\t\t\tif(id != \"_\"){\n\t\t\t\t\tobj.filter += \"=>\" + id;\n\t\t\t\t}\n\t\t\t\tobj.filter += \"'\";\n\t\t\t\n\t\t\t\tobj.load = function(data){\n\t\t\t\t\tvar cache = getCache(pkg, META, METHODS, name, id, META);\n\t\t\t\t\tfor(var i = 0, param; param = data.list[i]; i++){\n\t\t\t\t\t\tvar pName = param[\"DocParamForm\/name\"];\n\t\t\t\t\t\tif(!cache.parameters[pName]){\n\t\t\t\t\t\t\tcache.parameters[pName] = {};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcache.parameters[pName].summary = param[\"DocParamForm\/desc\"];\n\t\t\t\t\t}\n\t\t\t\t\tinput.type = \"param\";\n\t\t\t\t\tdocs._gotDoc(LOAD, cache.parameters, input);\n\t\t\t\t}\n\t\t\t\tobj.error = function(data){\n\t\t\t\t\tinput.type = \"param\";\n\t\t\t\t\tdocs._gotDoc(ERROR, {}, input);\n\t\t\t\t}\n\t\t\t\tsearch.push(obj);\n\t\t\t}\n\t\t}else if(type == \"pkgdoc\"){\n\t\t\tvar cached = getCache(name, META);\n\n\t\t\tif(cached[DESCRIPTION]){\n\t\t\t\tcallbacks.shift()(LOAD, {description: cached[DESCRIPTION], path: cached.path}, input, input.input);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar obj = {};\n\t\t\tobj.forFormName = \"DocPkgForm\";\n\t\t\tobj.limit = 1;\n\t\t\tobj.filter = \"it\/DocPkgForm\/require = '\" + name + \"'\";\n\t\t\t\n\t\t\tobj.load = function(data){\n\t\t\t\tvar description = \"\";\n\t\t\t\tvar list = data.list;\n\t\t\t\tif(list && list.length && list[0][\"main\/text\"]){\n\t\t\t\t\tdescription = docs._getMainText(list[0][\"main\/text\"]);\n\t\t\t\t\tcached[DESCRIPTION] = description;\n\t\t\t\t\tcached.path = list[0].name;\n\t\t\t\t}\n\n\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\tcallbacks.shift()(LOAD, {description: description, path: cached.path}, input, input.input);\n\t\t\t\t}\n\t\t\t}\n\t\t\tobj.error = function(data){\n\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\tcallbacks.shift()(ERROR, \"\", input, input.input);\n\t\t\t\t}\n\t\t\t}\n\t\t\tsearch.push(obj);\n\t\t}else if(type == \"function_names\"){\n\t\t\tvar cached = getCache();\n\t\t\tif(!cached.function_names){\n\t\t\t\tdojo.debug(\"_buildCache() new cache\");\n\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\tdocs._callbacks.function_names.push([input, callbacks.shift()]);\n\t\t\t\t}\n\t\t\t\tcached.function_names = {loading: true};\n\t\t\t\t\n\t\t\t\tvar obj = {};\n\t\t\t\tobj.url = \"function_names\";\n\t\t\t\tobj.load = function(type, data, evt){\n\t\t\t\t\tcached.function_names = data;\n\t\t\t\t\twhile(docs._callbacks.function_names.length){\n\t\t\t\t\t\tvar parts = docs._callbacks.function_names.pop();\n\t\t\t\t\t\tparts[1](LOAD, data, parts[0]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tobj.error = function(type, data, evt){\n\t\t\t\t\twhile(docs._callbacks.function_names.length){\n\t\t\t\t\t\tvar parts = docs._callbacks.function_names.pop();\n\t\t\t\t\t\tparts[1](LOAD, {}, parts[0]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsearch.push(obj);\n\t\t\t}else if(cached.function_names.loading){\n\t\t\t\tdojo.debug(\"_buildCache() loading cache, adding to callback list\");\n\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\tdocs._callbacks.function_names.push([input, callbacks.shift()]);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}else{\n\t\t\t\tdojo.debug(\"_buildCache() loading from cache\");\n\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\tcallbacks.shift()(LOAD, cached.function_names, input);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}else if(type == META || type == SRC){\n\t\t\tif(!pkg){\n\t\t\t\tif(type == META){\n\t\t\t\t\tdocs.functionPackages(selectKey, name, function(){ var a = arguments; docs._withPkg.call(this, a[0], a[1], a[2], a[3], META); }, input);\n\t\t\t\t\treturn;\n\t\t\t\t}else{\n\t\t\t\t\tdocs.functionPackages(selectKey, name, function(){ var a = arguments; docs._withPkg.call(this, a[0], a[1], a[2], a[3], SRC); }, input);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tvar cached = getCache(pkg, META, METHODS, name, id);\n\n\t\t\t\tif(cached[type] && cached[type].returns){\n\t\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\t\tcallbacks.shift()(LOAD, cached[type], input);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tdojo.debug(\"Finding \" + type + \" for: \" + pkg + \", function: \" + name + \", id: \" + id);\n\n\t\t\t\tvar obj = {};\n\n\t\t\t\tif(type == SRC){\n\t\t\t\t\tobj.mimetype = \"text\/plain\"\n\t\t\t\t}\n\t\t\t\tobj.url = pkg + \"\/\" + name + \"\/\" + id + \"\/\" + type;\n\t\t\t\tobj.load = function(type, data, evt){\n\t\t\t\t\tdojo.debug(\"_buildCache() loaded \" + input.type);\n\n\t\t\t\t\tif(input.type == SRC){\n\t\t\t\t\t\tgetCache(pkg, META, METHODS, name, id).src = data;\n\t\t\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\t\t\tcallbacks.shift()(LOAD, data, input, input[INPUT]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}else{\n\t\t\t\t\t\tvar cache = getCache(pkg, META, METHODS, name, id, META);\n\t\t\t\t\t\tif(!cache.parameters){\n\t\t\t\t\t\t\tcache.parameters = {};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor(var i = 0, param; param = data.parameters[i]; i++){\n\t\t\t\t\t\t\tif(!cache.parameters[param[1]]){\n\t\t\t\t\t\t\t\tcache.parameters[param[1]] = {};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcache.parameters[param[1]].type = param[0];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(!cache.returns){\n\t\t\t\t\t\t\tcache.returns = {};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcache.returns.type = data.returns;\n\t\t\t\t\t}\n\n\t\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\t\tcallbacks.shift()(LOAD, cache, input, input[INPUT]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tobj.error = function(type, data, evt){\n\t\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\t\tcallbacks.shift()(ERROR, {}, input, input[INPUT]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tsearch.push(obj);\n\t\t}else if(type == \"pkgmeta\"){\n\t\t\tvar cached = getCache(name, \"meta\");\n\n\t\t\tif(cached.requires){\n\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\tcallbacks.shift()(LOAD, cached, input, input[INPUT]);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdojo.debug(\"Finding package meta for: \" + name);\n\n\t\t\tvar obj = {};\n\n\t\t\tobj.url = name + \"\/meta\";\n\t\t\tobj.load = function(type, data, evt){\n\t\t\t\tdojo.debug(\"_buildCache() loaded for: \" + name);\n\t\t\n\t\t\t\tvar methods = data.methods;\n\t\t\t\tif(methods){\n\t\t\t\t\tfor(var method in methods){\n\t\t\t\t\t\tif (method == \"is\") {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor(var pId in methods[method]){\n\t\t\t\t\t\t\tgetCache(name, META, METHODS, method, pId, META).summary = methods[method][pId];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar requires = data.requires;\n\t\t\t\tvar cache = getCache(name, META);\n\t\t\t\tif(requires){\n\t\t\t\t\tcache.requires = requires;\n\t\t\t\t}\n\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\tcallbacks.shift()(LOAD, cache, input, input[INPUT]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tobj.error = function(type, data, evt){\n\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\tcallbacks.shift()(ERROR, {}, input, input[INPUT]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tsearch.push(obj);\n\t\t}\n\t\t\n\t\tfor(var i = 0, obj; obj = search[i]; i++){\n\t\t\tvar load = obj.load;\n\t\t\tvar error = obj.error;\n\t\t\tdelete obj.load;\n\t\t\tdelete obj.error;\n\t\t\tvar mimetype = obj.mimetype;\n\t\t\tif(!mimetype){\n\t\t\t\tmimetype = \"text\/json\"\n\t\t\t}\n\t\t\tif(obj.url){\n\t\t\t\tdojo.io.bind({\n\t\t\t\t\turl: new dojo.uri.Uri(docs._url, obj.url),\n\t\t\t\t\tinput: input,\n\t\t\t\t\tmimetype: mimetype,\n\t\t\t\t\terror: error,\n\t\t\t\t\tload: load\n\t\t\t\t});\n\t\t\t}else{\n\t\t\t\tdocs._rpc.callRemote(\"search\", obj).addCallbacks(load, error);\n\t\t\t}\n\t\t}","this_inherits":["docs._withPkg","docs._withPkg","docs._withPkg"]}}},"dojo.docs._functionNames":{"_":{"meta":{"summary":"Converts the stored JSON object into a sorted list of packages and functions","parameters":{"type":{"type":"String"},"data":{"type":"Array"},"evt":{"type":"Object"}},"src":"\t\tvar searchData = [];\n\t\tfor(var key in data){\n\t\t\t\/\/ Add the package if it doesn't exist in its children\n\t\t\tif(!dojo.lang.inArray(data[key], key)){\n\t\t\t\tvar aKey = key;\n\t\t\t\tif(aKey.charAt(aKey.length - 1) == \"_\"){\n\t\t\t\t\taKey = [aKey.substring(0, aKey.length - 1), \"*\"].join(\"\");\n\t\t\t\t}\n\t\t\t\tsearchData.push([aKey, aKey]);\n\t\t\t}\n\t\t\t\/\/ Add the functions\n\t\t\tfor(var pkg_key in data[key]){\n\t\t\t\tvar aKey = data[key][pkg_key];\n\t\t\t\tif(aKey.charAt(aKey.length - 1) == \"_\"){\n\t\t\t\t\taKey = [aKey.substring(0, aKey.length - 1), \"*\"].join(\"\");\n\t\t\t\t}\n\t\t\t\tsearchData.push([aKey, aKey]);\n\t\t\t}\n\t\t}\n\n\t\tsearchData = searchData.sort(dojo.docs._sort);\n\n\t\tif(evt.callbacks && evt.callbacks.length){\n\t\t\tevt.callbacks.shift()(type, searchData, evt, evt.input);\n\t\t}"}}},"dojo.docs.getMeta":{"_":{"meta":{"summary":"Gets information about a function in regards to its meta data","parameters":{"selectKey":{"type":"mixed"},"pkg":{"type":"String"},"name":{"type":"String"},"callback":{"type":"Function"},"id":{"type":"String?"}},"src":"\t\t\t\/\/ pId: a\n\t\t\t\/\/ pkg: ignore\n\t\t\tid = callback;\n\t\t\tcallback = name;\n\t\t\tname = pkg;\n\t\t\tpkg = null;\n\t\t\tdojo.debug(\"getMeta(\" + name + \")\");\n\t\t}else{\n\t\t\tdojo.debug(\"getMeta(\" + pkg + \"\/\" + name + \")\");\n\t\t}\n\t\t\n\t\tif(!id){\n\t\t\tid = \"_\";\n\t\t}\n\n\t\tif(!selectKey){\n\t\t\tselectKey = ++dojo.docs._count;\n\t\t}\n\n\t\tvar input;\n\t\tif(typeof selectKey == \"object\" && selectKey.selectKey){\n\t\t\tinput = selectKey;\n\t\t\tselectKey = selectKey.selectKey;\n\t\t}else{\n\t\t\tinput = {};\n\t\t}\n\n\t\tdojo.docs._buildCache({\n\t\t\ttype: \"meta\",\n\t\t\tcallbacks: [dojo.docs._gotMeta, callback],\n\t\t\tpkg: pkg,\n\t\t\tname: name,\n\t\t\tid: id,\n\t\t\tselectKey: selectKey,\n\t\t\tinput: input\n\t\t});"}}},"dojo.docs.pkg":{"_":{"meta":{"summary":"","parameters":{"type":{"type":"String"},"data":{"type":"Object"},"evt":{"type":"Object"},"input":{"type":"Object"}},"src":"\t\tdojo.debug(\"_onDocResults(\" + evt.name + \"\/\" + input.pkg + \") \" + type);\n\t\t++input.loaded;\n\n\t\tif(input.loaded == input.pkgs.length){\n\t\t\tvar pkgs = input.pkgs;\n\t\t\tvar name = input.pkg;\n\t\t\tvar results = {selectKey: evt.selectKey, docResults: []};\n\t\t\tvar rePrivate = \/_[^.]+$\/;\n\t\t\tdata = dojo.docs._cache;\n\n\t\t\tfor(var i = 0, pkg; pkg = pkgs[i]; i++){\n\t\t\t\tvar methods = dojo.docs._getCache(pkg, \"meta\", \"methods\");\n\t\t\t\tfor(var fn in methods){\n\t\t\t\t\tif(fn.toLowerCase().indexOf(name) == -1){\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif(fn != \"requires\" && !rePrivate.test(fn)){\n\t\t\t\t\t\tfor(var pId in methods[fn]){\n\t\t\t\t\t\t\tvar result = {\n\t\t\t\t\t\t\t\tpkg: pkg,\n\t\t\t\t\t\t\t\tname: fn,\n\t\t\t\t\t\t\t\tsummary: \"\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(methods[fn][pId].summary){\n\t\t\t\t\t\t\t\tresult.summary = methods[fn][pId].summary;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tresults.docResults.push(result);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdojo.debug(\"Publishing docResults\");\n\t\t\tdojo.docs._printFnResults(results);\n\t\t}"}}},"dojo.docs.name":{"_":{"meta":{"summary":"","parameters":{"type":{"type":"String"},"data":{"type":"Object"},"evt":{"type":"Object"},"input":{"type":"Object"}},"src":"\t\tdojo.debug(\"_onDocResults(\" + evt.name + \"\/\" + input.pkg + \") \" + type);\n\t\t++input.loaded;\n\n\t\tif(input.loaded == input.pkgs.length){\n\t\t\tvar pkgs = input.pkgs;\n\t\t\tvar name = input.pkg;\n\t\t\tvar results = {selectKey: evt.selectKey, docResults: []};\n\t\t\tvar rePrivate = \/_[^.]+$\/;\n\t\t\tdata = dojo.docs._cache;\n\n\t\t\tfor(var i = 0, pkg; pkg = pkgs[i]; i++){\n\t\t\t\tvar methods = dojo.docs._getCache(pkg, \"meta\", \"methods\");\n\t\t\t\tfor(var fn in methods){\n\t\t\t\t\tif(fn.toLowerCase().indexOf(name) == -1){\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif(fn != \"requires\" && !rePrivate.test(fn)){\n\t\t\t\t\t\tfor(var pId in methods[fn]){\n\t\t\t\t\t\t\tvar result = {\n\t\t\t\t\t\t\t\tpkg: pkg,\n\t\t\t\t\t\t\t\tname: fn,\n\t\t\t\t\t\t\t\tsummary: \"\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(methods[fn][pId].summary){\n\t\t\t\t\t\t\t\tresult.summary = methods[fn][pId].summary;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tresults.docResults.push(result);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdojo.debug(\"Publishing docResults\");\n\t\t\tdojo.docs._printFnResults(results);\n\t\t}"}}},"dojo.docs.id":{"_":{"meta":{"summary":"","parameters":{"type":{"type":"String"},"data":{"type":"Object"},"evt":{"type":"Object"},"input":{"type":"Object"}},"src":"\t\tdojo.debug(\"_onPkgResults(\" + evt.type + \")\");\n\t\tvar description = \"\";\n\t\tvar path = \"\";\n\t\tvar methods = {};\n\t\tvar requires = {};\n\t\tif(input){\n\t\t\tinput[evt.type] = data;\n\t\t\tif(input.expects && input.expects.pkgresults){\n\t\t\t\tfor(var i = 0, expect; expect = input.expects.pkgresults[i]; i++){\n\t\t\t\t\tif(!(expect in input)){\n\t\t\t\t\t\tdojo.debug(\"_onPkgResults() waiting for more data\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tpath = input.pkgdoc.path;\n\t\t\tdescription = input.pkgdoc.description;\n\t\t\tmethods = input.pkgmeta.methods;\n\t\t\trequires = input.pkgmeta.requires;\n\t\t}\n\t\tvar pkg = evt.name.replace(\"_\", \"*\");\n\t\tvar results = {\n\t\t\tpath: path,\n\t\t\tdescription: description,\n\t\t\tsize: 0,\n\t\t\tmethods: [],\n\t\t\tpkg: pkg,\n\t\t\tselectKey: evt.selectKey,\n\t\t\trequires: requires\n\t\t}\n\t\tvar rePrivate = \/_[^.]+$\/;\n\t\tfor(var method in methods){\n\t\t\tif(!rePrivate.test(method)){\n\t\t\t\tfor(var pId in methods[method]){\n\t\t\t\t\tresults.methods.push({\n\t\t\t\t\t\tpkg: pkg,\n\t\t\t\t\t\tname: method,\n\t\t\t\t\t\tid: pId,\n\t\t\t\t\t\tsummary: methods[method][pId].summary\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresults.size = results.methods.length;\n\t\tdojo.docs._printPkgResults(results);"}}},"dojo.docs._withPkg":{"_":{"meta":{"summary":"","parameters":{"type":{"type":"String"},"data":{"type":"Object"},"evt":{"type":"Object"},"input":{"type":"Object"},"newType":{"type":"String"}},"src":"\t\tdojo.debug(\"_withPkg(\" + evt.name + \") has package: \" + data[0]);\n\t\tevt.pkg = data[0];\n\t\tif(\"load\" == type && evt.pkg){\n\t\t\tevt.type = newType;\n\t\t\tdojo.docs._buildCache(evt);\n\t\t}else{\n\t\t\tif(evt.callbacks && evt.callbacks.length){\n\t\t\t\tevt.callbacks.shift()(\"error\", {}, evt, evt.input);\n\t\t\t}\n\t\t}"}}},"dojo.docs._gotMeta":{"_":{"meta":{"summary":"","parameters":{"type":{"type":"String"},"data":{"type":"Object"},"evt":{"type":"Object"}},"src":"\t\tdojo.debug(\"_gotMeta(\" + evt.name + \")\");\n\n\t\tvar cached = dojo.docs._getCache(evt.pkg, evt.name, \"meta\", \"methods\", evt.id);\n\t\tif(cached.summary){\n\t\t\tdata.summary = cached.summary;\n\t\t}\n\t\tif(evt.callbacks && evt.callbacks.length){\n\t\t\tevt.callbacks.shift()(type, data, evt, evt.input);\n\t\t}"}}},"dojo.docs.getSrc":{"_":{"meta":{"summary":"Gets src file (created by the doc parser)","parameters":{"selectKey":{"type":"mixed"},"name":{"type":"String"},"callback":{"type":"Function"},"id":{"type":"String?"}},"src":"\t\tif(!id){\n\t\t\tid = \"_\";\n\t\t}\n\t\tif(!selectKey){\n\t\t\tselectKey = ++dojo.docs._count;\n\t\t}\n\t\t\n\t\tvar input;\n\t\tif(typeof selectKey == \"object\" && selectKey.selectKey){\n\t\t\tinput = selectKey;\n\t\t\tselectKey = selectKey.selectKey;\n\t\t}else{\n\t\t\tinput = {};\n\t\t}\n\t\t\n\t\tdojo.docs._buildCache({\n\t\t\ttype: \"src\",\n\t\t\tcallbacks: [callback],\n\t\t\tname: name,\n\t\t\tid: id,\n\t\t\tinput: input,\n\t\t\tselectKey: selectKey\n\t\t});"}}},"dojo.docs.getDoc":{"_":{"meta":{"summary":"Gets external documentation stored on Jot for a given function","parameters":{"selectKey":{"type":"mixed"},"name":{"type":"String"},"callback":{"type":"Function"},"id":{"type":"String?"}},"src":"\t\tif(!id){\n\t\t\tid = \"_\";\n\t\t}\n\n\t\tif(!selectKey){\n\t\t\tselectKey = ++dojo.docs._count;\n\t\t}\n\n\t\tvar input = {};\n\t\tif(typeof selectKey == \"object\" && selectKey.selectKey){\n\t\t\tinput.input = selectKey;\n\t\t\tselectKey = selectKey.selectKey;\n\t\t}\n\n\t\tinput.type = \"doc\";\n\t\tinput.name = name;\n\t\tinput.selectKey = selectKey;\n\t\tinput.callbacks = [callback];\n\t\tinput.selectKey = selectKey;\n\n\t\tdojo.docs._buildCache(input);"}}},"dojo.docs._gotDoc":{"_":{"meta":{"summary":"","parameters":{"type":{"type":"String"},"data":{"type":"Array"},"evt":{"type":"Object"},"input":{"type":"Object"}},"src":"\t\tdojo.debug(\"_gotDoc(\" + evt.type + \")\");\n\t\t\n\t\tevt[evt.type] = data;\n\t\tif(evt.expects && evt.expects.doc){\n\t\t\tfor(var i = 0, expect; expect = evt.expects.doc[i]; i++){\n\t\t\t\tif(!(expect in evt)){\n\t\t\t\t\tdojo.debug(\"_gotDoc() waiting for more data\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar cache = dojo.docs._getCache(evt.pkg, \"meta\", \"methods\", evt.name, evt.id, \"meta\");\n\n\t\tvar description = evt.fn.description;\n\t\tcache.description = description;\n\t\tdata = {\n\t\t\treturns: evt.fn.returns,\n\t\t\tid: evt.id,\n\t\t\tvariables: [],\n\t\t\tselectKey: evt.selectKey\n\t\t}\n\t\tif(!cache.parameters){\n\t\t\tcache.parameters = {};\n\t\t}\n\t\tfor(var i = 0, param; param = evt.param[i]; i++){\n\t\t\tvar fName = param[\"DocParamForm\/name\"];\n\t\t\tif(!cache.parameters[fName]){\n\t\t\t\tcache.parameters[fName] = {};\n\t\t\t}\n\t\t\tcache.parameters[fName].description = param[\"DocParamForm\/desc\"]\n\t\t}\n\n\t\tdata.description = cache.description;\n\t\tdata.parameters = cache.parameters;\n\t\t\n\t\tevt.type = \"doc\";\n\t\n\t\tif(evt.callbacks && evt.callbacks.length){\n\t\t\tevt.callbacks.shift()(\"load\", data, evt, input);\n\t\t}"}}},"dojo.docs.returns":{"_":{"meta":{"summary":"","parameters":{"type":{"type":"String"},"data":{"type":"Array"},"evt":{"type":"Object"},"input":{"type":"Object"}},"src":"\t\tdojo.debug(\"_gotDoc(\" + evt.type + \")\");\n\t\t\n\t\tevt[evt.type] = data;\n\t\tif(evt.expects && evt.expects.doc){\n\t\t\tfor(var i = 0, expect; expect = evt.expects.doc[i]; i++){\n\t\t\t\tif(!(expect in evt)){\n\t\t\t\t\tdojo.debug(\"_gotDoc() waiting for more data\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar cache = dojo.docs._getCache(evt.pkg, \"meta\", \"methods\", evt.name, evt.id, \"meta\");\n\n\t\tvar description = evt.fn.description;\n\t\tcache.description = description;\n\t\tdata = {\n\t\t\treturns: evt.fn.returns,\n\t\t\tid: evt.id,\n\t\t\tvariables: [],\n\t\t\tselectKey: evt.selectKey\n\t\t}\n\t\tif(!cache.parameters){\n\t\t\tcache.parameters = {};\n\t\t}\n\t\tfor(var i = 0, param; param = evt.param[i]; i++){\n\t\t\tvar fName = param[\"DocParamForm\/name\"];\n\t\t\tif(!cache.parameters[fName]){\n\t\t\t\tcache.parameters[fName] = {};\n\t\t\t}\n\t\t\tcache.parameters[fName].description = param[\"DocParamForm\/desc\"]\n\t\t}\n\n\t\tdata.description = cache.description;\n\t\tdata.parameters = cache.parameters;\n\t\t\n\t\tevt.type = \"doc\";\n\t\n\t\tif(evt.callbacks && evt.callbacks.length){\n\t\t\tevt.callbacks.shift()(\"load\", data, evt, input);\n\t\t}"}}},"dojo.docs.variables":{"_":{"meta":{"summary":"","parameters":{"type":{"type":"String"},"data":{"type":"Array"},"evt":{"type":"Object"},"input":{"type":"Object"}},"src":"\t\tdojo.debug(\"_gotDoc(\" + evt.type + \")\");\n\t\t\n\t\tevt[evt.type] = data;\n\t\tif(evt.expects && evt.expects.doc){\n\t\t\tfor(var i = 0, expect; expect = evt.expects.doc[i]; i++){\n\t\t\t\tif(!(expect in evt)){\n\t\t\t\t\tdojo.debug(\"_gotDoc() waiting for more data\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar cache = dojo.docs._getCache(evt.pkg, \"meta\", \"methods\", evt.name, evt.id, \"meta\");\n\n\t\tvar description = evt.fn.description;\n\t\tcache.description = description;\n\t\tdata = {\n\t\t\treturns: evt.fn.returns,\n\t\t\tid: evt.id,\n\t\t\tvariables: [],\n\t\t\tselectKey: evt.selectKey\n\t\t}\n\t\tif(!cache.parameters){\n\t\t\tcache.parameters = {};\n\t\t}\n\t\tfor(var i = 0, param; param = evt.param[i]; i++){\n\t\t\tvar fName = param[\"DocParamForm\/name\"];\n\t\t\tif(!cache.parameters[fName]){\n\t\t\t\tcache.parameters[fName] = {};\n\t\t\t}\n\t\t\tcache.parameters[fName].description = param[\"DocParamForm\/desc\"]\n\t\t}\n\n\t\tdata.description = cache.description;\n\t\tdata.parameters = cache.parameters;\n\t\t\n\t\tevt.type = \"doc\";\n\t\n\t\tif(evt.callbacks && evt.callbacks.length){\n\t\t\tevt.callbacks.shift()(\"load\", data, evt, input);\n\t\t}"}}},"dojo.docs.getPkgDoc":{"_":{"meta":{"summary":"Gets external documentation stored on Jot for a given package","parameters":{"selectKey":{"type":"mixed"},"name":{"type":"String"},"callback":{"type":"Function"}},"src":"\t\tvar input = {};\n\t\tif(typeof selectKey == \"object\" && selectKey.selectKey){\n\t\t\tinput = selectKey;\n\t\t\tselectKey = selectKey.selectKey;\n\t\t}\n\t\tif(!selectKey){\n\t\t\tselectKey = ++dojo.docs._count;\n\t\t}\n\t\tdojo.docs._buildCache({\n\t\t\ttype: \"pkgdoc\",\n\t\t\tcallbacks: [callback],\n\t\t\tname: name,\n\t\t\tselectKey: selectKey,\n\t\t\tinput: input\n\t\t});"}}},"dojo.docs.getPkgInfo":{"_":{"meta":{"summary":"Gets a combination of the metadata and external documentation for a given package","parameters":{"selectKey":{"type":"mixed"},"name":{"type":"String"},"callback":{"type":"Function"}},"src":"\t\tif(!selectKey){\n\t\t\tselectKey = ++dojo.docs._count;\n\t\t}\n\n\t\tvar input = {\n\t\t\tselectKey: selectKey,\n\t\t\texpects: {\n\t\t\t\tpkginfo: [\"pkgmeta\", \"pkgdoc\"]\n\t\t\t},\n\t\t\tcallback: callback\n\t\t};\n\t\tdojo.docs.getPkgMeta(input, name, dojo.docs._getPkgInfo);\n\t\tdojo.docs.getPkgDoc(input, name, dojo.docs._getPkgInfo);"}}},"dojo.docs.expects":{"_":{"meta":{"summary":"","parameters":{"selectKey":{"type":"mixed"},"name":{"type":"String"},"callback":{"type":"Function"}},"src":"\t\tdojo.debug(\"getInfo(\" + name + \")\");\n\t\tvar input = {\n\t\t\texpects: {\n\t\t\t\t\"info\": [\"meta\", \"doc\"]\n\t\t\t},\n\t\t\tselectKey: selectKey,\n\t\t\tcallback: callback\n\t\t}\n\t\tdojo.docs.getMeta(input, name, dojo.docs._getInfo);\n\t\tdojo.docs.getDoc(input, name, dojo.docs._getInfo);"}}},"dojo.docs.pkginfo":{"_":{"meta":{"summary":"Gets a combination of the metadata and external documentation for a given package","parameters":{"selectKey":{"type":"mixed"},"name":{"type":"String"},"callback":{"type":"Function"}},"src":"\t\tif(!selectKey){\n\t\t\tselectKey = ++dojo.docs._count;\n\t\t}\n\n\t\tvar input = {\n\t\t\tselectKey: selectKey,\n\t\t\texpects: {\n\t\t\t\tpkginfo: [\"pkgmeta\", \"pkgdoc\"]\n\t\t\t},\n\t\t\tcallback: callback\n\t\t};\n\t\tdojo.docs.getPkgMeta(input, name, dojo.docs._getPkgInfo);\n\t\tdojo.docs.getPkgDoc(input, name, dojo.docs._getPkgInfo);"}}},"dojo.docs.callback":{"_":{"meta":{"summary":"","parameters":{"selectKey":{"type":"mixed"},"name":{"type":"String"},"callback":{"type":"Function"}},"src":"\t\tdojo.debug(\"getInfo(\" + name + \")\");\n\t\tvar input = {\n\t\t\texpects: {\n\t\t\t\t\"info\": [\"meta\", \"doc\"]\n\t\t\t},\n\t\t\tselectKey: selectKey,\n\t\t\tcallback: callback\n\t\t}\n\t\tdojo.docs.getMeta(input, name, dojo.docs._getInfo);\n\t\tdojo.docs.getDoc(input, name, dojo.docs._getInfo);"}}},"dojo.docs._getPkgInfo":{"_":{"meta":{"summary":"","parameters":{"type":{"type":"String"},"data":{"type":"Object"},"evt":{"type":"Object"}},"src":"\t\tdojo.debug(\"_getPkgInfo() for \" + evt.type);\n\t\tvar key = evt.selectKey;\n\t\tvar input = {};\n\t\tvar results = {};\n\t\tif(typeof key == \"object\"){\n\t\t\tinput = key;\n\t\t\tkey = key.selectKey;\n\t\t\tinput[evt.type] = data;\n\t\t\tif(input.expects && input.expects.pkginfo){\n\t\t\t\tfor(var i = 0, expect; expect = input.expects.pkginfo[i]; i++){\n\t\t\t\t\tif(!(expect in input)){\n\t\t\t\t\t\tdojo.debug(\"_getPkgInfo() waiting for more data\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tresults = input.pkgmeta;\n\t\t\tresults.description = input.pkgdoc;\n\t\t}\n\n\t\tif(input.callback){\n\t\t\tinput.callback(\"load\", results, evt);\n\t\t}"}}},"dojo.docs.getInfo":{"_":{"meta":{"summary":"","parameters":{"selectKey":{"type":"mixed"},"name":{"type":"String"},"callback":{"type":"Function"}},"src":"\t\tdojo.debug(\"getInfo(\" + name + \")\");\n\t\tvar input = {\n\t\t\texpects: {\n\t\t\t\t\"info\": [\"meta\", \"doc\"]\n\t\t\t},\n\t\t\tselectKey: selectKey,\n\t\t\tcallback: callback\n\t\t}\n\t\tdojo.docs.getMeta(input, name, dojo.docs._getInfo);\n\t\tdojo.docs.getDoc(input, name, dojo.docs._getInfo);"}}},"dojo.docs._getInfo":{"_":{"meta":{"summary":"","parameters":{"type":{"type":"String"},"data":{"type":"String"},"evt":{"type":"Object"},"input":{"type":"Object"}},"src":"\t\tdojo.debug(\"_getInfo(\" + evt.type + \")\");\n\t\tif(input && input.expects && input.expects.info){\n\t\t\tinput[evt.type] = data;\n\t\t\tfor(var i = 0, expect; expect = input.expects.info[i]; i++){\n\t\t\t\tif(!(expect in input)){\n\t\t\t\t\tdojo.debug(\"_getInfo() waiting for more data\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(input.callback){\n\t\t\tinput.callback(\"load\", dojo.docs._getCache(evt.pkg, \"meta\", \"methods\", evt.name, evt.id, \"meta\"), evt, input);\n\t\t}"}}},"dojo.docs._getMainText":{"_":{"meta":{"summary":"Grabs the innerHTML from a Jot Rech Text node","parameters":{"text":{"type":"String"}},"src":"\t\treturn text.replace(\/^<html[^<]*>\/, \"\").replace(\/<\\\/html>$\/, \"\").replace(\/<\\w+\\s*\\\/>\/g, \"\");"}}},"dojo.docs.getPkgMeta":{"_":{"meta":{"summary":"","parameters":{"selectKey":{"type":"mixed"},"name":{"type":"String"},"callback":{"type":"Function"}},"src":"\t\tdojo.debug(\"getPkgMeta(\" + name + \")\");\n\t\tvar input = {};\n\t\tif(typeof selectKey == \"object\" && selectKey.selectKey){\n\t\t\tinput = selectKey;\n\t\t\tselectKey = selectKey.selectKey;\n\t\t}else if(!selectKey){\n\t\t\tselectKey = ++dojo.docs._count;\n\t\t}\n\t\tdojo.docs._buildCache({\n\t\t\ttype: \"pkgmeta\",\n\t\t\tcallbacks: [callback],\n\t\t\tname: name,\n\t\t\tselectKey: selectKey,\n\t\t\tinput: input\n\t\t});"}}},"dojo.docs._getPkgMeta":{"_":{"meta":{"summary":"","parameters":{"input":{"type":"Object"}},"src":"\t\tdojo.debug(\"_getPkgMeta(\" + input.name + \")\");\n\t\tinput.type = \"pkgmeta\";\n\t\tdojo.docs._buildCache(input);"}}},"dojo.docs._onDocSearch":{"_":{"meta":{"summary":"","parameters":{"input":{"type":"Object"}},"src":"\t\tinput.name = input.name.replace(\"*\", \"_\");\n\t\tdojo.debug(\"_onDocSearch(\" + input.name + \")\");\n\t\tif(!input.name){\n\t\t\treturn;\n\t\t}\n\t\tif(!input.selectKey){\n\t\t\tinput.selectKey = ++dojo.docs._count;\n\t\t}\n\t\tinput.callbacks = [dojo.docs._onDocSearchFn];\n\t\tinput.name = input.name.toLowerCase();\n\t\tinput.type = \"function_names\";\n\n\t\tdojo.docs._buildCache(input);"}}},"dojo.docs._onDocSearchFn":{"_":{"meta":{"summary":"","parameters":{"type":{"type":"String"},"data":{"type":"Array"},"evt":{"type":"Object"}},"src":"\t\tdojo.debug(\"_onDocSearchFn(\" + evt.name + \")\");\n\n\t\tvar packages = [];\n\t\tpkgLoop:\n\t\tfor(var pkg in data){\n\t\t\tif(pkg.toLowerCase() == evt.name.toLowerCase()){\n\t\t\t\tevt.name = pkg;\n\t\t\t\tdojo.debug(\"_onDocSearchFn found a package\");\n\t\t\t\tdojo.docs._onDocSelectPackage(evt);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tfor(var i = 0, fn; fn = data[pkg][i]; i++){\n\t\t\t\tif(fn.toLowerCase().indexOf(evt.name) != -1){\n\t\t\t\t\t\/\/ Build a list of all packages that need to be loaded and their loaded state.\n\t\t\t\t\tpackages.push(pkg);\n\t\t\t\t\tcontinue pkgLoop;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdojo.debug(\"_onDocSearchFn found a function\");\n\n\t\tevt.pkgs = packages;\n\t\tevt.pkg = evt.name;\n\t\tevt.loaded = 0;\n\t\tfor(var i = 0, pkg; pkg = packages[i]; i++){\n\t\t\tdojo.docs.getPkgMeta(evt, pkg, dojo.docs._onDocResults);\n\t\t}"}}},"dojo.docs.pkgLoop":{"_":{"meta":{"summary":"","parameters":{"type":{"type":"String"},"data":{"type":"Array"},"evt":{"type":"Object"}},"src":"\t\tdojo.debug(\"_onDocSearchFn(\" + evt.name + \")\");\n\n\t\tvar packages = [];\n\t\tpkgLoop:\n\t\tfor(var pkg in data){\n\t\t\tif(pkg.toLowerCase() == evt.name.toLowerCase()){\n\t\t\t\tevt.name = pkg;\n\t\t\t\tdojo.debug(\"_onDocSearchFn found a package\");\n\t\t\t\tdojo.docs._onDocSelectPackage(evt);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tfor(var i = 0, fn; fn = data[pkg][i]; i++){\n\t\t\t\tif(fn.toLowerCase().indexOf(evt.name) != -1){\n\t\t\t\t\t\/\/ Build a list of all packages that need to be loaded and their loaded state.\n\t\t\t\t\tpackages.push(pkg);\n\t\t\t\t\tcontinue pkgLoop;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdojo.debug(\"_onDocSearchFn found a function\");\n\n\t\tevt.pkgs = packages;\n\t\tevt.pkg = evt.name;\n\t\tevt.loaded = 0;\n\t\tfor(var i = 0, pkg; pkg = packages[i]; i++){\n\t\t\tdojo.docs.getPkgMeta(evt, pkg, dojo.docs._onDocResults);\n\t\t}"}}},"dojo.docs._onPkgResults":{"_":{"meta":{"summary":"","parameters":{"type":{"type":"String"},"data":{"type":"Object"},"evt":{"type":"Object"},"input":{"type":"Object"}},"src":"\t\tdojo.debug(\"_onPkgResults(\" + evt.type + \")\");\n\t\tvar description = \"\";\n\t\tvar path = \"\";\n\t\tvar methods = {};\n\t\tvar requires = {};\n\t\tif(input){\n\t\t\tinput[evt.type] = data;\n\t\t\tif(input.expects && input.expects.pkgresults){\n\t\t\t\tfor(var i = 0, expect; expect = input.expects.pkgresults[i]; i++){\n\t\t\t\t\tif(!(expect in input)){\n\t\t\t\t\t\tdojo.debug(\"_onPkgResults() waiting for more data\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tpath = input.pkgdoc.path;\n\t\t\tdescription = input.pkgdoc.description;\n\t\t\tmethods = input.pkgmeta.methods;\n\t\t\trequires = input.pkgmeta.requires;\n\t\t}\n\t\tvar pkg = evt.name.replace(\"_\", \"*\");\n\t\tvar results = {\n\t\t\tpath: path,\n\t\t\tdescription: description,\n\t\t\tsize: 0,\n\t\t\tmethods: [],\n\t\t\tpkg: pkg,\n\t\t\tselectKey: evt.selectKey,\n\t\t\trequires: requires\n\t\t}\n\t\tvar rePrivate = \/_[^.]+$\/;\n\t\tfor(var method in methods){\n\t\t\tif(!rePrivate.test(method)){\n\t\t\t\tfor(var pId in methods[method]){\n\t\t\t\t\tresults.methods.push({\n\t\t\t\t\t\tpkg: pkg,\n\t\t\t\t\t\tname: method,\n\t\t\t\t\t\tid: pId,\n\t\t\t\t\t\tsummary: methods[method][pId].summary\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresults.size = results.methods.length;\n\t\tdojo.docs._printPkgResults(results);"}}},"dojo.docs.path":{"_":{"meta":{"summary":"","parameters":{"type":{"type":"String"},"data":{"type":"Object"},"evt":{"type":"Object"},"input":{"type":"Object"}},"src":"\t\tdojo.debug(\"_onPkgResults(\" + evt.type + \")\");\n\t\tvar description = \"\";\n\t\tvar path = \"\";\n\t\tvar methods = {};\n\t\tvar requires = {};\n\t\tif(input){\n\t\t\tinput[evt.type] = data;\n\t\t\tif(input.expects && input.expects.pkgresults){\n\t\t\t\tfor(var i = 0, expect; expect = input.expects.pkgresults[i]; i++){\n\t\t\t\t\tif(!(expect in input)){\n\t\t\t\t\t\tdojo.debug(\"_onPkgResults() waiting for more data\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tpath = input.pkgdoc.path;\n\t\t\tdescription = input.pkgdoc.description;\n\t\t\tmethods = input.pkgmeta.methods;\n\t\t\trequires = input.pkgmeta.requires;\n\t\t}\n\t\tvar pkg = evt.name.replace(\"_\", \"*\");\n\t\tvar results = {\n\t\t\tpath: path,\n\t\t\tdescription: description,\n\t\t\tsize: 0,\n\t\t\tmethods: [],\n\t\t\tpkg: pkg,\n\t\t\tselectKey: evt.selectKey,\n\t\t\trequires: requires\n\t\t}\n\t\tvar rePrivate = \/_[^.]+$\/;\n\t\tfor(var method in methods){\n\t\t\tif(!rePrivate.test(method)){\n\t\t\t\tfor(var pId in methods[method]){\n\t\t\t\t\tresults.methods.push({\n\t\t\t\t\t\tpkg: pkg,\n\t\t\t\t\t\tname: method,\n\t\t\t\t\t\tid: pId,\n\t\t\t\t\t\tsummary: methods[method][pId].summary\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresults.size = results.methods.length;\n\t\tdojo.docs._printPkgResults(results);"}}},"dojo.docs.description":{"_":{"meta":{"summary":"","parameters":{"input":{"type":"Object"}},"src":"\t\tdojo.debug(\"_buildCache(\" + input.type + \", \" + input.name + \")\");\n\t\t\/\/ Get stuff from the input object\n\t\tvar type = input.type;\n\t\tvar pkg = input.pkg;\n\t\tvar callbacks = input.callbacks;\n\t\tvar id = input.id;\n\t\tif(!id){\n\t\t\tid = input.id = \"_\";\n\t\t}\n\t\tvar name = input.name;\n\t\tvar selectKey = input.selectKey;\n\n\t\tvar META = \"meta\";\n\t\tvar METHODS = \"methods\";\n\t\tvar SRC = \"src\";\n\t\tvar DESCRIPTION = \"description\";\n\t\tvar INPUT = \"input\";\n\t\tvar LOAD = \"load\";\n\t\tvar ERROR = \"error\";\n\t\t\n\t\tvar docs = dojo.docs;\n\t\tvar getCache = docs._getCache;\n\t\t\n\t\t\/\/ Stuff to pass to RPC\n\t\tvar search = [];\n\t\n\t\tif(type == \"doc\"){\n\t\t\tif(!pkg){\n\t\t\t\tdocs.functionPackages(selectKey, name, function(){ var a = arguments; docs._withPkg.call(this, a[0], a[1], a[2], a[3], \"doc\"); }, input);\n\t\t\t\treturn;\n\t\t\t}else{\n\t\t\t\tvar cached = getCache(pkg, META, METHODS, name, id, META);\n\t\t\t\n\t\t\t\tif(cached[DESCRIPTION]){\n\t\t\t\t\tcallbacks.shift()(LOAD, cached[DESCRIPTION], input, input[INPUT]);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar obj = {};\n\t\t\t\tobj.forFormName = \"DocFnForm\";\n\t\t\t\tobj.limit = 1;\n\n\t\t\t\tobj.filter = \"it\/DocFnForm\/require = '\" + pkg + \"' and it\/DocFnForm\/name = '\" + name + \"' and \";\n\t\t\t\tif(id == \"_\"){\n\t\t\t\t\tobj.filter += \" not(it\/DocFnForm\/id)\";\n\t\t\t\t}else{\n\t\t\t\t\tobj.filter += \" it\/DocFnForm\/id = '\" + id + \"'\";\n\t\t\t\t}\n\n\t\t\t\tobj.load = function(data){\n\t\t\t\t\tvar cached = getCache(pkg, META, METHODS, name, id, META);\n\n\t\t\t\t\tvar description = \"\";\n\t\t\t\t\tvar returns = \"\";\n\t\t\t\t\tif(data.list && data.list.length){\n\t\t\t\t\t\tdescription = docs._getMainText(data.list[0][\"main\/text\"]);\n\t\t\t\t\t\treturns = data.list[0][\"DocFnForm\/returns\"];\n\t\t\t\t\t}\n\n\t\t\t\t\tcached[DESCRIPTION]  = description;\n\t\t\t\t\tif(!cached.returns){\n\t\t\t\t\t\tcached.returns = {};\n\t\t\t\t\t}\n\t\t\t\t\tcached.returns.summary = returns;\n\n\t\t\t\t\tinput.type = \"fn\";\n\t\t\t\t\tdocs._gotDoc(LOAD, cached, input, input[INPUT]);\t\t\t\t\n\t\t\t\t}\n\t\t\t\tobj.error = function(data){\n\t\t\t\t\tinput.type = \"fn\";\n\t\t\t\t\tdocs._gotDoc(ERROR, {}, input, input[INPUT]);\n\t\t\t\t}\n\t\t\t\tsearch.push(obj);\n\n\t\t\t\tobj = {};\n\t\t\t\tobj.forFormName = \"DocParamForm\";\n\n\t\t\t\tobj.filter = \"it\/DocParamForm\/fns = '\" + pkg + \"=>\" + name;\n\t\t\t\tif(id != \"_\"){\n\t\t\t\t\tobj.filter += \"=>\" + id;\n\t\t\t\t}\n\t\t\t\tobj.filter += \"'\";\n\t\t\t\n\t\t\t\tobj.load = function(data){\n\t\t\t\t\tvar cache = getCache(pkg, META, METHODS, name, id, META);\n\t\t\t\t\tfor(var i = 0, param; param = data.list[i]; i++){\n\t\t\t\t\t\tvar pName = param[\"DocParamForm\/name\"];\n\t\t\t\t\t\tif(!cache.parameters[pName]){\n\t\t\t\t\t\t\tcache.parameters[pName] = {};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcache.parameters[pName].summary = param[\"DocParamForm\/desc\"];\n\t\t\t\t\t}\n\t\t\t\t\tinput.type = \"param\";\n\t\t\t\t\tdocs._gotDoc(LOAD, cache.parameters, input);\n\t\t\t\t}\n\t\t\t\tobj.error = function(data){\n\t\t\t\t\tinput.type = \"param\";\n\t\t\t\t\tdocs._gotDoc(ERROR, {}, input);\n\t\t\t\t}\n\t\t\t\tsearch.push(obj);\n\t\t\t}\n\t\t}else if(type == \"pkgdoc\"){\n\t\t\tvar cached = getCache(name, META);\n\n\t\t\tif(cached[DESCRIPTION]){\n\t\t\t\tcallbacks.shift()(LOAD, {description: cached[DESCRIPTION], path: cached.path}, input, input.input);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar obj = {};\n\t\t\tobj.forFormName = \"DocPkgForm\";\n\t\t\tobj.limit = 1;\n\t\t\tobj.filter = \"it\/DocPkgForm\/require = '\" + name + \"'\";\n\t\t\t\n\t\t\tobj.load = function(data){\n\t\t\t\tvar description = \"\";\n\t\t\t\tvar list = data.list;\n\t\t\t\tif(list && list.length && list[0][\"main\/text\"]){\n\t\t\t\t\tdescription = docs._getMainText(list[0][\"main\/text\"]);\n\t\t\t\t\tcached[DESCRIPTION] = description;\n\t\t\t\t\tcached.path = list[0].name;\n\t\t\t\t}\n\n\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\tcallbacks.shift()(LOAD, {description: description, path: cached.path}, input, input.input);\n\t\t\t\t}\n\t\t\t}\n\t\t\tobj.error = function(data){\n\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\tcallbacks.shift()(ERROR, \"\", input, input.input);\n\t\t\t\t}\n\t\t\t}\n\t\t\tsearch.push(obj);\n\t\t}else if(type == \"function_names\"){\n\t\t\tvar cached = getCache();\n\t\t\tif(!cached.function_names){\n\t\t\t\tdojo.debug(\"_buildCache() new cache\");\n\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\tdocs._callbacks.function_names.push([input, callbacks.shift()]);\n\t\t\t\t}\n\t\t\t\tcached.function_names = {loading: true};\n\t\t\t\t\n\t\t\t\tvar obj = {};\n\t\t\t\tobj.url = \"function_names\";\n\t\t\t\tobj.load = function(type, data, evt){\n\t\t\t\t\tcached.function_names = data;\n\t\t\t\t\twhile(docs._callbacks.function_names.length){\n\t\t\t\t\t\tvar parts = docs._callbacks.function_names.pop();\n\t\t\t\t\t\tparts[1](LOAD, data, parts[0]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tobj.error = function(type, data, evt){\n\t\t\t\t\twhile(docs._callbacks.function_names.length){\n\t\t\t\t\t\tvar parts = docs._callbacks.function_names.pop();\n\t\t\t\t\t\tparts[1](LOAD, {}, parts[0]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsearch.push(obj);\n\t\t\t}else if(cached.function_names.loading){\n\t\t\t\tdojo.debug(\"_buildCache() loading cache, adding to callback list\");\n\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\tdocs._callbacks.function_names.push([input, callbacks.shift()]);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}else{\n\t\t\t\tdojo.debug(\"_buildCache() loading from cache\");\n\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\tcallbacks.shift()(LOAD, cached.function_names, input);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}else if(type == META || type == SRC){\n\t\t\tif(!pkg){\n\t\t\t\tif(type == META){\n\t\t\t\t\tdocs.functionPackages(selectKey, name, function(){ var a = arguments; docs._withPkg.call(this, a[0], a[1], a[2], a[3], META); }, input);\n\t\t\t\t\treturn;\n\t\t\t\t}else{\n\t\t\t\t\tdocs.functionPackages(selectKey, name, function(){ var a = arguments; docs._withPkg.call(this, a[0], a[1], a[2], a[3], SRC); }, input);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tvar cached = getCache(pkg, META, METHODS, name, id);\n\n\t\t\t\tif(cached[type] && cached[type].returns){\n\t\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\t\tcallbacks.shift()(LOAD, cached[type], input);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tdojo.debug(\"Finding \" + type + \" for: \" + pkg + \", function: \" + name + \", id: \" + id);\n\n\t\t\t\tvar obj = {};\n\n\t\t\t\tif(type == SRC){\n\t\t\t\t\tobj.mimetype = \"text\/plain\"\n\t\t\t\t}\n\t\t\t\tobj.url = pkg + \"\/\" + name + \"\/\" + id + \"\/\" + type;\n\t\t\t\tobj.load = function(type, data, evt){\n\t\t\t\t\tdojo.debug(\"_buildCache() loaded \" + input.type);\n\n\t\t\t\t\tif(input.type == SRC){\n\t\t\t\t\t\tgetCache(pkg, META, METHODS, name, id).src = data;\n\t\t\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\t\t\tcallbacks.shift()(LOAD, data, input, input[INPUT]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}else{\n\t\t\t\t\t\tvar cache = getCache(pkg, META, METHODS, name, id, META);\n\t\t\t\t\t\tif(!cache.parameters){\n\t\t\t\t\t\t\tcache.parameters = {};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor(var i = 0, param; param = data.parameters[i]; i++){\n\t\t\t\t\t\t\tif(!cache.parameters[param[1]]){\n\t\t\t\t\t\t\t\tcache.parameters[param[1]] = {};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcache.parameters[param[1]].type = param[0];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(!cache.returns){\n\t\t\t\t\t\t\tcache.returns = {};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcache.returns.type = data.returns;\n\t\t\t\t\t}\n\n\t\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\t\tcallbacks.shift()(LOAD, cache, input, input[INPUT]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tobj.error = function(type, data, evt){\n\t\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\t\tcallbacks.shift()(ERROR, {}, input, input[INPUT]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tsearch.push(obj);\n\t\t}else if(type == \"pkgmeta\"){\n\t\t\tvar cached = getCache(name, \"meta\");\n\n\t\t\tif(cached.requires){\n\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\tcallbacks.shift()(LOAD, cached, input, input[INPUT]);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdojo.debug(\"Finding package meta for: \" + name);\n\n\t\t\tvar obj = {};\n\n\t\t\tobj.url = name + \"\/meta\";\n\t\t\tobj.load = function(type, data, evt){\n\t\t\t\tdojo.debug(\"_buildCache() loaded for: \" + name);\n\t\t\n\t\t\t\tvar methods = data.methods;\n\t\t\t\tif(methods){\n\t\t\t\t\tfor(var method in methods){\n\t\t\t\t\t\tif (method == \"is\") {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor(var pId in methods[method]){\n\t\t\t\t\t\t\tgetCache(name, META, METHODS, method, pId, META).summary = methods[method][pId];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar requires = data.requires;\n\t\t\t\tvar cache = getCache(name, META);\n\t\t\t\tif(requires){\n\t\t\t\t\tcache.requires = requires;\n\t\t\t\t}\n\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\tcallbacks.shift()(LOAD, cache, input, input[INPUT]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tobj.error = function(type, data, evt){\n\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\tcallbacks.shift()(ERROR, {}, input, input[INPUT]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tsearch.push(obj);\n\t\t}\n\t\t\n\t\tfor(var i = 0, obj; obj = search[i]; i++){\n\t\t\tvar load = obj.load;\n\t\t\tvar error = obj.error;\n\t\t\tdelete obj.load;\n\t\t\tdelete obj.error;\n\t\t\tvar mimetype = obj.mimetype;\n\t\t\tif(!mimetype){\n\t\t\t\tmimetype = \"text\/json\"\n\t\t\t}\n\t\t\tif(obj.url){\n\t\t\t\tdojo.io.bind({\n\t\t\t\t\turl: new dojo.uri.Uri(docs._url, obj.url),\n\t\t\t\t\tinput: input,\n\t\t\t\t\tmimetype: mimetype,\n\t\t\t\t\terror: error,\n\t\t\t\t\tload: load\n\t\t\t\t});\n\t\t\t}else{\n\t\t\t\tdocs._rpc.callRemote(\"search\", obj).addCallbacks(load, error);\n\t\t\t}\n\t\t}","this_inherits":["docs._withPkg","docs._withPkg","docs._withPkg"]}}},"dojo.docs.size":{"_":{"meta":{"summary":"","parameters":{"type":{"type":"String"},"data":{"type":"Object"},"evt":{"type":"Object"},"input":{"type":"Object"}},"src":"\t\tdojo.debug(\"_onPkgResults(\" + evt.type + \")\");\n\t\tvar description = \"\";\n\t\tvar path = \"\";\n\t\tvar methods = {};\n\t\tvar requires = {};\n\t\tif(input){\n\t\t\tinput[evt.type] = data;\n\t\t\tif(input.expects && input.expects.pkgresults){\n\t\t\t\tfor(var i = 0, expect; expect = input.expects.pkgresults[i]; i++){\n\t\t\t\t\tif(!(expect in input)){\n\t\t\t\t\t\tdojo.debug(\"_onPkgResults() waiting for more data\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tpath = input.pkgdoc.path;\n\t\t\tdescription = input.pkgdoc.description;\n\t\t\tmethods = input.pkgmeta.methods;\n\t\t\trequires = input.pkgmeta.requires;\n\t\t}\n\t\tvar pkg = evt.name.replace(\"_\", \"*\");\n\t\tvar results = {\n\t\t\tpath: path,\n\t\t\tdescription: description,\n\t\t\tsize: 0,\n\t\t\tmethods: [],\n\t\t\tpkg: pkg,\n\t\t\tselectKey: evt.selectKey,\n\t\t\trequires: requires\n\t\t}\n\t\tvar rePrivate = \/_[^.]+$\/;\n\t\tfor(var method in methods){\n\t\t\tif(!rePrivate.test(method)){\n\t\t\t\tfor(var pId in methods[method]){\n\t\t\t\t\tresults.methods.push({\n\t\t\t\t\t\tpkg: pkg,\n\t\t\t\t\t\tname: method,\n\t\t\t\t\t\tid: pId,\n\t\t\t\t\t\tsummary: methods[method][pId].summary\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresults.size = results.methods.length;\n\t\tdojo.docs._printPkgResults(results);"}}},"dojo.docs.methods":{"_":{"meta":{"summary":"","parameters":{"type":{"type":"String"},"data":{"type":"Object"},"evt":{"type":"Object"},"input":{"type":"Object"}},"src":"\t\tdojo.debug(\"_onPkgResults(\" + evt.type + \")\");\n\t\tvar description = \"\";\n\t\tvar path = \"\";\n\t\tvar methods = {};\n\t\tvar requires = {};\n\t\tif(input){\n\t\t\tinput[evt.type] = data;\n\t\t\tif(input.expects && input.expects.pkgresults){\n\t\t\t\tfor(var i = 0, expect; expect = input.expects.pkgresults[i]; i++){\n\t\t\t\t\tif(!(expect in input)){\n\t\t\t\t\t\tdojo.debug(\"_onPkgResults() waiting for more data\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tpath = input.pkgdoc.path;\n\t\t\tdescription = input.pkgdoc.description;\n\t\t\tmethods = input.pkgmeta.methods;\n\t\t\trequires = input.pkgmeta.requires;\n\t\t}\n\t\tvar pkg = evt.name.replace(\"_\", \"*\");\n\t\tvar results = {\n\t\t\tpath: path,\n\t\t\tdescription: description,\n\t\t\tsize: 0,\n\t\t\tmethods: [],\n\t\t\tpkg: pkg,\n\t\t\tselectKey: evt.selectKey,\n\t\t\trequires: requires\n\t\t}\n\t\tvar rePrivate = \/_[^.]+$\/;\n\t\tfor(var method in methods){\n\t\t\tif(!rePrivate.test(method)){\n\t\t\t\tfor(var pId in methods[method]){\n\t\t\t\t\tresults.methods.push({\n\t\t\t\t\t\tpkg: pkg,\n\t\t\t\t\t\tname: method,\n\t\t\t\t\t\tid: pId,\n\t\t\t\t\t\tsummary: methods[method][pId].summary\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresults.size = results.methods.length;\n\t\tdojo.docs._printPkgResults(results);"}}},"dojo.docs.requires":{"_":{"meta":{"summary":"","parameters":{"type":{"type":"String"},"data":{"type":"Object"},"evt":{"type":"Object"},"input":{"type":"Object"}},"src":"\t\tdojo.debug(\"_onPkgResults(\" + evt.type + \")\");\n\t\tvar description = \"\";\n\t\tvar path = \"\";\n\t\tvar methods = {};\n\t\tvar requires = {};\n\t\tif(input){\n\t\t\tinput[evt.type] = data;\n\t\t\tif(input.expects && input.expects.pkgresults){\n\t\t\t\tfor(var i = 0, expect; expect = input.expects.pkgresults[i]; i++){\n\t\t\t\t\tif(!(expect in input)){\n\t\t\t\t\t\tdojo.debug(\"_onPkgResults() waiting for more data\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tpath = input.pkgdoc.path;\n\t\t\tdescription = input.pkgdoc.description;\n\t\t\tmethods = input.pkgmeta.methods;\n\t\t\trequires = input.pkgmeta.requires;\n\t\t}\n\t\tvar pkg = evt.name.replace(\"_\", \"*\");\n\t\tvar results = {\n\t\t\tpath: path,\n\t\t\tdescription: description,\n\t\t\tsize: 0,\n\t\t\tmethods: [],\n\t\t\tpkg: pkg,\n\t\t\tselectKey: evt.selectKey,\n\t\t\trequires: requires\n\t\t}\n\t\tvar rePrivate = \/_[^.]+$\/;\n\t\tfor(var method in methods){\n\t\t\tif(!rePrivate.test(method)){\n\t\t\t\tfor(var pId in methods[method]){\n\t\t\t\t\tresults.methods.push({\n\t\t\t\t\t\tpkg: pkg,\n\t\t\t\t\t\tname: method,\n\t\t\t\t\t\tid: pId,\n\t\t\t\t\t\tsummary: methods[method][pId].summary\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresults.size = results.methods.length;\n\t\tdojo.docs._printPkgResults(results);"}}},"dojo.docs.summary":{"_":{"meta":{"summary":"","parameters":{"type":{"type":"String"},"data":{"type":"Object"},"evt":{"type":"Object"},"input":{"type":"Object"}},"src":"\t\tdojo.debug(\"_onDocResults(\" + evt.name + \"\/\" + input.pkg + \") \" + type);\n\t\t++input.loaded;\n\n\t\tif(input.loaded == input.pkgs.length){\n\t\t\tvar pkgs = input.pkgs;\n\t\t\tvar name = input.pkg;\n\t\t\tvar results = {selectKey: evt.selectKey, docResults: []};\n\t\t\tvar rePrivate = \/_[^.]+$\/;\n\t\t\tdata = dojo.docs._cache;\n\n\t\t\tfor(var i = 0, pkg; pkg = pkgs[i]; i++){\n\t\t\t\tvar methods = dojo.docs._getCache(pkg, \"meta\", \"methods\");\n\t\t\t\tfor(var fn in methods){\n\t\t\t\t\tif(fn.toLowerCase().indexOf(name) == -1){\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif(fn != \"requires\" && !rePrivate.test(fn)){\n\t\t\t\t\t\tfor(var pId in methods[fn]){\n\t\t\t\t\t\t\tvar result = {\n\t\t\t\t\t\t\t\tpkg: pkg,\n\t\t\t\t\t\t\t\tname: fn,\n\t\t\t\t\t\t\t\tsummary: \"\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(methods[fn][pId].summary){\n\t\t\t\t\t\t\t\tresult.summary = methods[fn][pId].summary;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tresults.docResults.push(result);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdojo.debug(\"Publishing docResults\");\n\t\t\tdojo.docs._printFnResults(results);\n\t\t}"}}},"dojo.docs._onDocResults":{"_":{"meta":{"summary":"","parameters":{"type":{"type":"String"},"data":{"type":"Object"},"evt":{"type":"Object"},"input":{"type":"Object"}},"src":"\t\tdojo.debug(\"_onDocResults(\" + evt.name + \"\/\" + input.pkg + \") \" + type);\n\t\t++input.loaded;\n\n\t\tif(input.loaded == input.pkgs.length){\n\t\t\tvar pkgs = input.pkgs;\n\t\t\tvar name = input.pkg;\n\t\t\tvar results = {selectKey: evt.selectKey, docResults: []};\n\t\t\tvar rePrivate = \/_[^.]+$\/;\n\t\t\tdata = dojo.docs._cache;\n\n\t\t\tfor(var i = 0, pkg; pkg = pkgs[i]; i++){\n\t\t\t\tvar methods = dojo.docs._getCache(pkg, \"meta\", \"methods\");\n\t\t\t\tfor(var fn in methods){\n\t\t\t\t\tif(fn.toLowerCase().indexOf(name) == -1){\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif(fn != \"requires\" && !rePrivate.test(fn)){\n\t\t\t\t\t\tfor(var pId in methods[fn]){\n\t\t\t\t\t\t\tvar result = {\n\t\t\t\t\t\t\t\tpkg: pkg,\n\t\t\t\t\t\t\t\tname: fn,\n\t\t\t\t\t\t\t\tsummary: \"\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(methods[fn][pId].summary){\n\t\t\t\t\t\t\t\tresult.summary = methods[fn][pId].summary;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tresults.docResults.push(result);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdojo.debug(\"Publishing docResults\");\n\t\t\tdojo.docs._printFnResults(results);\n\t\t}"}}},"dojo.docs._printFnResults":{"_":{"meta":{"summary":"","parameters":{"results":{"type":""}},"src":"\t\tdojo.debug(\"_printFnResults(): called\");\n\t\t\/\/ summary: Call this function to send the \/docs\/function\/results topic"}}},"dojo.docs._printPkgResults":{"_":{"meta":{"summary":"","parameters":{"results":{"type":""}},"src":"\t\tdojo.debug(\"_printPkgResults(): called\");"}}},"dojo.docs._onDocSelectFunction":{"_":{"meta":{"summary":"Get doc, meta, and src","parameters":{"input":{"type":"Object"}},"src":"\t\tdojo.debug(\"_onDocSelectFunction(\" + name + \")\");\n\t\tif(!name){\n\t\t\treturn false;\n\t\t}\n\t\tif(!input.selectKey){\n\t\t\tinput.selectKey = ++dojo.docs._count;\n\t\t}\n\t\tinput.expects = {\n\t\t\t\"docresults\": [\"meta\", \"doc\", \"pkgmeta\"]\n\t\t}\n\t\tdojo.docs.getMeta(input, name, dojo.docs._onDocSelectResults);\n\t\tdojo.docs.getDoc(input, name, dojo.docs._onDocSelectResults);"}}},"dojo.docs._onDocSelectPackage":{"_":{"meta":{"summary":"","parameters":{"input":{"type":"Object"}},"src":"\t\tdojo.debug(\"_onDocSelectPackage(\" + input.name + \")\")\n\t\tinput.expects = {\n\t\t\t\"pkgresults\": [\"pkgmeta\", \"pkgdoc\"]\n\t\t};\n\t\tif(!input.selectKey){\n\t\t\tinput.selectKey = ++dojo.docs._count;\n\t\t}\n\t\tdojo.docs.getPkgMeta(input, input.name, dojo.docs._onPkgResults);\n\t\tdojo.docs.getPkgDoc(input, input.name, dojo.docs._onPkgResults);"}}},"dojo.docs._onDocSelectResults":{"_":{"meta":{"summary":"","parameters":{"type":{"type":"String"},"data":{"type":"Object"},"evt":{"type":"Object"},"input":{"type":"Object"}},"src":"\t\tdojo.debug(\"_onDocSelectResults(\" + evt.type + \", \" + evt.name + \")\");\n\t\tif(evt.type == \"meta\"){\n\t\t\tdojo.docs.getPkgMeta(input, evt.pkg, dojo.docs._onDocSelectResults);\n\t\t}\n\t\tif(input){\n\t\t\tinput[evt.type] = data;\n\t\t\tif(input.expects && input.expects.docresults){\n\t\t\t\tfor(var i = 0, expect; expect = input.expects.docresults[i]; i++){\n\t\t\t\t\tif(!(expect in input)){\n\t\t\t\t\t\tdojo.debug(\"_onDocSelectResults() waiting for more data\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tdojo.docs._printFunctionDetail(input);"}}},"dojo.docs._printFunctionDetail":{"_":{"meta":{"summary":"Call this function to send the \/docs\/function\/detail topic event","parameters":{"results":{"type":""}},"src":"\t\t\/\/ summary: Call this function to send the \/docs\/function\/detail topic event"}}},"dojo.docs._buildCache":{"_":{"meta":{"summary":"","parameters":{"input":{"type":"Object"}},"src":"\t\tdojo.debug(\"_buildCache(\" + input.type + \", \" + input.name + \")\");\n\t\t\/\/ Get stuff from the input object\n\t\tvar type = input.type;\n\t\tvar pkg = input.pkg;\n\t\tvar callbacks = input.callbacks;\n\t\tvar id = input.id;\n\t\tif(!id){\n\t\t\tid = input.id = \"_\";\n\t\t}\n\t\tvar name = input.name;\n\t\tvar selectKey = input.selectKey;\n\n\t\tvar META = \"meta\";\n\t\tvar METHODS = \"methods\";\n\t\tvar SRC = \"src\";\n\t\tvar DESCRIPTION = \"description\";\n\t\tvar INPUT = \"input\";\n\t\tvar LOAD = \"load\";\n\t\tvar ERROR = \"error\";\n\t\t\n\t\tvar docs = dojo.docs;\n\t\tvar getCache = docs._getCache;\n\t\t\n\t\t\/\/ Stuff to pass to RPC\n\t\tvar search = [];\n\t\n\t\tif(type == \"doc\"){\n\t\t\tif(!pkg){\n\t\t\t\tdocs.functionPackages(selectKey, name, function(){ var a = arguments; docs._withPkg.call(this, a[0], a[1], a[2], a[3], \"doc\"); }, input);\n\t\t\t\treturn;\n\t\t\t}else{\n\t\t\t\tvar cached = getCache(pkg, META, METHODS, name, id, META);\n\t\t\t\n\t\t\t\tif(cached[DESCRIPTION]){\n\t\t\t\t\tcallbacks.shift()(LOAD, cached[DESCRIPTION], input, input[INPUT]);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar obj = {};\n\t\t\t\tobj.forFormName = \"DocFnForm\";\n\t\t\t\tobj.limit = 1;\n\n\t\t\t\tobj.filter = \"it\/DocFnForm\/require = '\" + pkg + \"' and it\/DocFnForm\/name = '\" + name + \"' and \";\n\t\t\t\tif(id == \"_\"){\n\t\t\t\t\tobj.filter += \" not(it\/DocFnForm\/id)\";\n\t\t\t\t}else{\n\t\t\t\t\tobj.filter += \" it\/DocFnForm\/id = '\" + id + \"'\";\n\t\t\t\t}\n\n\t\t\t\tobj.load = function(data){\n\t\t\t\t\tvar cached = getCache(pkg, META, METHODS, name, id, META);\n\n\t\t\t\t\tvar description = \"\";\n\t\t\t\t\tvar returns = \"\";\n\t\t\t\t\tif(data.list && data.list.length){\n\t\t\t\t\t\tdescription = docs._getMainText(data.list[0][\"main\/text\"]);\n\t\t\t\t\t\treturns = data.list[0][\"DocFnForm\/returns\"];\n\t\t\t\t\t}\n\n\t\t\t\t\tcached[DESCRIPTION]  = description;\n\t\t\t\t\tif(!cached.returns){\n\t\t\t\t\t\tcached.returns = {};\n\t\t\t\t\t}\n\t\t\t\t\tcached.returns.summary = returns;\n\n\t\t\t\t\tinput.type = \"fn\";\n\t\t\t\t\tdocs._gotDoc(LOAD, cached, input, input[INPUT]);\t\t\t\t\n\t\t\t\t}\n\t\t\t\tobj.error = function(data){\n\t\t\t\t\tinput.type = \"fn\";\n\t\t\t\t\tdocs._gotDoc(ERROR, {}, input, input[INPUT]);\n\t\t\t\t}\n\t\t\t\tsearch.push(obj);\n\n\t\t\t\tobj = {};\n\t\t\t\tobj.forFormName = \"DocParamForm\";\n\n\t\t\t\tobj.filter = \"it\/DocParamForm\/fns = '\" + pkg + \"=>\" + name;\n\t\t\t\tif(id != \"_\"){\n\t\t\t\t\tobj.filter += \"=>\" + id;\n\t\t\t\t}\n\t\t\t\tobj.filter += \"'\";\n\t\t\t\n\t\t\t\tobj.load = function(data){\n\t\t\t\t\tvar cache = getCache(pkg, META, METHODS, name, id, META);\n\t\t\t\t\tfor(var i = 0, param; param = data.list[i]; i++){\n\t\t\t\t\t\tvar pName = param[\"DocParamForm\/name\"];\n\t\t\t\t\t\tif(!cache.parameters[pName]){\n\t\t\t\t\t\t\tcache.parameters[pName] = {};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcache.parameters[pName].summary = param[\"DocParamForm\/desc\"];\n\t\t\t\t\t}\n\t\t\t\t\tinput.type = \"param\";\n\t\t\t\t\tdocs._gotDoc(LOAD, cache.parameters, input);\n\t\t\t\t}\n\t\t\t\tobj.error = function(data){\n\t\t\t\t\tinput.type = \"param\";\n\t\t\t\t\tdocs._gotDoc(ERROR, {}, input);\n\t\t\t\t}\n\t\t\t\tsearch.push(obj);\n\t\t\t}\n\t\t}else if(type == \"pkgdoc\"){\n\t\t\tvar cached = getCache(name, META);\n\n\t\t\tif(cached[DESCRIPTION]){\n\t\t\t\tcallbacks.shift()(LOAD, {description: cached[DESCRIPTION], path: cached.path}, input, input.input);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar obj = {};\n\t\t\tobj.forFormName = \"DocPkgForm\";\n\t\t\tobj.limit = 1;\n\t\t\tobj.filter = \"it\/DocPkgForm\/require = '\" + name + \"'\";\n\t\t\t\n\t\t\tobj.load = function(data){\n\t\t\t\tvar description = \"\";\n\t\t\t\tvar list = data.list;\n\t\t\t\tif(list && list.length && list[0][\"main\/text\"]){\n\t\t\t\t\tdescription = docs._getMainText(list[0][\"main\/text\"]);\n\t\t\t\t\tcached[DESCRIPTION] = description;\n\t\t\t\t\tcached.path = list[0].name;\n\t\t\t\t}\n\n\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\tcallbacks.shift()(LOAD, {description: description, path: cached.path}, input, input.input);\n\t\t\t\t}\n\t\t\t}\n\t\t\tobj.error = function(data){\n\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\tcallbacks.shift()(ERROR, \"\", input, input.input);\n\t\t\t\t}\n\t\t\t}\n\t\t\tsearch.push(obj);\n\t\t}else if(type == \"function_names\"){\n\t\t\tvar cached = getCache();\n\t\t\tif(!cached.function_names){\n\t\t\t\tdojo.debug(\"_buildCache() new cache\");\n\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\tdocs._callbacks.function_names.push([input, callbacks.shift()]);\n\t\t\t\t}\n\t\t\t\tcached.function_names = {loading: true};\n\t\t\t\t\n\t\t\t\tvar obj = {};\n\t\t\t\tobj.url = \"function_names\";\n\t\t\t\tobj.load = function(type, data, evt){\n\t\t\t\t\tcached.function_names = data;\n\t\t\t\t\twhile(docs._callbacks.function_names.length){\n\t\t\t\t\t\tvar parts = docs._callbacks.function_names.pop();\n\t\t\t\t\t\tparts[1](LOAD, data, parts[0]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tobj.error = function(type, data, evt){\n\t\t\t\t\twhile(docs._callbacks.function_names.length){\n\t\t\t\t\t\tvar parts = docs._callbacks.function_names.pop();\n\t\t\t\t\t\tparts[1](LOAD, {}, parts[0]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsearch.push(obj);\n\t\t\t}else if(cached.function_names.loading){\n\t\t\t\tdojo.debug(\"_buildCache() loading cache, adding to callback list\");\n\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\tdocs._callbacks.function_names.push([input, callbacks.shift()]);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}else{\n\t\t\t\tdojo.debug(\"_buildCache() loading from cache\");\n\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\tcallbacks.shift()(LOAD, cached.function_names, input);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}else if(type == META || type == SRC){\n\t\t\tif(!pkg){\n\t\t\t\tif(type == META){\n\t\t\t\t\tdocs.functionPackages(selectKey, name, function(){ var a = arguments; docs._withPkg.call(this, a[0], a[1], a[2], a[3], META); }, input);\n\t\t\t\t\treturn;\n\t\t\t\t}else{\n\t\t\t\t\tdocs.functionPackages(selectKey, name, function(){ var a = arguments; docs._withPkg.call(this, a[0], a[1], a[2], a[3], SRC); }, input);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tvar cached = getCache(pkg, META, METHODS, name, id);\n\n\t\t\t\tif(cached[type] && cached[type].returns){\n\t\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\t\tcallbacks.shift()(LOAD, cached[type], input);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tdojo.debug(\"Finding \" + type + \" for: \" + pkg + \", function: \" + name + \", id: \" + id);\n\n\t\t\t\tvar obj = {};\n\n\t\t\t\tif(type == SRC){\n\t\t\t\t\tobj.mimetype = \"text\/plain\"\n\t\t\t\t}\n\t\t\t\tobj.url = pkg + \"\/\" + name + \"\/\" + id + \"\/\" + type;\n\t\t\t\tobj.load = function(type, data, evt){\n\t\t\t\t\tdojo.debug(\"_buildCache() loaded \" + input.type);\n\n\t\t\t\t\tif(input.type == SRC){\n\t\t\t\t\t\tgetCache(pkg, META, METHODS, name, id).src = data;\n\t\t\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\t\t\tcallbacks.shift()(LOAD, data, input, input[INPUT]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}else{\n\t\t\t\t\t\tvar cache = getCache(pkg, META, METHODS, name, id, META);\n\t\t\t\t\t\tif(!cache.parameters){\n\t\t\t\t\t\t\tcache.parameters = {};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor(var i = 0, param; param = data.parameters[i]; i++){\n\t\t\t\t\t\t\tif(!cache.parameters[param[1]]){\n\t\t\t\t\t\t\t\tcache.parameters[param[1]] = {};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcache.parameters[param[1]].type = param[0];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(!cache.returns){\n\t\t\t\t\t\t\tcache.returns = {};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcache.returns.type = data.returns;\n\t\t\t\t\t}\n\n\t\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\t\tcallbacks.shift()(LOAD, cache, input, input[INPUT]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tobj.error = function(type, data, evt){\n\t\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\t\tcallbacks.shift()(ERROR, {}, input, input[INPUT]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tsearch.push(obj);\n\t\t}else if(type == \"pkgmeta\"){\n\t\t\tvar cached = getCache(name, \"meta\");\n\n\t\t\tif(cached.requires){\n\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\tcallbacks.shift()(LOAD, cached, input, input[INPUT]);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdojo.debug(\"Finding package meta for: \" + name);\n\n\t\t\tvar obj = {};\n\n\t\t\tobj.url = name + \"\/meta\";\n\t\t\tobj.load = function(type, data, evt){\n\t\t\t\tdojo.debug(\"_buildCache() loaded for: \" + name);\n\t\t\n\t\t\t\tvar methods = data.methods;\n\t\t\t\tif(methods){\n\t\t\t\t\tfor(var method in methods){\n\t\t\t\t\t\tif (method == \"is\") {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor(var pId in methods[method]){\n\t\t\t\t\t\t\tgetCache(name, META, METHODS, method, pId, META).summary = methods[method][pId];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar requires = data.requires;\n\t\t\t\tvar cache = getCache(name, META);\n\t\t\t\tif(requires){\n\t\t\t\t\tcache.requires = requires;\n\t\t\t\t}\n\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\tcallbacks.shift()(LOAD, cache, input, input[INPUT]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tobj.error = function(type, data, evt){\n\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\tcallbacks.shift()(ERROR, {}, input, input[INPUT]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tsearch.push(obj);\n\t\t}\n\t\t\n\t\tfor(var i = 0, obj; obj = search[i]; i++){\n\t\t\tvar load = obj.load;\n\t\t\tvar error = obj.error;\n\t\t\tdelete obj.load;\n\t\t\tdelete obj.error;\n\t\t\tvar mimetype = obj.mimetype;\n\t\t\tif(!mimetype){\n\t\t\t\tmimetype = \"text\/json\"\n\t\t\t}\n\t\t\tif(obj.url){\n\t\t\t\tdojo.io.bind({\n\t\t\t\t\turl: new dojo.uri.Uri(docs._url, obj.url),\n\t\t\t\t\tinput: input,\n\t\t\t\t\tmimetype: mimetype,\n\t\t\t\t\terror: error,\n\t\t\t\t\tload: load\n\t\t\t\t});\n\t\t\t}else{\n\t\t\t\tdocs._rpc.callRemote(\"search\", obj).addCallbacks(load, error);\n\t\t\t}\n\t\t}","this_inherits":["docs._withPkg","docs._withPkg","docs._withPkg"]}}},"dojo.docs.loading":{"_":{"meta":{"summary":"","parameters":{"input":{"type":"Object"}},"src":"\t\tdojo.debug(\"_buildCache(\" + input.type + \", \" + input.name + \")\");\n\t\t\/\/ Get stuff from the input object\n\t\tvar type = input.type;\n\t\tvar pkg = input.pkg;\n\t\tvar callbacks = input.callbacks;\n\t\tvar id = input.id;\n\t\tif(!id){\n\t\t\tid = input.id = \"_\";\n\t\t}\n\t\tvar name = input.name;\n\t\tvar selectKey = input.selectKey;\n\n\t\tvar META = \"meta\";\n\t\tvar METHODS = \"methods\";\n\t\tvar SRC = \"src\";\n\t\tvar DESCRIPTION = \"description\";\n\t\tvar INPUT = \"input\";\n\t\tvar LOAD = \"load\";\n\t\tvar ERROR = \"error\";\n\t\t\n\t\tvar docs = dojo.docs;\n\t\tvar getCache = docs._getCache;\n\t\t\n\t\t\/\/ Stuff to pass to RPC\n\t\tvar search = [];\n\t\n\t\tif(type == \"doc\"){\n\t\t\tif(!pkg){\n\t\t\t\tdocs.functionPackages(selectKey, name, function(){ var a = arguments; docs._withPkg.call(this, a[0], a[1], a[2], a[3], \"doc\"); }, input);\n\t\t\t\treturn;\n\t\t\t}else{\n\t\t\t\tvar cached = getCache(pkg, META, METHODS, name, id, META);\n\t\t\t\n\t\t\t\tif(cached[DESCRIPTION]){\n\t\t\t\t\tcallbacks.shift()(LOAD, cached[DESCRIPTION], input, input[INPUT]);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar obj = {};\n\t\t\t\tobj.forFormName = \"DocFnForm\";\n\t\t\t\tobj.limit = 1;\n\n\t\t\t\tobj.filter = \"it\/DocFnForm\/require = '\" + pkg + \"' and it\/DocFnForm\/name = '\" + name + \"' and \";\n\t\t\t\tif(id == \"_\"){\n\t\t\t\t\tobj.filter += \" not(it\/DocFnForm\/id)\";\n\t\t\t\t}else{\n\t\t\t\t\tobj.filter += \" it\/DocFnForm\/id = '\" + id + \"'\";\n\t\t\t\t}\n\n\t\t\t\tobj.load = function(data){\n\t\t\t\t\tvar cached = getCache(pkg, META, METHODS, name, id, META);\n\n\t\t\t\t\tvar description = \"\";\n\t\t\t\t\tvar returns = \"\";\n\t\t\t\t\tif(data.list && data.list.length){\n\t\t\t\t\t\tdescription = docs._getMainText(data.list[0][\"main\/text\"]);\n\t\t\t\t\t\treturns = data.list[0][\"DocFnForm\/returns\"];\n\t\t\t\t\t}\n\n\t\t\t\t\tcached[DESCRIPTION]  = description;\n\t\t\t\t\tif(!cached.returns){\n\t\t\t\t\t\tcached.returns = {};\n\t\t\t\t\t}\n\t\t\t\t\tcached.returns.summary = returns;\n\n\t\t\t\t\tinput.type = \"fn\";\n\t\t\t\t\tdocs._gotDoc(LOAD, cached, input, input[INPUT]);\t\t\t\t\n\t\t\t\t}\n\t\t\t\tobj.error = function(data){\n\t\t\t\t\tinput.type = \"fn\";\n\t\t\t\t\tdocs._gotDoc(ERROR, {}, input, input[INPUT]);\n\t\t\t\t}\n\t\t\t\tsearch.push(obj);\n\n\t\t\t\tobj = {};\n\t\t\t\tobj.forFormName = \"DocParamForm\";\n\n\t\t\t\tobj.filter = \"it\/DocParamForm\/fns = '\" + pkg + \"=>\" + name;\n\t\t\t\tif(id != \"_\"){\n\t\t\t\t\tobj.filter += \"=>\" + id;\n\t\t\t\t}\n\t\t\t\tobj.filter += \"'\";\n\t\t\t\n\t\t\t\tobj.load = function(data){\n\t\t\t\t\tvar cache = getCache(pkg, META, METHODS, name, id, META);\n\t\t\t\t\tfor(var i = 0, param; param = data.list[i]; i++){\n\t\t\t\t\t\tvar pName = param[\"DocParamForm\/name\"];\n\t\t\t\t\t\tif(!cache.parameters[pName]){\n\t\t\t\t\t\t\tcache.parameters[pName] = {};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcache.parameters[pName].summary = param[\"DocParamForm\/desc\"];\n\t\t\t\t\t}\n\t\t\t\t\tinput.type = \"param\";\n\t\t\t\t\tdocs._gotDoc(LOAD, cache.parameters, input);\n\t\t\t\t}\n\t\t\t\tobj.error = function(data){\n\t\t\t\t\tinput.type = \"param\";\n\t\t\t\t\tdocs._gotDoc(ERROR, {}, input);\n\t\t\t\t}\n\t\t\t\tsearch.push(obj);\n\t\t\t}\n\t\t}else if(type == \"pkgdoc\"){\n\t\t\tvar cached = getCache(name, META);\n\n\t\t\tif(cached[DESCRIPTION]){\n\t\t\t\tcallbacks.shift()(LOAD, {description: cached[DESCRIPTION], path: cached.path}, input, input.input);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar obj = {};\n\t\t\tobj.forFormName = \"DocPkgForm\";\n\t\t\tobj.limit = 1;\n\t\t\tobj.filter = \"it\/DocPkgForm\/require = '\" + name + \"'\";\n\t\t\t\n\t\t\tobj.load = function(data){\n\t\t\t\tvar description = \"\";\n\t\t\t\tvar list = data.list;\n\t\t\t\tif(list && list.length && list[0][\"main\/text\"]){\n\t\t\t\t\tdescription = docs._getMainText(list[0][\"main\/text\"]);\n\t\t\t\t\tcached[DESCRIPTION] = description;\n\t\t\t\t\tcached.path = list[0].name;\n\t\t\t\t}\n\n\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\tcallbacks.shift()(LOAD, {description: description, path: cached.path}, input, input.input);\n\t\t\t\t}\n\t\t\t}\n\t\t\tobj.error = function(data){\n\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\tcallbacks.shift()(ERROR, \"\", input, input.input);\n\t\t\t\t}\n\t\t\t}\n\t\t\tsearch.push(obj);\n\t\t}else if(type == \"function_names\"){\n\t\t\tvar cached = getCache();\n\t\t\tif(!cached.function_names){\n\t\t\t\tdojo.debug(\"_buildCache() new cache\");\n\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\tdocs._callbacks.function_names.push([input, callbacks.shift()]);\n\t\t\t\t}\n\t\t\t\tcached.function_names = {loading: true};\n\t\t\t\t\n\t\t\t\tvar obj = {};\n\t\t\t\tobj.url = \"function_names\";\n\t\t\t\tobj.load = function(type, data, evt){\n\t\t\t\t\tcached.function_names = data;\n\t\t\t\t\twhile(docs._callbacks.function_names.length){\n\t\t\t\t\t\tvar parts = docs._callbacks.function_names.pop();\n\t\t\t\t\t\tparts[1](LOAD, data, parts[0]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tobj.error = function(type, data, evt){\n\t\t\t\t\twhile(docs._callbacks.function_names.length){\n\t\t\t\t\t\tvar parts = docs._callbacks.function_names.pop();\n\t\t\t\t\t\tparts[1](LOAD, {}, parts[0]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsearch.push(obj);\n\t\t\t}else if(cached.function_names.loading){\n\t\t\t\tdojo.debug(\"_buildCache() loading cache, adding to callback list\");\n\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\tdocs._callbacks.function_names.push([input, callbacks.shift()]);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}else{\n\t\t\t\tdojo.debug(\"_buildCache() loading from cache\");\n\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\tcallbacks.shift()(LOAD, cached.function_names, input);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}else if(type == META || type == SRC){\n\t\t\tif(!pkg){\n\t\t\t\tif(type == META){\n\t\t\t\t\tdocs.functionPackages(selectKey, name, function(){ var a = arguments; docs._withPkg.call(this, a[0], a[1], a[2], a[3], META); }, input);\n\t\t\t\t\treturn;\n\t\t\t\t}else{\n\t\t\t\t\tdocs.functionPackages(selectKey, name, function(){ var a = arguments; docs._withPkg.call(this, a[0], a[1], a[2], a[3], SRC); }, input);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tvar cached = getCache(pkg, META, METHODS, name, id);\n\n\t\t\t\tif(cached[type] && cached[type].returns){\n\t\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\t\tcallbacks.shift()(LOAD, cached[type], input);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tdojo.debug(\"Finding \" + type + \" for: \" + pkg + \", function: \" + name + \", id: \" + id);\n\n\t\t\t\tvar obj = {};\n\n\t\t\t\tif(type == SRC){\n\t\t\t\t\tobj.mimetype = \"text\/plain\"\n\t\t\t\t}\n\t\t\t\tobj.url = pkg + \"\/\" + name + \"\/\" + id + \"\/\" + type;\n\t\t\t\tobj.load = function(type, data, evt){\n\t\t\t\t\tdojo.debug(\"_buildCache() loaded \" + input.type);\n\n\t\t\t\t\tif(input.type == SRC){\n\t\t\t\t\t\tgetCache(pkg, META, METHODS, name, id).src = data;\n\t\t\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\t\t\tcallbacks.shift()(LOAD, data, input, input[INPUT]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}else{\n\t\t\t\t\t\tvar cache = getCache(pkg, META, METHODS, name, id, META);\n\t\t\t\t\t\tif(!cache.parameters){\n\t\t\t\t\t\t\tcache.parameters = {};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor(var i = 0, param; param = data.parameters[i]; i++){\n\t\t\t\t\t\t\tif(!cache.parameters[param[1]]){\n\t\t\t\t\t\t\t\tcache.parameters[param[1]] = {};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcache.parameters[param[1]].type = param[0];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(!cache.returns){\n\t\t\t\t\t\t\tcache.returns = {};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcache.returns.type = data.returns;\n\t\t\t\t\t}\n\n\t\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\t\tcallbacks.shift()(LOAD, cache, input, input[INPUT]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tobj.error = function(type, data, evt){\n\t\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\t\tcallbacks.shift()(ERROR, {}, input, input[INPUT]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tsearch.push(obj);\n\t\t}else if(type == \"pkgmeta\"){\n\t\t\tvar cached = getCache(name, \"meta\");\n\n\t\t\tif(cached.requires){\n\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\tcallbacks.shift()(LOAD, cached, input, input[INPUT]);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdojo.debug(\"Finding package meta for: \" + name);\n\n\t\t\tvar obj = {};\n\n\t\t\tobj.url = name + \"\/meta\";\n\t\t\tobj.load = function(type, data, evt){\n\t\t\t\tdojo.debug(\"_buildCache() loaded for: \" + name);\n\t\t\n\t\t\t\tvar methods = data.methods;\n\t\t\t\tif(methods){\n\t\t\t\t\tfor(var method in methods){\n\t\t\t\t\t\tif (method == \"is\") {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor(var pId in methods[method]){\n\t\t\t\t\t\t\tgetCache(name, META, METHODS, method, pId, META).summary = methods[method][pId];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar requires = data.requires;\n\t\t\t\tvar cache = getCache(name, META);\n\t\t\t\tif(requires){\n\t\t\t\t\tcache.requires = requires;\n\t\t\t\t}\n\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\tcallbacks.shift()(LOAD, cache, input, input[INPUT]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tobj.error = function(type, data, evt){\n\t\t\t\tif(callbacks && callbacks.length){\n\t\t\t\t\tcallbacks.shift()(ERROR, {}, input, input[INPUT]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tsearch.push(obj);\n\t\t}\n\t\t\n\t\tfor(var i = 0, obj; obj = search[i]; i++){\n\t\t\tvar load = obj.load;\n\t\t\tvar error = obj.error;\n\t\t\tdelete obj.load;\n\t\t\tdelete obj.error;\n\t\t\tvar mimetype = obj.mimetype;\n\t\t\tif(!mimetype){\n\t\t\t\tmimetype = \"text\/json\"\n\t\t\t}\n\t\t\tif(obj.url){\n\t\t\t\tdojo.io.bind({\n\t\t\t\t\turl: new dojo.uri.Uri(docs._url, obj.url),\n\t\t\t\t\tinput: input,\n\t\t\t\t\tmimetype: mimetype,\n\t\t\t\t\terror: error,\n\t\t\t\t\tload: load\n\t\t\t\t});\n\t\t\t}else{\n\t\t\t\tdocs._rpc.callRemote(\"search\", obj).addCallbacks(load, error);\n\t\t\t}\n\t\t}","this_inherits":["docs._withPkg","docs._withPkg","docs._withPkg"]}}},"dojo.docs.url":{"_":{"meta":{"summary":"","src":"\t\tdojo.io.bind({\n\t\t\turl: dojo.docs._rpc.serviceUrl.toString(),\n\t\t\tmethod: \"post\",\n\t\t\tmimetype: \"text\/json\",\n\t\t\tcontent: {\n\t\t\t\tusername: dojo.docs._userName,\n\t\t\t\tpassword: dojo.docs._password\n\t\t\t},\n\t\t\tload: function(type, data){\n\t\t\t\tif(data.error){\n\t\t\t\t\tdojo.docs.logInSuccess();\n\t\t\t\t}else{\n\t\t\t\t\tdojo.docs.logInFailure();\n\t\t\t\t}\n\t\t\t},\n\t\t\terror: function(){\n\t\t\t\tdojo.docs.logInFailure();\n\t\t\t}\n\t\t});"}}},"dojo.docs.mimetype":{"_":{"meta":{"summary":"","src":"\t\tdojo.io.bind({\n\t\t\turl: dojo.docs._rpc.serviceUrl.toString(),\n\t\t\tmethod: \"post\",\n\t\t\tmimetype: \"text\/json\",\n\t\t\tcontent: {\n\t\t\t\tusername: dojo.docs._userName,\n\t\t\t\tpassword: dojo.docs._password\n\t\t\t},\n\t\t\tload: function(type, data){\n\t\t\t\tif(data.error){\n\t\t\t\t\tdojo.docs.logInSuccess();\n\t\t\t\t}else{\n\t\t\t\t\tdojo.docs.logInFailure();\n\t\t\t\t}\n\t\t\t},\n\t\t\terror: function(){\n\t\t\t\tdojo.docs.logInFailure();\n\t\t\t}\n\t\t});"}}},"dojo.docs.error":{"_":{"meta":{"summary":"","src":"\t\tdojo.io.bind({\n\t\t\turl: dojo.docs._rpc.serviceUrl.toString(),\n\t\t\tmethod: \"post\",\n\t\t\tmimetype: \"text\/json\",\n\t\t\tcontent: {\n\t\t\t\tusername: dojo.docs._userName,\n\t\t\t\tpassword: dojo.docs._password\n\t\t\t},\n\t\t\tload: function(type, data){\n\t\t\t\tif(data.error){\n\t\t\t\t\tdojo.docs.logInSuccess();\n\t\t\t\t}else{\n\t\t\t\t\tdojo.docs.logInFailure();\n\t\t\t\t}\n\t\t\t},\n\t\t\terror: function(){\n\t\t\t\tdojo.docs.logInFailure();\n\t\t\t}\n\t\t});"}}},"dojo.docs.load":{"_":{"meta":{"summary":"","src":"\t\tdojo.io.bind({\n\t\t\turl: dojo.docs._rpc.serviceUrl.toString(),\n\t\t\tmethod: \"post\",\n\t\t\tmimetype: \"text\/json\",\n\t\t\tcontent: {\n\t\t\t\tusername: dojo.docs._userName,\n\t\t\t\tpassword: dojo.docs._password\n\t\t\t},\n\t\t\tload: function(type, data){\n\t\t\t\tif(data.error){\n\t\t\t\t\tdojo.docs.logInSuccess();\n\t\t\t\t}else{\n\t\t\t\t\tdojo.docs.logInFailure();\n\t\t\t\t}\n\t\t\t},\n\t\t\terror: function(){\n\t\t\t\tdojo.docs.logInFailure();\n\t\t\t}\n\t\t});"}}},"dojo.docs.selectFunction":{"_":{"meta":{"summary":"The combined information","parameters":{"name":{"type":"String"},"id":{"type":"String?"}},"src":"\t\t\/\/ summary: The combined information"}}},"dojo.docs.savePackage":{"_":{"meta":{"summary":"","parameters":{"callbackObject":{"type":"Object"},"callback":{"type":"String"},"parameters":{"type":"Object"}},"src":"\t\tdojo.event.kwConnect({\n\t\t\tsrcObj: dojo.docs,\n\t\t\tsrcFunc: \"_savedPkgRpc\",\n\t\t\ttargetObj: callbackObject,\n\t\t\ttargetFunc: callback,\n\t\t\tonce: true\n\t\t});\n\t\t\n\t\tvar props = {};\n\t\tvar cache = dojo.docs._getCache(parameters.pkg, \"meta\");\n\n\t\tvar i = 1;\n\n\t\tif(!cache.path){\n\t\t\tvar path = \"id\";\n\t\t\tprops[[\"pname\", i].join(\"\")] = \"DocPkgForm\/require\";\n\t\t\tprops[[\"pvalue\", i++].join(\"\")] = parameters.pkg;\n\t\t}else{\n\t\t\tvar path = cache.path;\n\t\t}\n\n\t\tprops.form = \"\/\/DocPkgForm\";\n\t\tprops.path = [\"\/WikiHome\/DojoDotDoc\/\", path].join(\"\");\n\n\t\tif(parameters.description){\n\t\t\tprops[[\"pname\", i].join(\"\")] = \"main\/text\";\n\t\t\tprops[[\"pvalue\", i++].join(\"\")] = parameters.description;\n\t\t}\n\t\t\n\t\tdojo.docs._rpc.callRemote(\"saveForm\",\tprops).addCallbacks(dojo.docs._pkgRpc, dojo.docs._pkgRpc);"}}},"dojo.docs.srcObj":{"_":{"meta":{"summary":"","parameters":{"callbackObject":{"type":"Object"},"callback":{"type":"String"},"parameters":{"type":"Object"}},"src":"\t\tdojo.event.kwConnect({\n\t\t\tsrcObj: dojo.docs,\n\t\t\tsrcFunc: \"_savedPkgRpc\",\n\t\t\ttargetObj: callbackObject,\n\t\t\ttargetFunc: callback,\n\t\t\tonce: true\n\t\t});\n\t\t\n\t\tvar props = {};\n\t\tvar cache = dojo.docs._getCache(parameters.pkg, \"meta\");\n\n\t\tvar i = 1;\n\n\t\tif(!cache.path){\n\t\t\tvar path = \"id\";\n\t\t\tprops[[\"pname\", i].join(\"\")] = \"DocPkgForm\/require\";\n\t\t\tprops[[\"pvalue\", i++].join(\"\")] = parameters.pkg;\n\t\t}else{\n\t\t\tvar path = cache.path;\n\t\t}\n\n\t\tprops.form = \"\/\/DocPkgForm\";\n\t\tprops.path = [\"\/WikiHome\/DojoDotDoc\/\", path].join(\"\");\n\n\t\tif(parameters.description){\n\t\t\tprops[[\"pname\", i].join(\"\")] = \"main\/text\";\n\t\t\tprops[[\"pvalue\", i++].join(\"\")] = parameters.description;\n\t\t}\n\t\t\n\t\tdojo.docs._rpc.callRemote(\"saveForm\",\tprops).addCallbacks(dojo.docs._pkgRpc, dojo.docs._pkgRpc);"}}},"dojo.docs.srcFunc":{"_":{"meta":{"summary":"","parameters":{"callbackObject":{"type":"Object"},"callback":{"type":"String"},"parameters":{"type":"Object"}},"src":"\t\tdojo.event.kwConnect({\n\t\t\tsrcObj: dojo.docs,\n\t\t\tsrcFunc: \"_savedPkgRpc\",\n\t\t\ttargetObj: callbackObject,\n\t\t\ttargetFunc: callback,\n\t\t\tonce: true\n\t\t});\n\t\t\n\t\tvar props = {};\n\t\tvar cache = dojo.docs._getCache(parameters.pkg, \"meta\");\n\n\t\tvar i = 1;\n\n\t\tif(!cache.path){\n\t\t\tvar path = \"id\";\n\t\t\tprops[[\"pname\", i].join(\"\")] = \"DocPkgForm\/require\";\n\t\t\tprops[[\"pvalue\", i++].join(\"\")] = parameters.pkg;\n\t\t}else{\n\t\t\tvar path = cache.path;\n\t\t}\n\n\t\tprops.form = \"\/\/DocPkgForm\";\n\t\tprops.path = [\"\/WikiHome\/DojoDotDoc\/\", path].join(\"\");\n\n\t\tif(parameters.description){\n\t\t\tprops[[\"pname\", i].join(\"\")] = \"main\/text\";\n\t\t\tprops[[\"pvalue\", i++].join(\"\")] = parameters.description;\n\t\t}\n\t\t\n\t\tdojo.docs._rpc.callRemote(\"saveForm\",\tprops).addCallbacks(dojo.docs._pkgRpc, dojo.docs._pkgRpc);"}}},"dojo.docs.targetObj":{"_":{"meta":{"summary":"","parameters":{"callbackObject":{"type":"Object"},"callback":{"type":"String"},"parameters":{"type":"Object"}},"src":"\t\tdojo.event.kwConnect({\n\t\t\tsrcObj: dojo.docs,\n\t\t\tsrcFunc: \"_savedPkgRpc\",\n\t\t\ttargetObj: callbackObject,\n\t\t\ttargetFunc: callback,\n\t\t\tonce: true\n\t\t});\n\t\t\n\t\tvar props = {};\n\t\tvar cache = dojo.docs._getCache(parameters.pkg, \"meta\");\n\n\t\tvar i = 1;\n\n\t\tif(!cache.path){\n\t\t\tvar path = \"id\";\n\t\t\tprops[[\"pname\", i].join(\"\")] = \"DocPkgForm\/require\";\n\t\t\tprops[[\"pvalue\", i++].join(\"\")] = parameters.pkg;\n\t\t}else{\n\t\t\tvar path = cache.path;\n\t\t}\n\n\t\tprops.form = \"\/\/DocPkgForm\";\n\t\tprops.path = [\"\/WikiHome\/DojoDotDoc\/\", path].join(\"\");\n\n\t\tif(parameters.description){\n\t\t\tprops[[\"pname\", i].join(\"\")] = \"main\/text\";\n\t\t\tprops[[\"pvalue\", i++].join(\"\")] = parameters.description;\n\t\t}\n\t\t\n\t\tdojo.docs._rpc.callRemote(\"saveForm\",\tprops).addCallbacks(dojo.docs._pkgRpc, dojo.docs._pkgRpc);"}}},"dojo.docs.targetFunc":{"_":{"meta":{"summary":"","parameters":{"callbackObject":{"type":"Object"},"callback":{"type":"String"},"parameters":{"type":"Object"}},"src":"\t\tdojo.event.kwConnect({\n\t\t\tsrcObj: dojo.docs,\n\t\t\tsrcFunc: \"_savedPkgRpc\",\n\t\t\ttargetObj: callbackObject,\n\t\t\ttargetFunc: callback,\n\t\t\tonce: true\n\t\t});\n\t\t\n\t\tvar props = {};\n\t\tvar cache = dojo.docs._getCache(parameters.pkg, \"meta\");\n\n\t\tvar i = 1;\n\n\t\tif(!cache.path){\n\t\t\tvar path = \"id\";\n\t\t\tprops[[\"pname\", i].join(\"\")] = \"DocPkgForm\/require\";\n\t\t\tprops[[\"pvalue\", i++].join(\"\")] = parameters.pkg;\n\t\t}else{\n\t\t\tvar path = cache.path;\n\t\t}\n\n\t\tprops.form = \"\/\/DocPkgForm\";\n\t\tprops.path = [\"\/WikiHome\/DojoDotDoc\/\", path].join(\"\");\n\n\t\tif(parameters.description){\n\t\t\tprops[[\"pname\", i].join(\"\")] = \"main\/text\";\n\t\t\tprops[[\"pvalue\", i++].join(\"\")] = parameters.description;\n\t\t}\n\t\t\n\t\tdojo.docs._rpc.callRemote(\"saveForm\",\tprops).addCallbacks(dojo.docs._pkgRpc, dojo.docs._pkgRpc);"}}},"dojo.docs.once":{"_":{"meta":{"summary":"","parameters":{"callbackObject":{"type":"Object"},"callback":{"type":"String"},"parameters":{"type":"Object"}},"src":"\t\tdojo.event.kwConnect({\n\t\t\tsrcObj: dojo.docs,\n\t\t\tsrcFunc: \"_savedPkgRpc\",\n\t\t\ttargetObj: callbackObject,\n\t\t\ttargetFunc: callback,\n\t\t\tonce: true\n\t\t});\n\t\t\n\t\tvar props = {};\n\t\tvar cache = dojo.docs._getCache(parameters.pkg, \"meta\");\n\n\t\tvar i = 1;\n\n\t\tif(!cache.path){\n\t\t\tvar path = \"id\";\n\t\t\tprops[[\"pname\", i].join(\"\")] = \"DocPkgForm\/require\";\n\t\t\tprops[[\"pvalue\", i++].join(\"\")] = parameters.pkg;\n\t\t}else{\n\t\t\tvar path = cache.path;\n\t\t}\n\n\t\tprops.form = \"\/\/DocPkgForm\";\n\t\tprops.path = [\"\/WikiHome\/DojoDotDoc\/\", path].join(\"\");\n\n\t\tif(parameters.description){\n\t\t\tprops[[\"pname\", i].join(\"\")] = \"main\/text\";\n\t\t\tprops[[\"pvalue\", i++].join(\"\")] = parameters.description;\n\t\t}\n\t\t\n\t\tdojo.docs._rpc.callRemote(\"saveForm\",\tprops).addCallbacks(dojo.docs._pkgRpc, dojo.docs._pkgRpc);"}}},"dojo.docs._pkgRpc":{"_":{"meta":{"summary":"","parameters":{"data":{"type":""}},"src":"\t\tif(data.name){\n\t\t\tdojo.docs._getCache(data[\"DocPkgForm\/require\"], \"meta\").path = data.name;\n\t\t\tdojo.docs._savedPkgRpc(\"load\");\n\t\t}else{\n\t\t\tdojo.docs._savedPkgRpc(\"error\");\n\t\t}"}}},"dojo.docs._savedPkgRpc":{"_":{"meta":{"summary":"","parameters":{"type":{"type":""}},"src":""}}},"dojo.docs.functionPackages":{"_":{"meta":{"summary":"Gets the package associated with a function and stores it in the .pkg value of input","parameters":{"selectKey":{"type":"mixed"},"name":{"type":"String"},"callback":{"type":"Function"},"input":{"type":"Object"}},"src":"\t\tif(!input){\n\t\t\tinput = {};\n\t\t}\n\t\tif(!input.callbacks){\n\t\t\tinput.callbacks = [];\n\t\t}\n\n\t\tinput.type = \"function_names\";\n\t\tinput.name = name;\n\t\tinput.callbacks.unshift(callback);\n\t\tinput.callbacks.unshift(dojo.docs._functionPackages);\n\t\tdojo.docs._buildCache(input);"}}},"dojo.docs._functionPackages":{"_":{"meta":{"summary":"","parameters":{"type":{"type":"String"},"data":{"type":"Array"},"evt":{"type":"Object"}},"src":"\t\tdojo.debug(\"_functionPackages() name: \" + evt.name);\n\t\tevt.pkg = '';\n\n\t\tvar results = [];\n\t\tvar data = dojo.docs._cache['function_names'];\n\t\tfor(var key in data){\n\t\t\tif(dojo.lang.inArray(data[key], evt.name)){\n\t\t\t\tdojo.debug(\"_functionPackages() package: \" + key);\n\t\t\t\tresults.push(key);\n\t\t\t}\n\t\t}\n\n\t\tif(evt.callbacks && evt.callbacks.length){\n\t\t\tevt.callbacks.shift()(type, results, evt, evt.input);\n\t\t}"}}},"dojo.docs.setUserName":{"_":{"meta":{"summary":"","parameters":{"name":{"type":"String"}},"src":"\t\tdojo.docs._userName = name;\n\t\tif(name && dojo.docs._password){\n\t\t\tdojo.docs._logIn();\n\t\t}"}}},"dojo.docs.setPassword":{"_":{"meta":{"summary":"","parameters":{"password":{"type":"String"}},"src":"\t\tdojo.docs._password = password;\n\t\tif(password && dojo.docs._userName){\n\t\t\tdojo.docs._logIn();\n\t\t}"}}},"dojo.docs._logIn":{"_":{"meta":{"summary":"","src":"\t\tdojo.io.bind({\n\t\t\turl: dojo.docs._rpc.serviceUrl.toString(),\n\t\t\tmethod: \"post\",\n\t\t\tmimetype: \"text\/json\",\n\t\t\tcontent: {\n\t\t\t\tusername: dojo.docs._userName,\n\t\t\t\tpassword: dojo.docs._password\n\t\t\t},\n\t\t\tload: function(type, data){\n\t\t\t\tif(data.error){\n\t\t\t\t\tdojo.docs.logInSuccess();\n\t\t\t\t}else{\n\t\t\t\t\tdojo.docs.logInFailure();\n\t\t\t\t}\n\t\t\t},\n\t\t\terror: function(){\n\t\t\t\tdojo.docs.logInFailure();\n\t\t\t}\n\t\t});"}}},"dojo.docs.method":{"_":{"meta":{"summary":"","src":"\t\tdojo.io.bind({\n\t\t\turl: dojo.docs._rpc.serviceUrl.toString(),\n\t\t\tmethod: \"post\",\n\t\t\tmimetype: \"text\/json\",\n\t\t\tcontent: {\n\t\t\t\tusername: dojo.docs._userName,\n\t\t\t\tpassword: dojo.docs._password\n\t\t\t},\n\t\t\tload: function(type, data){\n\t\t\t\tif(data.error){\n\t\t\t\t\tdojo.docs.logInSuccess();\n\t\t\t\t}else{\n\t\t\t\t\tdojo.docs.logInFailure();\n\t\t\t\t}\n\t\t\t},\n\t\t\terror: function(){\n\t\t\t\tdojo.docs.logInFailure();\n\t\t\t}\n\t\t});"}}},"dojo.docs.content":{"_":{"meta":{"summary":"","src":"\t\tdojo.io.bind({\n\t\t\turl: dojo.docs._rpc.serviceUrl.toString(),\n\t\t\tmethod: \"post\",\n\t\t\tmimetype: \"text\/json\",\n\t\t\tcontent: {\n\t\t\t\tusername: dojo.docs._userName,\n\t\t\t\tpassword: dojo.docs._password\n\t\t\t},\n\t\t\tload: function(type, data){\n\t\t\t\tif(data.error){\n\t\t\t\t\tdojo.docs.logInSuccess();\n\t\t\t\t}else{\n\t\t\t\t\tdojo.docs.logInFailure();\n\t\t\t\t}\n\t\t\t},\n\t\t\terror: function(){\n\t\t\t\tdojo.docs.logInFailure();\n\t\t\t}\n\t\t});"}}},"dojo.docs.username":{"_":{"meta":{"summary":"","src":"\t\tdojo.io.bind({\n\t\t\turl: dojo.docs._rpc.serviceUrl.toString(),\n\t\t\tmethod: \"post\",\n\t\t\tmimetype: \"text\/json\",\n\t\t\tcontent: {\n\t\t\t\tusername: dojo.docs._userName,\n\t\t\t\tpassword: dojo.docs._password\n\t\t\t},\n\t\t\tload: function(type, data){\n\t\t\t\tif(data.error){\n\t\t\t\t\tdojo.docs.logInSuccess();\n\t\t\t\t}else{\n\t\t\t\t\tdojo.docs.logInFailure();\n\t\t\t\t}\n\t\t\t},\n\t\t\terror: function(){\n\t\t\t\tdojo.docs.logInFailure();\n\t\t\t}\n\t\t});"}}},"dojo.docs.password":{"_":{"meta":{"summary":"","src":"\t\tdojo.io.bind({\n\t\t\turl: dojo.docs._rpc.serviceUrl.toString(),\n\t\t\tmethod: \"post\",\n\t\t\tmimetype: \"text\/json\",\n\t\t\tcontent: {\n\t\t\t\tusername: dojo.docs._userName,\n\t\t\t\tpassword: dojo.docs._password\n\t\t\t},\n\t\t\tload: function(type, data){\n\t\t\t\tif(data.error){\n\t\t\t\t\tdojo.docs.logInSuccess();\n\t\t\t\t}else{\n\t\t\t\t\tdojo.docs.logInFailure();\n\t\t\t\t}\n\t\t\t},\n\t\t\terror: function(){\n\t\t\t\tdojo.docs.logInFailure();\n\t\t\t}\n\t\t});"}}},"dojo.docs.logInSuccess":{"_":{"meta":{"summary":"","src":""}}},"dojo.docs.logInFailure":{"_":{"meta":{"summary":"","src":""}}},"dojo.docs._sort":{"_":{"meta":{"summary":"","parameters":{"a":{"type":""},"b":{"type":""}},"src":"\t\tif(a[0] < b[0]){\n\t\t\treturn -1;\n\t\t}\n\t\tif(a[0] > b[0]){\n\t\t\treturn 1;\n\t\t}\n\t  return 0;"}}},"dojo.docs._getCache":{"_":{"meta":{"summary":"","parameters":{"keys":{"type":"String..."}},"src":"\t\tvar obj = dojo.docs._cache;\n\t\tfor(var i = 0; i < arguments.length; i++){\n\t\t\tvar arg = arguments[i];\n\t\t\tif(!obj[arg]){\n\t\t\t\tobj[arg] = {};\n\t\t\t}\n\t\t\tobj = obj[arg];\n\t\t}\n\t\treturn obj;"}}}}}}}