{"dojo.string.Builder":{"meta":{"requires":{"common":["dojo.string"]},"functions":{"dojo.string.Builder":{"_":{"meta":{"summary":"","parameters":{"str":{"type":""}},"src":"\tthis.arrConcat = (dojo.render.html.capable && dojo.render.html[\"ie\"]);\n\n\tvar a = [];\n\tvar b = \"\";\n\tvar length = this.length = b.length;\n\n\tif(this.arrConcat){\n\t\tif(b.length > 0){\n\t\t\ta.push(b);\n\t\t}\n\t\tb = \"\";\n\t}\n\n\tthis.toString = this.valueOf = function(){ \n\t\treturn (this.arrConcat) ? a.join(\"\") : b;\n\t};\n\n\tthis.append = function(){\n\t\tfor(var x=0; x<arguments.length; x++){\n\t\t\tvar s = arguments[x];\n\t\t\tif((s instanceof String)||(typeof s == \"string\")){\n\t\t\t\tif(this.arrConcat){\n\t\t\t\t\ta.push(s);\n\t\t\t\t}else{\n\t\t\t\t\tb+=s;\n\t\t\t\t}\n\t\t\t\tlength += s.length;\n\t\t\t\tthis.length = length;\n\t\t\t}else{\n\t\t\t\t\/\/ if we get something array-like, call append with it as args\n\t\t\t\tthis.append.apply(this, s);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\tthis.clear = function(){\n\t\ta = [];\n\t\tb = \"\";\n\t\tlength = this.length = 0;\n\t\treturn this;\n\t};\n\n\tthis.remove = function(f,l){\n\t\tvar s = \"\"; \n\t\tif(this.arrConcat){\n\t\t\tb = a.join(\"\"); \n\t\t}\n\t\ta=[];\n\t\tif(f>0){\n\t\t\ts = b.substring(0, (f-1));\n\t\t}\n\t\tb = s + b.substring(f + l); \n\t\tlength = this.length = b.length; \n\t\tif(this.arrConcat){\n\t\t\ta.push(b);\n\t\t\tb=\"\";\n\t\t}\n\t\treturn this;\n\t};\n\n\tthis.replace = function(o,n){\n\t\tif(this.arrConcat){\n\t\t\tb = a.join(\"\"); \n\t\t}\n\t\ta = []; \n\t\tb = b.replace(o,n); \n\t\tlength = this.length = b.length; \n\t\tif(this.arrConcat){\n\t\t\ta.push(b);\n\t\t\tb=\"\";\n\t\t}\n\t\treturn this;\n\t};\n\n\tthis.insert = function(idx,s){\n\t\tif(this.arrConcat){\n\t\t\tb = a.join(\"\"); \n\t\t}\n\t\ta=[];\n\t\tif(idx == 0){\n\t\t\tb = s + b;\n\t\t}else{\n\t\t\tvar t = b.split(\"\");\n\t\t\tt.splice(idx,0,s);\n\t\t\tb = t.join(\"\")\n\t\t}\n\t\tlength = this.length = b.length; \n\t\tif(this.arrConcat){\n\t\t\ta.push(b); \n\t\t\tb=\"\";\n\t\t}\n\t\treturn this;\n\t};\n\n\tthis.append.apply(this, arguments);","this_variables":["arrConcat","length","toString","append","clear","remove","replace","insert"]}}},"dojo.string.Builder.valueOf":{"_":{"meta":{"summary":"","src":"\t\treturn (this.arrConcat) ? a.join(\"\") : b;"}}},"dojo.string.Builder.append":{"_":{"meta":{"summary":"","src":"\t\tfor(var x=0; x<arguments.length; x++){\n\t\t\tvar s = arguments[x];\n\t\t\tif((s instanceof String)||(typeof s == \"string\")){\n\t\t\t\tif(this.arrConcat){\n\t\t\t\t\ta.push(s);\n\t\t\t\t}else{\n\t\t\t\t\tb+=s;\n\t\t\t\t}\n\t\t\t\tlength += s.length;\n\t\t\t\tthis.length = length;\n\t\t\t}else{\n\t\t\t\t\/\/ if we get something array-like, call append with it as args\n\t\t\t\tthis.append.apply(this, s);\n\t\t\t}\n\t\t}\n\t\treturn this;","this_variables":["length"]}}},"dojo.string.Builder.clear":{"_":{"meta":{"summary":"","src":"\t\ta = [];\n\t\tb = \"\";\n\t\tlength = this.length = 0;\n\t\treturn this;","this_variables":["length"]}}},"dojo.string.Builder.remove":{"_":{"meta":{"summary":"","parameters":{"f":{"type":""},"":{"type":""}},"src":"\t\tvar s = \"\"; \n\t\tif(this.arrConcat){\n\t\t\tb = a.join(\"\"); \n\t\t}\n\t\ta=[];\n\t\tif(f>0){\n\t\t\ts = b.substring(0, (f-1));\n\t\t}\n\t\tb = s + b.substring(f + l); \n\t\tlength = this.length = b.length; \n\t\tif(this.arrConcat){\n\t\t\ta.push(b);\n\t\t\tb=\"\";\n\t\t}\n\t\treturn this;","this_variables":["length"]}}},"dojo.string.Builder.replace":{"_":{"meta":{"summary":"","parameters":{"o":{"type":""},"":{"type":""}},"src":"\t\tif(this.arrConcat){\n\t\t\tb = a.join(\"\"); \n\t\t}\n\t\ta = []; \n\t\tb = b.replace(o,n); \n\t\tlength = this.length = b.length; \n\t\tif(this.arrConcat){\n\t\t\ta.push(b);\n\t\t\tb=\"\";\n\t\t}\n\t\treturn this;","this_variables":["length"]}}},"dojo.string.Builder.insert":{"_":{"meta":{"summary":"","parameters":{"idx":{"type":""},"":{"type":""}},"src":"\t\tif(this.arrConcat){\n\t\t\tb = a.join(\"\"); \n\t\t}\n\t\ta=[];\n\t\tif(idx == 0){\n\t\t\tb = s + b;\n\t\t}else{\n\t\t\tvar t = b.split(\"\");\n\t\t\tt.splice(idx,0,s);\n\t\t\tb = t.join(\"\")\n\t\t}\n\t\tlength = this.length = b.length; \n\t\tif(this.arrConcat){\n\t\t\ta.push(b); \n\t\t\tb=\"\";\n\t\t}\n\t\treturn this;","this_variables":["length"]}}}}}},"dojo.string._":{"meta":{"requires":{"common":["dojo.string","dojo.string.common","dojo.string.extras","dojo.string.Builder"]}}},"dojo.string.common":{"meta":{"requires":{"common":["dojo.string"]},"functions":{"dojo.string.trim":{"_":{"meta":{"summary":"","parameters":{"str":{"type":""},"wh":{"type":""}},"src":"\tif(!str.replace){ return str; }\n\tif(!str.length){ return str; }\n\tvar re = (wh > 0) ? (\/^\\s+\/) : (wh < 0) ? (\/\\s+$\/) : (\/^\\s+|\\s+$\/g);\n\treturn str.replace(re, \"\");"}}},"dojo.string.trimStart":{"_":{"meta":{"summary":"","parameters":{"str":{"type":""}},"src":"\treturn dojo.string.trim(str, 1);"}}},"dojo.string.trimEnd":{"_":{"meta":{"summary":"","parameters":{"str":{"type":""}},"src":"\treturn dojo.string.trim(str, -1);"}}},"dojo.string.repeat":{"_":{"meta":{"summary":"","parameters":{"str":{"type":""},"count":{"type":""},"separator":{"type":""}},"src":"\tvar out = \"\";\n\tfor(var i = 0; i < count; i++) {\n\t\tout += str;\n\t\tif(separator && i < count - 1) {\n\t\t\tout += separator;\n\t\t}\n\t}\n\treturn out;"}}},"dojo.string.pad":{"_":{"meta":{"summary":"","parameters":{"str":{"type":""},"len":{"type":"=2"},"c":{"type":"='0'"},"dir":{"type":"=1"}},"src":"\tvar out = String(str);\n\tif(!c) {\n\t\tc = '0';\n\t}\n\tif(!dir) {\n\t\tdir = 1;\n\t}\n\twhile(out.length < len) {\n\t\tif(dir > 0) {\n\t\t\tout = c + out;\n\t\t} else {\n\t\t\tout += c;\n\t\t}\n\t}\n\treturn out;"}}},"dojo.string.padLeft":{"_":{"meta":{"summary":"","parameters":{"str":{"type":""},"len":{"type":""},"c":{"type":""}},"src":"\treturn dojo.string.pad(str, len, c, 1);"}}},"dojo.string.padRight":{"_":{"meta":{"summary":"","parameters":{"str":{"type":""},"len":{"type":""},"c":{"type":""}},"src":"\treturn dojo.string.pad(str, len, c, -1);"}}}}}},"dojo.string.extras":{"meta":{"requires":{"common":["dojo.string.common","dojo.lang.common","dojo.lang.array"]},"functions":{"dojo.string.substituteParams":{"_":{"meta":{"summary":"","parameters":{"template":{"type":"string"},"hash":{"type":"object - optional or ..."}},"src":"\tvar map = (typeof hash == 'object') ? hash : dojo.lang.toArray(arguments, 1);\n\n\treturn template.replace(\/\\%\\{(\\w+)\\}\/g, function(match, key){\n\t\tif(typeof(map[key]) != \"undefined\" && map[key] != null){\n\t\t\treturn map[key];\n\t\t}\n\t\tdojo.raise(\"Substitution not found: \" + key);\n\t});"}}},"dojo.string.capitalize":{"_":{"meta":{"summary":"","parameters":{"str":{"type":""}},"src":"\tif (!dojo.lang.isString(str)) { return \"\"; }\n\tif (arguments.length == 0) { str = this; }\n\n\tvar words = str.split(' ');\n\tfor(var i=0; i<words.length; i++){\n\t\twords[i] = words[i].charAt(0).toUpperCase() + words[i].substring(1);\n\t}\n\treturn words.join(\" \");"}}},"dojo.string.isBlank":{"_":{"meta":{"summary":"","parameters":{"str":{"type":""}},"src":"\tif(!dojo.lang.isString(str)) { return true; }\n\treturn (dojo.string.trim(str).length == 0);"}}},"dojo.string.encodeAscii":{"_":{"meta":{"summary":"","parameters":{"str":{"type":""}},"src":"\tif(!dojo.lang.isString(str)) { return str; }\n\tvar ret = \"\";\n\tvar value = escape(str);\n\tvar match, re = \/%u([0-9A-F]{4})\/i;\n\twhile((match = value.match(re))) {\n\t\tvar num = Number(\"0x\"+match[1]);\n\t\tvar newVal = escape(\"&#\" + num + \";\");\n\t\tret += value.substring(0, match.index) + newVal;\n\t\tvalue = value.substring(match.index+match[0].length);\n\t}\n\tret += value.replace(\/\\+\/g, \"%2B\");\n\treturn ret;"}}},"dojo.string.escape":{"_":{"meta":{"summary":"","parameters":{"type":{"type":""},"str":{"type":""}},"src":"\tvar args = dojo.lang.toArray(arguments, 1);\n\tswitch(type.toLowerCase()) {\n\t\tcase \"xml\":\n\t\tcase \"html\":\n\t\tcase \"xhtml\":\n\t\t\treturn dojo.string.escapeXml.apply(this, args);\n\t\tcase \"sql\":\n\t\t\treturn dojo.string.escapeSql.apply(this, args);\n\t\tcase \"regexp\":\n\t\tcase \"regex\":\n\t\t\treturn dojo.string.escapeRegExp.apply(this, args);\n\t\tcase \"javascript\":\n\t\tcase \"jscript\":\n\t\tcase \"js\":\n\t\t\treturn dojo.string.escapeJavaScript.apply(this, args);\n\t\tcase \"ascii\":\n\t\t\t\/\/ so it's encode, but it seems useful\n\t\t\treturn dojo.string.encodeAscii.apply(this, args);\n\t\tdefault:\n\t\t\treturn str;\n\t}"}}},"dojo.string.escapeXml":{"_":{"meta":{"summary":"","parameters":{"str":{"type":""},"noSingleQuotes":{"type":""}},"src":"\tstr = str.replace(\/&\/gm, \"&amp;\").replace(\/<\/gm, \"&lt;\")\n\t\t.replace(\/>\/gm, \"&gt;\").replace(\/\"\/gm, \"&quot;\");\n\tif(!noSingleQuotes) { str = str.replace(\/'\/gm, \"&#39;\"); }\n\treturn str;"}}},"dojo.string.escapeSql":{"_":{"meta":{"summary":"","parameters":{"str":{"type":""}},"src":"\treturn str.replace(\/'\/gm, \"''\");"}}},"dojo.string.escapeRegExp":{"_":{"meta":{"summary":"","parameters":{"str":{"type":""}},"src":"\treturn str.replace(\/\\\\\/gm, \"\\\\\\\\\").replace(\/([\\f\\b\\n\\t\\r[\\^$|?*+(){}])\/gm, \"\\\\$1\");"}}},"dojo.string.escapeJavaScript":{"_":{"meta":{"summary":"","parameters":{"str":{"type":""}},"src":"\treturn str.replace(\/([\"'\\f\\b\\n\\t\\r])\/gm, \"\\\\$1\");"}}},"dojo.string.escapeString":{"_":{"meta":{"summary":"","parameters":{"str":{"type":""}},"src":"\treturn ('\"' + str.replace(\/([\"\\\\])\/g, '\\\\$1') + '\"'\n\t\t).replace(\/[\\f]\/g, \"\\\\f\"\n\t\t).replace(\/[\\b]\/g, \"\\\\b\"\n\t\t).replace(\/[\\n]\/g, \"\\\\n\"\n\t\t).replace(\/[\\t]\/g, \"\\\\t\"\n\t\t).replace(\/[\\r]\/g, \"\\\\r\");"}}},"dojo.string.summary":{"_":{"meta":{"summary":"","parameters":{"str":{"type":""},"len":{"type":""}},"src":"\tif(!len || str.length <= len) {\n\t\treturn str;\n\t} else {\n\t\treturn str.substring(0, len).replace(\/\\.+$\/, \"\") + \"...\";\n\t}"}}},"dojo.string.endsWith":{"_":{"meta":{"summary":"","parameters":{"str":{"type":""},"end":{"type":""},"ignoreCase":{"type":""}},"src":"\tif(ignoreCase) {\n\t\tstr = str.toLowerCase();\n\t\tend = end.toLowerCase();\n\t}\n\tif((str.length - end.length) < 0){\n\t\treturn false;\n\t}\n\treturn str.lastIndexOf(end) == str.length - end.length;"}}},"dojo.string.endsWithAny":{"_":{"meta":{"summary":"","parameters":{"str":{"type":", ..."}},"src":"\tfor(var i = 1; i < arguments.length; i++) {\n\t\tif(dojo.string.endsWith(str, arguments[i])) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;"}}},"dojo.string.startsWith":{"_":{"meta":{"summary":"","parameters":{"str":{"type":""},"start":{"type":""},"ignoreCase":{"type":""}},"src":"\tif(ignoreCase) {\n\t\tstr = str.toLowerCase();\n\t\tstart = start.toLowerCase();\n\t}\n\treturn str.indexOf(start) == 0;"}}},"dojo.string.startsWithAny":{"_":{"meta":{"summary":"","parameters":{"str":{"type":", ..."}},"src":"\tfor(var i = 1; i < arguments.length; i++) {\n\t\tif(dojo.string.startsWith(str, arguments[i])) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;"}}},"dojo.string.has":{"_":{"meta":{"summary":"","parameters":{"str":{"type":", ..."}},"src":"\tfor(var i = 1; i < arguments.length; i++) {\n\t\tif(str.indexOf(arguments[i]) > -1){\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;"}}},"dojo.string.normalizeNewlines":{"_":{"meta":{"summary":"","parameters":{"text":{"type":""},"ewlineChar":{"type":""}},"src":"\tif (newlineChar == \"\\n\") {\n\t\ttext = text.replace(\/\\r\\n\/g, \"\\n\");\n\t\ttext = text.replace(\/\\r\/g, \"\\n\");\n\t} else if (newlineChar == \"\\r\") {\n\t\ttext = text.replace(\/\\r\\n\/g, \"\\r\");\n\t\ttext = text.replace(\/\\n\/g, \"\\r\");\n\t} else {\n\t\ttext = text.replace(\/([^\\r])\\n\/g, \"$1\\r\\n\");\n\t\ttext = text.replace(\/\\r([^\\n])\/g, \"\\r\\n$1\");\n\t}\n\treturn text;"}}},"dojo.string.splitEscaped":{"_":{"meta":{"summary":"","parameters":{"str":{"type":""},"harac":{"type":""}},"src":"\tvar components = [];\n\tfor (var i = 0, prevcomma = 0; i < str.length; i++) {\n\t\tif (str.charAt(i) == '\\\\') { i++; continue; }\n\t\tif (str.charAt(i) == charac) {\n\t\t\tcomponents.push(str.substring(prevcomma, i));\n\t\t\tprevcomma = i + 1;\n\t\t}\n\t}\n\tcomponents.push(str.substr(prevcomma));\n\treturn components;"}}}}}},"dojo.string":{"meta":{"requires":{"common":["dojo.string.common"]}}}}