{"dojo.date":{"meta":{"methods":{"dojo.date.setDayOfYear":{"_":{"meta":{"summary":"","parameters":{"dateObject":{"type":""},"dayofyear":{"type":""}},"src":"\tdateObject.setMonth(0);\n\tdateObject.setDate(dayofyear);\n\treturn dateObject;"}}},"dojo.date.getDayOfYear":{"_":{"meta":{"summary":"","parameters":{"dateObject":{"type":""}},"src":"\tvar firstDayOfYear = new Date(dateObject.getFullYear(), 0, 1);\n\treturn Math.floor((dateObject.getTime() -\n\t\tfirstDayOfYear.getTime()) \/ 86400000);"}}},"dojo.date.setWeekOfYear":{"_":{"meta":{"summary":"","parameters":{"dateObject":{"type":""},"week":{"type":""},"firstDay":{"type":""}},"src":"\tif (arguments.length == 1) { firstDay = 0; }          \n\tdojo.unimplemented(\"dojo.date.setWeekOfYear\");"}}},"dojo.date.getWeekOfYear":{"_":{"meta":{"summary":"","parameters":{"dateObject":{"type":""},"firstDay":{"type":""}},"src":"\tif (arguments.length == 1) { firstDay = 0; }          \n\n\t\/\/ work out the first day of the year corresponding to the week\n\tvar firstDayOfYear = new Date(dateObject.getFullYear(), 0, 1);\n\tvar day = firstDayOfYear.getDay();\n\tfirstDayOfYear.setDate(firstDayOfYear.getDate() -\n\t\t\tday + firstDay - (day > firstDay ? 7 : 0));\n\n\treturn Math.floor((dateObject.getTime() -\n\t\tfirstDayOfYear.getTime()) \/ 604800000);"}}},"dojo.date.setIsoWeekOfYear":{"_":{"meta":{"summary":"","parameters":{"dateObject":{"type":""},"week":{"type":""},"firstDay":{"type":""}},"src":"\tif (arguments.length == 1) { firstDay = 1; }          \n\tdojo.unimplemented(\"dojo.date.setIsoWeekOfYear\");"}}},"dojo.date.getIsoWeekOfYear":{"_":{"meta":{"summary":"","parameters":{"dateObject":{"type":""},"firstDay":{"type":""}},"src":"\tif (arguments.length == 1) { firstDay = 1; }          \n\tdojo.unimplemented(\"dojo.date.getIsoWeekOfYear\");"}}},"dojo.date.setIso8601":{"_":{"meta":{"summary":"","parameters":{"dateObject":{"type":""},"string":{"type":""}},"src":"\tvar comps = (string.indexOf(\"T\") == -1) ? string.split(\" \") : string.split(\"T\");\n\tdojo.date.setIso8601Date(dateObject, comps[0]);\n\tif (comps.length == 2) { dojo.date.setIso8601Time(dateObject, comps[1]); }\n\treturn dateObject;"}}},"dojo.date.fromIso8601":{"_":{"meta":{"summary":"","parameters":{"string":{"type":""}},"src":"\treturn dojo.date.setIso8601(new Date(0, 0), string);"}}},"dojo.date.setIso8601Date":{"_":{"meta":{"summary":"","parameters":{"dateObject":{"type":""},"string":{"type":""}},"src":"\tvar regexp = \"^([0-9]{4})((-?([0-9]{2})(-?([0-9]{2}))?)|\" +\n\t\t\t\"(-?([0-9]{3}))|(-?W([0-9]{2})(-?([1-7]))?))?$\";\n\tvar d = string.match(new RegExp(regexp));\n\tif(!d) {\n\t\tdojo.debug(\"invalid date string: \" + string);\n\t\treturn false;\n\t}\n\tvar year = d[1];\n\tvar month = d[4];\n\tvar date = d[6];\n\tvar dayofyear = d[8];\n\tvar week = d[10];\n\tvar dayofweek = (d[12]) ? d[12] : 1;\n\n\tdateObject.setYear(year);\n\t\n\tif (dayofyear) { dojo.date.setDayOfYear(dateObject, Number(dayofyear)); }\n\telse if (week) {\n\t\tdateObject.setMonth(0);\n\t\tdateObject.setDate(1);\n\t\tvar gd = dateObject.getDay();\n\t\tvar day =  (gd) ? gd : 7;\n\t\tvar offset = Number(dayofweek) + (7 * Number(week));\n\t\t\n\t\tif (day <= 4) { dateObject.setDate(offset + 1 - day); }\n\t\telse { dateObject.setDate(offset + 8 - day); }\n\t} else {\n\t\tif (month) { \n\t\t\tdateObject.setDate(1);\n\t\t\tdateObject.setMonth(month - 1); \n\t\t}\n\t\tif (date) { dateObject.setDate(date); }\n\t}\n\t\n\treturn dateObject;"}}},"dojo.date.fromIso8601Date":{"_":{"meta":{"summary":"","parameters":{"string":{"type":""}},"src":"\treturn dojo.date.setIso8601Date(new Date(0, 0), string);"}}},"dojo.date.setIso8601Time":{"_":{"meta":{"summary":"","parameters":{"dateObject":{"type":""},"string":{"type":""}},"src":"\tvar d = string.match(new RegExp(timezone));\n\n\tvar offset = 0; \/\/ local time if no tz info\n\tif (d) {\n\t\tif (d[0] != 'Z') {\n\t\t\toffset = (Number(d[3]) * 60) + Number(d[5]);\n\t\t\toffset *= ((d[2] == '-') ? 1 : -1);\n\t\t}\n\t\toffset -= dateObject.getTimezoneOffset();\n\t\tstring = string.substr(0, string.length - d[0].length);\n\t}\n\n\t\/\/ then work out the time\n\tvar regexp = \"^([0-9]{2})(:?([0-9]{2})(:?([0-9]{2})(\\.([0-9]+))?)?)?$\";\n\tvar d = string.match(new RegExp(regexp));\n\tif(!d) {\n\t\tdojo.debug(\"invalid time string: \" + string);\n\t\treturn false;\n\t}\n\tvar hours = d[1];\n\tvar mins = Number((d[3]) ? d[3] : 0);\n\tvar secs = (d[5]) ? d[5] : 0;\n\tvar ms = d[7] ? (Number(\"0.\" + d[7]) * 1000) : 0;\n\n\tdateObject.setHours(hours);\n\tdateObject.setMinutes(mins);\n\tdateObject.setSeconds(secs);\n\tdateObject.setMilliseconds(ms);\n\n\tif (offset != 0) {\n\t\tdateObject.setTime(dateObject.getTime() + offset * 60000);\n\t}\t\n\treturn dateObject;"}}},"dojo.date.fromIso8601Time":{"_":{"meta":{"summary":"","parameters":{"string":{"type":""}},"src":"\treturn dojo.date.setIso8601Time(new Date(0, 0), string);"}}},"dojo.date.getDaysInMonth":{"_":{"meta":{"summary":"","parameters":{"dateObject":{"type":""}},"src":"\tvar month = dateObject.getMonth();\n\tvar days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\tif (month == 1 && dojo.date.isLeapYear(dateObject)) { return 29; }\n\telse { return days[month]; }"}}},"dojo.date.isLeapYear":{"_":{"meta":{"summary":"","parameters":{"dateObject":{"type":""}},"src":"\treturn (year%400 == 0) ? true : (year%100 == 0) ? false : (year%4 == 0) ? true : false;"}}},"dojo.date.getDayName":{"_":{"meta":{"summary":"","parameters":{"dateObject":{"type":""}},"src":"\treturn dojo.date.days[dateObject.getDay()];"}}},"dojo.date.getDayShortName":{"_":{"meta":{"summary":"","parameters":{"dateObject":{"type":""}},"src":"\treturn dojo.date.shortDays[dateObject.getDay()];"}}},"dojo.date.getMonthName":{"_":{"meta":{"summary":"","parameters":{"dateObject":{"type":""}},"src":"\treturn dojo.date.months[dateObject.getMonth()];"}}},"dojo.date.getMonthShortName":{"_":{"meta":{"summary":"","parameters":{"dateObject":{"type":""}},"src":"\treturn dojo.date.shortMonths[dateObject.getMonth()];"}}},"dojo.date.getTimezoneName":{"_":{"meta":{"summary":"","parameters":{"dateObject":{"type":""}},"src":"\tfor (var i = 0; i < dojo.date.timezoneOffsets.length; i++) {\n\t\tif (dojo.date.timezoneOffsets[i] == timezoneOffset) {\n\t\t\treturn dojo.date.shortTimezones[i];\n\t\t}\n\t}\n\t\n\t\/\/ we don't know so return it formatted as \"+HH:MM\"\n\tfunction $ (s) { s = String(s); while (s.length < 2) { s = \"0\" + s; } return s; }\n\treturn (timezoneOffset < 0 ? \"-\" : \"+\") + $(Math.floor(Math.abs(\n\t\ttimezoneOffset)\/60)) + \":\" + $(Math.abs(timezoneOffset)%60);"}}},"dojo.date.getOrdinal":{"_":{"meta":{"summary":"","parameters":{"dateObject":{"type":""}},"src":"\tvar date = dateObject.getDate();\n\n\tif (date%100 != 11 && date%10 == 1) { return \"st\"; }\n\telse if (date%100 != 12 && date%10 == 2) { return \"nd\"; }\n\telse if (date%100 != 13 && date%10 == 3) { return \"rd\"; }\n\telse { return \"th\"; }"}}},"dojo.date.strftime":{"_":{"meta":{"summary":"","parameters":{"dateObject":{"type":""},"format":{"type":""}},"src":"\tfunction _ (s, n) {\n\t\ts = String(s);\n\t\tn = (n || 2) - s.length;\n\t\twhile (n-- > 0) { s = (padChar == null ? \"0\" : padChar) + s; }\n\t\treturn s;\n\t}\n\t\n\tfunction $ (property) {\n\t\tswitch (property) {\n\t\t\tcase \"a\": \/\/ abbreviated weekday name according to the current locale\n\t\t\t\treturn dojo.date.getDayShortName(dateObject); break;\n\n\t\t\tcase \"A\": \/\/ full weekday name according to the current locale\n\t\t\t\treturn dojo.date.getDayName(dateObject); break;\n\n\t\t\tcase \"b\":\n\t\t\tcase \"h\": \/\/ abbreviated month name according to the current locale\n\t\t\t\treturn dojo.date.getMonthShortName(dateObject); break;\n\t\t\t\t\n\t\t\tcase \"B\": \/\/ full month name according to the current locale\n\t\t\t\treturn dojo.date.getMonthName(dateObject); break;\n\t\t\t\t\n\t\t\tcase \"c\": \/\/ preferred date and time representation for the current\n\t\t\t\t      \/\/ locale\n\t\t\t\treturn dateObject.toLocaleString(); break;\n\n\t\t\tcase \"C\": \/\/ century number (the year divided by 100 and truncated\n\t\t\t\t      \/\/ to an integer, range 00 to 99)\n\t\t\t\treturn _(Math.floor(dateObject.getFullYear()\/100)); break;\n\t\t\t\t\n\t\t\tcase \"d\": \/\/ day of the month as a decimal number (range 01 to 31)\n\t\t\t\treturn _(dateObject.getDate()); break;\n\t\t\t\t\n\t\t\tcase \"D\": \/\/ same as %m\/%d\/%y\n\t\t\t\treturn $(\"m\") + \"\/\" + $(\"d\") + \"\/\" + $(\"y\"); break;\n\t\t\t\t\t\n\t\t\tcase \"e\": \/\/ day of the month as a decimal number, a single digit is\n\t\t\t\t      \/\/ preceded by a space (range ' 1' to '31')\n\t\t\t\tif (padChar == null) { padChar = \" \"; }\n\t\t\t\treturn _(dateObject.getDate(), 2); break;\n\t\t\t\n\t\t\tcase \"f\": \/\/ month as a decimal number, a single digit is\n\t\t\t\t\t\t\t\/\/ preceded by a space (range ' 1' to '12')\n\t\t\t\tif (padChar == null) { padChar = \" \"; }\n\t\t\t\treturn _(dateObject.getMonth()+1, 2); break;\t\t\t\t\n\t\t\t\n\t\t\tcase \"g\": \/\/ like %G, but without the century.\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase \"G\": \/\/ The 4-digit year corresponding to the ISO week number\n\t\t\t\t      \/\/ (see %V).  This has the same format and value as %Y,\n\t\t\t\t      \/\/ except that if the ISO week number belongs to the\n\t\t\t\t      \/\/ previous or next year, that year is used instead.\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase \"F\": \/\/ same as %Y-%m-%d\n\t\t\t\treturn $(\"Y\") + \"-\" + $(\"m\") + \"-\" + $(\"d\"); break;\n\t\t\t\t\n\t\t\tcase \"H\": \/\/ hour as a decimal number using a 24-hour clock (range\n\t\t\t\t      \/\/ 00 to 23)\n\t\t\t\treturn _(dateObject.getHours()); break;\n\t\t\t\t\n\t\t\tcase \"I\": \/\/ hour as a decimal number using a 12-hour clock (range\n\t\t\t\t      \/\/ 01 to 12)\n\t\t\t\treturn _(dateObject.getHours() % 12 || 12); break;\n\t\t\t\t\n\t\t\tcase \"j\": \/\/ day of the year as a decimal number (range 001 to 366)\n\t\t\t\treturn _(dojo.date.getDayOfYear(dateObject), 3); break;\n\t\t\t\t\n\t\t\tcase \"m\": \/\/ month as a decimal number (range 01 to 12)\n\t\t\t\treturn _(dateObject.getMonth() + 1); break;\n\t\t\t\t\n\t\t\tcase \"M\": \/\/ minute as a decimal numbe\n\t\t\t\treturn _(dateObject.getMinutes()); break;\n\t\t\t\n\t\t\tcase \"n\":\n\t\t\t\treturn \"\\n\"; break;\n\n\t\t\tcase \"p\": \/\/ either `am' or `pm' according to the given time value,\n\t\t\t\t      \/\/ or the corresponding strings for the current locale\n\t\t\t\treturn dateObject.getHours() < 12 ? \"am\" : \"pm\"; break;\n\t\t\t\t\n\t\t\tcase \"r\": \/\/ time in a.m. and p.m. notation\n\t\t\t\treturn $(\"I\") + \":\" + $(\"M\") + \":\" + $(\"S\") + \" \" + $(\"p\"); break;\n\t\t\t\t\n\t\t\tcase \"R\": \/\/ time in 24 hour notation\n\t\t\t\treturn $(\"H\") + \":\" + $(\"M\"); break;\n\t\t\t\t\n\t\t\tcase \"S\": \/\/ second as a decimal number\n\t\t\t\treturn _(dateObject.getSeconds()); break;\n\n\t\t\tcase \"t\":\n\t\t\t\treturn \"\\t\"; break;\n\n\t\t\tcase \"T\": \/\/ current time, equal to %H:%M:%S\n\t\t\t\treturn $(\"H\") + \":\" + $(\"M\") + \":\" + $(\"S\"); break;\n\t\t\t\t\n\t\t\tcase \"u\": \/\/ weekday as a decimal number [1,7], with 1 representing\n\t\t\t\t      \/\/ Monday\n\t\t\t\treturn String(dateObject.getDay() || 7); break;\n\t\t\t\t\n\t\t\tcase \"U\": \/\/ week number of the current year as a decimal number,\n\t\t\t\t      \/\/ starting with the first Sunday as the first day of the\n\t\t\t\t      \/\/ first week\n\t\t\t\treturn _(dojo.date.getWeekOfYear(dateObject)); break;\n\n\t\t\tcase \"V\": \/\/ week number of the year (Monday as the first day of the\n\t\t\t\t      \/\/ week) as a decimal number [01,53]. If the week containing\n\t\t\t\t      \/\/ 1 January has four or more days in the new year, then it \n\t\t\t\t      \/\/ is considered week 1. Otherwise, it is the last week of \n\t\t\t\t      \/\/ the previous year, and the next week is week 1.\n\t\t\t\treturn _(dojo.date.getIsoWeekOfYear(dateObject)); break;\n\t\t\t\t\n\t\t\tcase \"W\": \/\/ week number of the current year as a decimal number,\n\t\t\t\t      \/\/ starting with the first Monday as the first day of the\n\t\t\t\t      \/\/ first week\n\t\t\t\treturn _(dojo.date.getWeekOfYear(dateObject, 1)); break;\n\t\t\t\t\n\t\t\tcase \"w\": \/\/ day of the week as a decimal, Sunday being 0\n\t\t\t\treturn String(dateObject.getDay()); break;\n\n\t\t\tcase \"x\": \/\/ preferred date representation for the current locale\n\t\t\t\t      \/\/ without the time\n\t\t\t\tbreak;\n\n\t\t\tcase \"X\": \/\/ preferred date representation for the current locale\n\t\t\t\t      \/\/ without the time\n\t\t\t\tbreak;\n\n\t\t\tcase \"y\": \/\/ year as a decimal number without a century (range 00 to\n\t\t\t\t      \/\/ 99)\n\t\t\t\treturn _(dateObject.getFullYear()%100); break;\n\t\t\t\t\n\t\t\tcase \"Y\": \/\/ year as a decimal number including the century\n\t\t\t\treturn String(dateObject.getFullYear()); break;\n\t\t\t\n\t\t\tcase \"z\": \/\/ time zone or name or abbreviation\n\t\t\t\tvar timezoneOffset = dateObject.getTimezoneOffset();\n\t\t\t\treturn (timezoneOffset > 0 ? \"-\" : \"+\") + \n\t\t\t\t\t_(Math.floor(Math.abs(timezoneOffset)\/60)) + \":\" +\n\t\t\t\t\t_(Math.abs(timezoneOffset)%60); break;\n\t\t\t\t\n\t\t\tcase \"Z\": \/\/ time zone or name or abbreviation\n\t\t\t\treturn dojo.date.getTimezoneName(dateObject); break;\n\t\t\t\n\t\t\tcase \"%\":\n\t\t\t\treturn \"%\"; break;\n\t\t}\n\t}\n\n\t\/\/ parse the formatting string and construct the resulting string\n\tvar string = \"\";\n\tvar i = 0, index = 0, switchCase;\n\twhile ((index = format.indexOf(\"%\", i)) != -1) {\n\t\tstring += format.substring(i, index++);\n\t\t\n\t\t\/\/ inspect modifier flag\n\t\tswitch (format.charAt(index++)) {\n\t\t\tcase \"_\": \/\/ Pad a numeric result string with spaces.\n\t\t\t\tpadChar = \" \"; break;\n\t\t\tcase \"-\": \/\/ Do not pad a numeric result string.\n\t\t\t\tpadChar = \"\"; break;\n\t\t\tcase \"0\": \/\/ Pad a numeric result string with zeros.\n\t\t\t\tpadChar = \"0\"; break;\n\t\t\tcase \"^\": \/\/ Convert characters in result string to upper case.\n\t\t\t\tswitchCase = \"upper\"; break;\n\t\t\tcase \"#\": \/\/ Swap the case of the result string.\n\t\t\t\tswitchCase = \"swap\"; break;\n\t\t\tdefault: \/\/ no modifer flag so decremenet the index\n\t\t\t\tpadChar = null; index--; break;\n\t\t}\n\n\t\t\/\/ toggle case if a flag is set\n\t\tvar property = $(format.charAt(index++));\n\t\tif (switchCase == \"upper\" ||\n\t\t\t(switchCase == \"swap\" && \/[a-z]\/.test(property))) {\n\t\t\tproperty = property.toUpperCase();\n\t\t} else if (switchCase == \"swap\" && !\/[a-z]\/.test(property)) {\n\t\t\tproperty = property.toLowerCase();\n\t\t}\n\t\tvar swicthCase = null;\n\t\t\n\t\tstring += property;\n\t\ti = index;\n\t}\n\tstring += format.substring(i);\n\t\n\treturn string;"}}},"dojo.date.compare":{"_":{"meta":{"summary":" Compare two date objects by date, time, or both.","parameters":{"dateA":{"type":"Date"},"dateB":{"type":"Date"},"options":{"type":"int"}},"src":"\tvar dB=dateB||new Date();\n\tvar now=new Date();\n\tvar opt=options||(dojo.date.compareTypes.DATE|dojo.date.compareTypes.TIME);\n\tvar d1=new Date(\n\t\t((opt&dojo.date.compareTypes.DATE)?(dA.getFullYear()):now.getFullYear()), \n\t\t((opt&dojo.date.compareTypes.DATE)?(dA.getMonth()):now.getMonth()), \n\t\t((opt&dojo.date.compareTypes.DATE)?(dA.getDate()):now.getDate()), \n\t\t((opt&dojo.date.compareTypes.TIME)?(dA.getHours()):0), \n\t\t((opt&dojo.date.compareTypes.TIME)?(dA.getMinutes()):0), \n\t\t((opt&dojo.date.compareTypes.TIME)?(dA.getSeconds()):0)\n\t);\n\tvar d2=new Date(\n\t\t((opt&dojo.date.compareTypes.DATE)?(dB.getFullYear()):now.getFullYear()), \n\t\t((opt&dojo.date.compareTypes.DATE)?(dB.getMonth()):now.getMonth()), \n\t\t((opt&dojo.date.compareTypes.DATE)?(dB.getDate()):now.getDate()), \n\t\t((opt&dojo.date.compareTypes.TIME)?(dB.getHours()):0), \n\t\t((opt&dojo.date.compareTypes.TIME)?(dB.getMinutes()):0), \n\t\t((opt&dojo.date.compareTypes.TIME)?(dB.getSeconds()):0)\n\t);\n\tif(d1.valueOf()>d2.valueOf()){\n\t\treturn 1;\t\/\/\tint\n\t}\n\tif(d1.valueOf()<d2.valueOf()){\n\t\treturn -1;\t\/\/\tint\n\t}\n\treturn 0;\t\/\/\tint","returns":"int"}}},"dojo.date.add":{"_":{"meta":{"summary":"","parameters":{"d":{"type":"Date"},"unit":{"type":"dojo.date.dateParts"},"amount":{"type":"int"}},"src":"\tvar n=(amount)?amount:1;\n\tvar v;\n\tswitch(unit){\n\t\tcase dojo.date.dateParts.YEAR:{\n\t\t\tv=new Date(d.getFullYear()+n, d.getMonth(), d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds());\n\t\t\tbreak;\n\t\t}\n\t\tcase dojo.date.dateParts.MONTH:{\n\t\t\tv=new Date(d.getFullYear(), d.getMonth()+n, d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds());\n\t\t\tbreak;\n\t\t}\n\t\tcase dojo.date.dateParts.HOUR:{\n\t\t\tv=new Date(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours()+n, d.getMinutes(), d.getSeconds(), d.getMilliseconds());\n\t\t\tbreak;\n\t\t}\n\t\tcase dojo.date.dateParts.MINUTE:{\n\t\t\tv=new Date(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes()+n, d.getSeconds(), d.getMilliseconds());\n\t\t\tbreak;\n\t\t}\n\t\tcase dojo.date.dateParts.SECOND:{\n\t\t\tv=new Date(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds()+n, d.getMilliseconds());\n\t\t\tbreak;\n\t\t}\n\t\tcase dojo.date.dateParts.MILLISECOND:{\n\t\t\tv=new Date(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds()+n);\n\t\t\tbreak;\n\t\t}\n\t\tdefault:{\n\t\t\tv=new Date(d.getFullYear(), d.getMonth(), d.getDate()+n, d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds());\n\t\t}\n\t};\n\treturn v;\t\/\/\tDate","returns":"Date"}}},"dojo.date.toRelativeString":{"_":{"meta":{"summary":"","parameters":{"date":{"type":""}},"src":"\tvar now = new Date();\n\tvar diff = (now - date) \/ 1000;\n\tvar end = \" ago\";\n\tvar future = false;\n\tif(diff < 0) {\n\t\tfuture = true;\n\t\tend = \" from now\";\n\t\tdiff = -diff;\n\t}\n\n\tif(diff < 60) {\n\t\tdiff = Math.round(diff);\n\t\treturn diff + \" second\" + (diff == 1 ? \"\" : \"s\") + end;\n\t}\n\tif(diff < 60*60) {\n\t\tdiff = Math.round(diff\/60);\n\t\treturn diff + \" minute\" + (diff == 1 ? \"\" : \"s\") + end;\n\t}\n\tif(diff < 60*60*24) {\n\t\tdiff = Math.round(diff\/3600);\n\t\treturn diff + \" hour\" + (diff == 1 ? \"\" : \"s\") + end;\n\t}\n\tif(diff < 60*60*24*7) {\n\t\tdiff = Math.round(diff\/(3600*24));\n\t\tif(diff == 1) {\n\t\t\treturn future ? \"Tomorrow\" : \"Yesterday\";\n\t\t} else {\n\t\t\treturn diff + \" days\" + end;\n\t\t}\n\t}\n\treturn dojo.date.toShortDateString(date);"}}},"dojo.date.toSql":{"_":{"meta":{"summary":"","parameters":{"date":{"type":""},"noTime":{"type":""}},"src":"\treturn dojo.date.format(date, \"%F\" + !noTime ? \" %T\" : \"\");"}}},"dojo.date.fromSql":{"_":{"meta":{"summary":"","parameters":{"sqlDate":{"type":""}},"src":"\tvar parts = sqlDate.split(\/[\\- :]\/g);\n\twhile(parts.length < 6) {\n\t\tparts.push(0);\n\t}\n\treturn new Date(parts[0], (parseInt(parts[1],10)-1), parts[2], parts[3], parts[4], parts[5]);"}}}}}}}