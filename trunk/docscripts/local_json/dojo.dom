{"dojo.dom":{"meta":{"functions":{"dojo.dom.isNode":{"meta":{"summary":"checks to see if wh is actually a node.","parameters":{"wh":{"type":"object"}},"src":" if(typeof Element == \"function\") {\n\t\ttry {\n\t\t\treturn wh instanceof Element;\t\/\/\tboolean\n\t\t} catch(E) {}\n\t} else {\n\t\t\/\/ best-guess\n\t\treturn wh && !isNaN(wh.nodeType);\t\/\/\tboolean\n\t}","returns":"boolean"}},"dojo.dom.getUniqueId":{"meta":{"summary":"returns a unique string for use with any DOM element","src":" var _document = dojo.doc();\n\tdo {\n\t\tvar id = \"dj_unique_\" + (++arguments.callee._idIncrement);\n\t}while(_document.getElementById(id));\n\treturn id;\t\/\/\tstring","returns":"string"}},"dojo.dom.getFirstChildElement":{"meta":{"summary":"returns the first child element matching tagName","parameters":{"parentNode":{"type":"Element"},"tagName":{"type":"string?"}},"src":" var node = parentNode.firstChild;\n\twhile(node && node.nodeType != dojo.dom.ELEMENT_NODE){\n\t\tnode = node.nextSibling;\n\t}\n\tif(tagName && node && node.tagName && node.tagName.toLowerCase() != tagName.toLowerCase()) {\n\t\tnode = dojo.dom.nextElement(node, tagName);\n\t}\n\treturn node;\t\/\/\tElement","returns":"Element"}},"dojo.dom.getLastChildElement":{"meta":{"summary":"returns the last child element matching tagName","parameters":{"parentNode":{"type":"Element"},"tagName":{"type":"string?"}},"src":" var node = parentNode.lastChild;\n\twhile(node && node.nodeType != dojo.dom.ELEMENT_NODE) {\n\t\tnode = node.previousSibling;\n\t}\n\tif(tagName && node && node.tagName && node.tagName.toLowerCase() != tagName.toLowerCase()) {\n\t\tnode = dojo.dom.prevElement(node, tagName);\n\t}\n\treturn node;\t\/\/\tElement","returns":"Element"}},"dojo.dom.getNextSiblingElement":{"meta":{"summary":"returns the next sibling element matching tagName","parameters":{"node":{"type":"Node"},"tagName":{"type":"string?"}},"src":" if(!node) { return null; }\n\tdo {\n\t\tnode = node.nextSibling;\n\t} while(node && node.nodeType != dojo.dom.ELEMENT_NODE);\n\tif(node && tagName && tagName.toLowerCase() != node.tagName.toLowerCase()) {\n\t\treturn dojo.dom.nextElement(node, tagName);\n\t}\n\treturn node;\t\/\/\tElement","returns":"Element"}},"dojo.dom.getPreviousSiblingElement":{"meta":{"summary":"returns the previous sibling element matching tagName","parameters":{"node":{"type":"Node"},"tagName":{"type":"string?"}},"src":" if(!node) { return null; }\n\tif(tagName) { tagName = tagName.toLowerCase(); }\n\tdo {\n\t\tnode = node.previousSibling;\n\t} while(node && node.nodeType != dojo.dom.ELEMENT_NODE);\n\tif(node && tagName && tagName.toLowerCase() != node.tagName.toLowerCase()) {\n\t\treturn dojo.dom.prevElement(node, tagName);\n\t}\n\treturn node;\t\/\/\tElement","returns":"Element"}},"dojo.dom.moveChildren":{"meta":{"summary":"Moves children from srcNode to destNode and returns the count of children moved; will trim off text nodes if trim == true","parameters":{"srcNode":{"type":"Element"},"destNode":{"type":"Element"},"trim":{"type":"boolean?"}},"src":" var count = 0;\n\tif(trim) {\n\t\twhile(srcNode.hasChildNodes() &&\n\t\t\tsrcNode.firstChild.nodeType == dojo.dom.TEXT_NODE) {\n\t\t\tsrcNode.removeChild(srcNode.firstChild);\n\t\t}\n\t\twhile(srcNode.hasChildNodes() &&\n\t\t\tsrcNode.lastChild.nodeType == dojo.dom.TEXT_NODE) {\n\t\t\tsrcNode.removeChild(srcNode.lastChild);\n\t\t}\n\t}\n\twhile(srcNode.hasChildNodes()){\n\t\tdestNode.appendChild(srcNode.firstChild);\n\t\tcount++;\n\t}\n\treturn count;\t\/\/\tnumber","returns":"number"}},"dojo.dom.copyChildren":{"meta":{"summary":"Copies children from srcNde to destNode and returns the count of children copied; will trim off text nodes if trim == true","parameters":{"srcNode":{"type":"Element"},"destNode":{"type":"Element"},"trim":{"type":"boolean?"}},"src":" var clonedNode = srcNode.cloneNode(true);\n\treturn this.moveChildren(clonedNode, destNode, trim);\t\/\/\tnumber","returns":"number"}},"dojo.dom.removeChildren":{"meta":{"summary":"removes all children from node and returns the count of children removed.","parameters":{"node":{"type":"Element"}},"src":" var count = node.childNodes.length;\n\twhile(node.hasChildNodes()){ node.removeChild(node.firstChild); }\n\treturn count;\t\/\/\tnumber","returns":"number"}},"dojo.dom.replaceChildren":{"meta":{"summary":"Removes all children of node and appends newChild FIXME: what if newChild is an array-like object?","parameters":{"node":{"type":"Element"},"newChild":{"type":"Node"}},"src":" dojo.dom.removeChildren(node);\n\tnode.appendChild(newChild);"}},"dojo.dom.removeNode":{"meta":{"summary":"if node has a parent, removes node from parent and returns a reference to the removed child.","parameters":{"node":{"type":"Node"}},"src":" if(node && node.parentNode){\n\t\t\/\/ return a ref to the removed child\n\t\treturn node.parentNode.removeChild(node);\t\/\/\tNode\n\t}","returns":"Node"}},"dojo.dom.getAncestors":{"meta":{"summary":"returns all ancestors matching optional filterFunction; will return only the first if returnFirstHit","parameters":{"node":{"type":"Node"},"filterFunction":{"type":"function?"},"returnFirstHit":{"type":"boolean?"}},"src":" var ancestors = [];\n\tvar isFunction = (filterFunction && (filterFunction instanceof Function || typeof filterFunction == \"function\"));\n\twhile(node) {\n\t\tif (!isFunction || filterFunction(node)) {\n\t\t\tancestors.push(node);\n\t\t}\n\t\tif (returnFirstHit && ancestors.length > 0) { \n\t\t\treturn ancestors[0]; \t\/\/\tNode\n\t\t}\n\t\tnode = node.parentNode;\n\t}\n\tif (returnFirstHit) { return null; }\n\treturn ancestors;\t\/\/\tarray","returns":"mixed"}},"dojo.dom.getAncestorsByTag":{"meta":{"summary":"returns all ancestors matching tag (as tagName), will only return first one if returnFirstHit","parameters":{"node":{"type":"Node"},"tag":{"type":"string"},"returnFirstHit":{"type":"boolean?"}},"src":" tag = tag.toLowerCase();\n\treturn dojo.dom.getAncestors(node, function(el){\n\t\treturn ((el.tagName)&&(el.tagName.toLowerCase() == tag));\n\t}, returnFirstHit);\t\/\/\tNode || array","returns":"Node || array"}},"dojo.dom.getFirstAncestorByTag":{"meta":{"summary":"Returns first ancestor of node with tag tagName","parameters":{"node":{"type":"Node"},"tag":{"type":"string"}},"src":" return dojo.dom.getAncestorsByTag(node, tag, true);\t\/\/\tNode","returns":"Node"}},"dojo.dom.isDescendantOf":{"meta":{"summary":"Returns boolean if node is a descendant of ancestor","parameters":{"node":{"type":"Node"},"ancestor":{"type":"Node"},"guaranteeDescendant":{"type":"boolean?"}},"src":" if(guaranteeDescendant && node) { node = node.parentNode; }\n\twhile(node) {\n\t\tif(node == ancestor){ \n\t\t\treturn true; \t\/\/\tboolean\n\t\t}\n\t\tnode = node.parentNode;\n\t}\n\treturn false;\t\/\/\tboolean","returns":"boolean"},"extra":{"parameters":{"guaranteeDescendant":"allows us to be a \"true\" isDescendantOf function"}}},"dojo.dom.innerXML":{"meta":{"summary":"Implementation of MS's innerXML function.","parameters":{"node":{"type":"Node"}},"src":" if(node.innerXML){\n\t\treturn node.innerXML;\t\/\/\tstring\n\t}else if (node.xml){\n\t\treturn node.xml;\t\t\/\/\tstring\n\t}else if(typeof XMLSerializer != \"undefined\"){\n\t\treturn (new XMLSerializer()).serializeToString(node);\t\/\/\tstring\n\t}","returns":"string"}},"dojo.dom.createDocument":{"meta":{"summary":"cross-browser implementation of creating an XML document object.","src":" var doc = null;\n\tvar _document = dojo.doc();\n\tif(!dj_undef(\"ActiveXObject\")){\n\t\tvar prefixes = [ \"MSXML2\", \"Microsoft\", \"MSXML\", \"MSXML3\" ];\n\t\tfor(var i = 0; i<prefixes.length; i++){\n\t\t\ttry{\n\t\t\t\tdoc = new ActiveXObject(prefixes[i]+\".XMLDOM\");\n\t\t\t}catch(e){ \/* squelch *\/ };\n\t\t\tif(doc){ break; }\n\t\t}\n\t}else if((_document.implementation)&&\n\t\t(_document.implementation.createDocument)){\n\t\tdoc = _document.implementation.createDocument(\"\", \"\", null);\n\t}\n\treturn doc;\t\/\/\tDOMDocument","returns":"DOMDocument"}},"dojo.dom.createDocumentFromText":{"meta":{"summary":"attempts to create a Document object based on optional mime-type, using str as the contents of the document","parameters":{"str":{"type":"string"},"mimetype":{"type":"string?"}},"src":" if(!mimetype){ mimetype = \"text\/xml\"; }\n\tif(!dj_undef(\"DOMParser\")){\n\t\tvar parser = new DOMParser();\n\t\treturn parser.parseFromString(str, mimetype);\t\/\/\tDOMDocument\n\t}else if(!dj_undef(\"ActiveXObject\")){\n\t\tvar domDoc = dojo.dom.createDocument();\n\t\tif(domDoc){\n\t\t\tdomDoc.async = false;\n\t\t\tdomDoc.loadXML(str);\n\t\t\treturn domDoc;\t\/\/\tDOMDocument\n\t\t}else{\n\t\t\tdojo.debug(\"toXml didn't work?\");\n\t\t}\n\t\/*\n\t}else if((dojo.render.html.capable)&&(dojo.render.html.safari)){\n\t\t\/\/ FIXME: this doesn't appear to work!\n\t\t\/\/ from: http:\/\/web-graphics.com\/mtarchive\/001606.php\n\t\t\/\/ var xml = '<?xml version=\"1.0\"?>'+str;\n\t\tvar mtype = \"text\/xml\";\n\t\tvar xml = '<?xml version=\"1.0\"?>'+str;\n\t\tvar url = \"data:\"+mtype+\";charset=utf-8,\"+encodeURIComponent(xml);\n\t\tvar req = new XMLHttpRequest();\n\t\treq.open(\"GET\", url, false);\n\t\treq.overrideMimeType(mtype);\n\t\treq.send(null);\n\t\treturn req.responseXML;\n\t*\/\n\t}else{\n\t\tvar _document = dojo.doc();\n\t\tif(_document.createElement){\n\t\t\t\/\/ FIXME: this may change all tags to uppercase!\n\t\t\tvar tmp = _document.createElement(\"xml\");\n\t\t\ttmp.innerHTML = str;\n\t\t\tif(_document.implementation && _document.implementation.createDocument) {\n\t\t\t\tvar xmlDoc = _document.implementation.createDocument(\"foo\", \"\", null);\n\t\t\t\tfor(var i = 0; i < tmp.childNodes.length; i++) {\n\t\t\t\t\txmlDoc.importNode(tmp.childNodes.item(i), true);\n\t\t\t\t}\n\t\t\t\treturn xmlDoc;\t\/\/\tDOMDocument\n\t\t\t}\n\t\t\t\/\/ FIXME: probably not a good idea to have to return an HTML fragment\n\t\t\t\/\/ FIXME: the tmp.doc.firstChild is as tested from IE, so it may not\n\t\t\t\/\/ work that way across the board\n\t\t\treturn ((tmp.document)&&\n\t\t\t\t(tmp.document.firstChild ?  tmp.document.firstChild : tmp));\t\/\/\tDOMDocument\n\t\t}\n\t}\n\treturn null;","returns":"DOMDocument"}},"dojo.dom.prependChild":{"meta":{"summary":"prepends node to parent's children nodes","parameters":{"node":{"type":"Element"},"parent":{"type":"Element"}},"src":" if(parent.firstChild) {\n\t\tparent.insertBefore(node, parent.firstChild);\n\t} else {\n\t\tparent.appendChild(node);\n\t}\n\treturn true;\t\/\/\tboolean","returns":"boolean"}},"dojo.dom.insertBefore":{"meta":{"summary":"Try to insert node before ref","parameters":{"node":{"type":"Node"},"ref":{"type":"Node"},"force":{"type":"boolean?"}},"src":" if (force != true &&\n\t\t(node === ref || node.nextSibling === ref)){ return false; }\n\tvar parent = ref.parentNode;\n\tparent.insertBefore(node, ref);\n\treturn true;\t\/\/\tboolean","returns":"boolean"}},"dojo.dom.insertAfter":{"meta":{"summary":"Try to insert node after ref","parameters":{"node":{"type":"Node"},"ref":{"type":"Node"},"force":{"type":"boolean?"}},"src":" var pn = ref.parentNode;\n\tif(ref == pn.lastChild){\n\t\tif((force != true)&&(node === ref)){\n\t\t\treturn false;\t\/\/\tboolean\n\t\t}\n\t\tpn.appendChild(node);\n\t}else{\n\t\treturn this.insertBefore(node, ref.nextSibling, force);\t\/\/\tboolean\n\t}\n\treturn true;\t\/\/\tboolean","returns":"boolean"}},"dojo.dom.insertAtPosition":{"meta":{"summary":"attempt to insert node in relation to ref based on position","parameters":{"node":{"type":"Node"},"ref":{"type":"Node"},"position":{"type":"string"}},"src":" if((!node)||(!ref)||(!position)){ \n\t\treturn false;\t\/\/\tboolean \n\t}\n\tswitch(position.toLowerCase()){\n\t\tcase \"before\":\n\t\t\treturn dojo.dom.insertBefore(node, ref);\t\/\/\tboolean\n\t\tcase \"after\":\n\t\t\treturn dojo.dom.insertAfter(node, ref);\t\t\/\/\tboolean\n\t\tcase \"first\":\n\t\t\tif(ref.firstChild){\n\t\t\t\treturn dojo.dom.insertBefore(node, ref.firstChild);\t\/\/\tboolean\n\t\t\t}else{\n\t\t\t\tref.appendChild(node);\n\t\t\t\treturn true;\t\/\/\tboolean\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault: \/\/ aka: last\n\t\t\tref.appendChild(node);\n\t\t\treturn true;\t\/\/\tboolean\n\t}","returns":"boolean"}},"dojo.dom.insertAtIndex":{"meta":{"summary":"insert node into child nodes nodelist of containingNode at insertionIndex.","parameters":{"node":{"type":"Node"},"containingNode":{"type":"Element"},"insertionIndex":{"type":"number"}},"src":" var siblingNodes = containingNode.childNodes;\n\t\/\/ if there aren't any kids yet, just add it to the beginning\n\tif (!siblingNodes.length){\n\t\tcontainingNode.appendChild(node);\n\t\treturn true;\t\/\/\tboolean\n\t}\n\t\/\/ otherwise we need to walk the childNodes\n\t\/\/ and find our spot\n\tvar after = null;\n\tfor(var i=0; i<siblingNodes.length; i++){\n\t\tvar sibling_index = siblingNodes.item(i)[\"getAttribute\"] ? parseInt(siblingNodes.item(i).getAttribute(\"dojoinsertionindex\")) : -1;\n\t\tif (sibling_index < insertionIndex){\n\t\t\tafter = siblingNodes.item(i);\n\t\t}\n\t}\n\tif (after){\n\t\t\/\/ add it after the node in {after}\n\t\treturn dojo.dom.insertAfter(node, after);\t\/\/\tboolean\n\t}else{\n\t\t\/\/ add it to the start\n\t\treturn dojo.dom.insertBefore(node, siblingNodes.item(0));\t\/\/\tboolean\n\t}","returns":"boolean"}},"dojo.dom.textContent":{"meta":{"summary":"implementation of the DOM Level 3 attribute; scan node for text","parameters":{"node":{"type":"Node"},"text":{"type":"string"}},"src":" if (arguments.length>1) {\n\t\tvar _document = dojo.doc();\n\t\tdojo.dom.replaceChildren(node, _document.createTextNode(text));\n\t\treturn text;\t\/\/\tstring\n\t} else {\n\t\tif(node.textContent != undefined){ \/\/FF 1.5\n\t\t\treturn node.textContent;\t\/\/\tstring\n\t\t}\n\t\tvar _result = \"\";\n\t\tif (node == null) { return _result; }\n\t\tfor (var i = 0; i < node.childNodes.length; i++) {\n\t\t\tswitch (node.childNodes[i].nodeType) {\n\t\t\t\tcase 1: \/\/ ELEMENT_NODE\n\t\t\t\tcase 5: \/\/ ENTITY_REFERENCE_NODE\n\t\t\t\t\t_result += dojo.dom.textContent(node.childNodes[i]);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3: \/\/ TEXT_NODE\n\t\t\t\tcase 2: \/\/ ATTRIBUTE_NODE\n\t\t\t\tcase 4: \/\/ CDATA_SECTION_NODE\n\t\t\t\t\t_result += node.childNodes[i].nodeValue;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn _result;\t\/\/\tstring\n\t}","returns":"string"}},"dojo.dom.hasParent":{"meta":{"summary":"returns whether or not node is a child of another node.","parameters":{"node":{"type":"Node"}},"src":" return node && node.parentNode && dojo.dom.isNode(node.parentNode);\t\/\/\tboolean","returns":"boolean"}},"dojo.dom.isTag":{"meta":{"summary":"determines if node has any of the provided tag names and returns the tag name that matches, empty string otherwise.","parameters":{"node":{"type":"Node ..."}},"src":" if(node && node.tagName) {\n\t\tfor(var i=1; i<arguments.length; i++){\n\t\t\tif(node.tagName==String(arguments[i])){\n\t\t\t\treturn String(arguments[i]);\t\/\/\tstring\n\t\t\t}\n\t\t}\n\t}\n\treturn \"\";\t\/\/\tstring","returns":"string"}},"dojo.dom.setAttributeNS":{"meta":{"summary":"implementation of DOM2 setAttributeNS that works cross browser.","parameters":{"elem":{"type":"Element"},"namespaceURI":{"type":"string"},"attrName":{"type":"string"},"attrValue":{"type":"string"}},"src":" if(elem == null || ((elem == undefined)&&(typeof elem == \"undefined\"))){\n\t\tdojo.raise(\"No element given to dojo.dom.setAttributeNS\");\n\t}\n\tif(!((elem.setAttributeNS == undefined)&&(typeof elem.setAttributeNS == \"undefined\"))){ \/\/ w3c\n\t\telem.setAttributeNS(namespaceURI, attrName, attrValue);\n\t}else{ \/\/ IE\n\t\t\/\/ get a root XML document\n\t\tvar ownerDoc = elem.ownerDocument;\n\t\tvar attribute = ownerDoc.createNode(\n\t\t\t2, \/\/ node type\n\t\t\tattrName,\n\t\t\tnamespaceURI\n\t\t);\n\t\t\/\/ set value\n\t\tattribute.nodeValue = attrValue;\n\t\t\/\/ attach to element\n\t\telem.setAttributeNode(attribute);\n\t}"}},"dojo.dom.xmlns":{"meta":{"variables":["dt","dcq","default"]}}}}}}