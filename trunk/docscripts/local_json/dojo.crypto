{"dojo.crypto.Blowfish":{"meta":{"requires":{"common":["dojo.crypto"]},"methods":{"dojo.crypto.Blowfish.getIV":{"_":{"meta":{"summary":"","parameters":{"outputType":{"type":""}},"src":"\t\tvar out=outputType||dojo.crypto.outputTypes.Base64;\n\t\tswitch(out){\n\t\t\tcase dojo.crypto.outputTypes.Hex:{\n\t\t\t\tvar s=[];\n\t\t\t\tfor(var i=0; i<iv.length; i++)\n\t\t\t\t\ts.push((iv[i]).toString(16));\n\t\t\t\treturn s.join(\"\");\n\t\t\t}\n\t\t\tcase dojo.crypto.outputTypes.String:{\n\t\t\t\treturn iv.join(\"\");\n\t\t\t}\n\t\t\tcase dojo.crypto.outputTypes.Raw:{\n\t\t\t\treturn iv;\n\t\t\t}\n\t\t\tdefault:{\n\t\t\t\treturn toBase64(iv);\n\t\t\t}\n\t\t}"}}},"dojo.crypto.Blowfish.setIV":{"_":{"meta":{"summary":"","parameters":{"data":{"type":""},"inputType":{"type":""}},"src":"\t\tvar ip=inputType||dojo.crypto.outputTypes.Base64;\n\t\tvar ba=null;\n\t\tswitch(ip){\n\t\t\tcase dojo.crypto.outputTypes.String:{\n\t\t\t\tba=[];\n\t\t\t\tfor (var i=0; i<data.length; i++){\n\t\t\t\t\tba.push(data.charCodeAt(i));\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase dojo.crypto.outputTypes.Hex:{\n\t\t\t\tba=[];\n\t\t\t\tvar i=0;\n\t\t\t\twhile (i+1<data.length){\n\t\t\t\t\tba.push(parseInt(data.substr(i,2),16));\n\t\t\t\t\ti+=2;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase dojo.crypto.outputTypes.Raw:{\n\t\t\t\tba=data;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault:{\n\t\t\t\tba=fromBase64(data);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\/\/\tmake it a pair of words now\n\t\tiv={};\n\t\tiv.left=ba[0]*POW24|ba[1]*POW16|ba[2]*POW8|ba[3];\n\t\tiv.right=ba[4]*POW24|ba[5]*POW16|ba[6]*POW8|ba[7];"}}},"dojo.crypto.Blowfish.encrypt":{"_":{"meta":{"summary":"","parameters":{"plaintext":{"type":""},"key":{"type":""},"ao":{"type":""}},"src":"\t\tvar out=dojo.crypto.outputTypes.Base64;\n\t\tvar mode=dojo.crypto.cipherModes.EBC;\n\t\tif (ao){\n\t\t\tif (ao.outputType) out=ao.outputType;\n\t\t\tif (ao.cipherMode) mode=ao.cipherMode;\n\t\t}\n\n\t\tvar bx = init(key);\n\t\tvar padding = 8-(plaintext.length&7);\n\t\tfor (var i=0; i<padding; i++) plaintext+=String.fromCharCode(padding);\n\t\tvar cipher=[];\n\t\tvar count=plaintext.length >> 3;\n\t\tvar pos=0;\n\t\tvar o={};\n\t\tvar isCBC=(mode==dojo.crypto.cipherModes.CBC);\n\t\tvar vector={left:iv.left||null, right:iv.right||null};\n\t\tfor(var i=0; i<count; i++){\n\t\t\to.left=plaintext.charCodeAt(pos)*POW24\n\t\t\t\t|plaintext.charCodeAt(pos+1)*POW16\n\t\t\t\t|plaintext.charCodeAt(pos+2)*POW8\n\t\t\t\t|plaintext.charCodeAt(pos+3);\n\t\t\to.right=plaintext.charCodeAt(pos+4)*POW24\n\t\t\t\t|plaintext.charCodeAt(pos+5)*POW16\n\t\t\t\t|plaintext.charCodeAt(pos+6)*POW8\n\t\t\t\t|plaintext.charCodeAt(pos+7);\n\n\t\t\tif(isCBC){\n\t\t\t\to.left=xor(o.left, vector.left);\n\t\t\t\to.right=xor(o.right, vector.right);\n\t\t\t}\n\n\t\t\teb(o, bx);\t\/\/\tencrypt the block\n\n\t\t\tif(isCBC){\n\t\t\t\tvector.left=o.left;\n\t\t\t\tvector.right=o.right;dojo.crypto.outputTypes.Hex\n\t\t\t}\n\n\t\t\tcipher.push((o.left>>24)&0xff); \n\t\t\tcipher.push((o.left>>16)&0xff); \n\t\t\tcipher.push((o.left>>8)&0xff);\n\t\t\tcipher.push(o.left&0xff);\n\t\t\tcipher.push((o.right>>24)&0xff); \n\t\t\tcipher.push((o.right>>16)&0xff); \n\t\t\tcipher.push((o.right>>8)&0xff);\n\t\t\tcipher.push(o.right&0xff);\n\t\t\tpos+=8;\n\t\t}\n\t\tswitch(out){\n\t\t\tcase dojo.crypto.outputTypes.Hex:{\n\t\t\t\tvar s=[];\n\t\t\t\tfor(var i=0; i<cipher.length; i++)\n\t\t\t\t\ts.push((cipher[i]).toString(16));\n\t\t\t\treturn s.join(\"\");\n\t\t\t}\n\t\t\tcase dojo.crypto.outputTypes.String:{\n\t\t\t\treturn cipher.join(\"\");\n\t\t\t}\n\t\t\tcase dojo.crypto.outputTypes.Raw:{\n\t\t\t\treturn cipher;\n\t\t\t}\n\t\t\tdefault:{\n\t\t\t\treturn toBase64(cipher);\n\t\t\t}\n\t\t}"}}},"dojo.crypto.Blowfish.decrypt":{"_":{"meta":{"summary":"","parameters":{"ciphertext":{"type":""},"key":{"type":""},"ao":{"type":""}},"src":"\t\tvar ip=dojo.crypto.outputTypes.Base64;\n\t\tvar mode=dojo.crypto.cipherModes.EBC;\n\t\tif (ao){\n\t\t\tif (ao.outputType) ip=ao.outputType;\n\t\t\tif (ao.cipherMode) mode=ao.cipherMode;\n\t\t}\n\t\tvar bx = init(key);\n\t\tvar pt=[];\n\t\n\t\tvar c=null;\n\t\tswitch(ip){\n\t\t\tcase dojo.crypto.outputTypes.Hex:{\n\t\t\t\tc=[];\n\t\t\t\tvar i=0;\n\t\t\t\twhile (i+1<ciphertext.length){\n\t\t\t\t\tc.push(parseInt(ciphertext.substr(i,2),16));\n\t\t\t\t\ti+=2;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase dojo.crypto.outputTypes.String:{\n\t\t\t\tc=[];\n\t\t\t\tfor (var i=0; i<ciphertext.length; i++){\n\t\t\t\t\tc.push(ciphertext.charCodeAt(i));\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase dojo.crypto.outputTypes.Raw:{\n\t\t\t\tc=ciphertext;\t\/\/\tshould be a byte array\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault:{\n\t\t\t\tc=fromBase64(ciphertext);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tvar count=c.length >> 3;\n\t\tvar pos=0;\n\t\tvar o={};\n\t\tvar isCBC=(mode==dojo.crypto.cipherModes.CBC);\n\t\tvar vector={left:iv.left||null, right:iv.right||null};\n\t\tfor(var i=0; i<count; i++){\n\t\t\to.left=c[pos]*POW24|c[pos+1]*POW16|c[pos+2]*POW8|c[pos+3];\n\t\t\to.right=c[pos+4]*POW24|c[pos+5]*POW16|c[pos+6]*POW8|c[pos+7];\n\n\t\t\tif(isCBC){\n\t\t\t\tvar left=o.left;\n\t\t\t\tvar right=o.right;\n\t\t\t}\n\n\t\t\tdb(o, bx);\t\/\/\tdecrypt the block\n\n\t\t\tif(isCBC){\n\t\t\t\to.left=xor(o.left, vector.left);\n\t\t\t\to.right=xor(o.right, vector.right);\n\t\t\t\tvector.left=left;\n\t\t\t\tvector.right=right;\n\t\t\t}\n\n\t\t\tpt.push((o.left>>24)&0xff);\n\t\t\tpt.push((o.left>>16)&0xff);\n\t\t\tpt.push((o.left>>8)&0xff);\n\t\t\tpt.push(o.left&0xff);\n\t\t\tpt.push((o.right>>24)&0xff);\n\t\t\tpt.push((o.right>>16)&0xff);\n\t\t\tpt.push((o.right>>8)&0xff);\n\t\t\tpt.push(o.right&0xff);\n\t\t\tpos+=8;\n\t\t}\n\n\t\t\/\/\tcheck for padding, and remove.\n\t\tif(pt[pt.length-1]==pt[pt.length-2]||pt[pt.length-1]==0x01){\n\t\t\tvar n=pt[pt.length-1];\n\t\t\tpt.splice(pt.length-n, n);\n\t\t}\n\n\t\t\/\/\tconvert to string\n\t\tfor(var i=0; i<pt.length; i++)\n\t\t\tpt[i]=String.fromCharCode(pt[i]);\n\t\treturn pt.join(\"\");"}}}}}},"dojo.crypto.MD5":{"meta":{"requires":{"common":["dojo.crypto"]},"methods":{"dojo.crypto.MD5.compute":{"_":{"meta":{"summary":"","parameters":{"data":{"type":""},"utputType":{"type":""}},"src":"\t\tvar out=outputType||dojo.crypto.outputTypes.Base64;\n\t\tswitch(out){\n\t\t\tcase dojo.crypto.outputTypes.Hex:{\n\t\t\t\treturn toHex(core(toWord(data),data.length*chrsz));\n\t\t\t}\n\t\t\tcase dojo.crypto.outputTypes.String:{\n\t\t\t\treturn toString(core(toWord(data),data.length*chrsz));\n\t\t\t}\n\t\t\tdefault:{\n\t\t\t\treturn toBase64(core(toWord(data),data.length*chrsz));\n\t\t\t}\n\t\t}"}}},"dojo.crypto.MD5.getHMAC":{"_":{"meta":{"summary":"","parameters":{"data":{"type":""},"ey":{"type":""},"utputType":{"type":""}},"src":"\t\tvar out=outputType||dojo.crypto.outputTypes.Base64;\n\t\tswitch(out){\n\t\t\tcase dojo.crypto.outputTypes.Hex:{\n\t\t\t\treturn toHex(hmac(data,key));\n\t\t\t}\n\t\t\tcase dojo.crypto.outputTypes.String:{\n\t\t\t\treturn toString(hmac(data,key));\n\t\t\t}\n\t\t\tdefault:{\n\t\t\t\treturn toBase64(hmac(data,key));\n\t\t\t}\n\t\t}"}}}}}},"dojo.crypto.MD5_copyright":{"meta":{"requires":{"common":["dojo.crypto"]},"methods":{"dojo.crypto.MD5.compute":{"_":{"meta":{"summary":"","parameters":{"data":{"type":""},"utputType":{"type":""}},"src":"\t\tvar out=outputType||dojo.crypto.outputTypes.Base64;\n\t\tswitch(out){\n\t\t\tcase dojo.crypto.outputTypes.Hex:{\n\t\t\t\treturn toHex(core(toWord(data),data.length*chrsz));\n\t\t\t}\n\t\t\tcase dojo.crypto.outputTypes.String:{\n\t\t\t\treturn toString(core(toWord(data),data.length*chrsz));\n\t\t\t}\n\t\t\tdefault:{\n\t\t\t\treturn toBase64(core(toWord(data),data.length*chrsz));\n\t\t\t}\n\t\t}"}}},"dojo.crypto.MD5.getHMAC":{"_":{"meta":{"summary":"","parameters":{"data":{"type":""},"ey":{"type":""},"utputType":{"type":""}},"src":"\t\tvar out=outputType||dojo.crypto.outputTypes.Base64;\n\t\tswitch(out){\n\t\t\tcase dojo.crypto.outputTypes.Hex:{\n\t\t\t\treturn toHex(hmac(data,key));\n\t\t\t}\n\t\t\tcase dojo.crypto.outputTypes.String:{\n\t\t\t\treturn toString(hmac(data,key));\n\t\t\t}\n\t\t\tdefault:{\n\t\t\t\treturn toBase64(hmac(data,key));\n\t\t\t}\n\t\t}"}}}}}},"dojo.crypto.Rijndael":{"meta":{"requires":{"common":["dojo.crypto","dojo.experimental"]},"methods":{"dojo.crypto.Rijndael.encrypt":{"_":{"meta":{"summary":"","parameters":{"plaintext":{"type":""},"key":{"type":""}},"src":""}}},"dojo.crypto.Rijndael.decrypt":{"_":{"meta":{"summary":"","parameters":{"ciphertext":{"type":""},"key":{"type":""}},"src":""}}}}}},"dojo.crypto.SHA1":{"meta":{"requires":{"common":["dojo.crypto","dojo.experimental"]},"methods":{"dojo.crypto.SHA1.compute":{"_":{"meta":{"summary":"","parameters":{"data":{"type":""},"utputType":{"type":""}},"src":"\t\tvar out=outputType||dojo.crypto.outputTypes.Base64;\n\t\tswitch(out){\n\t\t\tcase dojo.crypto.outputTypes.Hex:{\n\t\t\t\treturn toHex(core(toWord(data),data.length*chrsz));\n\t\t\t}\n\t\t\tcase dojo.crypto.outputTypes.String:{\n\t\t\t\treturn toString(core(toWord(data),data.length*chrsz));\n\t\t\t}\n\t\t\tdefault:{\n\t\t\t\treturn toBase64(core(toWord(data),data.length*chrsz));\n\t\t\t}\n\t\t}"}}},"dojo.crypto.SHA1.getHMAC":{"_":{"meta":{"summary":"","parameters":{"data":{"type":""},"ey":{"type":""},"utputType":{"type":""}},"src":"\t\tvar out=outputType||dojo.crypto.outputTypes.Base64;\n\t\tswitch(out){\n\t\t\tcase dojo.crypto.outputTypes.Hex:{\n\t\t\t\treturn toHex(hmac(data,key));\n\t\t\t}\n\t\t\tcase dojo.crypto.outputTypes.String:{\n\t\t\t\treturn toString(hmac(data,key));\n\t\t\t}\n\t\t\tdefault:{\n\t\t\t\treturn toBase64(hmac(data,key));\n\t\t\t}\n\t\t}"}}}}}},"dojo.crypto.SHA256":{"meta":{"requires":{"common":["dojo.crypto","dojo.experimental"]},"methods":{"dojo.crypto.SHA256.compute":{"_":{"meta":{"summary":"","parameters":{"s":{"type":""}},"src":""}}}}}},"dojo.crypto._":{"meta":{"requires":{"common":["dojo.crypto","dojo.crypto.MD5"]}}}}