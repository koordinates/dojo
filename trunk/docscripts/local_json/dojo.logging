{"dojo.logging.Logger":{"meta":{"requires":{"common":["dojo.lang"]},"methods":{"dojo.logging.Record":{"_":{"meta":{"summary":"","parameters":{"lvl":{"type":""},"msg":{"type":""}},"src":"\tthis.level = lvl;\n\tthis.message = msg;\n\tthis.time = new Date();\n\t\/\/ FIXME: what other information can we receive\/discover here?","this_variables":["level","message","time"]}}},"dojo.logging.LogFilter":{"_":{"meta":{"summary":"","parameters":{"loggerChain":{"type":""}},"src":"\tthis.passChain = loggerChain || \"\";\n\tthis.filter = function(record){\n\t\t\/\/ FIXME: need to figure out a way to enforce the loggerChain\n\t\t\/\/ restriction\n\t\treturn true; \/\/ pass all records\n\t}","this_variables":["passChain","filter"],"returns":"pass all records"}}},"dojo.logging.LogFilter.filter":{"_":{"meta":{"summary":"","parameters":{"record":{"type":""}},"src":"","returns":"pass all records"}}},"dojo.logging.Logger":{"_":{"meta":{"summary":"","src":"\tthis.cutOffLevel = 0;\n\tthis.propagate = true;\n\tthis.parent = null;\n\t\/\/ storage for dojo.logging.Record objects seen and accepted by this logger\n\tthis.data = [];\n\tthis.filters = [];\n\tthis.handlers = [];","this_variables":["cutOffLevel","propagate","parent","data","filters","handlers","cutOffLevel","cutOffLevel","filters"]}}},"dojo.logging.LogHandler":{"_":{"meta":{"summary":"","parameters":{"level":{"type":""}},"src":"\tthis.cutOffLevel = (level) ? level : 0;\n\tthis.formatter = null; \/\/ FIXME: default formatter?\n\tthis.data = [];\n\tthis.filters = [];","this_variables":["cutOffLevel","formatter","data","filters","numRecords","postType","postInterval"]}}},"dojo.logging.LogHandler.setFormatter":{"_":{"meta":{"summary":"","parameters":{"fmtr":{"type":""}},"src":"","this":"dojo.logging.LogHandler"}}},"dojo.logging.LogHandler.flush":{"_":{"meta":{"summary":"","src":"\tdojo.unimplemented(\"flush\");","this":"dojo.logging.LogHandler"}}},"dojo.logging.LogHandler.close":{"_":{"meta":{"summary":"","src":"\tdojo.unimplemented(\"close\");","this":"dojo.logging.LogHandler"}}},"dojo.logging.LogHandler.handleError":{"_":{"meta":{"summary":"","src":"\tdojo.unimplemented(\"handleError\");","this":"dojo.logging.LogHandler"}}},"dojo.logging.LogHandler.handle":{"_":{"meta":{"summary":"","parameters":{"record":{"type":""}},"src":"\t\tthis.emit(record);\n\t}","this":"dojo.logging.LogHandler"}}},"dojo.logging.LogHandler.emit":{"_":{"meta":{"summary":"","parameters":{"record":{"type":""}},"src":"","this":"dojo.logging.LogHandler"}}},"dojo.logging.log.getLogger":{"_":{"meta":{"summary":"","parameters":{"name":{"type":""}},"src":"\tif(!this.loggers[name]){\n\t\tthis.loggers[name] = new dojo.logging.Logger();\n\t\tthis.loggers[name].parent = this;\n\t}\n\treturn this.loggers[name];","this":"dojo.logging.LogHandler"}}},"dojo.logging.log.getLevelName":{"_":{"meta":{"summary":"","parameters":{"lvl":{"type":""}},"src":"\tfor(var x=0; x<this.levels.length; x++){\n\t\tif(this.levels[x].level == lvl){\n\t\t\treturn this.levels[x].name;\n\t\t}\n\t}\n\treturn null;","this":"dojo.logging.LogHandler"}}},"dojo.logging.log.addLevelName":{"_":{"meta":{"summary":"","parameters":{"name":{"type":""},"lvl":{"type":""}},"src":"\tif(this.getLevelName(name)){\n\t\tthis.err(\"could not add log level \"+name+\" because a level with that name already exists\");\n\t\treturn false;\n\t}\n\tthis.levels.append({\"name\": name, \"level\": parseInt(lvl)});\n\treturn true;","this":"dojo.logging.LogHandler"}}},"dojo.logging.log.getLevel":{"_":{"meta":{"summary":"","parameters":{"name":{"type":""}},"src":"\tfor(var x=0; x<this.levels.length; x++){\n\t\tif(this.levels[x].name.toUpperCase() == name.toUpperCase()){\n\t\t\treturn this.levels[x].level;\n\t\t}\n\t}\n\treturn null;","this":"dojo.logging.LogHandler"}}},"dojo.logging.MemoryLogHandler":{"_":{"meta":{"summary":"","parameters":{"level":{"type":""},"recordsToKeep":{"type":""},"postType":{"type":""},"postInterval":{"type":""}},"src":"\t\/\/ default is unlimited\n\tthis.numRecords = (typeof djConfig['loggingNumRecords'] != 'undefined') ? djConfig['loggingNumRecords'] : ((recordsToKeep) ? recordsToKeep : -1);\n\t\/\/ 0=count, 1=time, -1=don't post TODO: move this to a better location for prefs\n\tthis.postType = (typeof djConfig['loggingPostType'] != 'undefined') ? djConfig['loggingPostType'] : ( postType || -1);\n\t\/\/ milliseconds for time, interger for number of records, -1 for non-posting,\n\tthis.postInterval = (typeof djConfig['loggingPostInterval'] != 'undefined') ? djConfig['loggingPostInterval'] : ( postType || -1);","this_inherits":["dojo.logging.LogHandler"],"this":"dojo.logging.LogHandler"}}},"dojo.logging.MemoryLogHandler.emit":{"_":{"meta":{"summary":"","parameters":{"record":{"type":""}},"src":"\tthis.data.push(record);\n\tif(this.numRecords != -1){\n\t\twhile(this.data.length>this.numRecords){\n\t\t\tthis.data.shift();\n\t\t}\n\t}","this":"dojo.logging.MemoryLogHandler"}}},"dojo.logging.logQueueHandler.emit":{"_":{"meta":{"summary":"","parameters":{"record":{"type":""}},"src":"\tif (!djConfig.isDebug) { return; }\n\t\/\/ we should probably abstract this in the future\n\tvar logStr = String(dojo.log.getLevelName(record.level)+\": \"+record.time.toLocaleTimeString())+\": \"+record.message;\n\tif(!dj_undef(\"println\", dojo.hostenv)){\n\t\tdojo.hostenv.println(logStr);\n\t}\n\tthis.data.push(record);\n\tif(this.numRecords != -1){\n\t\twhile(this.data.length>this.numRecords){\n\t\t\tthis.data.shift();\n\t\t}\n\t}","this":"dojo.logging.MemoryLogHandler"}}},"dojo.logging.Logger.argsToArr":{"_":{"meta":{"summary":"","parameters":{"args":{"type":""}},"src":"\t\tfor(var x=0; x<args.length; x++){\n\t\t\tret.push(args[x]);\n\t\t}\n\t\treturn ret;","this":"dojo.logging.Logger"}}},"dojo.logging.Logger.setLevel":{"_":{"meta":{"summary":"","parameters":{"lvl":{"type":""}},"src":"\t\tthis.cutOffLevel = parseInt(lvl);","this":"dojo.logging.Logger"}}},"dojo.logging.Logger.isEnabledFor":{"_":{"meta":{"summary":"","parameters":{"lvl":{"type":""}},"src":"\t\treturn parseInt(lvl) >= this.cutOffLevel;","this":"dojo.logging.Logger"}}},"dojo.logging.Logger.getEffectiveLevel":{"_":{"meta":{"summary":"","src":"\t\tif((this.cutOffLevel==0)&&(this.parent)){\n\t\t\treturn this.parent.getEffectiveLevel();\n\t\t}\n\t\treturn this.cutOffLevel;","this":"dojo.logging.Logger"}}},"dojo.logging.Logger.addFilter":{"_":{"meta":{"summary":"","parameters":{"flt":{"type":""}},"src":"\t\tthis.filters.push(flt);\n\t\treturn this.filters.length-1;","this":"dojo.logging.Logger"}}},"dojo.logging.Logger.removeFilterByIndex":{"_":{"meta":{"summary":"","parameters":{"fltIndex":{"type":""}},"src":"\t\tif(this.filters[fltIndex]){\n\t\t\tdelete this.filters[fltIndex];\n\t\t\treturn true;\n\t\t}\n\t\treturn false;","this":"dojo.logging.Logger"}}},"dojo.logging.Logger.removeFilter":{"_":{"meta":{"summary":"","parameters":{"fltRef":{"type":""}},"src":"\t\tfor(var x=0; x<this.filters.length; x++){\n\t\t\tif(this.filters[x]===fltRef){\n\t\t\t\tdelete this.filters[x];\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;","this":"dojo.logging.Logger"}}},"dojo.logging.Logger.removeAllFilters":{"_":{"meta":{"summary":"","src":"\t\tthis.filters = [];                       ","this":"dojo.logging.Logger"}}},"dojo.logging.Logger.filter":{"_":{"meta":{"summary":"","parameters":{"rec":{"type":""}},"src":"\t\tfor(var x=0; x<this.filters.length; x++){\n\t\t\tif((this.filters[x][\"filter\"])&&\n\t\t\t   (!this.filters[x].filter(rec))||\n\t\t\t   (rec.level<this.cutOffLevel)){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;","this":"dojo.logging.Logger"}}},"dojo.logging.Logger.addHandler":{"_":{"meta":{"summary":"","parameters":{"hdlr":{"type":""}},"src":"\t\tthis.handlers.push(hdlr);\n\t\treturn this.handlers.length-1;","this":"dojo.logging.Logger"}}},"dojo.logging.Logger.handle":{"_":{"meta":{"summary":"","parameters":{"rec":{"type":""}},"src":"\t\tif((!this.filter(rec))||(rec.level<this.cutOffLevel)){ return false; }\n\t\tfor(var x=0; x<this.handlers.length; x++){\n\t\t\tif(this.handlers[x][\"handle\"]){\n\t\t\t   this.handlers[x].handle(rec);\n\t\t\t}\n\t\t}\n\t\t\/\/ FIXME: not sure what to do about records to be propagated that may have\n\t\t\/\/ been modified by the handlers or the filters at this logger. Should\n\t\t\/\/ parents always have pristine copies? or is passing the modified record\n\t\t\/\/ OK?\n\t\t\/\/ if((this.propagate)&&(this.parent)){ this.parent.handle(rec); }\n\t\treturn true;","this":"dojo.logging.Logger"}}},"dojo.logging.Logger.log":{"_":{"meta":{"summary":"","parameters":{"lvl":{"type":""},"msg":{"type":""}},"src":"\t\tif(\t(this.propagate)&&(this.parent)&&\n\t\t\t(this.parent.rec.level>=this.cutOffLevel)){\n\t\t\tthis.parent.log(lvl, msg);\n\t\t\treturn false;\n\t\t}\n\t\t\/\/ FIXME: need to call logging providers here!\n\t\tthis.handle(new dojo.logging.Record(lvl, msg));\n\t\treturn true;","this":"dojo.logging.Logger"}}},"dojo.logging.Logger.debug":{"_":{"meta":{"summary":"","parameters":{"msg":{"type":""}},"src":"\t\treturn this.logType(\"DEBUG\", this.argsToArr(arguments));","this":"dojo.logging.Logger"}}},"dojo.logging.Logger.info":{"_":{"meta":{"summary":"","parameters":{"msg":{"type":""}},"src":"\t\treturn this.logType(\"INFO\", this.argsToArr(arguments));","this":"dojo.logging.Logger"}}},"dojo.logging.Logger.warning":{"_":{"meta":{"summary":"","parameters":{"msg":{"type":""}},"src":"\t\treturn this.logType(\"WARNING\", this.argsToArr(arguments));","this":"dojo.logging.Logger"}}},"dojo.logging.Logger.error":{"_":{"meta":{"summary":"","parameters":{"msg":{"type":""}},"src":"\t\treturn this.logType(\"ERROR\", this.argsToArr(arguments));","this":"dojo.logging.Logger"}}},"dojo.logging.Logger.critical":{"_":{"meta":{"summary":"","parameters":{"msg":{"type":""}},"src":"\t\treturn this.logType(\"CRITICAL\", this.argsToArr(arguments));","this":"dojo.logging.Logger"}}},"dojo.logging.Logger.exception":{"_":{"meta":{"summary":"","parameters":{"msg":{"type":""},"e":{"type":""},"squelch":{"type":""}},"description":"(same as message!)","src":"\t\t\tvar eparts = [e.name, (e.description||e.message)];\n\t\t\tif(e.fileName){\n\t\t\t\teparts.push(e.fileName);\n\t\t\t\teparts.push(\"line \"+e.lineNumber);\n\t\t\t\t\/\/ eparts.push(e.stack);\n\t\t\t}\n\t\t\tmsg += \" \"+eparts.join(\" : \");\n\t\t}\n\n\t\tthis.logType(\"ERROR\", msg);\n\t\tif(!squelch){\n\t\t\tthrow e;\n\t\t}","this":"dojo.logging.Logger"}}},"dojo.logging.Logger.logType":{"_":{"meta":{"summary":"","parameters":{"type":{"type":""},"args":{"type":""}},"src":"\t\tvar na = [dojo.logging.log.getLevel(type)];\n\t\tif(dojo.lang.isArray(args)){\n\t\t\tna = na.concat(args);\n\t\t}else if((typeof args == \"object\")&&(args[\"length\"])){\n\t\t\tna = na.concat(this.argsToArr(args));\n\t\t\t\/* for(var x=0; x<args.length; x++){\n\t\t\t\tna.push(args[x]);\n\t\t\t} *\/\n\t\t}else{\n\t\t\tna = na.concat(this.argsToArr(arguments).slice(1));\n\t\t\t\/* for(var x=1; x<arguments.length; x++){\n\t\t\t\tna.push(arguments[x]);\n\t\t\t} *\/\n\t\t}\n\t\treturn this.log.apply(this, na);","this":"dojo.logging.Logger"}}}}}},"dojo.logging._":{"meta":{"requires":{"common":["dojo.logging.Logger"],"rhino":["dojo.logging.RhinoLogger"]}}}}