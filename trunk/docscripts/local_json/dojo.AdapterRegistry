{"dojo.AdapterRegistry":{"meta":{"requires":{"common":["dojo.lang.func"]},"methods":{"dojo.AdapterRegistry":{"_":{"meta":{"summary":" A registry to make contextual calling\/searching easier.","parameters":{"returnWrappers":{"type":"boolean, optional"}},"description":" Objects of this class keep list of arrays in the form [name, check, wrap, directReturn] that are used to determine what the contextual result of a set of checked arguments is. All check\/wrap functions in this registry should be of the same arity.","src":"\tthis.returnWrappers = returnWrappers || false;","this_variables":["pairs","returnWrappers"]}}},"dojo.AdapterRegistry.register":{"_":{"meta":{"summary":" register a check function to determine if the wrap function or object gets selected","parameters":{"name":{"type":"string"},"check":{"type":"function"},"wrap":{"type":"function"},"directReturn":{"type":"boolean, optional"},"override":{"type":"boolean, optional"}},"src":"\t\tthis.pairs[type]([name, check, wrap, directReturn]);","this":"dojo.AdapterRegistry"}}},"dojo.AdapterRegistry.match":{"_":{"meta":{"summary":" Find an adapter for the given arguments. If no suitable adapter is found, throws an exception. match() accepts any number of arguments, all of which are passed to all matching functions from the registered pairs.","src":"\t\t\tvar pair = this.pairs[i];\n\t\t\tif(pair[1].apply(this, arguments)){\n\t\t\t\tif((pair[3])||(this.returnWrappers)){\n\t\t\t\t\treturn pair[2];\n\t\t\t\t}else{\n\t\t\t\t\treturn pair[2].apply(this, arguments);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthrow new Error(\"No match found\");\n\t\t\/\/ dojo.raise(\"No match found\");","this":"dojo.AdapterRegistry"}}},"dojo.AdapterRegistry.unregister":{"_":{"meta":{"summary":"Remove a named adapter from the registry FIXME: this is kind of a dumb way to handle this. On a large registry this will be slow-ish and we can use the name as a lookup should we choose to trade memory for speed.","parameters":{"name":{"type":""}},"src":"\t\t\tvar pair = this.pairs[i];\n\t\t\tif(pair[0] == name){\n\t\t\t\tthis.pairs.splice(i, 1);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;","this":"dojo.AdapterRegistry"}}}}}}}