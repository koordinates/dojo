{"dojo.dnd.DragAndDrop":{"meta":{"requires":{"common":["dojo.lang.common","dojo.lang.declare"]},"functions":{"dojo.dnd.DragSource":{"_":{"meta":{"summary":"","protovariables":{"type":""}}}},"dojo.dnd.DragSource.onDragEnd":{"_":{"meta":{"summary":"","src":"","this":"null"}}},"dojo.dnd.DragSource.onDragStart":{"_":{"meta":{"summary":"","src":"","this":"null"}}},"dojo.dnd.DragSource.onSelected":{"_":{"meta":{"summary":"","src":"","this":"null"}}},"dojo.dnd.DragSource.unregister":{"_":{"meta":{"summary":"","src":"\t\tdojo.dnd.dragManager.unregisterDragSource(this);","this":"null"}}},"dojo.dnd.DragSource.reregister":{"_":{"meta":{"summary":"","src":"\t\tdojo.dnd.dragManager.registerDragSource(this);","this":"null"}}},"dojo.dnd.DragObject":{"_":{"meta":{"summary":"","protovariables":{"type":"","onDragLeave":"","onDragEnter":"","ondragout":"","ondragover":""}}}},"dojo.dnd.DragObject.onDragStart":{"_":{"meta":{"summary":"","src":"\t\t\/\/ gets called directly after being created by the DragSource\n\t\t\/\/ default action is to clone self as icon","this":"null"}}},"dojo.dnd.DragObject.onDragMove":{"_":{"meta":{"summary":"","src":"\t\t\/\/ this changes the UI for the drag icon\n\t\t\/\/\t\"it moves itself\"","this":"null"}}},"dojo.dnd.DragObject.onDragOver":{"_":{"meta":{"summary":"","src":"","this":"null"}}},"dojo.dnd.DragObject.onDragOut":{"_":{"meta":{"summary":"","src":"","this":"null"}}},"dojo.dnd.DragObject.onDragEnd":{"_":{"meta":{"summary":"","src":"","this":"null"}}},"dojo.dnd.DropTarget":{"_":{"meta":{"summary":""}}},"dojo.dnd.DropTarget.acceptsType":{"_":{"meta":{"summary":"","parameters":{"type":{"type":""}},"src":"\t\tif(!dojo.lang.inArray(this.acceptedTypes, \"*\")){            \n\t\t\tif(!dojo.lang.inArray(this.acceptedTypes, type)) { return false; }\n\t\t}\n\t\treturn true;","this":"null"}}},"dojo.dnd.DropTarget.accepts":{"_":{"meta":{"summary":"","parameters":{"dragObjects":{"type":""}},"src":"\t\tif(!dojo.lang.inArray(this.acceptedTypes, \"*\")){            \n\t\t\tfor (var i = 0; i < dragObjects.length; i++) {\n\t\t\t\tif (!dojo.lang.inArray(this.acceptedTypes,\n\t\t\t\t\tdragObjects[i].type)) { return false; }\n\t\t\t}\n\t\t}\n\t\treturn true;","this":"null"}}},"dojo.dnd.DropTarget.unregister":{"_":{"meta":{"summary":"","src":"\t\tdojo.dnd.dragManager.unregisterDropTarget(this);","this":"null"}}},"dojo.dnd.DropTarget.onDragOver":{"_":{"meta":{"summary":"","src":"","this":"null"}}},"dojo.dnd.DropTarget.onDragOut":{"_":{"meta":{"summary":"","src":"","this":"null"}}},"dojo.dnd.DropTarget.onDragMove":{"_":{"meta":{"summary":"","src":"","this":"null"}}},"dojo.dnd.DropTarget.onDropStart":{"_":{"meta":{"summary":"","src":"","this":"null"}}},"dojo.dnd.DropTarget.onDrop":{"_":{"meta":{"summary":"","src":"","this":"null"}}},"dojo.dnd.DropTarget.onDropEnd":{"_":{"meta":{"summary":"","src":"","this":"null"}}},"dojo.dnd.DragManager":{"_":{"meta":{"summary":"","protovariables":{"selectedSources":"","dragObjects":"","dragSources":"","dropTargets":"","lastDragTarget":"","currentDragTarget":""}}}},"dojo.dnd.DragManager.registerDragSource":{"_":{"meta":{"summary":"","src":"","this":"null"}}},"dojo.dnd.DragManager.registerDropTarget":{"_":{"meta":{"summary":"","src":"","this":"null"}}},"dojo.dnd.DragManager.onKeyDown":{"_":{"meta":{"summary":"","src":"","this":"null"}}},"dojo.dnd.DragManager.onMouseOut":{"_":{"meta":{"summary":"","src":"","this":"null"}}},"dojo.dnd.DragManager.onMouseMove":{"_":{"meta":{"summary":"","src":"","this":"null"}}},"dojo.dnd.DragManager.onMouseUp":{"_":{"meta":{"summary":"","src":"","this":"null"}}},"dojo.dnd.DragEvent":{"_":{"meta":{"summary":"","src":"\tthis.dragSource = null;\n\tthis.dragObject = null;\n\tthis.target = null;\n\tthis.eventStatus = \"success\";\n\t\/\/\n\t\/\/ can be one of:\n\t\/\/\t[\t\"dropSuccess\", \"dropFailure\", \"dragMove\",\n\t\/\/\t\t\"dragStart\", \"dragEnter\", \"dragLeave\"]\n\t\/\/","this_variables":["dragSource","dragObject","target","eventStatus"]}}}}}},"dojo.dnd.HtmlDragAndDrop":{"meta":{"requires":{"common":["dojo.dnd.HtmlDragManager","dojo.dnd.DragAndDrop","dojo.html.*","dojo.html.display","dojo.html.util","dojo.html.selection","dojo.html.iframe","dojo.lang.extras","dojo.lfx.*","dojo.event.*"]},"functions":{"dojo.dnd.HtmlDragSource":{"_":{"meta":{"summary":"","inherits":["dojo.dnd.DragSource"],"this_inherits":["dojo.dnd.DragSource"],"protovariables":{"dragClass":""}}}},"dojo.dnd.HtmlDragSource.onDragStart":{"_":{"meta":{"summary":"","src":"\t\tvar dragObj = new dojo.dnd.HtmlDragObject(this.dragObject, this.type);\n\t\tif(this.dragClass) { dragObj.dragClass = this.dragClass; }\n\n\t\tif (this.constrainToContainer) {\n\t\t\tdragObj.constrainTo(this.constrainingContainer || this.domNode.parentNode);\n\t\t}\n\n\t\treturn dragObj;","this":"dojo.dnd.DragSource"}}},"dojo.dnd.HtmlDragSource.setDragHandle":{"_":{"meta":{"summary":"","parameters":{"node":{"type":""}},"src":"\t\tnode = dojo.byId(node);\n\t\tdojo.dnd.dragManager.unregisterDragSource(this);\n\t\tthis.domNode = node;\n\t\tdojo.dnd.dragManager.registerDragSource(this);","this":"dojo.dnd.DragSource"}}},"dojo.dnd.DragSource":{"_":{"meta":{"this_variables":["domNode","dragObject","constrainToContainer","constrainingContainer"]}}},"dojo.dnd.HtmlDragSource.setDragTarget":{"_":{"meta":{"summary":"","parameters":{"node":{"type":""}},"src":"\t\tthis.dragObject = node;","this":"dojo.dnd.DragSource"}}},"dojo.dnd.HtmlDragSource.constrainTo":{"_":{"meta":{"summary":"","parameters":{"container":{"type":""}},"src":"\t\tthis.constrainToContainer = true;\n\t\tif (container) {\n\t\t\tthis.constrainingContainer = container;\n\t\t}","this":"dojo.dnd.DragSource"}}},"dojo.dnd.HtmlDragSource.onSelected":{"_":{"meta":{"summary":"","src":"\t\tfor (var i=0; i<this.dragObjects.length; i++) {\n\t\t\tdojo.dnd.dragManager.selectedSources.push(new dojo.dnd.HtmlDragSource(this.dragObjects[i]));\n\t\t}","this":"dojo.dnd.DragSource"}}},"dojo.dnd.HtmlDragSource.addDragObjects":{"_":{"meta":{"summary":"","parameters":{"el":{"type":"DOMNode"}},"src":"\t\tfor (var i=0; i<arguments.length; i++) {\n\t\t\tthis.dragObjects.push(arguments[i]);\n\t\t}","this":"dojo.dnd.DragSource"}}},"dojo.dnd.HtmlDragObject":{"_":{"meta":{"summary":"","inherits":["dojo.dnd.DragObject"],"this_inherits":["dojo.dnd.DragObject"],"protovariables":{"dragClass":"","opacity":"","createIframe":"","disableX":"","disableY":""}}}},"dojo.dnd.HtmlDragObject.createDragNode":{"_":{"meta":{"summary":"","src":"\t\tvar node = this.domNode.cloneNode(true);\n\t\tif(this.dragClass) { dojo.html.addClass(node, this.dragClass); }\n\t\tif(this.opacity < 1) { dojo.html.setOpacity(node, this.opacity); }\n\t\tif(node.tagName.toLowerCase() == \"tr\"){\n\t\t\t\/\/ dojo.debug(\"Dragging table row\")\n\t\t\t\/\/ Create a table for the cloned row\n\t\t\tvar doc = this.domNode.ownerDocument;\n\t\t\tvar table = doc.createElement(\"table\");\n\t\t\tvar tbody = doc.createElement(\"tbody\");\n\t\t\ttable.appendChild(tbody);\n\t\t\ttbody.appendChild(node);\n\n\t\t\t\/\/ Set a fixed width to the cloned TDs\n\t\t\tvar domTds = this.domNode.childNodes;\n\t\t\tvar cloneTds = node.childNodes;\n\t\t\tfor(var i = 0; i < domTds.length; i++){\n\t\t\t    if((cloneTds[i])&&(cloneTds[i].style)){\n\t\t\t\t    cloneTds[i].style.width = dojo.html.getContentBox(domTds[i]).width + \"px\";\n\t\t\t    }\n\t\t\t}\n\t\t\tnode = table;\n\t\t}\n\n\t\tif((dojo.render.html.ie55||dojo.render.html.ie60) && this.createIframe){\n\t\t\twith(node.style) {\n\t\t\t\ttop=\"0px\";\n\t\t\t\tleft=\"0px\";\n\t\t\t}\n\t\t\tvar outer = document.createElement(\"div\");\n\t\t\touter.appendChild(node);\n\t\t\tthis.bgIframe = new dojo.html.BackgroundIframe(outer);\n\t\t\touter.appendChild(this.bgIframe.iframe);\n\t\t\tnode = outer;\n\t\t}\n\t\tnode.style.zIndex = 999;\n\n\t\treturn node;","this":"dojo.dnd.DragObject"}}},"dojo.dnd.DragObject":{"_":{"meta":{"this_variables":["bgIframe","scrollOffset","dragStartPosition","dragOffset","dragClone","containingBlockPosition","constraints","scrollOffset","dragStartPosition","dragOffset","dragClone","containingBlockPosition","constraints","scrollOffset","dragStartPosition","dragOffset","dragClone","containingBlockPosition","constraints","dragClone","scrollOffset.y","scrollOffset.x","dragClone.style.top","dragClone.style.left","dragClone","dragClone","dragClone","constrainToContainer","constrainingContainer"]}}},"dojo.dnd.HtmlDragObject.onDragStart":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":"\t\tdojo.html.clearSelection();\n\n\t\tthis.scrollOffset = dojo.html.getScroll().offset;\n\t\tthis.dragStartPosition = dojo.html.getAbsolutePosition(this.domNode, true);\n\n\t\tthis.dragOffset = {y: this.dragStartPosition.y - e.pageY,\n\t\t\tx: this.dragStartPosition.x - e.pageX};\n\n\t\tthis.dragClone = this.createDragNode();\n\n\t\tthis.containingBlockPosition = this.domNode.offsetParent ? \n\t\t\tdojo.html.getAbsolutePosition(this.domNode.offsetParent, true) : {x:0, y:0};\n\n\t\tif (this.constrainToContainer) {\n\t\t\tthis.constraints = this.getConstraints();\n\t\t}\n\n\t\t\/\/ set up for dragging\n\t\twith(this.dragClone.style){\n\t\t\tposition = \"absolute\";\n\t\t\ttop = this.dragOffset.y + e.pageY + \"px\";\n\t\t\tleft = this.dragOffset.x + e.pageX + \"px\";\n\t\t}\n\n\t\tdojo.body().appendChild(this.dragClone);\n\n\t\t\/\/ shortly the browser will fire an onClick() event,\n\t\t\/\/ but since this was really a drag, just squelch it\n\t\tdojo.event.connect(this.domNode, \"onclick\", this, \"squelchOnClick\");\n\n\t\tdojo.event.topic.publish('dragStart', { source: this } );","this":"dojo.dnd.DragObject"}}},"dojo.dnd.HtmlDragObject.y":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":"\t\tdojo.html.clearSelection();\n\n\t\tthis.scrollOffset = dojo.html.getScroll().offset;\n\t\tthis.dragStartPosition = dojo.html.getAbsolutePosition(this.domNode, true);\n\n\t\tthis.dragOffset = {y: this.dragStartPosition.y - e.pageY,\n\t\t\tx: this.dragStartPosition.x - e.pageX};\n\n\t\tthis.dragClone = this.createDragNode();\n\n\t\tthis.containingBlockPosition = this.domNode.offsetParent ? \n\t\t\tdojo.html.getAbsolutePosition(this.domNode.offsetParent, true) : {x:0, y:0};\n\n\t\tif (this.constrainToContainer) {\n\t\t\tthis.constraints = this.getConstraints();\n\t\t}\n\n\t\t\/\/ set up for dragging\n\t\twith(this.dragClone.style){\n\t\t\tposition = \"absolute\";\n\t\t\ttop = this.dragOffset.y + e.pageY + \"px\";\n\t\t\tleft = this.dragOffset.x + e.pageX + \"px\";\n\t\t}\n\n\t\tdojo.body().appendChild(this.dragClone);\n\n\t\t\/\/ shortly the browser will fire an onClick() event,\n\t\t\/\/ but since this was really a drag, just squelch it\n\t\tdojo.event.connect(this.domNode, \"onclick\", this, \"squelchOnClick\");\n\n\t\tdojo.event.topic.publish('dragStart', { source: this } );","this":"dojo.dnd.DragObject"}}},"dojo.dnd.HtmlDragObject.x":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":"\t\tdojo.html.clearSelection();\n\n\t\tthis.scrollOffset = dojo.html.getScroll().offset;\n\t\tthis.dragStartPosition = dojo.html.getAbsolutePosition(this.domNode, true);\n\n\t\tthis.dragOffset = {y: this.dragStartPosition.y - e.pageY,\n\t\t\tx: this.dragStartPosition.x - e.pageX};\n\n\t\tthis.dragClone = this.createDragNode();\n\n\t\tthis.containingBlockPosition = this.domNode.offsetParent ? \n\t\t\tdojo.html.getAbsolutePosition(this.domNode.offsetParent, true) : {x:0, y:0};\n\n\t\tif (this.constrainToContainer) {\n\t\t\tthis.constraints = this.getConstraints();\n\t\t}\n\n\t\t\/\/ set up for dragging\n\t\twith(this.dragClone.style){\n\t\t\tposition = \"absolute\";\n\t\t\ttop = this.dragOffset.y + e.pageY + \"px\";\n\t\t\tleft = this.dragOffset.x + e.pageX + \"px\";\n\t\t}\n\n\t\tdojo.body().appendChild(this.dragClone);\n\n\t\t\/\/ shortly the browser will fire an onClick() event,\n\t\t\/\/ but since this was really a drag, just squelch it\n\t\tdojo.event.connect(this.domNode, \"onclick\", this, \"squelchOnClick\");\n\n\t\tdojo.event.topic.publish('dragStart', { source: this } );","this":"dojo.dnd.DragObject"}}},"dojo.dnd.HtmlDragObject.source":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":"\t\tswitch(e.dragStatus){\n\n\t\t\tcase \"dropSuccess\":\n\t\t\t\tdojo.html.removeNode(this.dragClone);\n\t\t\t\tthis.dragClone = null;\n\t\t\t\tbreak;\n\n\t\t\tcase \"dropFailure\": \/\/ slide back to the start\n\t\t\t\tvar startCoords = dojo.html.getAbsolutePosition(this.dragClone, true);\n\t\t\t\t\/\/ offset the end so the effect can be seen\n\t\t\t\tvar endCoords = { left: this.dragStartPosition.x + 1,\n\t\t\t\t\ttop: this.dragStartPosition.y + 1};\n\n\t\t\t\t\/\/ animate\n\t\t\t\tvar anim = dojo.lfx.slideTo(this.dragClone, endCoords, 500, dojo.lfx.easeOut);\n\t\t\t\tvar dragObject = this;\n\t\t\t\tdojo.event.connect(anim, \"onEnd\", function (e) {\n\t\t\t\t\t\/\/ pause for a second (not literally) and disappear\n\t\t\t\t\tdojo.lang.setTimeout(function() {\n\t\t\t\t\t\t\tdojo.html.removeNode(dragObject.dragClone);\n\t\t\t\t\t\t\t\/\/ Allow drag clone to be gc'ed\n\t\t\t\t\t\t\tdragObject.dragClone = null;\n\t\t\t\t\t\t},\n\t\t\t\t\t\t200);\n\t\t\t\t});\n\t\t\t\tanim.play();\n\t\t\t\tbreak;\n\t\t}\n\n\t\tdojo.event.topic.publish('dragEnd', { source: this } );","this":"dojo.dnd.DragObject"}}},"dojo.dnd.HtmlDragObject.getConstraints":{"_":{"meta":{"summary":"","src":"\t\tif (this.constrainingContainer.nodeName.toLowerCase() == 'body') {\n\t\t\tvar viewport = dojo.html.getViewport();\n\t\t\tvar width = viewport.width;\n\t\t\tvar height = viewport.height;\n\t\t\tvar x = 0;\n\t\t\tvar y = 0;\n\t\t} else {\n\t\t\tvar content = dojo.html.getContentBox(this.constrainingContainer);\n\t\t\twidth = content.width;\n\t\t\theight = content.height;\n\t\t\tx =\n\t\t\t\tthis.containingBlockPosition.x +\n\t\t\t\tdojo.html.getPixelValue(this.constrainingContainer, \"padding-left\", true) +\n\t\t\t\tdojo.html.getBorderExtent(this.constrainingContainer, \"left\");\n\t\t\ty =\n\t\t\t\tthis.containingBlockPosition.y +\n\t\t\t\tdojo.html.getPixelValue(this.constrainingContainer, \"padding-top\", true) +\n\t\t\t\tdojo.html.getBorderExtent(this.constrainingContainer, \"top\");\n\t\t}\n\t\t\n\t\tvar mb = dojo.html.getMarginBox(this.domNode);\n\t\treturn {\n\t\t\tminX: x,\n\t\t\tminY: y,\n\t\t\tmaxX: x + width - mb.width,\n\t\t\tmaxY: y + height - mb.height\n\t\t}","this":"dojo.dnd.DragObject"}}},"dojo.dnd.HtmlDragObject.minX":{"_":{"meta":{"summary":"","src":"\t\tif (this.constrainingContainer.nodeName.toLowerCase() == 'body') {\n\t\t\tvar viewport = dojo.html.getViewport();\n\t\t\tvar width = viewport.width;\n\t\t\tvar height = viewport.height;\n\t\t\tvar x = 0;\n\t\t\tvar y = 0;\n\t\t} else {\n\t\t\tvar content = dojo.html.getContentBox(this.constrainingContainer);\n\t\t\twidth = content.width;\n\t\t\theight = content.height;\n\t\t\tx =\n\t\t\t\tthis.containingBlockPosition.x +\n\t\t\t\tdojo.html.getPixelValue(this.constrainingContainer, \"padding-left\", true) +\n\t\t\t\tdojo.html.getBorderExtent(this.constrainingContainer, \"left\");\n\t\t\ty =\n\t\t\t\tthis.containingBlockPosition.y +\n\t\t\t\tdojo.html.getPixelValue(this.constrainingContainer, \"padding-top\", true) +\n\t\t\t\tdojo.html.getBorderExtent(this.constrainingContainer, \"top\");\n\t\t}\n\t\t\n\t\tvar mb = dojo.html.getMarginBox(this.domNode);\n\t\treturn {\n\t\t\tminX: x,\n\t\t\tminY: y,\n\t\t\tmaxX: x + width - mb.width,\n\t\t\tmaxY: y + height - mb.height\n\t\t}","this":"dojo.dnd.DragObject"}}},"dojo.dnd.HtmlDragObject.minY":{"_":{"meta":{"summary":"","src":"\t\tif (this.constrainingContainer.nodeName.toLowerCase() == 'body') {\n\t\t\tvar viewport = dojo.html.getViewport();\n\t\t\tvar width = viewport.width;\n\t\t\tvar height = viewport.height;\n\t\t\tvar x = 0;\n\t\t\tvar y = 0;\n\t\t} else {\n\t\t\tvar content = dojo.html.getContentBox(this.constrainingContainer);\n\t\t\twidth = content.width;\n\t\t\theight = content.height;\n\t\t\tx =\n\t\t\t\tthis.containingBlockPosition.x +\n\t\t\t\tdojo.html.getPixelValue(this.constrainingContainer, \"padding-left\", true) +\n\t\t\t\tdojo.html.getBorderExtent(this.constrainingContainer, \"left\");\n\t\t\ty =\n\t\t\t\tthis.containingBlockPosition.y +\n\t\t\t\tdojo.html.getPixelValue(this.constrainingContainer, \"padding-top\", true) +\n\t\t\t\tdojo.html.getBorderExtent(this.constrainingContainer, \"top\");\n\t\t}\n\t\t\n\t\tvar mb = dojo.html.getMarginBox(this.domNode);\n\t\treturn {\n\t\t\tminX: x,\n\t\t\tminY: y,\n\t\t\tmaxX: x + width - mb.width,\n\t\t\tmaxY: y + height - mb.height\n\t\t}","this":"dojo.dnd.DragObject"}}},"dojo.dnd.HtmlDragObject.maxX":{"_":{"meta":{"summary":"","src":"\t\tif (this.constrainingContainer.nodeName.toLowerCase() == 'body') {\n\t\t\tvar viewport = dojo.html.getViewport();\n\t\t\tvar width = viewport.width;\n\t\t\tvar height = viewport.height;\n\t\t\tvar x = 0;\n\t\t\tvar y = 0;\n\t\t} else {\n\t\t\tvar content = dojo.html.getContentBox(this.constrainingContainer);\n\t\t\twidth = content.width;\n\t\t\theight = content.height;\n\t\t\tx =\n\t\t\t\tthis.containingBlockPosition.x +\n\t\t\t\tdojo.html.getPixelValue(this.constrainingContainer, \"padding-left\", true) +\n\t\t\t\tdojo.html.getBorderExtent(this.constrainingContainer, \"left\");\n\t\t\ty =\n\t\t\t\tthis.containingBlockPosition.y +\n\t\t\t\tdojo.html.getPixelValue(this.constrainingContainer, \"padding-top\", true) +\n\t\t\t\tdojo.html.getBorderExtent(this.constrainingContainer, \"top\");\n\t\t}\n\t\t\n\t\tvar mb = dojo.html.getMarginBox(this.domNode);\n\t\treturn {\n\t\t\tminX: x,\n\t\t\tminY: y,\n\t\t\tmaxX: x + width - mb.width,\n\t\t\tmaxY: y + height - mb.height\n\t\t}","this":"dojo.dnd.DragObject"}}},"dojo.dnd.HtmlDragObject.maxY":{"_":{"meta":{"summary":"","src":"\t\tif (this.constrainingContainer.nodeName.toLowerCase() == 'body') {\n\t\t\tvar viewport = dojo.html.getViewport();\n\t\t\tvar width = viewport.width;\n\t\t\tvar height = viewport.height;\n\t\t\tvar x = 0;\n\t\t\tvar y = 0;\n\t\t} else {\n\t\t\tvar content = dojo.html.getContentBox(this.constrainingContainer);\n\t\t\twidth = content.width;\n\t\t\theight = content.height;\n\t\t\tx =\n\t\t\t\tthis.containingBlockPosition.x +\n\t\t\t\tdojo.html.getPixelValue(this.constrainingContainer, \"padding-left\", true) +\n\t\t\t\tdojo.html.getBorderExtent(this.constrainingContainer, \"left\");\n\t\t\ty =\n\t\t\t\tthis.containingBlockPosition.y +\n\t\t\t\tdojo.html.getPixelValue(this.constrainingContainer, \"padding-top\", true) +\n\t\t\t\tdojo.html.getBorderExtent(this.constrainingContainer, \"top\");\n\t\t}\n\t\t\n\t\tvar mb = dojo.html.getMarginBox(this.domNode);\n\t\treturn {\n\t\t\tminX: x,\n\t\t\tminY: y,\n\t\t\tmaxX: x + width - mb.width,\n\t\t\tmaxY: y + height - mb.height\n\t\t}","this":"dojo.dnd.DragObject"}}},"dojo.dnd.HtmlDragObject.updateDragOffset":{"_":{"meta":{"summary":"","src":"\t\tvar scroll = dojo.html.getScroll().offset;\n\t\tif(scroll.y != this.scrollOffset.y) {\n\t\t\tvar diff = scroll.y - this.scrollOffset.y;\n\t\t\tthis.dragOffset.y += diff;\n\t\t\tthis.scrollOffset.y = scroll.y;\n\t\t}\n\t\tif(scroll.x != this.scrollOffset.x) {\n\t\t\tvar diff = scroll.x - this.scrollOffset.x;\n\t\t\tthis.dragOffset.x += diff;\n\t\t\tthis.scrollOffset.x = scroll.x;\n\t\t}","this":"dojo.dnd.DragObject"}}},"dojo.dnd.HtmlDragObject.onDragMove":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":"\t\tthis.updateDragOffset();\n\t\tvar x = this.dragOffset.x + e.pageX;\n\t\tvar y = this.dragOffset.y + e.pageY;\n\n\t\tif (this.constrainToContainer) {\n\t\t\tif (x < this.constraints.minX) { x = this.constraints.minX; }\n\t\t\tif (y < this.constraints.minY) { y = this.constraints.minY; }\n\t\t\tif (x > this.constraints.maxX) { x = this.constraints.maxX; }\n\t\t\tif (y > this.constraints.maxY) { y = this.constraints.maxY; }\n\t\t}\n\n\t\tthis.setAbsolutePosition(x, y);\n\n\t\tdojo.event.topic.publish('dragMove', { source: this } );","this":"dojo.dnd.DragObject"}}},"dojo.dnd.HtmlDragObject.setAbsolutePosition":{"_":{"meta":{"summary":"","parameters":{"x":{"type":""},"y":{"type":""}},"src":"\t\tif(!this.disableX) { this.dragClone.style.left = x + \"px\"; }","this":"dojo.dnd.DragObject"}}},"dojo.dnd.HtmlDragObject.onDragEnd":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":"\t\tswitch(e.dragStatus){\n\n\t\t\tcase \"dropSuccess\":\n\t\t\t\tdojo.html.removeNode(this.dragClone);\n\t\t\t\tthis.dragClone = null;\n\t\t\t\tbreak;\n\n\t\t\tcase \"dropFailure\": \/\/ slide back to the start\n\t\t\t\tvar startCoords = dojo.html.getAbsolutePosition(this.dragClone, true);\n\t\t\t\t\/\/ offset the end so the effect can be seen\n\t\t\t\tvar endCoords = { left: this.dragStartPosition.x + 1,\n\t\t\t\t\ttop: this.dragStartPosition.y + 1};\n\n\t\t\t\t\/\/ animate\n\t\t\t\tvar anim = dojo.lfx.slideTo(this.dragClone, endCoords, 500, dojo.lfx.easeOut);\n\t\t\t\tvar dragObject = this;\n\t\t\t\tdojo.event.connect(anim, \"onEnd\", function (e) {\n\t\t\t\t\t\/\/ pause for a second (not literally) and disappear\n\t\t\t\t\tdojo.lang.setTimeout(function() {\n\t\t\t\t\t\t\tdojo.html.removeNode(dragObject.dragClone);\n\t\t\t\t\t\t\t\/\/ Allow drag clone to be gc'ed\n\t\t\t\t\t\t\tdragObject.dragClone = null;\n\t\t\t\t\t\t},\n\t\t\t\t\t\t200);\n\t\t\t\t});\n\t\t\t\tanim.play();\n\t\t\t\tbreak;\n\t\t}\n\n\t\tdojo.event.topic.publish('dragEnd', { source: this } );","this":"dojo.dnd.DragObject"}}},"dojo.dnd.HtmlDragObject.left":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":"\t\tswitch(e.dragStatus){\n\n\t\t\tcase \"dropSuccess\":\n\t\t\t\tdojo.html.removeNode(this.dragClone);\n\t\t\t\tthis.dragClone = null;\n\t\t\t\tbreak;\n\n\t\t\tcase \"dropFailure\": \/\/ slide back to the start\n\t\t\t\tvar startCoords = dojo.html.getAbsolutePosition(this.dragClone, true);\n\t\t\t\t\/\/ offset the end so the effect can be seen\n\t\t\t\tvar endCoords = { left: this.dragStartPosition.x + 1,\n\t\t\t\t\ttop: this.dragStartPosition.y + 1};\n\n\t\t\t\t\/\/ animate\n\t\t\t\tvar anim = dojo.lfx.slideTo(this.dragClone, endCoords, 500, dojo.lfx.easeOut);\n\t\t\t\tvar dragObject = this;\n\t\t\t\tdojo.event.connect(anim, \"onEnd\", function (e) {\n\t\t\t\t\t\/\/ pause for a second (not literally) and disappear\n\t\t\t\t\tdojo.lang.setTimeout(function() {\n\t\t\t\t\t\t\tdojo.html.removeNode(dragObject.dragClone);\n\t\t\t\t\t\t\t\/\/ Allow drag clone to be gc'ed\n\t\t\t\t\t\t\tdragObject.dragClone = null;\n\t\t\t\t\t\t},\n\t\t\t\t\t\t200);\n\t\t\t\t});\n\t\t\t\tanim.play();\n\t\t\t\tbreak;\n\t\t}\n\n\t\tdojo.event.topic.publish('dragEnd', { source: this } );","this":"dojo.dnd.DragObject"}}},"dojo.dnd.HtmlDragObject.top":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":"\t\tswitch(e.dragStatus){\n\n\t\t\tcase \"dropSuccess\":\n\t\t\t\tdojo.html.removeNode(this.dragClone);\n\t\t\t\tthis.dragClone = null;\n\t\t\t\tbreak;\n\n\t\t\tcase \"dropFailure\": \/\/ slide back to the start\n\t\t\t\tvar startCoords = dojo.html.getAbsolutePosition(this.dragClone, true);\n\t\t\t\t\/\/ offset the end so the effect can be seen\n\t\t\t\tvar endCoords = { left: this.dragStartPosition.x + 1,\n\t\t\t\t\ttop: this.dragStartPosition.y + 1};\n\n\t\t\t\t\/\/ animate\n\t\t\t\tvar anim = dojo.lfx.slideTo(this.dragClone, endCoords, 500, dojo.lfx.easeOut);\n\t\t\t\tvar dragObject = this;\n\t\t\t\tdojo.event.connect(anim, \"onEnd\", function (e) {\n\t\t\t\t\t\/\/ pause for a second (not literally) and disappear\n\t\t\t\t\tdojo.lang.setTimeout(function() {\n\t\t\t\t\t\t\tdojo.html.removeNode(dragObject.dragClone);\n\t\t\t\t\t\t\t\/\/ Allow drag clone to be gc'ed\n\t\t\t\t\t\t\tdragObject.dragClone = null;\n\t\t\t\t\t\t},\n\t\t\t\t\t\t200);\n\t\t\t\t});\n\t\t\t\tanim.play();\n\t\t\t\tbreak;\n\t\t}\n\n\t\tdojo.event.topic.publish('dragEnd', { source: this } );","this":"dojo.dnd.DragObject"}}},"dojo.dnd.HtmlDragObject.squelchOnClick":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":"\t\t\/\/ disconnect after a short delay to prevent \"Null argument to unrollAdvice()\" warning\n\t\tdojo.lang.setTimeout(function() {\n\t\t\t\tdojo.event.disconnect(this.domNode, \"onclick\", this, \"squelchOnClick\");\n\t\t\t},50);","this":"dojo.dnd.DragObject"}}},"dojo.dnd.HtmlDragObject.constrainTo":{"_":{"meta":{"summary":"","parameters":{"container":{"type":""}},"src":"\t\tthis.constrainToContainer=true;\n\t\tif (container) {\n\t\t\tthis.constrainingContainer = container;\n\t\t} else {\n\t\t\tthis.constrainingContainer = this.domNode.parentNode;\n\t\t}","this":"dojo.dnd.DragObject"}}},"dojo.dnd.HtmlDropTarget":{"_":{"meta":{"summary":"","inherits":["dojo.dnd.DropTarget"],"this_inherits":["dojo.dnd.DropTarget"],"protovariables":{"vertical":""}}}},"dojo.dnd.HtmlDropTarget.onDragOver":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":"\t\tif(!this.accepts(e.dragObjects)){ return false; }\n\n\t\t\/\/ cache the positions of the child nodes\n\t\tthis.childBoxes = [];\n\t\tfor (var i = 0, child; i < this.domNode.childNodes.length; i++) {\n\t\t\tchild = this.domNode.childNodes[i];\n\t\t\tif (child.nodeType != dojo.html.ELEMENT_NODE) { continue; }\n\t\t\tvar pos = dojo.html.getAbsolutePosition(child, true);\n\t\t\tvar inner = dojo.html.getBorderBox(child);\n\t\t\tthis.childBoxes.push({top: pos.y, bottom: pos.y+inner.height,\n\t\t\t\tleft: pos.x, right: pos.x+inner.width, height: inner.height, \n\t\t\t\twidth: inner.width, node: child});\n\t\t}\n\n\t\t\/\/ TODO: use dummy node\n\n\t\treturn true;","this":"dojo.dnd.DropTarget"}}},"dojo.dnd.DropTarget":{"_":{"meta":{"this_variables":["childBoxes","childBoxes","childBoxes","childBoxes","dropIndicator","dropIndicator.style.display","dropIndicator.style.height","dropIndicator.style.top","dropIndicator.style.width","dropIndicator.style.left"]}}},"dojo.dnd.HtmlDropTarget.top":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":"\t\tif(!this.accepts(e.dragObjects)){ return false; }\n\n\t\t\/\/ cache the positions of the child nodes\n\t\tthis.childBoxes = [];\n\t\tfor (var i = 0, child; i < this.domNode.childNodes.length; i++) {\n\t\t\tchild = this.domNode.childNodes[i];\n\t\t\tif (child.nodeType != dojo.html.ELEMENT_NODE) { continue; }\n\t\t\tvar pos = dojo.html.getAbsolutePosition(child, true);\n\t\t\tvar inner = dojo.html.getBorderBox(child);\n\t\t\tthis.childBoxes.push({top: pos.y, bottom: pos.y+inner.height,\n\t\t\t\tleft: pos.x, right: pos.x+inner.width, height: inner.height, \n\t\t\t\twidth: inner.width, node: child});\n\t\t}\n\n\t\t\/\/ TODO: use dummy node\n\n\t\treturn true;","this":"dojo.dnd.DropTarget"}}},"dojo.dnd.HtmlDropTarget.left":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":"\t\tif(!this.accepts(e.dragObjects)){ return false; }\n\n\t\t\/\/ cache the positions of the child nodes\n\t\tthis.childBoxes = [];\n\t\tfor (var i = 0, child; i < this.domNode.childNodes.length; i++) {\n\t\t\tchild = this.domNode.childNodes[i];\n\t\t\tif (child.nodeType != dojo.html.ELEMENT_NODE) { continue; }\n\t\t\tvar pos = dojo.html.getAbsolutePosition(child, true);\n\t\t\tvar inner = dojo.html.getBorderBox(child);\n\t\t\tthis.childBoxes.push({top: pos.y, bottom: pos.y+inner.height,\n\t\t\t\tleft: pos.x, right: pos.x+inner.width, height: inner.height, \n\t\t\t\twidth: inner.width, node: child});\n\t\t}\n\n\t\t\/\/ TODO: use dummy node\n\n\t\treturn true;","this":"dojo.dnd.DropTarget"}}},"dojo.dnd.HtmlDropTarget.width":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":"\t\tif(!this.accepts(e.dragObjects)){ return false; }\n\n\t\t\/\/ cache the positions of the child nodes\n\t\tthis.childBoxes = [];\n\t\tfor (var i = 0, child; i < this.domNode.childNodes.length; i++) {\n\t\t\tchild = this.domNode.childNodes[i];\n\t\t\tif (child.nodeType != dojo.html.ELEMENT_NODE) { continue; }\n\t\t\tvar pos = dojo.html.getAbsolutePosition(child, true);\n\t\t\tvar inner = dojo.html.getBorderBox(child);\n\t\t\tthis.childBoxes.push({top: pos.y, bottom: pos.y+inner.height,\n\t\t\t\tleft: pos.x, right: pos.x+inner.width, height: inner.height, \n\t\t\t\twidth: inner.width, node: child});\n\t\t}\n\n\t\t\/\/ TODO: use dummy node\n\n\t\treturn true;","this":"dojo.dnd.DropTarget"}}},"dojo.dnd.HtmlDropTarget._getNodeUnderMouse":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":"\t\t\twith (this.childBoxes[i]) {\n\t\t\t\tif (e.pageX >= left && e.pageX <= right &&\n\t\t\t\t\te.pageY >= top && e.pageY <= bottom) { return i; }\n\t\t\t}\n\t\t}\n\n\t\treturn -1;","this":"dojo.dnd.DropTarget"}}},"dojo.dnd.HtmlDropTarget.createDropIndicator":{"_":{"meta":{"summary":"","src":"\t\tthis.dropIndicator = document.createElement(\"div\");\n\t\twith (this.dropIndicator.style) {\n\t\t\tposition = \"absolute\";\n\t\t\tzIndex = 999;\n\t\t\tif(this.vertical){\n\t\t\t\tborderLeftWidth = \"1px\";\n\t\t\t\tborderLeftColor = \"black\";\n\t\t\t\tborderLeftStyle = \"solid\";\n\t\t\t\theight = dojo.html.getBorderBox(this.domNode).height + \"px\";\n\t\t\t\ttop = dojo.html.getAbsolutePosition(this.domNode, true).y + \"px\";\n\t\t\t}else{\n\t\t\t\tborderTopWidth = \"1px\";\n\t\t\t\tborderTopColor = \"black\";\n\t\t\t\tborderTopStyle = \"solid\";\n\t\t\t\twidth = dojo.html.getBorderBox(this.domNode).width + \"px\";\n\t\t\t\tleft = dojo.html.getAbsolutePosition(this.domNode, true).x + \"px\";\n\t\t\t}\n\t\t}","this":"dojo.dnd.DropTarget"}}},"dojo.dnd.HtmlDropTarget.onDragMove":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""},"dragObjects":{"type":""}},"src":"\t\tvar i = this._getNodeUnderMouse(e);\n\n\t\tif(!this.dropIndicator){\n\t\t\tthis.createDropIndicator();\n\t\t}\n\n\t\tvar gravity = this.vertical ? dojo.html.gravity.WEST : dojo.html.gravity.NORTH;\n\t\tvar hide = false;\n\t\tif(i < 0) {\n\t\t\tif(this.childBoxes.length) {\n\t\t\t\tvar before = (dojo.html.gravity(this.childBoxes[0].node, e) & gravity);\n\t\t\t\tif(before){ hide = true; }\n\t\t\t} else {\n\t\t\t\tvar before = true;\n\t\t\t}\n\t\t} else {\n\t\t\tvar child = this.childBoxes[i];\n\t\t\tvar before = (dojo.html.gravity(child.node, e) & gravity);\n\t\t\tif(child.node === dragObjects[0].dragSource.domNode){\n\t\t\t\thide = true;\n\t\t\t}else{\n\t\t\t\tvar currentPosChild = before ? \n\t\t\t\t\t\t(i>0?this.childBoxes[i-1]:child) : \n\t\t\t\t\t\t(i<this.childBoxes.length-1?this.childBoxes[i+1]:child);\n\t\t\t\tif(currentPosChild.node === dragObjects[0].dragSource.domNode){\n\t\t\t\t\thide = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(hide){\n\t\t\tthis.dropIndicator.style.display=\"none\";\n\t\t\treturn;\n\t\t}else{\n\t\t\tthis.dropIndicator.style.display=\"\";\n\t\t}\n\n\t\tthis.placeIndicator(e, dragObjects, i, before);\n\n\t\tif(!dojo.html.hasParent(this.dropIndicator)) {\n\t\t\tdojo.body().appendChild(this.dropIndicator);\n\t\t}","this":"dojo.dnd.DropTarget"}}},"dojo.dnd.HtmlDropTarget.placeIndicator":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""},"dragObjects":{"type":""},"boxIndex":{"type":""},"before":{"type":""}},"src":"\t\tvar targetProperty = this.vertical ? \"left\" : \"top\";\n\t\tvar child;\n\t\tif (boxIndex < 0) {\n\t\t\tif (this.childBoxes.length) {\n\t\t\t\tchild = before ? this.childBoxes[0]\n\t\t\t\t\t: this.childBoxes[this.childBoxes.length - 1];\n\t\t\t} else {\n\t\t\t\tthis.dropIndicator.style[targetProperty] = dojo.html.getAbsolutePosition(this.domNode, true)[this.vertical?\"x\":\"y\"] + \"px\";\n\t\t\t}\n\t\t} else {\n\t\t\tchild = this.childBoxes[boxIndex];\n\t\t}\n\t\tif(child){\n\t\t\tthis.dropIndicator.style[targetProperty] = (before ? child[targetProperty] : child[this.vertical?\"right\":\"bottom\"]) + \"px\";\n\t\t\tif(this.vertical){\n\t\t\t\tthis.dropIndicator.style.height = child.height + \"px\";\n\t\t\t\tthis.dropIndicator.style.top = child.top + \"px\";\n\t\t\t}else{\n\t\t\t\tthis.dropIndicator.style.width = child.width + \"px\";\n\t\t\t\tthis.dropIndicator.style.left = child.left + \"px\";\n\t\t\t}\n\t\t}","this":"dojo.dnd.DropTarget"}}},"dojo.dnd.HtmlDropTarget.onDragOut":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":"\t\tif(this.dropIndicator) {\n\t\t\tdojo.html.removeNode(this.dropIndicator);\n\t\t\tdelete this.dropIndicator;\n\t\t}","this":"dojo.dnd.DropTarget"}}},"dojo.dnd.HtmlDropTarget.onDrop":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":"\t\tthis.onDragOut(e);\n\n\t\tvar i = this._getNodeUnderMouse(e);\n\n\t\tvar gravity = this.vertical ? dojo.html.gravity.WEST : dojo.html.gravity.NORTH;\n\t\tif (i < 0) {\n\t\t\tif (this.childBoxes.length) {\n\t\t\t\tif (dojo.html.gravity(this.childBoxes[0].node, e) & gravity) {\n\t\t\t\t\treturn this.insert(e, this.childBoxes[0].node, \"before\");\n\t\t\t\t} else {\n\t\t\t\t\treturn this.insert(e, this.childBoxes[this.childBoxes.length-1].node, \"after\");\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this.insert(e, this.domNode, \"append\");\n\t\t}\n\n\t\tvar child = this.childBoxes[i];\n\t\tif (dojo.html.gravity(child.node, e) & gravity) {\n\t\t\treturn this.insert(e, child.node, \"before\");\n\t\t} else {\n\t\t\treturn this.insert(e, child.node, \"after\");\n\t\t}","this":"dojo.dnd.DropTarget"}}},"dojo.dnd.HtmlDropTarget.insert":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""},"refNode":{"type":""},"position":{"type":""}},"src":"\t\tvar node = e.dragObject.domNode;\n\n\t\tif(position == \"before\") {\n\t\t\treturn dojo.html.insertBefore(node, refNode);\n\t\t} else if(position == \"after\") {\n\t\t\treturn dojo.html.insertAfter(node, refNode);\n\t\t} else if(position == \"append\") {\n\t\t\trefNode.appendChild(node);\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;","this":"dojo.dnd.DropTarget"}}}}}},"dojo.dnd.HtmlDragManager":{"meta":{"requires":{"common":["dojo.dnd.DragAndDrop","dojo.event.*","dojo.lang.array","dojo.html.common","dojo.html.layout"]},"functions":{"dojo.dnd.HtmlDragManager":{"_":{"meta":{"summary":"","inherits":["dojo.dnd.DragManager"],"this_inherits":["dojo.dnd.DragManager"],"protovariables":{"disabled":"","nestedTargets":"","mouseDownTimer":"","dsCounter":"","dsPrefix":"","dropTargetDimensions":"","currentDropTarget":"","previousDropTarget":"","_dragTriggered":"","selectedSources":"","dragObjects":"","currentX":"","currentY":"","lastX":"","lastY":"","mouseDownX":"","mouseDownY":"","threshold":"","dropAcceptable":""}}}},"dojo.dnd.HtmlDragManager.cancelEvent":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":"                           e.stopPropagation(); e.preventDefault();   ","this":"dojo.dnd.DragManager"}}},"dojo.dnd.HtmlDragManager.registerDragSource":{"_":{"meta":{"summary":"","parameters":{"ds":{"type":""}},"src":"\t\t\t\/\/ FIXME: dragSource objects SHOULD have some sort of property that\n\t\t\t\/\/ references their DOM node, we shouldn't just be passing nodes and\n\t\t\t\/\/ expecting it to work.\n\t\t\t\/\/dojo.profile.start(\"register DragSource 1\");\n\t\t\tvar dp = this.dsPrefix;\n\t\t\tvar dpIdx = dp+\"Idx_\"+(this.dsCounter++);\n\t\t\tds.dragSourceId = dpIdx;\n\t\t\tthis.dragSources[dpIdx] = ds;\n\t\t\tds.domNode.setAttribute(dp, dpIdx);\n\t\t\t\/\/dojo.profile.end(\"register DragSource 1\");\n\n\t\t\t\/\/dojo.profile.start(\"register DragSource 2\");\n\n\t\t\t\/\/ so we can drag links\n\t\t\tif(dojo.render.html.ie){\n\t\t\t\t\/\/dojo.profile.start(\"register DragSource IE\");\n\t\t\t\t\n\t\t\t\tdojo.event.browser.addListener(ds.domNode, \"ondragstart\", this.cancelEvent);\n\t\t\t\t\/\/ terribly slow\n\t\t\t\t\/\/dojo.event.connect(ds.domNode, \"ondragstart\", this.cancelEvent);\n\t\t\t\t\/\/dojo.profile.end(\"register DragSource IE\");\n\n\t\t\t}\n\t\t\t\/\/dojo.profile.end(\"register DragSource 2\");\n\n\t\t}\n\t\t\/\/dojo.profile.end(\"register DragSource\");","this":"dojo.dnd.DragManager"}}},"dojo.dnd.HtmlDragManager.unregisterDragSource":{"_":{"meta":{"summary":"","parameters":{"ds":{"type":""}},"src":"\t\tif (ds[\"domNode\"]){\n\t\t\tvar dp = this.dsPrefix;\n\t\t\tvar dpIdx = ds.dragSourceId;\n\t\t\tdelete ds.dragSourceId;\n\t\t\tdelete this.dragSources[dpIdx];\n\t\t\tds.domNode.setAttribute(dp, null);\n\t\t\tif(dojo.render.html.ie){\n\t\t\t\tdojo.event.browser.removeListener(ds.domNode, \"ondragstart\", this.cancelEvent);\t\t\t\n\t\t\t}\n\t\t}","this":"dojo.dnd.DragManager"}}},"dojo.dnd.HtmlDragManager.registerDropTarget":{"_":{"meta":{"summary":"","parameters":{"dt":{"type":""}},"src":"\t\tthis.dropTargets.push(dt);","this":"dojo.dnd.DragManager"}}},"dojo.dnd.HtmlDragManager.unregisterDropTarget":{"_":{"meta":{"summary":"","parameters":{"dt":{"type":""}},"src":"\t\tvar index = dojo.lang.find(this.dropTargets, dt, true);\n\t\tif (index>=0) {\n\t\t\tthis.dropTargets.splice(index, 1);\n\t\t}","this":"dojo.dnd.DragManager"}}},"dojo.dnd.HtmlDragManager.getDragSource":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":"\t\tvar tn = e.target;\n\t\tif(tn === dojo.body()){ return; }\n\t\tvar ta = dojo.html.getAttribute(tn, this.dsPrefix);\n\t\twhile((!ta)&&(tn)){\n\t\t\ttn = tn.parentNode;\n\t\t\tif((!tn)||(tn === dojo.body())){ return; }\n\t\t\tta = dojo.html.getAttribute(tn, this.dsPrefix);\n\t\t}\n\t\treturn this.dragSources[ta];","this":"dojo.dnd.DragManager"}}},"dojo.dnd.HtmlDragManager.onKeyDown":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":"","this":"dojo.dnd.DragManager"}}},"dojo.dnd.HtmlDragManager.onMouseDown":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":"\t\tif(this.disabled) { return; }\n\n\t\t\/\/ only begin on left click\n\t\tif(dojo.render.html.ie) {\n\t\t\tif(e.button != 1) { return; }\n\t\t} else if(e.which != 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar target = e.target.nodeType == dojo.html.TEXT_NODE ?\n\t\t\te.target.parentNode : e.target;\n\n\t\t\/\/ do not start drag involvement if the user is interacting with\n\t\t\/\/ a form element.\n\t\tif(dojo.html.isTag(target, \"button\", \"textarea\", \"input\", \"select\", \"option\")) {\n\t\t\treturn;\n\t\t}\n\n\t\t\/\/ find a selection object, if one is a parent of the source node\n\t\tvar ds = this.getDragSource(e);\n\t\t\n\t\t\/\/ this line is important.  if we aren't selecting anything then\n\t\t\/\/ we need to return now, so preventDefault() isn't called, and thus\n\t\t\/\/ the event is propogated to other handling code\n\t\tif(!ds){ return; }\n\n\t\tif(!dojo.lang.inArray(this.selectedSources, ds)){\n\t\t\tthis.selectedSources.push(ds);\n\t\t\tds.onSelected();\n\t\t}\n\n \t\tthis.mouseDownX = e.pageX;\n \t\tthis.mouseDownY = e.pageY;\n\n\t\t\/\/ Must stop the mouse down from being propogated, or otherwise can't\n\t\t\/\/ drag links in firefox.\n\t\t\/\/ WARNING: preventing the default action on all mousedown events\n\t\t\/\/ prevents user interaction with the contents.\n\t\te.preventDefault();\n\n\t\tdojo.event.connect(document, \"onmousemove\", this, \"onMouseMove\");","this":"dojo.dnd.DragManager"}}},"dojo.dnd.DragManager":{"_":{"meta":{"this_variables":["mouseDownX","mouseDownY","mouseDownX","mouseDownY","_dragTriggered","selectedSources","dragObjects","dragSource","currentDropTarget","dropTargetDimensions","currentDropTarget","_dragTriggered","dragSource","previousDropTarget","dropAcceptable"]}}},"dojo.dnd.HtmlDragManager.onMouseUp":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""},"cancel":{"type":""}},"src":"\t\t\treturn;\n\t\t}\n\n\t\tthis.mouseDownX = null;\n\t\tthis.mouseDownY = null;\n\t\tthis._dragTriggered = false;\n \t\t\/\/ e.preventDefault();\n\t\te.dragSource = this.dragSource;\n\t\t\/\/ let ctrl be used for multiselect or another action\n\t\t\/\/ if I use same key to trigger treeV3 node selection and here,\n\t\t\/\/ I have bugs with drag'n'drop. why ?? no idea..\n\t\tif((!e.shiftKey)&&(!e.ctrlKey)){ \n\t\t\/\/if(!e.shiftKey){\n\t\t\tif(this.currentDropTarget) {\n\t\t\t\tthis.currentDropTarget.onDropStart();\n\t\t\t}\n\t\t\tdojo.lang.forEach(this.dragObjects, function(tempDragObj){\n\t\t\t\tvar ret = null;\n\t\t\t\tif(!tempDragObj){ return; }\n\t\t\t\tif(this.currentDropTarget) {\n\t\t\t\t\te.dragObject = tempDragObj;\n\n\t\t\t\t\t\/\/ NOTE: we can't get anything but the current drop target\n\t\t\t\t\t\/\/ here since the drag shadow blocks mouse-over events.\n\t\t\t\t\t\/\/ This is probelematic for dropping \"in\" something\n\t\t\t\t\tvar ce = this.currentDropTarget.domNode.childNodes;\n\t\t\t\t\tif(ce.length > 0){\n\t\t\t\t\t\te.dropTarget = ce[0];\n\t\t\t\t\t\twhile(e.dropTarget == tempDragObj.domNode){\n\t\t\t\t\t\t\te.dropTarget = e.dropTarget.nextSibling;\n\t\t\t\t\t\t}\n\t\t\t\t\t}else{\n\t\t\t\t\t\te.dropTarget = this.currentDropTarget.domNode;\n\t\t\t\t\t}\n\t\t\t\t\tif(this.dropAcceptable){\n\t\t\t\t\t\tret = this.currentDropTarget.onDrop(e);\n\t\t\t\t\t}else{\n\t\t\t\t\t\t this.currentDropTarget.onDragOut(e);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\te.dragStatus = this.dropAcceptable && ret ? \"dropSuccess\" : \"dropFailure\";\n\t\t\t\t\/\/ decouple the calls for onDragEnd, so they don't block the execution here\n\t\t\t\t\/\/ ie. if the onDragEnd would call an alert, the execution here is blocked until the\n\t\t\t\t\/\/ user has confirmed the alert box and then the rest of the dnd code is executed\n\t\t\t\t\/\/ while the mouse doesnt \"hold\" the dragged object anymore ... and so on\n\t\t\t\tdojo.lang.delayThese([\n\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\/\/ in FF1.5 this throws an exception, see \n\t\t\t\t\t\t\/\/ http:\/\/dojotoolkit.org\/pipermail\/dojo-interest\/2006-April\/006751.html\n\t\t\t\t\t\ttry{\n\t\t\t\t\t\t\ttempDragObj.dragSource.onDragEnd(e)\n\t\t\t\t\t\t} catch(err) {\n\t\t\t\t\t\t\t\/\/ since the problem seems passing e, we just copy all \n\t\t\t\t\t\t\t\/\/ properties and try the copy ...\n\t\t\t\t\t\t\tvar ecopy = {};\n\t\t\t\t\t\t\tfor (var i in e) {\n\t\t\t\t\t\t\t\tif (i==\"type\") { \/\/ the type property contains the exception, no idea why...\n\t\t\t\t\t\t\t\t\tecopy.type = \"mouseup\";\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tecopy[i] = e[i];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttempDragObj.dragSource.onDragEnd(ecopy);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t, function() {tempDragObj.onDragEnd(e)}]);\n\t\t\t}, this);\n\n\t\t\tthis.selectedSources = [];\n\t\t\tthis.dragObjects = [];\n\t\t\tthis.dragSource = null;\n\t\t\tif(this.currentDropTarget) {\n\t\t\t\tthis.currentDropTarget.onDropEnd();\n\t\t\t}\n\t\t} else {\n\t\t\t\/\/dojo.debug(\"special click\");\n\t\t}\n\n\t\tdojo.event.disconnect(document, \"onmousemove\", this, \"onMouseMove\");\n\t\tthis.currentDropTarget = null;","this":"dojo.dnd.DragManager"}}},"dojo.dnd.HtmlDragManager.onScroll":{"_":{"meta":{"summary":"","src":"\t\t\tif(this.dragObjects[i].updateDragOffset) {\n\t\t\t\tthis.dragObjects[i].updateDragOffset();\n\t\t\t}\n\t\t}\n\t\t\/\/dojo.profile.end(\"DNDManager updateoffset\");\n\n\t\t\/\/ TODO: do not recalculate, only adjust coordinates\n\t\tif (this.dragObjects.length) {\n\t\t\tthis.cacheTargetLocations();\n\t\t}","this":"dojo.dnd.DragManager"}}},"dojo.dnd.HtmlDragManager._dragStartDistance":{"_":{"meta":{"summary":"","parameters":{"x":{"type":""},"y":{"type":""}},"src":"\t\tif((!this.mouseDownX)||(!this.mouseDownX)){\n\t\t\treturn;\n\t\t}\n\t\tvar dx = Math.abs(x-this.mouseDownX);\n\t\tvar dx2 = dx*dx;\n\t\tvar dy = Math.abs(y-this.mouseDownY);\n\t\tvar dy2 = dy*dy;\n\t\treturn parseInt(Math.sqrt(dx2+dy2), 10);","this":"dojo.dnd.DragManager"}}},"dojo.dnd.HtmlDragManager.cacheTargetLocations":{"_":{"meta":{"summary":"","src":"\t\tdojo.profile.start(\"cacheTargetLocations\");\n\n\t\tthis.dropTargetDimensions = [];\n\t\tdojo.lang.forEach(this.dropTargets, function(tempTarget){\n\t\t\tvar tn = tempTarget.domNode;\n\t\t\t\/\/only cache dropTarget which can accept current dragSource\n\t\t\tif(!tn || dojo.lang.find(tempTarget.acceptedTypes, this.dragSource.type) < 0){ return; }\n\t\t\tvar abs = dojo.html.getAbsolutePosition(tn, true);\n\t\t\tvar bb = dojo.html.getBorderBox(tn);\n\t\t\tthis.dropTargetDimensions.push([\n\t\t\t\t[abs.x, abs.y],\t\/\/ upper-left\n\t\t\t\t\/\/ lower-right\n\t\t\t\t[ abs.x+bb.width, abs.y+bb.height ],\n\t\t\t\ttempTarget\n\t\t\t]);\n\t\t\t\/\/dojo.debug(\"Cached for \"+tempTarget)\n\t\t}, this);\n\n\t\tdojo.profile.end(\"cacheTargetLocations\");\n\n\t\t\/\/dojo.debug(\"Cache locations\")","this":"dojo.dnd.DragManager"}}},"dojo.dnd.HtmlDragManager.onMouseMove":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":"\t\tif((dojo.render.html.ie)&&(e.button != 1)){\n\t\t\t\/\/ Oooops - mouse up occurred - e.g. when mouse was not over the\n\t\t\t\/\/ window. I don't think we can detect this for FF - but at least\n\t\t\t\/\/ we can be nice in IE.\n\t\t\tthis.currentDropTarget = null;\n\t\t\tthis.onMouseUp(e, true);\n\t\t\treturn;\n\t\t}\n\n\t\t\/\/ if we've got some sources, but no drag objects, we need to send\n\t\t\/\/ onDragStart to all the right parties and get things lined up for\n\t\t\/\/ drop target detection\n\n\t\tif(\t(this.selectedSources.length)&&\n\t\t\t(!this.dragObjects.length) ){\n\t\t\tvar dx;\n\t\t\tvar dy;\n\t\t\tif(!this._dragTriggered){\n\t\t\t\tthis._dragTriggered = (this._dragStartDistance(e.pageX, e.pageY) > this.threshold);\n\t\t\t\tif(!this._dragTriggered){ return; }\n\t\t\t\tdx = e.pageX - this.mouseDownX;\n\t\t\t\tdy = e.pageY - this.mouseDownY;\n\t\t\t}\n\n\t\t\t\/\/ the first element is always our dragSource, if there are multiple\n\t\t\t\/\/ selectedSources (elements that move along) then the first one is the master\n\t\t\t\/\/ and for it the events will be fired etc.\n\t\t\tthis.dragSource = this.selectedSources[0];\n\t\t\t\n\t\t\tdojo.lang.forEach(this.selectedSources, function(tempSource){\n\t\t\t\tif(!tempSource){ return; }\n\t\t\t\tvar tdo = tempSource.onDragStart(e);\n\t\t\t\tif(tdo){\n\t\t\t\t\ttdo.onDragStart(e);\n\n\t\t\t\t\t\/\/ \"bump\" the drag object to account for the drag threshold\n\t\t\t\t\ttdo.dragOffset.y += dy;\n\t\t\t\t\ttdo.dragOffset.x += dx;\n\t\t\t\t\ttdo.dragSource = tempSource;\n\n\t\t\t\t\tthis.dragObjects.push(tdo);\n\t\t\t\t}\n\t\t\t}, this);\n\n\t\t\t\/* clean previous drop target in dragStart *\/\n\t\t\tthis.previousDropTarget = null;\n\n\t\t\tthis.cacheTargetLocations();\n\t\t}\n\n\t\t\/\/ FIXME: we need to add dragSources and dragObjects to e\n\t\tdojo.lang.forEach(this.dragObjects, function(dragObj){\n\t\t\tif(dragObj){ dragObj.onDragMove(e); }\n\t\t});\n\n\t\t\/\/ if we have a current drop target, check to see if we're outside of\n\t\t\/\/ it. If so, do all the actions that need doing.\n\t\tif(this.currentDropTarget){\n\t\t\t\/\/dojo.debug(dojo.html.hasParent(this.currentDropTarget.domNode))\n\t\t\tvar c = dojo.html.toCoordinateObject(this.currentDropTarget.domNode, true);\n\t\t\t\/\/\t\tvar dtp = this.currentDropTargetPoints;\n\t\t\tvar dtp = [\n\t\t\t\t[c.x,c.y], [c.x+c.width, c.y+c.height]\n\t\t\t];\n\t\t}\n\n\t\tif((!this.nestedTargets)&&(dtp)&&(this.isInsideBox(e, dtp))){\n\t\t\tif(this.dropAcceptable){\n\t\t\t\tthis.currentDropTarget.onDragMove(e, this.dragObjects);\n\t\t\t}\n\t\t}else{\n\t\t\t\/\/ FIXME: need to fix the event object!\n\t\t\t\/\/ see if we can find a better drop target\n\t\t\tvar bestBox = this.findBestTarget(e);\n\n\t\t\tif(bestBox.target === null){\n\t\t\t\tif(this.currentDropTarget){\n\t\t\t\t\tthis.currentDropTarget.onDragOut(e);\n\t\t\t\t\tthis.previousDropTarget = this.currentDropTarget;\n\t\t\t\t\tthis.currentDropTarget = null;\n\t\t\t\t\t\/\/ this.currentDropTargetPoints = null;\n\t\t\t\t}\n\t\t\t\tthis.dropAcceptable = false;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif(this.currentDropTarget !== bestBox.target){\n\t\t\t\tif(this.currentDropTarget){\n\t\t\t\t\tthis.previousDropTarget = this.currentDropTarget;\n\t\t\t\t\tthis.currentDropTarget.onDragOut(e);\n\t\t\t\t}\n\t\t\t\tthis.currentDropTarget = bestBox.target;\n\t\t\t\t\/\/ this.currentDropTargetPoints = bestBox.points;\n\t\t\t\te.dragObjects = this.dragObjects;\n\t\t\t\tthis.dropAcceptable = this.currentDropTarget.onDragOver(e);\n\n\t\t\t}else{\n\t\t\t\tif(this.dropAcceptable){\n\t\t\t\t\tthis.currentDropTarget.onDragMove(e, this.dragObjects);\n\t\t\t\t}\n\t\t\t}\n\t\t}","this":"dojo.dnd.DragManager"}}},"dojo.dnd.HtmlDragManager.findBestTarget":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":"\t\tvar _this = this;\n\t\tvar bestBox = new Object();\n\t\tbestBox.target = null;\n\t\tbestBox.points = null;\n\t\tdojo.lang.every(this.dropTargetDimensions, function(tmpDA) {\n\t\t\tif(!_this.isInsideBox(e, tmpDA)){\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tbestBox.target = tmpDA[2];\n\t\t\tbestBox.points = tmpDA;\n\t\t\t\/\/ continue iterating only if _this.nestedTargets == true\n\t\t\treturn Boolean(_this.nestedTargets);\n\t\t});\n\n\t\treturn bestBox;","this":"dojo.dnd.DragManager"}}},"dojo.dnd.HtmlDragManager.isInsideBox":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""},"coords":{"type":""}},"src":"\t\tif(\t(e.pageX > coords[0][0])&&\n\t\t\t(e.pageX < coords[1][0])&&\n\t\t\t(e.pageY > coords[0][1])&&\n\t\t\t(e.pageY < coords[1][1]) ){\n\t\t\treturn true;\n\t\t}\n\t\treturn false;","this":"dojo.dnd.DragManager"}}},"dojo.dnd.HtmlDragManager.onMouseOver":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":"","this":"dojo.dnd.DragManager"}}},"dojo.dnd.HtmlDragManager.onMouseOut":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":"","this":"dojo.dnd.DragManager"}}}}}},"dojo.dnd.HtmlDragMove":{"meta":{"requires":{"common":["dojo.dnd.*"]},"functions":{"dojo.dnd.HtmlDragMoveSource":{"_":{"meta":{"summary":"","inherits":["dojo.dnd.HtmlDragSource"],"this_inherits":["dojo.dnd.HtmlDragSource"]}}},"dojo.dnd.HtmlDragMoveSource.onDragStart":{"_":{"meta":{"summary":"","src":"\t\tvar dragObj =  new dojo.dnd.HtmlDragMoveObject(this.dragObject, this.type);\n\t\tif (this.constrainToContainer) {\n\t\t\tdragObj.constrainTo(this.constrainingContainer);\n\t\t}\n\t\treturn dragObj;","this":"dojo.dnd.HtmlDragSource"}}},"dojo.dnd.HtmlDragMoveSource.onSelected":{"_":{"meta":{"summary":"","src":"\t\tfor (var i=0; i<this.dragObjects.length; i++) {\n\t\t\tdojo.dnd.dragManager.selectedSources.push(new dojo.dnd.HtmlDragMoveSource(this.dragObjects[i]));\n\t\t}","this":"dojo.dnd.HtmlDragSource"}}},"dojo.dnd.HtmlDragMoveObject":{"_":{"meta":{"summary":"","inherits":["dojo.dnd.HtmlDragObject"],"this_inherits":["dojo.dnd.HtmlDragObject"]}}},"dojo.dnd.HtmlDragMoveObject.onDragEnd":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":"","this":"dojo.dnd.HtmlDragObject"}}},"dojo.dnd.HtmlDragMoveObject.onDragStart":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":"\t\tdojo.html.clearSelection();\n\n\t\tthis.dragClone = this.domNode;\n\n\t\tthis.scrollOffset = dojo.html.getScroll().offset;\n\t\tthis.dragStartPosition = dojo.html.abs(this.domNode, true);\n\t\t\n\t\tthis.dragOffset = {y: this.dragStartPosition.y - e.pageY,\n\t\t\tx: this.dragStartPosition.x - e.pageX};\n\n\t\tthis.containingBlockPosition = this.domNode.offsetParent ? \n\t\t\tdojo.html.abs(this.domNode.offsetParent, true) : {x:0, y:0};\n\n\t\tthis.dragClone.style.position = \"absolute\";\n\n\t\tif (this.constrainToContainer) {\n\t\t\tthis.constraints = this.getConstraints();\n\t\t}","this":"dojo.dnd.HtmlDragObject"}}},"dojo.dnd.HtmlDragObject":{"_":{"meta":{"this_variables":["dragClone","scrollOffset","dragStartPosition","dragOffset","containingBlockPosition","dragClone.style.position","constraints","dragClone","scrollOffset","dragStartPosition","dragOffset","containingBlockPosition","dragClone.style.position","constraints","dragClone","scrollOffset","dragStartPosition","dragOffset","containingBlockPosition","dragClone.style.position","constraints","domNode.style.top","domNode.style.left"]}}},"dojo.dnd.HtmlDragMoveObject.y":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":"\t\tdojo.html.clearSelection();\n\n\t\tthis.dragClone = this.domNode;\n\n\t\tthis.scrollOffset = dojo.html.getScroll().offset;\n\t\tthis.dragStartPosition = dojo.html.abs(this.domNode, true);\n\t\t\n\t\tthis.dragOffset = {y: this.dragStartPosition.y - e.pageY,\n\t\t\tx: this.dragStartPosition.x - e.pageX};\n\n\t\tthis.containingBlockPosition = this.domNode.offsetParent ? \n\t\t\tdojo.html.abs(this.domNode.offsetParent, true) : {x:0, y:0};\n\n\t\tthis.dragClone.style.position = \"absolute\";\n\n\t\tif (this.constrainToContainer) {\n\t\t\tthis.constraints = this.getConstraints();\n\t\t}","this":"dojo.dnd.HtmlDragObject"}}},"dojo.dnd.HtmlDragMoveObject.x":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":"\t\tdojo.html.clearSelection();\n\n\t\tthis.dragClone = this.domNode;\n\n\t\tthis.scrollOffset = dojo.html.getScroll().offset;\n\t\tthis.dragStartPosition = dojo.html.abs(this.domNode, true);\n\t\t\n\t\tthis.dragOffset = {y: this.dragStartPosition.y - e.pageY,\n\t\t\tx: this.dragStartPosition.x - e.pageX};\n\n\t\tthis.containingBlockPosition = this.domNode.offsetParent ? \n\t\t\tdojo.html.abs(this.domNode.offsetParent, true) : {x:0, y:0};\n\n\t\tthis.dragClone.style.position = \"absolute\";\n\n\t\tif (this.constrainToContainer) {\n\t\t\tthis.constraints = this.getConstraints();\n\t\t}","this":"dojo.dnd.HtmlDragObject"}}},"dojo.dnd.HtmlDragMoveObject.setAbsolutePosition":{"_":{"meta":{"summary":"","parameters":{"x":{"type":""},"y":{"type":""}},"src":"\t\tif(!this.disableX) { this.domNode.style.left = (x-this.containingBlockPosition.x) + \"px\"; }","this":"dojo.dnd.HtmlDragObject"}}}}}},"dojo.dnd.Sortable":{"meta":{"requires":{"common":["dojo.dnd.*"]},"functions":{"dojo.dnd.Sortable":{"_":{"meta":{"summary":"","src":""}}},"dojo.dnd.Sortable.ondragstart":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":"\t\tvar dragObject = e.target;\n\t\twhile (dragObject.parentNode && dragObject.parentNode != this) {\n\t\t\tdragObject = dragObject.parentNode;\n\t\t}\n\t\t\/\/ TODO: should apply HtmlDropTarget interface to self\n\t\t\/\/ TODO: should apply HtmlDragObject interface?\n\t\treturn dragObject;","this":"dojo.dnd.Sortable"}}}}}},"dojo.dnd.TreeDragAndDrop":{"meta":{"requires":{"common":["dojo.dnd.HtmlDragAndDrop","dojo.lang.func","dojo.lang.array","dojo.lang.extras","dojo.html.layout"]},"functions":{"dojo.dnd.TreeDragSource":{"_":{"meta":{"summary":"","parameters":{"node":{"type":""},"syncController":{"type":""},"type":{"type":""},"treeNode":{"type":""}},"src":"\tthis.controller = syncController;\r\n\tthis.treeNode = treeNode;\r\n\r\n\tdojo.dnd.HtmlDragSource.call(this, node, type);\r","this_variables":["controller","treeNode","savedSelectedNode"],"this_inherits":["dojo.dnd.HtmlDragSource"],"inherits":["dojo.dnd.HtmlDragSource"]}}},"dragObject.onDragEnd":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":"\t\t\t\tthis.savedSelectedNode.markSelected();\r\n\t\t\t}\r\n\t\t\t\/\/dojo.debug(e.dragStatus);\r\n\r\n\t\t\treturn dojo.dnd.HtmlDragObject.prototype.onDragEnd.apply(this, arguments);\r"}}},"dojo.dnd.TreeDropTarget":{"_":{"meta":{"summary":"","parameters":{"domNode":{"type":""},"controller":{"type":""},"type":{"type":""},"treeNode":{"type":""}},"src":"\tthis.treeNode = treeNode;\r\n\tthis.controller = controller; \/\/ I will sync-ly process drops\r\n\t\r\n\tdojo.dnd.HtmlDropTarget.apply(this, [domNode, type]);\r","this_variables":["treeNode","controller","position","treeNode.labelNode.style.borderTop","treeNode.labelNode.style.borderBottom","treeNode.labelNode.style.borderBottom","treeNode.labelNode.style.borderTop","position","autoExpandTimer","autoExpandTimer","treeNode.parent"],"inherits":["dojo.dnd.HtmlDropTarget"],"protovariables":{"autoExpandDelay":"","autoExpandTimer":"","position":"","indicatorStyle":""}}}},"autoExpand":{"_":{"meta":{"summary":"","src":"\t\t\tif (dojo.dnd.dragManager.currentDropTarget === _this) {\r\n\t\t\t\t_this.controller.expand(_this.treeNode);\r\n\t\t\t}\r"}}},"dojo.dnd.TreeDNDController":{"_":{"meta":{"summary":"","parameters":{"treeController":{"type":""}},"src":"\tthis.dragSources = {};\r\n\r\n\tthis.dropTargets = {};\r","this_variables":["treeController","dragSources","dropTargets"]}}},"dojo.dnd.TreeDragSource.onDragStart":{"_":{"meta":{"summary":"","src":"\t\t\/\/dojo.debugShallow(dragObject)\r\n\r\n\t\tdragObject.treeNode = this.treeNode;\r\n\r\n\t\tdragObject.onDragStart = dojo.lang.hitch(dragObject, function(e) {\r\n\r\n\t\t\t\/* save selection *\/\r\n\t\t\tthis.savedSelectedNode = this.treeNode.tree.selector.selectedNode;\r\n\t\t\tif (this.savedSelectedNode) {\r\n\t\t\t\tthis.savedSelectedNode.unMarkSelected();\r\n\t\t\t}\r\n\r\n\t\t\tvar result = dojo.dnd.HtmlDragObject.prototype.onDragStart.apply(this, arguments);\r\n\r\n\r\n\t\t\t\/* remove background grid from cloned object *\/\r\n\t\t\tvar cloneGrid = this.dragClone.getElementsByTagName('img');\r\n\t\t\tfor(var i=0; i<cloneGrid.length; i++) {\r\n\t\t\t\tcloneGrid.item(i).style.backgroundImage='url()';\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\r\n\r\n\t\t});\r\n\r\n\t\tdragObject.onDragEnd = function(e) {\r\n\r\n\t\t\t\/* restore selection *\/\r\n\t\t\tif (this.savedSelectedNode) {\r\n\t\t\t\tthis.savedSelectedNode.markSelected();\r\n\t\t\t}\r\n\t\t\t\/\/dojo.debug(e.dragStatus);\r\n\r\n\t\t\treturn dojo.dnd.HtmlDragObject.prototype.onDragEnd.apply(this, arguments);\r\n\t\t}\r\n\t\t\/\/dojo.debug(dragObject.domNode.outerHTML)\r\n\r\n\r\n\t\treturn dragObject;\r","this":"dojo.dnd.TreeDragSource"}}},"dojo.dnd.TreeDragSource.onDragEnd":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":"\t\t var res = dojo.dnd.HtmlDragSource.prototype.onDragEnd.call(this, e);\r\n\r\n\r\n\t\t return res;\r","this_inherits":["dojo.dnd.HtmlDragSource.prototype.onDragEnd"],"this":"dojo.dnd.TreeDragSource"}}},"dojo.dnd.TreeDropTarget.showIndicator":{"_":{"meta":{"summary":"","parameters":{"position":{"type":""}},"src":"\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t\/\/dojo.debug(position)\r\n\r\n\t\tthis.hideIndicator();\r\n\r\n\t\tthis.position = position;\r\n\r\n\t\tif (position == \"before\") {\r\n\t\t\tthis.treeNode.labelNode.style.borderTop = this.indicatorStyle;\r\n\t\t} else if (position == \"after\") {\r\n\t\t\tthis.treeNode.labelNode.style.borderBottom = this.indicatorStyle;\r\n\t\t} else if (position == \"onto\") {\r\n\t\t\tthis.treeNode.markSelected();\r\n\t\t}\r","this":"dojo.dnd.TreeDropTarget"}}},"dojo.dnd.TreeDropTarget.hideIndicator":{"_":{"meta":{"summary":"","src":"\t\tthis.treeNode.labelNode.style.borderBottom=\"\";\r\n\t\tthis.treeNode.labelNode.style.borderTop=\"\";\r\n\t\tthis.treeNode.unMarkSelected();\r\n\t\tthis.position = null;\r","this":"dojo.dnd.TreeDropTarget"}}},"dojo.dnd.TreeDropTarget.onDragOver":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":"\t\t\/\/dojo.debug(\"TreeDropTarget.onDragOver accepts:\"+accepts)\r\n\r\n\t\tif (accepts && this.treeNode.isFolder && !this.treeNode.isExpanded) {\r\n\t\t\tthis.setAutoExpandTimer();\r\n\t\t}\r\n\r\n\t\treturn accepts;\r","this":"dojo.dnd.TreeDropTarget"}}},"dojo.dnd.TreeDropTarget.accepts":{"_":{"meta":{"summary":"","parameters":{"dragObjects":{"type":""}},"src":"\t\tvar accepts = dojo.dnd.HtmlDropTarget.prototype.accepts.apply(this, arguments);\r\n\r\n\t\tif (!accepts) return false;\r\n\r\n\t\tvar sourceTreeNode = dragObjects[0].treeNode;\r\n\r\n\t\tif (dojo.lang.isUndefined(sourceTreeNode) || !sourceTreeNode || !sourceTreeNode.isTreeNode) {\r\n\t\t\tdojo.raise(\"Source is not TreeNode or not found\");\r\n\t\t}\r\n\r\n\t\tif (sourceTreeNode === this.treeNode) return false;\r\n\r\n\t\treturn true;\r","this":"dojo.dnd.TreeDropTarget"}}},"dojo.dnd.TreeDropTarget.setAutoExpandTimer":{"_":{"meta":{"summary":"","src":"\t\tvar autoExpand = function () {\r\n\t\t\tif (dojo.dnd.dragManager.currentDropTarget === _this) {\r\n\t\t\t\t_this.controller.expand(_this.treeNode);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.autoExpandTimer = dojo.lang.setTimeout(autoExpand, _this.autoExpandDelay);\r","this":"dojo.dnd.TreeDropTarget"}}},"dojo.dnd.TreeDropTarget.getDNDMode":{"_":{"meta":{"summary":"","src":"\t\treturn this.treeNode.tree.DNDMode;\r","this":"dojo.dnd.TreeDropTarget"}}},"dojo.dnd.TreeDropTarget.getAcceptPosition":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""},"sourceTreeNode":{"type":""}},"src":"\t\tvar DNDMode = this.getDNDMode();\r\n\r\n\t\tif (DNDMode & dojo.widget.Tree.prototype.DNDModes.ONTO &&\r\n\t\t\t\/\/ check if ONTO is allowed localy\r\n\t\t\t!(\r\n\t\t\t  !this.treeNode.actionIsDisabled(dojo.widget.TreeNode.prototype.actions.ADDCHILD) \/\/ check dynamically cause may change w\/o regeneration of dropTarget\r\n\t\t\t  && sourceTreeNode.parent !== this.treeNode\r\n\t\t\t  && this.controller.canMove(sourceTreeNode, this.treeNode)\r\n\t\t\t )\r\n\t\t) {\r\n\t\t\t\/\/ disable ONTO if can't move\r\n\t\t\tDNDMode &= ~dojo.widget.Tree.prototype.DNDModes.ONTO;\r\n\t\t}\r\n\r\n\r\n\t\tvar position = this.getPosition(e, DNDMode);\r\n\r\n\t\t\/\/dojo.debug(DNDMode & +\" : \"+position);\r\n\r\n\r\n\t\t\/\/ if onto is here => it was allowed before, no accept check is needed\r\n\t\tif (position==\"onto\" ||\r\n\t\t\t(!this.isAdjacentNode(sourceTreeNode, position)\r\n\t\t\t && this.controller.canMove(sourceTreeNode, this.treeNode.parent)\r\n\t\t\t)\r\n\t\t) {\r\n\t\t\treturn position;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r","this":"dojo.dnd.TreeDropTarget"}}},"dojo.dnd.TreeDropTarget.onDragOut":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":"\t\tthis.clearAutoExpandTimer();\r\n\r\n\t\tthis.hideIndicator();\r","this":"dojo.dnd.TreeDropTarget"}}},"dojo.dnd.TreeDropTarget.clearAutoExpandTimer":{"_":{"meta":{"summary":"","src":"\t\tif (this.autoExpandTimer) {\r\n\t\t\tclearTimeout(this.autoExpandTimer);\r\n\t\t\tthis.autoExpandTimer = null;\r\n\t\t}\r","this":"dojo.dnd.TreeDropTarget"}}},"dojo.dnd.TreeDropTarget.onDragMove":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""},"dragObjects":{"type":""}},"src":"\t\tvar sourceTreeNode = dragObjects[0].treeNode;\r\n\r\n\t\tvar position = this.getAcceptPosition(e, sourceTreeNode);\r\n\r\n\t\tif (position) {\r\n\t\t\tthis.showIndicator(position);\r\n\t\t}\r","this":"dojo.dnd.TreeDropTarget"}}},"dojo.dnd.TreeDropTarget.isAdjacentNode":{"_":{"meta":{"summary":"","parameters":{"sourceNode":{"type":""},"position":{"type":""}},"src":"\t\tif (sourceNode === this.treeNode) return true;\r\n\t\tif (sourceNode.getNextSibling() === this.treeNode && position==\"before\") return true;\r\n\t\tif (sourceNode.getPreviousSibling() === this.treeNode && position==\"after\") return true;\r\n\r\n\t\treturn false;\r","this":"dojo.dnd.TreeDropTarget"}}},"dojo.dnd.TreeDropTarget.getPosition":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""},"DNDMode":{"type":""}},"src":"\t\tvar node = dojo.byId(this.treeNode.labelNode);\r\n\t\tvar mousey = e.pageY || e.clientY + dojo.body().scrollTop;\r\n\t\tvar nodey = dojo.html.getAbsolutePosition(node).y;\r\n\t\tvar height = dojo.html.getBorderBox(node).height;\r\n\r\n\t\tvar relY = mousey - nodey;\r\n\t\tvar p = relY \/ height;\r\n\r\n\t\tvar position = \"\"; \/\/ \"\" <=> forbidden\r\n\t\tif (DNDMode & dojo.widget.Tree.prototype.DNDModes.ONTO\r\n\t\t  && DNDMode & dojo.widget.Tree.prototype.DNDModes.BETWEEN) {\r\n\t\t\tif (p<=0.3) {\r\n\t\t\t\tposition = \"before\";\r\n\t\t\t} else if (p<=0.7) {\r\n\t\t\t\tposition = \"onto\";\r\n\t\t\t} else {\r\n\t\t\t\tposition = \"after\";\r\n\t\t\t}\r\n\t\t} else if (DNDMode & dojo.widget.Tree.prototype.DNDModes.BETWEEN) {\r\n\t\t\tif (p<=0.5) {\r\n\t\t\t\tposition = \"before\";\r\n\t\t\t} else {\r\n\t\t\t\tposition = \"after\";\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (DNDMode & dojo.widget.Tree.prototype.DNDModes.ONTO) {\r\n\t\t\tposition = \"onto\";\r\n\t\t}\r\n\r\n\r\n\t\treturn position;\r","this":"dojo.dnd.TreeDropTarget"}}},"dojo.dnd.TreeDropTarget.getTargetParentIndex":{"_":{"meta":{"summary":"","parameters":{"sourceTreeNode":{"type":""},"position":{"type":""}},"src":"\t\tvar index = position == \"before\" ? this.treeNode.getParentIndex() : this.treeNode.getParentIndex()+1;\r\n\t\tif (this.treeNode.parent === sourceTreeNode.parent\r\n\t\t  && this.treeNode.getParentIndex() > sourceTreeNode.getParentIndex()) {\r\n\t\t  \tindex--;  \/\/ dragging a node is different for simple move bacause of before-after issues\r\n\t\t}\r\n\r\n\t\treturn index;\r","this":"dojo.dnd.TreeDropTarget"}}},"dojo.dnd.TreeDropTarget.onDrop":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":"\/\/dojo.debug(position);\r\n\r\n\t\tthis.onDragOut(e);\r\n\r\n\t\tvar sourceTreeNode = e.dragObject.treeNode;\r\n\r\n\t\tif (!dojo.lang.isObject(sourceTreeNode)) {\r\n\t\t\tdojo.raise(\"TreeNode not found in dragObject\")\r\n\t\t}\r\n\r\n\t\tif (position == \"onto\") {\r\n\t\t\treturn this.controller.move(sourceTreeNode, this.treeNode, 0);\r\n\t\t} else {\r\n\t\t\tvar index = this.getTargetParentIndex(sourceTreeNode, position);\r\n\t\t\treturn this.controller.move(sourceTreeNode, this.treeNode.parent, index);\r\n\t\t}\r\n\r\n\t\t\/\/dojo.debug('drop2');\r","this":"dojo.dnd.TreeDropTarget"}}},"dojo.dnd.TreeDNDController.listenTree":{"_":{"meta":{"summary":"","parameters":{"tree":{"type":""}},"src":"\t\tdojo.event.topic.subscribe(tree.eventNames.moveFrom, this, \"onMoveFrom\");\r\n\t\tdojo.event.topic.subscribe(tree.eventNames.moveTo, this, \"onMoveTo\");\r\n\t\tdojo.event.topic.subscribe(tree.eventNames.addChild, this, \"onAddChild\");\r\n\t\tdojo.event.topic.subscribe(tree.eventNames.removeNode, this, \"onRemoveNode\");\r\n\t\tdojo.event.topic.subscribe(tree.eventNames.treeDestroy, this, \"onTreeDestroy\");\r","this":"dojo.dnd.TreeDNDController"}}},"dojo.dnd.TreeDNDController.unlistenTree":{"_":{"meta":{"summary":"","parameters":{"tree":{"type":""}},"src":"\t\tdojo.event.topic.unsubscribe(tree.eventNames.moveFrom, this, \"onMoveFrom\");\r\n\t\tdojo.event.topic.unsubscribe(tree.eventNames.moveTo, this, \"onMoveTo\");\r\n\t\tdojo.event.topic.unsubscribe(tree.eventNames.addChild, this, \"onAddChild\");\r\n\t\tdojo.event.topic.unsubscribe(tree.eventNames.removeNode, this, \"onRemoveNode\");\r\n\t\tdojo.event.topic.unsubscribe(tree.eventNames.treeDestroy, this, \"onTreeDestroy\");\r","this":"dojo.dnd.TreeDNDController"}}},"dojo.dnd.TreeDNDController.onTreeDestroy":{"_":{"meta":{"summary":"","parameters":{"message":{"type":""}},"src":"\t\tthis.unlistenTree(message.source);\r\n\t\t\/\/ I'm not widget so don't use destroy() call and dieWithTree\r","this":"dojo.dnd.TreeDNDController"}}},"dojo.dnd.TreeDNDController.onCreateDOMNode":{"_":{"meta":{"summary":"","parameters":{"message":{"type":""}},"src":"\t\tthis.registerDNDNode(message.source);\r","this":"dojo.dnd.TreeDNDController"}}},"dojo.dnd.TreeDNDController.onAddChild":{"_":{"meta":{"summary":"","parameters":{"message":{"type":""}},"src":"\t\tthis.registerDNDNode(message.child);\r","this":"dojo.dnd.TreeDNDController"}}},"dojo.dnd.TreeDNDController.onMoveFrom":{"_":{"meta":{"summary":"","parameters":{"message":{"type":""}},"src":"\t\tvar _this = this;\r\n\t\tdojo.lang.forEach(\r\n\t\t\tmessage.child.getDescendants(),\r\n\t\t\tfunction(node) { _this.unregisterDNDNode(node); }\r\n\t\t);\r","this":"dojo.dnd.TreeDNDController"}}},"dojo.dnd.TreeDNDController.onMoveTo":{"_":{"meta":{"summary":"","parameters":{"message":{"type":""}},"src":"\t\tvar _this = this;\r\n\t\tdojo.lang.forEach(\r\n\t\t\tmessage.child.getDescendants(),\r\n\t\t\tfunction(node) { _this.registerDNDNode(node); }\r\n\t\t);\r","this":"dojo.dnd.TreeDNDController"}}},"dojo.dnd.TreeDNDController.registerDNDNode":{"_":{"meta":{"summary":"","parameters":{"node":{"type":""}},"src":"\t\tif (!node.tree.DNDMode) return;\r\n\r\n\/\/dojo.debug(\"registerDNDNode \"+node);\r\n\r\n\t\t\/* I drag label, not domNode, because large domNodes are very slow to copy and large to drag *\/\r\n\r\n\t\tvar source = null;\r\n\t\tvar target = null;\r\n\r\n\t\tif (!node.actionIsDisabled(node.actions.MOVE)) {\r\n\t\t\t\/\/dojo.debug(\"reg source\")\r\n\t\t\tvar source = new dojo.dnd.TreeDragSource(node.labelNode, this, node.tree.widgetId, node);\r\n\t\t\tthis.dragSources[node.widgetId] = source;\r\n\t\t}\r\n\r\n\t\tvar target = new dojo.dnd.TreeDropTarget(node.labelNode, this.treeController, node.tree.DNDAcceptTypes, node);\r\n\r\n\t\tthis.dropTargets[node.widgetId] = target;\r","this":"dojo.dnd.TreeDNDController"}}},"dojo.dnd.TreeDNDController.unregisterDNDNode":{"_":{"meta":{"summary":"","parameters":{"node":{"type":""}},"src":"\t\tif (this.dragSources[node.widgetId]) {\r\n\t\t\tdojo.dnd.dragManager.unregisterDragSource(this.dragSources[node.widgetId]);\r\n\t\t\tdelete this.dragSources[node.widgetId];\r\n\t\t}\r\n\r\n\t\tif (this.dropTargets[node.widgetId]) {\r\n\t\t\tdojo.dnd.dragManager.unregisterDropTarget(this.dropTargets[node.widgetId]);\r\n\t\t\tdelete this.dropTargets[node.widgetId];\r\n\t\t}\r","this":"dojo.dnd.TreeDNDController"}}}}}},"dojo.dnd.TreeDragAndDropV3":{"meta":{"requires":{"common":["dojo.dnd.HtmlDragAndDrop","dojo.lang.func","dojo.lang.array","dojo.lang.extras","dojo.Deferred","dojo.html.layout"]},"functions":{"dojo.dnd.TreeDragSourceV3":{"_":{"meta":{"summary":"","parameters":{"node":{"type":""},"syncController":{"type":""},"type":{"type":""},"treeNode":{"type":""}},"src":"\tthis.treeNode = treeNode;\r\n\r\n\tdojo.dnd.HtmlDragSource.call(this, node, type);\r\n\t\/\/dojo.profile.end(\"TreeDragSourceV3 \"+treeNode);\r","this_variables":["controller","treeNode"],"this_inherits":["dojo.dnd.HtmlDragSource"],"inherits":["dojo.dnd.HtmlDragSource"]}}},"dojo.dnd.TreeDropTargetV3":{"_":{"meta":{"summary":"","parameters":{"domNode":{"type":""},"controller":{"type":""},"type":{"type":""},"treeNode":{"type":""}},"src":"\tthis.treeNode = treeNode;\r\n\tthis.controller = controller; \/\/ I will sync-ly process drops\r\n\t\r\n\tdojo.dnd.HtmlDropTarget.call(this, domNode, type);\r","this_variables":["treeNode","controller","position","treeNode.contentNode.style.borderBottom","treeNode.contentNode.style.borderTop","treeNode.contentNode.style.border","treeNode.contentNode.style.width","position","autoExpandTimer","autoExpandTimer","cachedNodeY","cachedNodeHeight","treeNode.parent"],"this_inherits":["dojo.dnd.HtmlDropTarget"],"inherits":["dojo.dnd.HtmlDropTarget"],"protovariables":{"autoExpandDelay":"","autoExpandTimer":"","position":"","indicatorStyle":""}}}},"autoExpand":{"_":{"meta":{"summary":"","src":"\t\t\tif (dojo.dnd.dragManager.currentDropTarget === _this) {\r\n\t\t\t\t_this.controller.expand(_this.treeNode);\r\n\t\t\t\t\/\/ SLOW. Coordinates will not be recalculated if collapse occurs, or\r\n\t\t\t\t\/\/ other (generic) resize. So that's a kind of hack.\r\n\t\t\t\tdojo.dnd.dragManager.cacheTargetLocations();\r\n\t\t\t}\r"}}},"handler":{"_":{"meta":{"summary":"","src":"\t\t\tvar result;\r\n\t\t\t\r\n\t\t\t\/\/dojo.debug(\"Move \"+source.treeNode+\" to parent \"+targetParent+\":\"+targetIndex);\r\n\t\t\tif (source.treeNode) {\r\n\t\t\t\tresult = _this.controller.move(source.treeNode, targetParent, targetIndex, true);\r\n\t\t\t\t\/\/dojo.debug(\"moved \"+result);\r\n\t\t\t} else {\r\n\t\t\t\tif (dojo.lang.isFunction(source.onDrop)) {\r\n\t\t\t\t\tsource.onDrop(targetParent, targetIndex);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar treeNode = source.getTreeNode();\r\n\t\t\t\tif (treeNode) {\r\n\t\t\t\t\tresult = _this.controller.createChild(targetParent, targetIndex, treeNode, true);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresult = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (result instanceof dojo.Deferred) {\r\n\t\t\t\t\/\/ return error status\r\n\t\t\t\t\/\/TODO: need handle errors somehow\r\n\t\t\t\t\/\/result.addErrback(function(r) { dojo.debugShallow(r); });\r\n\t\t\t\treturn (!result.fired) ? true : false;\r\n\t\t\t} else {\r\n\t\t\t\treturn result;\r\n\t\t\t}\r"}}},"dojo.dnd.TreeDropTargetV3.showIndicator":{"_":{"meta":{"summary":"","parameters":{"position":{"type":""}},"src":"\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t\/\/dojo.debug(\"set position for \"+this.treeNode)\r\n\r\n\t\tthis.hideIndicator();\r\n\r\n\t\tthis.position = position;\r\n\t\t\r\n\t\tvar node = this.treeNode;\r\n\t\t\t\r\n\t\t\r\n\t\tnode.contentNode.style.width = dojo.html.getBorderBox(node.labelNode).width + \"px\";\r\n\r\n\t\tif (position == \"onto\") {\t\t\t\t\t\r\n\t\t\tnode.contentNode.style.border = this.indicatorStyle;\r\n\t\t} else {\r\n\t\t\t\/\/ FIXME: bottom-top or highlight should cover ONLY top\/bottom or div itself,\r\n\t\t\t\/\/ not span whole line (try Dnd)\r\n\t\t\t\/\/ FAILURE: Can't put span inside div: multiline bottom-top will span multiple lines\r\n\t\t\tif (position == \"before\") {\r\n\t\t\t\tnode.contentNode.style.borderTop = this.indicatorStyle;\r\n\t\t\t} else if (position == \"after\") {\r\n\t\t\t\tnode.contentNode.style.borderBottom = this.indicatorStyle;\r\n\t\t\t}\t\t\t\t\t\t\t\t\t\r\n\t\t}  \r","this":"dojo.dnd.TreeDropTargetV3"}}},"dojo.dnd.TreeDropTargetV3.hideIndicator":{"_":{"meta":{"summary":"","src":"\t\tthis.treeNode.contentNode.style.borderBottom = \"\";\r\n\t\tthis.treeNode.contentNode.style.borderTop = \"\";\r\n\t\tthis.treeNode.contentNode.style.border = \"\";\r\n\t\tthis.treeNode.contentNode.style.width=\"\"\r\n\t\tthis.position = null;\r","this":"dojo.dnd.TreeDropTargetV3"}}},"dojo.dnd.TreeDropTargetV3.onDragOver":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":"\t\t\/\/dojo.debug(\"TreeDropTarget.onDragOver accepts:\"+accepts)\r\n\r\n\t\tif (accepts && this.treeNode.isFolder && !this.treeNode.isExpanded) {\r\n\t\t\tthis.setAutoExpandTimer();\r\n\t\t}\r\n\t\t\r\n\t\tif (accepts) {\r\n\t\t\tthis.cacheNodeCoords();\r\n\t\t}\r\n\r\n\r\n\t\treturn accepts;\r","this":"dojo.dnd.TreeDropTargetV3"}}},"dojo.dnd.TreeDropTargetV3.accepts":{"_":{"meta":{"summary":"","parameters":{"dragObjects":{"type":""}},"src":"\t\tvar accepts = dojo.dnd.HtmlDropTarget.prototype.accepts.apply(this, arguments);\r\n\r\n\t\t\/\/dojo.debug(\"accepts \"+accepts);\r\n\r\n\t\tif (!accepts) return false;\r\n\r\n\t\tfor(var i=0; i<dragObjects.length; i++) {\r\n\t\t\t\/\/ there may be NO treeNode\r\n\t\t\tvar sourceTreeNode = dragObjects[i].dragSource.treeNode;\r\n\t\t\t\r\n\t\t\tif (sourceTreeNode === this.treeNode) return false;\r\n\t\t}\r\n\r\n\t\treturn true;\r","this":"dojo.dnd.TreeDropTargetV3"}}},"dojo.dnd.TreeDropTargetV3.setAutoExpandTimer":{"_":{"meta":{"summary":"","src":"\t\tvar autoExpand = function () {\r\n\t\t\tif (dojo.dnd.dragManager.currentDropTarget === _this) {\r\n\t\t\t\t_this.controller.expand(_this.treeNode);\r\n\t\t\t\t\/\/ SLOW. Coordinates will not be recalculated if collapse occurs, or\r\n\t\t\t\t\/\/ other (generic) resize. So that's a kind of hack.\r\n\t\t\t\tdojo.dnd.dragManager.cacheTargetLocations();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.autoExpandTimer = dojo.lang.setTimeout(autoExpand, _this.autoExpandDelay);\r","this":"dojo.dnd.TreeDropTargetV3"}}},"dojo.dnd.TreeDropTargetV3.getAcceptPosition":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""},"dragObjects":{"type":""}},"src":"\t\tvar DndMode = this.treeNode.tree.DndMode;\r\n\r\n\t\t\/\/ disable ONTO mode possibility if impossible \r\n\t\tif (DndMode & dojo.widget.TreeV3.prototype.DndModes.ONTO &&\r\n\t\t\t\/\/ check if ONTO is allowed localy\r\n\t\t\t\/\/ check dynamically cause may change w\/o regeneration of dropTarget\r\n\t\t\tthis.treeNode.actionIsDisabledNow(this.treeNode.actions.ADDCHILD) \r\n\t\t) {\r\n\t\t\t\/\/ disable ONTO if can't move\r\n\t\t\tDndMode &= ~dojo.widget.TreeV3.prototype.DndModes.ONTO;\r\n\t\t}\r\n\t\t\r\n\r\n\t\tvar position = this.getPosition(e, DndMode);\r\n\r\n\t\t\/\/dojo.debug(DndMode & +\" : \"+position);\r\n\r\n\r\n\t\t\/\/ if onto is here => it was allowed before, no accept check is needed\r\n\t\tif (position==\"onto\") {\r\n\t\t\treturn position;\r\n\t\t}\r\n\t\t\r\n\t\tfor(var i=0; i<dragObjects.length; i++) {\r\n\t\t\tvar source = dragObjects[i].dragSource;\r\n\t\t\tif (source.treeNode && this.isAdjacentNode(source.treeNode, position)) { \/\/ skip check if same parent\r\n\t\t\t\tcontinue;\r\n\t\t\t}\t\t\r\n\t\t\t\t\t\t\r\n\t\t\tif (!this.controller.canMove(source.treeNode ? source.treeNode : source, this.treeNode.parent)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn position;\r","this":"dojo.dnd.TreeDropTargetV3"}}},"dojo.dnd.TreeDropTargetV3.onDropEnd":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":"\t\tthis.clearAutoExpandTimer();\r\n\r\n\t\tthis.hideIndicator();\r","this":"dojo.dnd.TreeDropTargetV3"}}},"dojo.dnd.TreeDropTargetV3.onDragOut":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":"\t\tthis.clearAutoExpandTimer();\r\n\r\n\t\tthis.hideIndicator();\r","this":"dojo.dnd.TreeDropTargetV3"}}},"dojo.dnd.TreeDropTargetV3.clearAutoExpandTimer":{"_":{"meta":{"summary":"","src":"\t\tif (this.autoExpandTimer) {\r\n\t\t\tclearTimeout(this.autoExpandTimer);\r\n\t\t\tthis.autoExpandTimer = null;\r\n\t\t}\r","this":"dojo.dnd.TreeDropTargetV3"}}},"dojo.dnd.TreeDropTargetV3.onDragMove":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""},"dragObjects":{"type":""}},"src":"\t\tvar position = this.getAcceptPosition(e, dragObjects);\r\n\r\n\t\tif (position) {\r\n\t\t\tthis.showIndicator(position);\r\n\t\t}\r","this":"dojo.dnd.TreeDropTargetV3"}}},"dojo.dnd.TreeDropTargetV3.isAdjacentNode":{"_":{"meta":{"summary":"","parameters":{"sourceNode":{"type":""},"position":{"type":""}},"src":"\t\tif (sourceNode === this.treeNode) return true;\r\n\t\tif (sourceNode.getNextSibling() === this.treeNode && position==\"before\") return true;\r\n\t\tif (sourceNode.getPreviousSibling() === this.treeNode && position==\"after\") return true;\r\n\r\n\t\treturn false;\r","this":"dojo.dnd.TreeDropTargetV3"}}},"dojo.dnd.TreeDropTargetV3.cacheNodeCoords":{"_":{"meta":{"summary":"","src":"\t\tvar node = this.treeNode.contentNode;\r\n\t\t\r\n\t\tthis.cachedNodeY = dojo.html.getAbsolutePosition(node).y;\r\n\t\tthis.cachedNodeHeight = dojo.html.getBorderBox(node).height;\r","this":"dojo.dnd.TreeDropTargetV3"}}},"dojo.dnd.TreeDropTargetV3.getPosition":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""},"DndMode":{"type":""}},"src":"\t\tvar mousey = e.pageY || e.clientY + dojo.body().scrollTop;\r\n\t\t\r\n\t\tvar relY = mousey - this.cachedNodeY;\r\n\t\tvar p = relY \/ this.cachedNodeHeight;\r\n\r\n\t\tvar position = \"\"; \/\/ \"\" <=> forbidden\r\n\t\tif (DndMode & dojo.widget.TreeV3.prototype.DndModes.ONTO\r\n\t\t  && DndMode & dojo.widget.TreeV3.prototype.DndModes.BETWEEN) {\r\n\t\t\t\/\/dojo.debug(\"BOTH\");\r\n\t\t\tif (p<=0.33) {\r\n\t\t\t\tposition = \"before\";\r\n\t\t\t\t\/\/ if children are expanded then I ignore understrike, cause it is confusing with firstChild\r\n\t\t\t\t\/\/ but for last nodes I put understrike there\r\n\t\t\t} else if (p<=0.66 || this.treeNode.isExpanded && this.treeNode.children.length && !this.treeNode.isLastChild()) {\r\n\t\t\t\tposition = \"onto\";\r\n\t\t\t} else {\r\n\t\t\t\tposition = \"after\";\r\n\t\t\t}\r\n\t\t} else if (DndMode & dojo.widget.TreeV3.prototype.DndModes.BETWEEN) {\r\n\t\t\t\/\/dojo.debug(\"BETWEEN\");\r\n\t\t\tif (p<=0.5 || this.treeNode.isExpanded && this.treeNode.children.length && !this.treeNode.isLastChild()) {\r\n\t\t\t\tposition = \"before\";\r\n\t\t\t} else {\r\n\t\t\t\tposition = \"after\";\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (DndMode & dojo.widget.TreeV3.prototype.DndModes.ONTO) {\r\n\t\t\t\/\/dojo.debug(\"ONTO\");\r\n\t\t\tposition = \"onto\";\r\n\t\t}\r\n\r\n\t\t\/\/dojo.debug(position);\r\n\r\n\t\treturn position;\r","this":"dojo.dnd.TreeDropTargetV3"}}},"dojo.dnd.TreeDropTargetV3.getTargetParentIndex":{"_":{"meta":{"summary":"","parameters":{"source":{"type":""},"position":{"type":""}},"src":"\t\tvar index = position == \"before\" ? this.treeNode.getParentIndex() : this.treeNode.getParentIndex()+1;\r\n\t\tif (source.treeNode\r\n\t\t  && this.treeNode.parent === source.treeNode.parent\r\n\t\t  && this.treeNode.getParentIndex() > source.treeNode.getParentIndex()) {\r\n\t\t  \tindex--;  \/\/ dragging a node is different for simple move bacause of before-after issues\r\n\t\t}\r\n\r\n\t\treturn index;\r","this":"dojo.dnd.TreeDropTargetV3"}}},"dojo.dnd.TreeDropTargetV3.onDrop":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":"\/\/dojo.debug(position);\r\n\t\tvar source = e.dragObject.dragSource;\r\n\t\t\r\n\t\t\/\/dojo.debug(\"onDrop \"+source.treeNode+\" \" + position + \" \"+this.treeNode);\r\n\r\n\r\n\t\tvar targetParent, targetIndex;\r\n\t\tif (position == \"onto\") {\r\n\t\t\ttargetParent = this.treeNode;\r\n\t\t\ttargetIndex = 0;\r\n\t\t} else {\r\n\t\t\ttargetIndex = this.getTargetParentIndex(source, position);\r\n\t\t\ttargetParent = this.treeNode.parent;\r\n\t\t}\r\n\t\t\r\n\t\t\/\/dojo.profile.start(\"onDrop \"+sourceTreeNode);\r\n\t\tvar r = this.getDropHandler(e, source, targetParent, targetIndex)();\r\n\t\t\r\n\t\t\/\/dojo.profile.end(\"onDrop \"+sourceTreeNode);\r\n\t\t\t\r\n\t\treturn r;\r","this":"dojo.dnd.TreeDropTargetV3"}}},"dojo.dnd.TreeDropTargetV3.getDropHandler":{"_":{"meta":{"summary":"","parameters":{"e":{"type":""},"source":{"type":""},"targetParent":{"type":""},"targetIndex":{"type":""}},"src":"\t\tvar handler;\r\n\t\tvar _this = this;\r\n\t\thandler = function () {\r\n\t\t\tvar result;\r\n\t\t\t\r\n\t\t\t\/\/dojo.debug(\"Move \"+source.treeNode+\" to parent \"+targetParent+\":\"+targetIndex);\r\n\t\t\tif (source.treeNode) {\r\n\t\t\t\tresult = _this.controller.move(source.treeNode, targetParent, targetIndex, true);\r\n\t\t\t\t\/\/dojo.debug(\"moved \"+result);\r\n\t\t\t} else {\r\n\t\t\t\tif (dojo.lang.isFunction(source.onDrop)) {\r\n\t\t\t\t\tsource.onDrop(targetParent, targetIndex);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar treeNode = source.getTreeNode();\r\n\t\t\t\tif (treeNode) {\r\n\t\t\t\t\tresult = _this.controller.createChild(targetParent, targetIndex, treeNode, true);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresult = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (result instanceof dojo.Deferred) {\r\n\t\t\t\t\/\/ return error status\r\n\t\t\t\t\/\/TODO: need handle errors somehow\r\n\t\t\t\t\/\/result.addErrback(function(r) { dojo.debugShallow(r); });\r\n\t\t\t\treturn (!result.fired) ? true : false;\r\n\t\t\t} else {\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn handler;\r","this":"dojo.dnd.TreeDropTargetV3"}}}}}},"dojo.dnd._":{"meta":{"requires":{"common":["dojo.dnd.DragAndDrop"],"browser":["dojo.dnd.HtmlDragAndDrop"],"dashboard":["dojo.dnd.HtmlDragAndDrop"]}}}}