.. title:: dojo.rpc.* -- The Dojo Manual

Name
===============================================================================

dojo.rpc.* - RPC APIs for JavaScript

Summary and Overview
===============================================================================

``dojo.rpc` provides JSON-RPC using a simple JavaScript definition of the
available itnerfaces to construct an object whose methods return values from a
remote function asynchronously.

Usage
===============================================================================

::

    var remoted = new dojo.rpc.JsonService("/path/to/interfaces.jsdl");

    // "doFoo" is a remote method exposed by the interfaces.jsdl file
    // the creation of the service object creates a local stub that we can call
    // and have asynchronously responded to. The response is handled via the
    // last parameter, a callback function
    remoted.doFoo("arg1", arg2, 
                  function(){ /* result callback */ });


API Reference
===============================================================================

Classes
---------------------------------------

``JsonService(url)``:

    A class the represents a JSON service with methods defined by a JavaScript
    definition specified in ``url``.

    *Inherits from*:
        Nothing

    ``url``:
        Optional. A string specifying the URL of the JSON API description file.

    *return*:
        new object of type ``JsonService``

Properties
~~~~~~~~~~~~~

    ``status``:
        String. Indicates the current status of the service.

    ``lastSubmissionId``:
        Integer. A "transaction id" for last RPC request made.

Methods
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    ``createJsonRpcRequest(parameters, method, id)``:

        Constructs a serialized JSON-RPC request object out of the passed
        ``parameters``, ``method`` name, and transaction ``id``. This is called
        under the covers by the stub functions generated by ``processJSDL()``
        and so you shouldn't need to call it manually.

        ``parameters``:
            Array. A list of parameters for the remote method.

        ``method``:
            String.

        ``id``:
            Integer.

        *return*:
            String representing the serialized JSON-RPC request parameters.

    ``JsonRpcCallback(resultsCallbackFunction, errorCallbackFunction)``:

        Returns an event handler function for asynchronous event handling of RPC
        requests.

        ``resultsCallbackFunction``:
            Function. Unary, handles the return on success.
            
        ``errorCallbackFunction``:
            Optinal. Function. Unary, handles the return on failure.

        *return*:
            Function

    ``createRemoteJsonRpcMethod(serviceURL, method, params)``:
        
        Opaque method that creates local functions for calling. Should not be
        used except by the object.

    ``processJSDL(type, data, evt)``:
        
        Opaque method that creates local functions for calling. Should not be
        used except by the object.

    ``viewJSDL(type, data, evt)``:
        
        Prints out the contents of passed JSDL ``data``.

     ``connect(jsdlURL)``:
        
        Async JSDL satisfaction. Creates local function stubs on this object as
        a result.

        ``jsdlURL``:
            String. URL of the JSDL file to retreive and process.

        *return*:
            Nothing

Requires
===============================================================================

- `dojo.io.*`_
- `dojo.json`_
- `dojo.lang`_

.. _`dojo.io`: 		io.html
.. _`dojo.json`:	json.html
.. _`dojo.lang`:	lang.html

Provides
===============================================================================

dojo.rpc.JsonService
    Class constructor that allows ``JsonService``s to be created

To Do
===============================================================================

Lots. But that's always true.

About
===============================================================================

:Author: Alex Russell
:Version: 0.1
:Copyright: Dojo Foundation, 2005
:Date: 2005/12/16

.. vim:ts=4:et:tw=80:shiftwidth=4:
