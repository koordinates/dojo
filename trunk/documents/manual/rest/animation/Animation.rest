.. title:: dojo.animation.* -- The Dojo Manual

.. this is a comment. for more information on reST, see:
   http://docutils.sf.net/docs/user/rst/quickstart.html
   http://docutils.sf.net/docs/user/rst/quickref.html

Name
===============================================================================

dojo.animation.*

Summary and Overview
===============================================================================

The animation namespace allows you to create n-dimensional animations. These can
be used to move elements across the screen, change an elements opacity, or
anything else that you want to do over a given period of time in n-dimensions.

Usage
===============================================================================

::

    var curve = new dojo.math.curves.Line(...);
    var anim = new dojo.animation.Animation(curve, 500);
    dojo.event.connect(anim, "onAnimate", function(e) {
        // do something with e.x, e.y, etc...
    });
    anim.play();

    var seq = new dojo.animation.AnimationSequence();
    // create animation1 and animation2 similar to anim above
    seq.add(animation1, animation2);
    seq.play();


API Reference
===============================================================================

Classes
---------------------------------------

``Animation(Object curve, Number duration, Object acceleration, Number repeatCount)``
``Animation(Object curve, Number duration, Number acceleration, Number repeatCount)``:

    *Inherits from*:
        nothing

    ``Object curve``:
        A curve object that supports a ``getValue`` method. See
        ``dojo.math.curves`` for example curves.

    ``Number duraction``:
        The total time the animation should last, in milliseconds.

    ``Object acceleration`` or ``Number acceleration``:
        Determines whether or not the animation will speed up, slow down, or
        otherwise change during the course of the animation. It supports two
        types of values:

        - *Curve object* - a ``dojo.math.curves`` object or any object that
          implements ``getValue``.

        - *Number* - a numeric value from -1 (max deceleration) to 1 (max
          acceleration), inclusive. A value of 0 means no acceleration.

    ``Number repeatCount``:
        If set, determines the number of times the animation will repeat when
        you play it. Defaults to 0. A value of -1 will repeat forever.

    *returns*:
        new object of type dojo.animation.Animation.

Properties
#####################################

    ``Object curve``:
        The curve used by the animation to compute coordinate values.

    ``Number duration``:
        The total time the animation should last, in milliseconds.

    ``Object accel``:
        Acceleration curve used to determine acceleration. (Note: this should
        only be set to a numeric value (-1 to 1, inclusive) in the constructor.)

    ``Number repeatCount``:
        Set the numer of times the animation should repeat.

    ``Object _animSequence``:
        Reference to the ``AnimationSequence`` object that the animation is
        associated with, if any.

Methods
#####################################

    ``void play(Boolean gotoStart)``:

        Plays an animation either from the beginning or from where it was
        paused.

        ``Boolean gotoStart``:
            If ``true``, plays the animations from the beginning, otherwise it
            plays it from where it left off. If the animation has never been
            played, or it has been played to completion, ``play`` will start at
            the beginning regardless of the value of ``gotoStart``.

    ``void pause()``:

        Pauses an animation if it is playing.

    ``void playPause()``:

        Plays or pauses an animation. If the animation is currently playing, it
        pauses the animation. If the animation is currently paused or stopped,
        it plays the animation.

    ``void gotoPercent(Number pct, Boolean andPlay)``:

        Jump to an arbitrary place in the animation.

        ``Number pct``:
            A decimal value between 0 and 100 inclusive that you want the
            animation to jump to.

        ``Boolean andPlay``:
            If ``true``, play the animation after jumping to ``pct``. Otherwise,
            the animation will be in the paused state, regardless of the state
            it was in before the call to ``gotoPercent``.

    ``void stop(Boolean gotoEnd)``:

        Stop the current animation if it is playing.

        ``Boolean gotoEnd``:
            If ``true``, the AnimationEvent will return coordinates for the end
            position in the animation, otherwise the coordinates for the current
            position in the animation will be sent.

    ``String status()``:

        Get the status of the animation object. Possible values are:

        - ``paused``
        - ``playing``
        - ``stopped``

Event Handlers
#####################################

    ``onBegin(AnimationEvent event)``:

        Called when an animation begins playing from the start.

    ``onAnimate(AnimationEvent event)``:

        Called every "frame" of the animation.

    ``onEnd(AnimationEvent event)``:

        Called when an animation ends playing.

    ``onPlay(AnimationEvent event)``:

        Called when an animation begins playing from the start or is resumed
        from the paused state.

    ``onPause(AnimationEvent event)``:

        Called when a playing animation is paused.

    ``onStop(AnimationEvent event)``:

        Called when an animation is stopped via ``stop()``

    ``handler(AnimationEvent event)``:

        Called along with any of the other event handlers. This can be used for
        a one-size-fits all handler. You would then have to look at
        ``event.type`` to figure out which event is being fired.

Properties
---------------------------------------

``foo``:

    A string that has many foo-like propeties. Defaults to "thud".

``bar``:

    Object reference to an instance of ``dojo.namespace.Bar``

Methods
---------------------------------------

``baz(arg1)``:

    describe ``dojo.namespace.baz()`` here.

    ``arg1``:
        An argument. Like many others, but different in its own special way.

    *returns*:
        null

Requires
===============================================================================

- `dojo.hostenv`_
- `dojo.math`_
- `dojo.math.curves`_

.. _`dojo.hostenv`: hostenv.html
.. _`dojo.math`: math.html
.. _`dojo.math.curves`: curves.html

Provides
===============================================================================

dojo.animation.Animation
    A class constructor to create Animation objects.

dojo.animation.AnimationEvent
    A class constructor to create AnimationEvent objects fired by animations.

dojo.animation.AnimationSequence
    A class constructor to create AnimationSequence objects which contain
    animations.

To Do
===============================================================================

Lots. But that's always true.

About
===============================================================================

:Author: David Schontzler
:Version: 0.1
:Copyright: Dojo Foundation, 2005
:Date: 2005/10/25

.. vim:ts=4:et:tw=80:shiftwidth=4:
