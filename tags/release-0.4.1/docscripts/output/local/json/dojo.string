{"dojo.string.Builder":{"meta":{"requires":{"common":["dojo.string","dojo.lang.common"]},"functions":{"dojo.string.Builder":{"meta":{"summary":"","parameters":{"str":{"type":"string?"}},"src":" this.arrConcat = (dojo.render.html.capable && dojo.render.html[\"ie\"]);\n\tvar a = [];\n\tvar b = \"\";\n\tvar length = this.length = b.length;\n\tif(this.arrConcat){\n\t\tif(b.length > 0){\n\t\t\ta.push(b);\n\t\t}\n\t\tb = \"\";\n\t}\n\tthis.toString = this.valueOf = function(){ \n\t\t\/\/\tsummary\n\t\t\/\/\tConcatenate internal buffer and return as a string\n\t\treturn (this.arrConcat) ? a.join(\"\") : b;\t\/\/\tstring\n\t};\n\tthis.append = function(){\n\t\t\/\/\tsummary\n\t\t\/\/\tAppend all arguments to the end of the internal buffer\n\t\tfor(var x=0; x<arguments.length; x++){\n\t\t\tvar s = arguments[x];\n\t\t\tif(dojo.lang.isArrayLike(s)){\n\t\t\t\tthis.append.apply(this, s);\n\t\t\t} else {\n\t\t\t\tif(this.arrConcat){\n\t\t\t\t\ta.push(s);\n\t\t\t\t}else{\n\t\t\t\t\tb+=s;\n\t\t\t\t}\n\t\t\t\tlength += s.length;\n\t\t\t\tthis.length = length;\n\t\t\t}\n\t\t}\n\t\treturn this;\t\/\/\tdojo.string.Builder\n\t};\n\tthis.clear = function(){\n\t\t\/\/\tsummary\n\t\t\/\/\tClear the internal buffer.\n\t\ta = [];\n\t\tb = \"\";\n\t\tlength = this.length = 0;\n\t\treturn this;\t\/\/\tdojo.string.Builder\n\t};\n\tthis.remove = function(\/* integer *\/f, \/* integer *\/l){\n\t\t\/\/\tsummary\n\t\t\/\/\tRemove a section of string from the internal buffer.\n\t\tvar s = \"\"; \n\t\tif(this.arrConcat){\n\t\t\tb = a.join(\"\"); \n\t\t}\n\t\ta=[];\n\t\tif(f>0){\n\t\t\ts = b.substring(0, (f-1));\n\t\t}\n\t\tb = s + b.substring(f + l); \n\t\tlength = this.length = b.length; \n\t\tif(this.arrConcat){\n\t\t\ta.push(b);\n\t\t\tb=\"\";\n\t\t}\n\t\treturn this;\t\/\/\tdojo.string.Builder\n\t};\n\tthis.replace = function(\/* string *\/o, \/* string *\/n){\n\t\t\/\/\tsummary\n\t\t\/\/\treplace phrase *o* with phrase *n*.\n\t\tif(this.arrConcat){\n\t\t\tb = a.join(\"\"); \n\t\t}\n\t\ta = []; \n\t\tb = b.replace(o,n); \n\t\tlength = this.length = b.length; \n\t\tif(this.arrConcat){\n\t\t\ta.push(b);\n\t\t\tb=\"\";\n\t\t}\n\t\treturn this;\t\/\/\tdojo.string.Builder\n\t};\n\tthis.insert = function(\/* integer *\/idx, \/* string *\/s){\n\t\t\/\/\tsummary\n\t\t\/\/\tInsert string s at index idx.\n\t\tif(this.arrConcat){\n\t\t\tb = a.join(\"\"); \n\t\t}\n\t\ta=[];\n\t\tif(idx == 0){\n\t\t\tb = s + b;\n\t\t}else{\n\t\t\tvar t = b.split(\"\");\n\t\t\tt.splice(idx,0,s);\n\t\t\tb = t.join(\"\")\n\t\t}\n\t\tlength = this.length = b.length; \n\t\tif(this.arrConcat){\n\t\t\ta.push(b); \n\t\t\tb=\"\";\n\t\t}\n\t\treturn this;\t\/\/\tdojo.string.Builder\n\t};\n\tthis.append.apply(this, arguments);","instance_variables":["arrConcat","length","toString","append","clear","remove","replace","insert"],"returns":"mixed","call_chain":["this.append"]}},"dojo.string.Builder.toString":{"meta":{"is":"dojo.string.Builder.valueOf"}},"dojo.string.Builder.valueOf":{"meta":{"summary":"Concatenate internal buffer and return as a string","src":" \treturn (this.arrConcat) ? a.join(\"\") : b;\t\/\/\tstring","returns":"string","instance":"dojo.string.Builder"}},"dojo.string.Builder.append":{"meta":{"summary":"Append all arguments to the end of the internal buffer","src":" \tfor(var x=0; x<arguments.length; x++){\n\t\t\tvar s = arguments[x];\n\t\t\tif(dojo.lang.isArrayLike(s)){\n\t\t\t\tthis.append.apply(this, s);\n\t\t\t} else {\n\t\t\t\tif(this.arrConcat){\n\t\t\t\t\ta.push(s);\n\t\t\t\t}else{\n\t\t\t\t\tb+=s;\n\t\t\t\t}\n\t\t\t\tlength += s.length;\n\t\t\t\tthis.length = length;\n\t\t\t}\n\t\t}\n\t\treturn this;\t\/\/\tdojo.string.Builder","returns":"dojo.string.Builder","call_chain":["this.append"],"instance":"dojo.string.Builder"}},"dojo.string.Builder.clear":{"meta":{"summary":"Clear the internal buffer.","src":" \ta = [];\n\t\tb = \"\";\n\t\tlength = this.length = 0;\n\t\treturn this;\t\/\/\tdojo.string.Builder","returns":"dojo.string.Builder","instance":"dojo.string.Builder"}},"dojo.string.Builder.remove":{"meta":{"summary":"Remove a section of string from the internal buffer.","parameters":{"f":{"type":"integer"},"l":{"type":"integer"}},"src":" \tvar s = \"\"; \n\t\tif(this.arrConcat){\n\t\t\tb = a.join(\"\"); \n\t\t}\n\t\ta=[];\n\t\tif(f>0){\n\t\t\ts = b.substring(0, (f-1));\n\t\t}\n\t\tb = s + b.substring(f + l); \n\t\tlength = this.length = b.length; \n\t\tif(this.arrConcat){\n\t\t\ta.push(b);\n\t\t\tb=\"\";\n\t\t}\n\t\treturn this;\t\/\/\tdojo.string.Builder","returns":"dojo.string.Builder","instance":"dojo.string.Builder"}},"dojo.string.Builder.replace":{"meta":{"summary":"replace phrase *o* with phrase *n*.","parameters":{"o":{"type":"string"},"n":{"type":"string"}},"src":" \tif(this.arrConcat){\n\t\t\tb = a.join(\"\"); \n\t\t}\n\t\ta = []; \n\t\tb = b.replace(o,n); \n\t\tlength = this.length = b.length; \n\t\tif(this.arrConcat){\n\t\t\ta.push(b);\n\t\t\tb=\"\";\n\t\t}\n\t\treturn this;\t\/\/\tdojo.string.Builder","returns":"dojo.string.Builder","instance":"dojo.string.Builder"}},"dojo.string.Builder.insert":{"meta":{"summary":"Insert string s at index idx.","parameters":{"idx":{"type":"integer"},"s":{"type":"string"}},"src":" \tif(this.arrConcat){\n\t\t\tb = a.join(\"\"); \n\t\t}\n\t\ta=[];\n\t\tif(idx == 0){\n\t\t\tb = s + b;\n\t\t}else{\n\t\t\tvar t = b.split(\"\");\n\t\t\tt.splice(idx,0,s);\n\t\t\tb = t.join(\"\")\n\t\t}\n\t\tlength = this.length = b.length; \n\t\tif(this.arrConcat){\n\t\t\ta.push(b); \n\t\t\tb=\"\";\n\t\t}\n\t\treturn this;\t\/\/\tdojo.string.Builder","returns":"dojo.string.Builder","instance":"dojo.string.Builder"}}}}},"dojo.string._":{"meta":{"requires":{"common":["dojo.string","dojo.string.common","dojo.string.extras","dojo.string.Builder"]}}},"dojo.string.common":{"meta":{"functions":{"dojo.string.trim":{"meta":{"summary":"Trim whitespace from str. If wh > 0, trim from start, if wh < 0, trim from end, else both","parameters":{"str":{"type":"string"},"wh":{"type":"integer?"}},"src":" if(!str.replace){ return str; }\n\tif(!str.length){ return str; }\n\tvar re = (wh > 0) ? (\/^\\s+\/) : (wh < 0) ? (\/\\s+$\/) : (\/^\\s+|\\s+$\/g);\n\treturn str.replace(re, \"\");\t\/\/\tstring","returns":"string"}},"dojo.string.trimStart":{"meta":{"summary":"Trim whitespace at the beginning of 'str'","parameters":{"str":{"type":"string"}},"src":" return dojo.string.trim(str, 1);\t\/\/\tstring","returns":"string"}},"dojo.string.trimEnd":{"meta":{"summary":"Trim whitespace at the end of 'str'","parameters":{"str":{"type":"string"}},"src":" return dojo.string.trim(str, -1);"}},"dojo.string.repeat":{"meta":{"summary":"Return 'str' repeated 'count' times, optionally placing 'separator' between each rep","parameters":{"str":{"type":"string"},"count":{"type":"integer"},"separator":{"type":"string?"}},"src":" var out = \"\";\n\tfor(var i = 0; i < count; i++) {\n\t\tout += str;\n\t\tif(separator && i < count - 1) {\n\t\t\tout += separator;\n\t\t}\n\t}\n\treturn out;\t\/\/\tstring","returns":"string"}},"dojo.string.pad":{"meta":{"summary":"Pad 'str' to guarantee that it is at least 'len' length with the character 'c' at either the start (dir=1) or end (dir=-1) of the string","parameters":{"str":{"type":"string"},"len":{"type":"integer =2"},"c":{"type":"string ='0'"},"dir":{"type":"integer =1"}},"src":" var out = String(str);\n\tif(!c) {\n\t\tc = '0';\n\t}\n\tif(!dir) {\n\t\tdir = 1;\n\t}\n\twhile(out.length < len) {\n\t\tif(dir > 0) {\n\t\t\tout = c + out;\n\t\t} else {\n\t\t\tout += c;\n\t\t}\n\t}\n\treturn out;\t\/\/\tstring","returns":"string"}},"dojo.string.padLeft":{"meta":{"summary":"same as dojo.string.pad(str, len, c, 1)","parameters":{"str":{"type":"string"},"len":{"type":"integer"},"c":{"type":"string"}},"src":" return dojo.string.pad(str, len, c, 1);\t\/\/\tstring","returns":"string"}},"dojo.string.padRight":{"meta":{"summary":"same as dojo.string.pad(str, len, c, -1)","parameters":{"str":{"type":"string"},"len":{"type":"integer"},"c":{"type":"string"}},"src":" return dojo.string.pad(str, len, c, -1);\t\/\/\tstring","returns":"string"}}}}},"dojo.string.extras":{"meta":{"requires":{"common":["dojo.string.common","dojo.lang.common","dojo.lang.array"]},"functions":{"dojo.string.substituteParams":{"meta":{"summary":"Performs parameterized substitutions on a string. Throws an exception if any parameter is unmatched.","parameters":{"template":{"type":"string"},"hash":{"type":"object - optional or ..."}},"src":"\tvar map = (typeof hash == 'object') ? hash : dojo.lang.toArray(arguments, 1);\n\treturn template.replace(\/\\%\\{(\\w+)\\}\/g, function(match, key){\n\t\tif(typeof(map[key]) != \"undefined\" && map[key] != null){\n\t\t\treturn map[key];\n\t\t}\n\t\tdojo.raise(\"Substitution not found: \" + key);\n\t}); \/\/ string","description":"For example, dojo.string.substituteParams(\"File '%{0}' is not found in directory '%{1}'.\",\"foo.html\",\"\/temp\");"},"extra":{"returns":"\"File 'foo.html' is not found in directory '\/temp'.\"","parameters":{"template":{"type":"the","summary":"original string template with %{values} to be replaced"},"hash":{"type":"name\/value","summary":"pairs (type object) to provide substitutions. Alternatively, substitutions may be included as arguments 1..n to this function, corresponding to template parameters 0..n-1"}}}},"dojo.string.capitalize":{"meta":{"summary":"Uppercases the first letter of each word","parameters":{"str":{"type":"string"}},"src":"\tif(!dojo.lang.isString(str)){ return \"\"; }\n\tif(arguments.length == 0){ str = this; }\n\tvar words = str.split(' ');\n\tfor(var i=0; i<words.length; i++){\n\t\twords[i] = words[i].charAt(0).toUpperCase() + words[i].substring(1);\n\t}\n\treturn words.join(\" \"); \/\/ string","returns":"string"}},"dojo.string.isBlank":{"meta":{"summary":"Return true if the entire string is whitespace characters","parameters":{"str":{"type":"string"}},"src":"\tif(!dojo.lang.isString(str)){ return true; }\n\treturn (dojo.string.trim(str).length == 0); \/\/ boolean","returns":"boolean"}},"dojo.string.encodeAscii":{"meta":{"summary":"","parameters":{"str":{"type":"string"}},"src":" if(!dojo.lang.isString(str)){ return str; } \/\/ unknown\n\tvar ret = \"\";\n\tvar value = escape(str);\n\tvar match, re = \/%u([0-9A-F]{4})\/i;\n\twhile((match = value.match(re))){\n\t\tvar num = Number(\"0x\"+match[1]);\n\t\tvar newVal = escape(\"&#\" + num + \";\");\n\t\tret += value.substring(0, match.index) + newVal;\n\t\tvalue = value.substring(match.index+match[0].length);\n\t}\n\tret += value.replace(\/\\+\/g, \"%2B\");\n\treturn ret; \/\/ string","returns":"mixed"}},"dojo.string.escape":{"meta":{"summary":"Adds escape sequences for special characters according to the convention of 'type'","parameters":{"type":{"type":"string"},"str":{"type":"string"}},"src":"\tvar args = dojo.lang.toArray(arguments, 1);\n\tswitch(type.toLowerCase()){\n\t\tcase \"xml\":\n\t\tcase \"html\":\n\t\tcase \"xhtml\":\n\t\t\treturn dojo.string.escapeXml.apply(this, args); \/\/ string\n\t\tcase \"sql\":\n\t\t\treturn dojo.string.escapeSql.apply(this, args); \/\/ string\n\t\tcase \"regexp\":\n\t\tcase \"regex\":\n\t\t\treturn dojo.string.escapeRegExp.apply(this, args); \/\/ string\n\t\tcase \"javascript\":\n\t\tcase \"jscript\":\n\t\tcase \"js\":\n\t\t\treturn dojo.string.escapeJavaScript.apply(this, args); \/\/ string\n\t\tcase \"ascii\":\n\t\t\t\/\/ so it's encode, but it seems useful\n\t\t\treturn dojo.string.encodeAscii.apply(this, args); \/\/ string\n\t\tdefault:\n\t\t\treturn str; \/\/ string\n\t}","returns":"string","call_chain":["dojo.string.escapeXml","dojo.string.escapeSql","dojo.string.escapeRegExp","dojo.string.escapeJavaScript","dojo.string.encodeAscii"]},"extra":{"parameters":{"type":{"type":"one","summary":"of xml|html|xhtml|sql|regexp|regex|javascript|jscript|js|ascii"},"str":{"type":"the","summary":"string to be escaped"}}}},"dojo.string.escapeXml":{"meta":{"summary":"Adds escape sequences for special characters in XML: &<>\"' Optionally skips escapes for single quotes","parameters":{"str":{"type":"string"},"noSingleQuotes":{"type":"boolean"}},"src":"\tstr = str.replace(\/&\/gm, \"&amp;\").replace(\/<\/gm, \"&lt;\")\n\t\t.replace(\/>\/gm, \"&gt;\").replace(\/\"\/gm, \"&quot;\");\n\tif(!noSingleQuotes){ str = str.replace(\/'\/gm, \"&#39;\"); }\n\treturn str; \/\/ string","returns":"string"}},"dojo.string.escapeSql":{"meta":{"summary":"Adds escape sequences for single quotes in SQL expressions","parameters":{"str":{"type":"string"}},"src":"\treturn str.replace(\/'\/gm, \"''\"); \/\/string","returns":"string"}},"dojo.string.escapeRegExp":{"meta":{"summary":"Adds escape sequences for special characters in regular expressions","parameters":{"str":{"type":"string"}},"src":"\treturn str.replace(\/\\\\\/gm, \"\\\\\\\\\").replace(\/([\\f\\b\\n\\t\\r[\\^$|?*+(){}])\/gm, \"\\\\$1\"); \/\/ string","returns":"string"}},"dojo.string.escapeJavaScript":{"meta":{"summary":"Adds escape sequences for single and double quotes as well as non-visible characters in JavaScript string literal expressions","parameters":{"str":{"type":"string"}},"src":"\treturn str.replace(\/([\"'\\f\\b\\n\\t\\r])\/gm, \"\\\\$1\"); \/\/ string","returns":"string"}},"dojo.string.escapeString":{"meta":{"summary":"Adds escape sequences for non-visual characters, double quote and backslash and surrounds with double quotes to form a valid string literal.","parameters":{"str":{"type":"string"}},"src":" return ('\"' + str.replace(\/([\"\\\\])\/g, '\\\\$1') + '\"'\n\t\t).replace(\/[\\f]\/g, \"\\\\f\"\n\t\t).replace(\/[\\b]\/g, \"\\\\b\"\n\t\t).replace(\/[\\n]\/g, \"\\\\n\"\n\t\t).replace(\/[\\t]\/g, \"\\\\t\"\n\t\t).replace(\/[\\r]\/g, \"\\\\r\"); \/\/ string"}},"dojo.string.summary":{"meta":{"summary":"Truncates 'str' after 'len' characters and appends periods as necessary so that it ends with \"...\"","parameters":{"str":{"type":"string"},"len":{"type":"number"}},"src":"\tif(!len || str.length <= len){\n\t\treturn str; \/\/ string\n\t}\n\treturn str.substring(0, len).replace(\/\\.+$\/, \"\") + \"...\"; \/\/ string","returns":"string"}},"dojo.string.endsWith":{"meta":{"summary":"Returns true if 'str' ends with 'end'","parameters":{"str":{"type":"string"},"end":{"type":"string"},"ignoreCase":{"type":"boolean"}},"src":"\tif(ignoreCase){\n\t\tstr = str.toLowerCase();\n\t\tend = end.toLowerCase();\n\t}\n\tif((str.length - end.length) < 0){\n\t\treturn false; \/\/ boolean\n\t}\n\treturn str.lastIndexOf(end) == str.length - end.length; \/\/ boolean","returns":"boolean"}},"dojo.string.endsWithAny":{"meta":{"summary":"Returns true if 'str' ends with any of the arguments[2 -> n]","parameters":{"str":{"type":"string , ..."}},"src":"\tfor(var i = 1; i < arguments.length; i++) {\n\t\tif(dojo.string.endsWith(str, arguments[i])) {\n\t\t\treturn true; \/\/ boolean\n\t\t}\n\t}\n\treturn false; \/\/ boolean","returns":"boolean"}},"dojo.string.startsWith":{"meta":{"summary":"Returns true if 'str' starts with 'start'","parameters":{"str":{"type":"string"},"start":{"type":"string"},"ignoreCase":{"type":"boolean"}},"src":"\tif(ignoreCase) {\n\t\tstr = str.toLowerCase();\n\t\tstart = start.toLowerCase();\n\t}\n\treturn str.indexOf(start) == 0; \/\/ boolean","returns":"boolean"}},"dojo.string.startsWithAny":{"meta":{"summary":"Returns true if 'str' starts with any of the arguments[2 -> n]","parameters":{"str":{"type":"string , ..."}},"src":"\tfor(var i = 1; i < arguments.length; i++) {\n\t\tif(dojo.string.startsWith(str, arguments[i])) {\n\t\t\treturn true; \/\/ boolean\n\t\t}\n\t}\n\treturn false; \/\/ boolean","returns":"boolean"}},"dojo.string.has":{"meta":{"summary":"Returns true if 'str' contains any of the arguments 2 -> n","parameters":{"str":{"type":"string , ..."}},"src":"\tfor(var i = 1; i < arguments.length; i++) {\n\t\tif(str.indexOf(arguments[i]) > -1){\n\t\t\treturn true; \/\/ boolean\n\t\t}\n\t}\n\treturn false; \/\/ boolean","returns":"boolean"}},"dojo.string.normalizeNewlines":{"meta":{"summary":"Changes occurences of CR and LF in text to CRLF, or if newlineChar is provided as '\\n' or '\\r', substitutes newlineChar for occurrences of CR\/LF and CRLF","parameters":{"text":{"type":"string"},"newlineChar":{"type":"string? (\\n or \\r)"}},"src":"\tif (newlineChar == \"\\n\"){\n\t\ttext = text.replace(\/\\r\\n\/g, \"\\n\");\n\t\ttext = text.replace(\/\\r\/g, \"\\n\");\n\t} else if (newlineChar == \"\\r\"){\n\t\ttext = text.replace(\/\\r\\n\/g, \"\\r\");\n\t\ttext = text.replace(\/\\n\/g, \"\\r\");\n\t}else{\n\t\ttext = text.replace(\/([^\\r])\\n\/g, \"$1\\r\\n\").replace(\/\\r([^\\n])\/g, \"\\r\\n$1\");\n\t}\n\treturn text; \/\/ string","returns":"string"}},"dojo.string.splitEscaped":{"meta":{"summary":"Splits 'str' into an array separated by 'charac', but skips characters escaped with a backslash","parameters":{"str":{"type":"string"},"charac":{"type":"string of length=1"}},"src":"\tvar components = [];\n\tfor (var i = 0, prevcomma = 0; i < str.length; i++){\n\t\tif (str.charAt(i) == '\\\\'){ i++; continue; }\n\t\tif (str.charAt(i) == charac){\n\t\t\tcomponents.push(str.substring(prevcomma, i));\n\t\t\tprevcomma = i + 1;\n\t\t}\n\t}\n\tcomponents.push(str.substr(prevcomma));\n\treturn components; \/\/ array","returns":"array"}}}}},"dojo.string":{"meta":{"requires":{"common":["dojo.string.common"]}}}}