{"dojo.docs":{"meta":{"requires":{"common":["dojo.io.*","dojo.event.topic","dojo.rpc.JotService","dojo.dom","dojo.uri.Uri","dojo.Deferred","dojo.DeferredList"]},"functions":{"dojo.docs":{"meta":{"initialized":true,"summary":"","src":" this._url = dojo.uri.dojoUri(\"docscripts\");\n\tthis._rpc = new dojo.rpc.JotService;\n\tthis._rpc.serviceUrl = dojo.uri.dojoUri(\"docscripts\/jsonrpc.php\");","instance_variables":["_url","_rpc","_rpc.serviceUrl"],"variables":["_count","_callbacks","_cache"]}},"dojo.docs.require":{"meta":{"summary":"","parameters":{"require":{"type":"String"},"sync":{"type":"bool"}},"src":" \tdojo.debug(\"require(): \" + require);\n\t\tvar parts = require.split(\"\/\");\n\t\tvar size = parts.length;\n\t\tvar deferred = new dojo.Deferred;\n\t\tvar args = {\n\t\t\tmimetype: \"text\/json\",\n\t\t\tload: function(type, data){\n\t\t\t\tdojo.debug(\"require(): loaded for \" + require);\n\t\t\t\tif(parts[0] != \"function_names\") {\n\t\t\t\t\tfor(var i = 0, part; part = parts[i]; i++){\n\t\t\t\t\t\tdata = data[part];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdeferred.callback(data);\n\t\t\t},\n\t\t\terror: function(){\n\t\t\t\tdeferred.errback();\n\t\t\t}\n\t\t};\n\t\tif(location.protocol == \"file:\"){\n\t\t\tif(size){\n\t\t\t\tif(parts[parts.length - 1] == \"documentation\"){\n\t\t\t\t\tparts[parts.length - 1] = \"meta\";\n\t\t\t\t}\n\t\t\t\tif(parts[0] == \"function_names\"){\n\t\t\t\t\targs.url = [this._url, \"local_json\", \"function_names\"].join(\"\/\");\n\t\t\t\t}else{\n\t\t\t\t\tvar dirs = parts[0].split(\".\");\n\t\t\t\t\targs.url = [this._url, \"local_json\", dirs[0]].join(\"\/\");\n\t\t\t\t\tif(dirs.length > 1){\n\t\t\t\t\t\targs.url = [args.url, dirs[1]].join(\".\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdojo.io.bind(args);\n\t\treturn deferred;"}},"dojo.docs.getFunctionNames":{"meta":{"summary":"","src":" \treturn this.require(\"function_names\"); \/\/ dojo.Deferred","returns":"dojo.Deferred"}},"dojo.docs.unFormat":{"meta":{"summary":"","parameters":{"string":{"type":"String"}},"src":" \tvar fString = string;\n\t\tif(string.charAt(string.length - 1) == \"_\"){\n\t\t\tfString = [string.substring(0, string.length - 1), \"*\"].join(\"\");\n\t\t}\n\t\treturn fString;"}},"dojo.docs.getMeta":{"meta":{"summary":"Gets information about a function in regards to its meta data","parameters":{"pkg":{"type":"String"},"name":{"type":"String"},"callback":{"type":"Function"},"id":{"type":"String?"}},"src":" \tif(typeof name == \"function\"){\n\t\t\t\/\/ pId: a\n\t\t\t\/\/ pkg: ignore\n\t\t\tid = callback;\n\t\t\tcallback = name;\n\t\t\tname = pkg;\n\t\t\tpkg = null;\n\t\t\tdojo.debug(\"getMeta(\" + name + \")\");\n\t\t}else{\n\t\t\tdojo.debug(\"getMeta(\" + pkg + \"\/\" + name + \")\");\n\t\t}\n\t\tif(!id){\n\t\t\tid = \"_\";\n\t\t}"}},"dojo.docs._withPkg":{"meta":{"summary":"","parameters":{"type":{"type":"String"},"data":{"type":"Object"},"evt":{"type":"Object"},"input":{"type":"Object"},"newType":{"type":"String"}},"src":" \tdojo.debug(\"_withPkg(\" + evt.name + \") has package: \" + data[0]);\n\t\tevt.pkg = data[0];\n\t\tif(\"load\" == type && evt.pkg){\n\t\t\tevt.type = newType;\n\t\t}else{\n\t\t\tif(evt.callbacks && evt.callbacks.length){\n\t\t\t\tevt.callbacks.shift()(\"error\", {}, evt, evt.input);\n\t\t\t}\n\t\t}"}},"dojo.docs._gotMeta":{"meta":{"summary":"","parameters":{"type":{"type":"String"},"data":{"type":"Object"},"evt":{"type":"Object"}},"src":" \tdojo.debug(\"_gotMeta(\" + evt.name + \")\");\n\t\tvar cached = dojo.docs._getCache(evt.pkg, evt.name, \"meta\", \"functions\", evt.id);\n\t\tif(cached.summary){\n\t\t\tdata.summary = cached.summary;\n\t\t}\n\t\tif(evt.callbacks && evt.callbacks.length){\n\t\t\tevt.callbacks.shift()(type, data, evt, evt.input);\n\t\t}"}},"dojo.docs.getSrc":{"meta":{"summary":"Gets src file (created by the doc parser)","parameters":{"name":{"type":"String"},"callback":{"type":"Function"},"id":{"type":"String?"}},"src":" \tdojo.debug(\"getSrc(\" + name + \")\");\n\t\tif(!id){\n\t\t\tid = \"_\";\n\t\t}"}},"dojo.docs.getDoc":{"meta":{"summary":"Gets external documentation stored on Jot for a given function","parameters":{"name":{"type":"String"},"callback":{"type":"Function"},"id":{"type":"String?"}},"src":" \tdojo.debug(\"getDoc(\" + name  + \")\");\n\t\tif(!id){\n\t\t\tid = \"_\";\n\t\t}\n\t\tvar input = {};\n\t\tinput.type = \"doc\";\n\t\tinput.name = name;\n\t\tinput.callbacks = [callback];"}},"dojo.docs._gotDoc":{"meta":{"summary":"","parameters":{"type":{"type":"String"},"data":{"type":"Array"},"evt":{"type":"Object"},"input":{"type":"Object"}},"src":" \tdojo.debug(\"_gotDoc(\" + evt.type + \")\");\n\t\tevt[evt.type] = data;\n\t\tif(evt.expects && evt.expects.doc){\n\t\t\tfor(var i = 0, expect; expect = evt.expects.doc[i]; i++){\n\t\t\t\tif(!(expect in evt)){\n\t\t\t\t\tdojo.debug(\"_gotDoc() waiting for more data\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tvar cache = dojo.docs._getCache(evt.pkg, \"meta\", \"functions\", evt.name, evt.id, \"meta\");\n\t\tvar description = evt.fn.description;\n\t\tcache.description = description;\n\t\tdata = {\n\t\t\treturns: evt.fn.returns,\n\t\t\tid: evt.id,\n\t\t\tvariables: []\n\t\t}\n\t\tif(!cache.parameters){\n\t\t\tcache.parameters = {};\n\t\t}\n\t\tfor(var i = 0, param; param = evt.param[i]; i++){\n\t\t\tvar fName = param[\"DocParamForm\/name\"];\n\t\t\tif(!cache.parameters[fName]){\n\t\t\t\tcache.parameters[fName] = {};\n\t\t\t}\n\t\t\tcache.parameters[fName].description = param[\"DocParamForm\/desc\"]\n\t\t}\n\t\tdata.description = cache.description;\n\t\tdata.parameters = cache.parameters;\n\t\tevt.type = \"doc\";\n\t\tif(evt.callbacks && evt.callbacks.length){\n\t\t\tevt.callbacks.shift()(\"load\", data, evt, input);\n\t\t}"}},"dojo.docs.getPkgDoc":{"meta":{"summary":"Gets external documentation stored on Jot for a given package","parameters":{"name":{"type":"String"},"callback":{"type":"Function"}},"src":" \tdojo.debug(\"getPkgDoc(\" + name + \")\");\n\t\tvar input = {};"}},"dojo.docs.getPkgInfo":{"meta":{"summary":"Gets a combination of the metadata and external documentation for a given package","parameters":{"name":{"type":"String"},"callback":{"type":"Function"}},"src":" \tdojo.debug(\"getPkgInfo(\" + name + \")\");\n\t\tvar input = {\n\t\t\texpects: {\n\t\t\t\tpkginfo: [\"pkgmeta\", \"pkgdoc\"]\n\t\t\t},\n\t\t\tcallback: callback\n\t\t};\n\t\tdojo.docs.getPkgMeta(input, name, dojo.docs._getPkgInfo);\n\t\tdojo.docs.getPkgDoc(input, name, dojo.docs._getPkgInfo);"}},"dojo.docs._getPkgInfo":{"meta":{"summary":"","parameters":{"type":{"type":"String"},"data":{"type":"Object"},"evt":{"type":"Object"}},"src":" \tdojo.debug(\"_getPkgInfo() for \" + evt.type);\n\t\tvar input = {};\n\t\tvar results = {};\n\t\tif(typeof key == \"object\"){\n\t\t\tinput = key;\n\t\t\tinput[evt.type] = data;\n\t\t\tif(input.expects && input.expects.pkginfo){\n\t\t\t\tfor(var i = 0, expect; expect = input.expects.pkginfo[i]; i++){\n\t\t\t\t\tif(!(expect in input)){\n\t\t\t\t\t\tdojo.debug(\"_getPkgInfo() waiting for more data\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tresults = input.pkgmeta;\n\t\t\tresults.description = input.pkgdoc;\n\t\t}\n\t\tif(input.callback){\n\t\t\tinput.callback(\"load\", results, evt);\n\t\t}"}},"dojo.docs.getInfo":{"meta":{"summary":"","parameters":{"name":{"type":"String"},"callback":{"type":"Function"}},"src":" \tdojo.debug(\"getInfo(\" + name + \")\");\n\t\tvar input = {\n\t\t\texpects: {\n\t\t\t\t\"info\": [\"meta\", \"doc\"]\n\t\t\t},\n\t\t\tcallback: callback\n\t\t}\n\t\tdojo.docs.getMeta(input, name, dojo.docs._getInfo);\n\t\tdojo.docs.getDoc(input, name, dojo.docs._getInfo);"}},"dojo.docs._getInfo":{"meta":{"summary":"","parameters":{"type":{"type":"String"},"data":{"type":"String"},"evt":{"type":"Object"},"input":{"type":"Object"}},"src":" \tdojo.debug(\"_getInfo(\" + evt.type + \")\");\n\t\tif(input && input.expects && input.expects.info){\n\t\t\tinput[evt.type] = data;\n\t\t\tfor(var i = 0, expect; expect = input.expects.info[i]; i++){\n\t\t\t\tif(!(expect in input)){\n\t\t\t\t\tdojo.debug(\"_getInfo() waiting for more data\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(input.callback){\n\t\t\tinput.callback(\"load\", dojo.docs._getCache(evt.pkg, \"meta\", \"functions\", evt.name, evt.id, \"meta\"), evt, input);\n\t\t}"}},"dojo.docs._getMainText":{"meta":{"summary":"Grabs the innerHTML from a Jot Rech Text node","parameters":{"text":{"type":"String"}},"src":" \tdojo.debug(\"_getMainText()\");\n\t\treturn text.replace(\/^<html[^<]*>\/, \"\").replace(\/<\\\/html>$\/, \"\").replace(\/<\\w+\\s*\\\/>\/g, \"\");"}},"dojo.docs.getPackageMeta":{"meta":{"summary":"","parameters":{"input":{"type":"Object"}},"src":" \tdojo.debug(\"getPackageMeta(): \" + input.package);\n\t\treturn this.require(input.package + \"\/meta\", input.sync);"}},"dojo.docs.getFunctionMeta":{"meta":{"summary":"","parameters":{"input":{"type":"Object"}},"src":" \tvar package = input.package || \"\";\n\t\tvar name = input.name;\n\t\tvar id = input.id || \"_\";\n\t\tdojo.debug(\"getFunctionMeta(): \" + name);\n\t\tif(!name) return;\n\t\tif(package){\n\t\t\treturn this.require(package + \"\/meta\/functions\/\" + name + \"\/\" + id + \"\/meta\");\n\t\t}else{\n\t\t\tthis.getFunctionNames();\n\t\t}"}},"dojo.docs.getFunctionDocumentation":{"meta":{"summary":"","parameters":{"input":{"type":"Object"}},"src":" \tvar package = input.package || \"\";\n\t\tvar name = input.name;\n\t\tvar id = input.id || \"_\";\n\t\tdojo.debug(\"getFunctionDocumentation(): \" + name);\n\t\tif(!name) return;\n\t\tif(package){\n\t\t\treturn this.require(package + \"\/meta\/functions\/\" + name + \"\/\" + id + \"\/documentation\");\n\t\t}"}},"dojo.docs._onDocSearch":{"meta":{"summary":"","parameters":{"input":{"type":"Object"}},"src":" \tvar _this = this;\n\t\tvar name = input.name.toLowerCase();\n\t\tif(!name) return;\n\t\tthis.getFunctionNames().addCallback(function(data){\n\t\t\tdojo.debug(\"_onDocSearch(): function names loaded for \" + name);\n\t\t\tvar output = [];\n\t\t\tvar list = [];\n\t\t\tvar closure = function(pkg, fn) {\n\t\t\t\treturn function(data){\n\t\t\t\t\tdojo.debug(\"_onDocSearch(): package meta loaded for: \" + pkg);\n\t\t\t\t\tif(data.functions){\n\t\t\t\t\t\tvar functions = data.functions;\n\t\t\t\t\t\tfor(var key in functions){\n\t\t\t\t\t\t\tif(fn == key){\n\t\t\t\t\t\t\t\tvar ids = functions[key];\n\t\t\t\t\t\t\t\tfor(var id in ids){\n\t\t\t\t\t\t\t\t\tvar fnMeta = ids[id];\n\t\t\t\t\t\t\t\t\toutput.push({\n\t\t\t\t\t\t\t\t\t\tpackage: pkg,\n\t\t\t\t\t\t\t\t\t\tname: fn,\n\t\t\t\t\t\t\t\t\t\tid: id,\n\t\t\t\t\t\t\t\t\t\tsummary: fnMeta.summary\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn output;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpkgLoop:\n\t\t\tfor(var pkg in data){\n\t\t\t\tif(pkg.toLowerCase() == name){\n\t\t\t\t\tname = pkg;\n\t\t\t\t\tdojo.debug(\"_onDocSearch found a package\");\n\t\t\t\t\t\/\/dojo.docs._onDocSelectPackage(input);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tfor(var i = 0, fn; fn = data[pkg][i]; i++){\n\t\t\t\t\tif(fn.toLowerCase().indexOf(name) != -1){\n\t\t\t\t\t\tdojo.debug(\"_onDocSearch(): Search matched \" + fn);\n\t\t\t\t\t\tvar meta = _this.getPackageMeta({package: pkg});\n\t\t\t\t\t\tmeta.addCallback(closure(pkg, fn));\n\t\t\t\t\t\tlist.push(meta);\n\t\t\t\t\t\t\/\/ Build a list of all packages that need to be loaded and their loaded state.\n\t\t\t\t\t\tcontinue pkgLoop;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tlist = new dojo.DeferredList(list);\n\t\t\tlist.addCallback(function(results){\n\t\t\t\tdojo.debug(\"_onDocSearch(): All packages loaded\");\n\t\t\t\t_this._printFunctionResults(results[0][1]);\n\t\t\t});\n\t\t});"}},"dojo.docs._onDocSearchFn":{"meta":{"summary":"","parameters":{"type":{"type":"String"},"data":{"type":"Array"},"evt":{"type":"Object"}},"src":" \tdojo.debug(\"_onDocSearchFn(\" + evt.name + \")\");\n\t\tvar name = evt.name || evt.pkg;\n\t\tdojo.debug(\"_onDocSearchFn found a function\");\n\t\tevt.pkgs = packages;\n\t\tevt.pkg = name;\n\t\tevt.loaded = 0;\n\t\tfor(var i = 0, pkg; pkg = packages[i]; i++){\n\t\t\tdojo.docs.getPkgMeta(evt, pkg, dojo.docs._onDocResults);\n\t\t}"}},"dojo.docs._onPkgResults":{"meta":{"summary":"","parameters":{"type":{"type":"String"},"data":{"type":"Object"},"evt":{"type":"Object"},"input":{"type":"Object"}},"src":" \tdojo.debug(\"_onPkgResults(\" + evt.type + \")\");\n\t\tvar description = \"\";\n\t\tvar path = \"\";\n\t\tvar methods = {};\n\t\tvar requires = {};\n\t\tif(input){\n\t\t\tinput[evt.type] = data;\n\t\t\tif(input.expects && input.expects.pkgresults){\n\t\t\t\tfor(var i = 0, expect; expect = input.expects.pkgresults[i]; i++){\n\t\t\t\t\tif(!(expect in input)){\n\t\t\t\t\t\tdojo.debug(\"_onPkgResults() waiting for more data\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tpath = input.pkgdoc.path;\n\t\t\tdescription = input.pkgdoc.description;\n\t\t\tmethods = input.pkgmeta.methods;\n\t\t\trequires = input.pkgmeta.requires;\n\t\t}\n\t\tvar pkg = evt.name.replace(\"_\", \"*\");\n\t\tvar results = {\n\t\t\tpath: path,\n\t\t\tdescription: description,\n\t\t\tsize: 0,\n\t\t\tmethods: [],\n\t\t\tpkg: pkg,\n\t\t\trequires: requires\n\t\t}\n\t\tvar rePrivate = \/_[^.]+$\/;\n\t\tfor(var method in methods){\n\t\t\tif(!rePrivate.test(method)){\n\t\t\t\tfor(var pId in methods[method]){\n\t\t\t\t\tresults.methods.push({\n\t\t\t\t\t\tpkg: pkg,\n\t\t\t\t\t\tname: method,\n\t\t\t\t\t\tid: pId,\n\t\t\t\t\t\tsummary: methods[method][pId].summary\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresults.size = results.methods.length;\n\t\tdojo.docs._printPkgResult(results);"}},"dojo.docs._onDocResults":{"meta":{"summary":"","parameters":{"type":{"type":"String"},"data":{"type":"Object"},"evt":{"type":"Object"},"input":{"type":"Object"}},"src":" \tdojo.debug(\"_onDocResults(\" + evt.name + \"\/\" + input.pkg + \") \" + type);\n\t\t++input.loaded;\n\t\tif(input.loaded == input.pkgs.length){\n\t\t\tvar pkgs = input.pkgs;\n\t\t\tvar name = input.pkg;\n\t\t\tvar results = {methods: []};\n\t\t\tvar rePrivate = \/_[^.]+$\/;\n\t\t\tdata = dojo.docs._cache;\n\t\t\tfor(var i = 0, pkg; pkg = pkgs[i]; i++){\n\t\t\t\tvar methods = dojo.docs._getCache(pkg, \"meta\", \"methods\");\n\t\t\t\tfor(var fn in methods){\n\t\t\t\t\tif(fn.toLowerCase().indexOf(name) == -1){\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif(fn != \"requires\" && !rePrivate.test(fn)){\n\t\t\t\t\t\tfor(var pId in methods[fn]){\n\t\t\t\t\t\t\tvar result = {\n\t\t\t\t\t\t\t\tpkg: pkg,\n\t\t\t\t\t\t\t\tname: fn,\n\t\t\t\t\t\t\t\tid: \"_\",\n\t\t\t\t\t\t\t\tsummary: \"\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(methods[fn][pId].summary){\n\t\t\t\t\t\t\t\tresult.summary = methods[fn][pId].summary;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tresults.methods.push(result);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tdojo.debug(\"Publishing docResults\");\n\t\t\tdojo.docs._printFnResults(results);\n\t\t}"}},"dojo.docs._printFunctionResults":{"meta":{"summary":"","parameters":{"results":{"type":""}},"src":" \tdojo.debug(\"_printFnResults(): called\");\n\t\t\/\/ summary: Call this function to send the \/docs\/function\/results topic"}},"dojo.docs._printPkgResult":{"meta":{"summary":"","parameters":{"results":{"type":""}},"src":" \tdojo.debug(\"_printPkgResult(): called\");"}},"dojo.docs._onDocSelectFunction":{"meta":{"summary":"Get doc, meta, and src","parameters":{"input":{"type":"Object"}},"src":" \tvar name = input.name;\n\t\tvar package = input.package || \"\";\n\t\tvar id = input.id || \"_\";\n\t\tdojo.debug(\"_onDocSelectFunction(\" + name + \")\");\n\t\tif(!name || !package) return false;\n\t\tvar pkgMeta = this.getPackageMeta({package: package});\n\t\tvar meta = this.getFunctionMeta({package: package, name: name, id: id});\n\t\tvar doc = this.getFunctionDocumentation({package: package, name: name, id: id});\n\t\tvar list = new dojo.DeferredList([pkgMeta, meta, doc]);\n\t\tlist.addCallback(function(results){\n\t\t\tdojo.debug(\"_onDocSelectFunction() loaded\");\n\t\t\tfor(var i = 0, result; result = results[i]; i++){\n\t\t\t\tdojo.debugShallow(result[1]);\n\t\t\t}\n\t\t});\n\t\treturn list;"}},"dojo.docs._onDocSelectPackage":{"meta":{"summary":"","parameters":{"input":{"type":"Object"}},"src":" \tdojo.debug(\"_onDocSelectPackage(\" + input.name + \")\")\n\t\tinput.expects = {\n\t\t\t\"pkgresults\": [\"pkgmeta\", \"pkgdoc\"]\n\t\t};\n\t\tdojo.docs.getPkgMeta(input, input.name, dojo.docs._onPkgResults);\n\t\tdojo.docs.getPkgDoc(input, input.name, dojo.docs._onPkgResults);"}},"dojo.docs._onDocSelectResults":{"meta":{"summary":"","parameters":{"type":{"type":"String"},"data":{"type":"Object"},"evt":{"type":"Object"},"input":{"type":"Object"}},"src":" \tdojo.debug(\"_onDocSelectResults(\" + evt.type + \", \" + evt.name + \")\");\n\t\tif(evt.type == \"meta\"){\n\t\t\tdojo.docs.getPkgMeta(input, evt.pkg, dojo.docs._onDocSelectResults);\n\t\t}\n\t\tif(input){\n\t\t\tinput[evt.type] = data;\n\t\t\tif(input.expects && input.expects.docresults){\n\t\t\t\tfor(var i = 0, expect; expect = input.expects.docresults[i]; i++){\n\t\t\t\t\tif(!(expect in input)){\n\t\t\t\t\t\tdojo.debug(\"_onDocSelectResults() waiting for more data\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdojo.docs._printFunctionDetail(input);"}},"dojo.docs._printFunctionDetail":{"meta":{"summary":"Call this function to send the \/docs\/function\/detail topic event","parameters":{"results":{"type":""}},"src":"\t\t\/\/ summary: Call this function to send the \/docs\/function\/detail topic event"}},"dojo.docs.selectFunction":{"meta":{"summary":"The combined information","parameters":{"name":{"type":"String"},"id":{"type":"String?"}},"src":"\t\t\/\/ summary: The combined information"}},"dojo.docs.savePackage":{"meta":{"summary":"","parameters":{"callbackObject":{"type":"Object"},"callback":{"type":"String"},"parameters":{"type":"Object"}},"src":" \tdojo.event.kwConnect({\n\t\t\tsrcObj: dojo.docs,\n\t\t\tsrcFunc: \"_savedPkgRpc\",\n\t\t\ttargetObj: callbackObject,\n\t\t\ttargetFunc: callback,\n\t\t\tonce: true\n\t\t});\n\t\tvar props = {};\n\t\tvar cache = dojo.docs._getCache(parameters.pkg, \"meta\");\n\t\tvar i = 1;\n\t\tif(!cache.path){\n\t\t\tvar path = \"id\";\n\t\t\tprops[[\"pname\", i].join(\"\")] = \"DocPkgForm\/require\";\n\t\t\tprops[[\"pvalue\", i++].join(\"\")] = parameters.pkg;\n\t\t}else{\n\t\t\tvar path = cache.path;\n\t\t}\n\t\tprops.form = \"\/\/DocPkgForm\";\n\t\tprops.path = [\"\/WikiHome\/DojoDotDoc\/\", path].join(\"\");\n\t\tif(parameters.description){\n\t\t\tprops[[\"pname\", i].join(\"\")] = \"main\/text\";\n\t\t\tprops[[\"pvalue\", i++].join(\"\")] = parameters.description;\n\t\t}\n\t\tdojo.docs._rpc.callRemote(\"saveForm\",\tprops).addCallbacks(dojo.docs._pkgRpc, dojo.docs._pkgRpc);"}},"dojo.docs._pkgRpc":{"meta":{"summary":"","parameters":{"data":{"type":""}},"src":" \tif(data.name){\n\t\t\tdojo.docs._getCache(data[\"DocPkgForm\/require\"], \"meta\").path = data.name;\n\t\t\tdojo.docs._savedPkgRpc(\"load\");\n\t\t}else{\n\t\t\tdojo.docs._savedPkgRpc(\"error\");\n\t\t}"}},"dojo.docs._savedPkgRpc":{"meta":{"summary":"","parameters":{"type":{"type":""}},"src":""}},"dojo.docs.functionPackages":{"meta":{"summary":"Gets the package associated with a function and stores it in the .pkg value of input","parameters":{"name":{"type":"String"},"callback":{"type":"Function"},"input":{"type":"Object"}},"src":" \tdojo.debug(\"functionPackages() name: \" + name);\n\t\tif(!input){\n\t\t\tinput = {};\n\t\t}\n\t\tif(!input.callbacks){\n\t\t\tinput.callbacks = [];\n\t\t}\n\t\tinput.type = \"function_names\";\n\t\tinput.name = name;\n\t\tinput.callbacks.unshift(callback);\n\t\tinput.callbacks.unshift(dojo.docs._functionPackages);"}},"dojo.docs._functionPackages":{"meta":{"summary":"","parameters":{"type":{"type":"String"},"data":{"type":"Array"},"evt":{"type":"Object"}},"src":" \tdojo.debug(\"_functionPackages() name: \" + evt.name);\n\t\tevt.pkg = '';\n\t\tvar results = [];\n\t\tvar data = dojo.docs._cache['function_names'];\n\t\tfor(var key in data){\n\t\t\tif(dojo.lang.inArray(data[key], evt.name)){\n\t\t\t\tdojo.debug(\"_functionPackages() package: \" + key);\n\t\t\t\tresults.push(key);\n\t\t\t}\n\t\t}\n\t\tif(evt.callbacks && evt.callbacks.length){\n\t\t\tevt.callbacks.shift()(type, results, evt, evt.input);\n\t\t}"}},"dojo.docs.setUserName":{"meta":{"summary":"","parameters":{"name":{"type":"String"}},"src":" \tdojo.docs._userName = name;\n\t\tif(name && dojo.docs._password){\n\t\t\tdojo.docs._logIn();\n\t\t}"}},"dojo.docs.setPassword":{"meta":{"summary":"","parameters":{"password":{"type":"String"}},"src":" \tdojo.docs._password = password;\n\t\tif(password && dojo.docs._userName){\n\t\t\tdojo.docs._logIn();\n\t\t}"}},"dojo.docs._logIn":{"meta":{"summary":"","src":" \tdojo.io.bind({\n\t\t\turl: dojo.docs._rpc.serviceUrl.toString(),\n\t\t\tmethod: \"post\",\n\t\t\tmimetype: \"text\/json\",\n\t\t\tcontent: {\n\t\t\t\tusername: dojo.docs._userName,\n\t\t\t\tpassword: dojo.docs._password\n\t\t\t},\n\t\t\tload: function(type, data){\n\t\t\t\tif(data.error){\n\t\t\t\t\tdojo.docs.logInSuccess();\n\t\t\t\t}else{\n\t\t\t\t\tdojo.docs.logInFailure();\n\t\t\t\t}\n\t\t\t},\n\t\t\terror: function(){\n\t\t\t\tdojo.docs.logInFailure();\n\t\t\t}\n\t\t});"}},"dojo.docs.logInSuccess":{"meta":{"summary":"","src":""}},"dojo.docs.logInFailure":{"meta":{"summary":"","src":""}},"dojo.docs._set":{"meta":{"summary":"","parameters":{"base":{"type":"Object"},"keys":{"type":"String..."},"value":{"type":"String"}},"src":" \tvar args = [];\n\t\tfor(var i = 0, arg; arg = arguments[i]; i++){\n\t\t\targs.push(arg);\n\t\t}\n\t\tif(args.length < 3) return;\n\t\tbase = args.shift();\n\t\tvalue = args.pop();\n\t\tvar key = args.pop();\n\t\tfor(var i = 0, arg; arg = args[i]; i++){\n\t\t\tif(typeof base[arg] != \"object\"){\n\t\t\t\tbase[arg] = {};\n\t\t\t}\n\t\t\tbase = base[arg];\n\t\t}\n\t\tbase[key] = value;"}},"dojo.docs._getCache":{"meta":{"summary":"","parameters":{"keys":{"type":"String..."}},"src":" \tvar obj = dojo.docs._cache;\n\t\tfor(var i = 0; i < arguments.length; i++){\n\t\t\tvar arg = arguments[i];\n\t\t\tif(!obj[arg]){\n\t\t\t\tobj[arg] = {};\n\t\t\t}\n\t\t\tobj = obj[arg];\n\t\t}\n\t\treturn obj;"}}}}}}