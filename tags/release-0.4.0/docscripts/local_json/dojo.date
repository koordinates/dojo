{"dojo.date.common":{"meta":{"functions":{"dojo.date.setDayOfYear":{"_":{"meta":{"summary":"","parameters":{"dateObject":{"type":"Date"},"dayOfYear":{"type":"Number"}},"src":"\tdateObject.setMonth(0);\n\tdateObject.setDate(dayOfYear);\n\treturn dateObject; \/\/ Date","returns":"Date"}}},"dojo.date.getDayOfYear":{"_":{"meta":{"summary":"","parameters":{"dateObject":{"type":"Date"}},"src":"\tvar fullYear = dateObject.getFullYear();\n\tvar lastDayOfPrevYear = new Date(fullYear-1, 11, 31);\n\treturn Math.floor((dateObject.getTime() -\n\t\tlastDayOfPrevYear.getTime()) \/ 86400000); \/\/ Number"}}},"dojo.date.setWeekOfYear":{"_":{"meta":{"summary":"","parameters":{"dateObject":{"type":""},"week":{"type":""},"firstDay":{"type":""}},"src":"\tif (arguments.length == 1) { firstDay = 0; }          \n\tdojo.unimplemented(\"dojo.date.setWeekOfYear\");"}}},"dojo.date.getWeekOfYear":{"_":{"meta":{"summary":"","parameters":{"dateObject":{"type":""},"firstDay":{"type":""}},"src":"\tif (arguments.length == 1) { firstDay = 0; }          \n\n\t\/\/ work out the first day of the year corresponding to the week\n\tvar firstDayOfYear = new Date(dateObject.getFullYear(), 0, 1);\n\tvar day = firstDayOfYear.getDay();\n\tfirstDayOfYear.setDate(firstDayOfYear.getDate() -\n\t\t\tday + firstDay - (day > firstDay ? 7 : 0));\n\n\treturn Math.floor((dateObject.getTime() -\n\t\tfirstDayOfYear.getTime()) \/ 604800000);"}}},"dojo.date.setIsoWeekOfYear":{"_":{"meta":{"summary":"","parameters":{"dateObject":{"type":""},"week":{"type":""},"firstDay":{"type":""}},"src":"\tif (arguments.length == 1) { firstDay = 1; }          \n\tdojo.unimplemented(\"dojo.date.setIsoWeekOfYear\");"}}},"dojo.date.getIsoWeekOfYear":{"_":{"meta":{"summary":"","parameters":{"dateObject":{"type":""},"firstDay":{"type":""}},"src":"\tif (arguments.length == 1) { firstDay = 1; }          \n\tdojo.unimplemented(\"dojo.date.getIsoWeekOfYear\");"}}},"dojo.date.getDaysInMonth":{"_":{"meta":{"summary":"","parameters":{"dateObject":{"type":""}},"src":"\tvar month = dateObject.getMonth();\n\tvar days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\tif (month == 1 && dojo.date.isLeapYear(dateObject)) { return 29; }\n\telse { return days[month]; }"}}},"dojo.date.isLeapYear":{"_":{"meta":{"summary":"","parameters":{"dateObject":{"type":""}},"src":"\treturn (year%400 == 0) ? true : (year%100 == 0) ? false : (year%4 == 0) ? true : false;"}}},"dojo.date.getTimezoneName":{"_":{"meta":{"summary":"","parameters":{"dateObject":{"type":""}},"src":"\tfor (var i = 0; i < dojo.date.timezoneOffsets.length; i++) {\n\t\tif (dojo.date.timezoneOffsets[i] == timezoneOffset) {\n\t\t\treturn dojo.date.shortTimezones[i];\n\t\t}\n\t}\n\t\n\t\/\/ we don't know so return it formatted as \"+HH:MM\"\n\tfunction $ (s) { s = String(s); while (s.length < 2) { s = \"0\" + s; } return s; }\n\treturn (timezoneOffset < 0 ? \"-\" : \"+\") + $(Math.floor(Math.abs(\n\t\ttimezoneOffset)\/60)) + \":\" + $(Math.abs(timezoneOffset)%60);"}}},"dojo.date.getOrdinal":{"_":{"meta":{"summary":"","parameters":{"dateObject":{"type":""}},"src":"\tvar date = dateObject.getDate();\n\n\tif (date%100 != 11 && date%10 == 1) { return \"st\"; }\n\telse if (date%100 != 12 && date%10 == 2) { return \"nd\"; }\n\telse if (date%100 != 13 && date%10 == 3) { return \"rd\"; }\n\telse { return \"th\"; }"}}},"dojo.date.compare":{"_":{"meta":{"summary":" Compare two date objects by date, time, or both.","parameters":{"dateA":{"type":"Date"},"dateB":{"type":"Date"},"options":{"type":"int"}},"src":"\tvar dB=dateB||new Date();\n\tvar now=new Date();\n\tvar opt=options||(dojo.date.compareTypes.DATE|dojo.date.compareTypes.TIME);\n\tvar d1=new Date(\n\t\t((opt&dojo.date.compareTypes.DATE)?(dA.getFullYear()):now.getFullYear()), \n\t\t((opt&dojo.date.compareTypes.DATE)?(dA.getMonth()):now.getMonth()), \n\t\t((opt&dojo.date.compareTypes.DATE)?(dA.getDate()):now.getDate()), \n\t\t((opt&dojo.date.compareTypes.TIME)?(dA.getHours()):0), \n\t\t((opt&dojo.date.compareTypes.TIME)?(dA.getMinutes()):0), \n\t\t((opt&dojo.date.compareTypes.TIME)?(dA.getSeconds()):0)\n\t);\n\tvar d2=new Date(\n\t\t((opt&dojo.date.compareTypes.DATE)?(dB.getFullYear()):now.getFullYear()), \n\t\t((opt&dojo.date.compareTypes.DATE)?(dB.getMonth()):now.getMonth()), \n\t\t((opt&dojo.date.compareTypes.DATE)?(dB.getDate()):now.getDate()), \n\t\t((opt&dojo.date.compareTypes.TIME)?(dB.getHours()):0), \n\t\t((opt&dojo.date.compareTypes.TIME)?(dB.getMinutes()):0), \n\t\t((opt&dojo.date.compareTypes.TIME)?(dB.getSeconds()):0)\n\t);\n\tif(d1.valueOf()>d2.valueOf()){\n\t\treturn 1;\t\/\/\tint\n\t}\n\tif(d1.valueOf()<d2.valueOf()){\n\t\treturn -1;\t\/\/\tint\n\t}\n\treturn 0;\t\/\/\tint","returns":"int"}}},"dojo.date.add":{"_":{"meta":{"summary":" Add to a Date in intervals of different size, from milliseconds to years","parameters":{"dt":{"type":"Date"},"interv":{"type":"dojo.date.dateParts"},"incr":{"type":"int"}},"src":"\/\/FIXME: what's the reason behind this?\tincr = incr || 1;\n\n\tfunction fixOvershoot() {\n\t\tif (ret.getDate() < dt.getDate()) {\n\t\t\tret.setDate(0);\n\t\t}\n\t}\n\t\n\tvar ret = new Date(dt);\n\n\tswitch(interv) {\n\t\tcase dojo.date.dateParts.YEAR:\n\t\t\tret.setFullYear(dt.getFullYear()+incr);\n\t\t\t\/\/ Keep increment\/decrement from 2\/29 out of March\n\t\t\tfixOvershoot();\n\t\t\tbreak;\n\t\tcase dojo.date.dateParts.QUARTER:\n\t\t\t\/\/ Naive quarter is just three months\n\t\t\tincr*=3;\n\t\t\t\/\/ fallthrough...\n\t\tcase dojo.date.dateParts.MONTH:\n\t\t\tret.setMonth(dt.getMonth()+incr);\n\t\t\t\/\/ Reset to last day of month if you overshoot\n\t\t\tfixOvershoot();\n\t\t\tbreak;\n\t\tcase dojo.date.dateParts.WEEK:\n\t\t\tincr*=7;\n\t\t\t\/\/ fallthrough...\n\t\tcase dojo.date.dateParts.DAY:\n\t\t\tret.setDate(dt.getDate() + incr);\n\t\t\tbreak;\n\t\tcase dojo.date.dateParts.WEEKDAY:\n\t\t\t\/\/FIXME: assumes Saturday\/Sunday weekend, but even this is not fixed.  There are CLDR entries to localize this.\n\t\t\tvar dat = dt.getDate();\n\t\t\tvar weeks = 0;\n\t\t\tvar days = 0;\n\t\t\tvar strt = 0;\n\t\t\tvar trgt = 0;\n\t\t\tvar adj = 0;\n\t\t\t\/\/ Divide the increment time span into weekspans plus leftover days\n\t\t\t\/\/ e.g., 8 days is one 5-day weekspan \/ and two leftover days\n\t\t\t\/\/ Can't have zero leftover days, so numbers divisible by 5 get\n\t\t\t\/\/ a days value of 5, and the remaining days make up the number of weeks\n\t\t\tvar mod = incr % 5;\n\t\t\tif (mod == 0) {\n\t\t\t\tdays = (incr > 0) ? 5 : -5;\n\t\t\t\tweeks = (incr > 0) ? ((incr-5)\/5) : ((incr+5)\/5);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tdays = mod;\n\t\t\t\tweeks = parseInt(incr\/5);\n\t\t\t}\n\t\t\t\/\/ Get weekday value for orig date param\n\t\t\tstrt = dt.getDay();\n\t\t\t\/\/ Orig date is Sat \/ positive incrementer\n\t\t\t\/\/ Jump over Sun\n\t\t\tif (strt == 6 && incr > 0) {\n\t\t\t\tadj = 1;\n\t\t\t}\n\t\t\t\/\/ Orig date is Sun \/ negative incrementer\n\t\t\t\/\/ Jump back over Sat\n\t\t\telse if (strt == 0 && incr < 0) {\n\t\t\t\tadj = -1;\n\t\t\t}\n\t\t\t\/\/ Get weekday val for the new date\n\t\t\ttrgt = (strt + days);\n\t\t\t\/\/ New date is on Sat or Sun\n\t\t\tif (trgt == 0 || trgt == 6) {\n\t\t\t\tadj = (incr > 0) ? 2 : -2;\n\t\t\t}\n\t\t\t\/\/ Increment by number of weeks plus leftover days plus\n\t\t\t\/\/ weekend adjustments\n\t\t\tret.setDate(dat + (7*weeks) + days + adj);\n\t\t\tbreak;\n\t\tcase dojo.date.dateParts.HOUR:\n\t\t\tret.setHours(ret.getHours()+incr);\n\t\t\tbreak;\n\t\tcase dojo.date.dateParts.MINUTE:\n\t\t\tret.setMinutes(ret.getMinutes()+incr);\n\t\t\tbreak;\n\t\tcase dojo.date.dateParts.SECOND:\n\t\t\tret.setSeconds(ret.getSeconds()+incr);\n\t\t\tbreak;\n\t\tcase dojo.date.dateParts.MILLISECOND:\n\t\t\tret.setMilliseconds(ret.getMilliseconds()+incr);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t\/\/ Do nothing\n\t\t\tbreak;\n\t}\n\n\treturn ret; \/\/ Date","returns":"Date"}}},"dojo.date.diff":{"_":{"meta":{"summary":" Get the difference in a specific unit of time (e.g., number of months, weeks, days, etc.) between two dates.","parameters":{"dtA":{"type":"Date"},"dtB":{"type":"Date"},"interv":{"type":"dojo.date.dateParts"}},"src":"\tif(typeof dtB == 'number'){dtB = new Date(dtB);}\n\tvar yeaDiff = dtB.getFullYear() - dtA.getFullYear();\n\tvar monDiff = (dtB.getMonth() - dtA.getMonth()) + (yeaDiff * 12);\n\tvar msDiff = dtB.getTime() - dtA.getTime(); \/\/ Millisecs\n\tvar secDiff = msDiff\/1000;\n\tvar minDiff = secDiff\/60;\n\tvar houDiff = minDiff\/60;\n\tvar dayDiff = houDiff\/24;\n\tvar weeDiff = dayDiff\/7;\n\tvar ret = 0; \/\/ Integer return value\n\n\tswitch(interv) {\n\t\tcase dojo.date.dateParts.YEAR:\n\t\t\tret = yeaDiff;\n\t\t\tbreak;\n\t\tcase dojo.date.dateParts.QUARTER:\n\t\t\tvar mA = dtA.getMonth();\n\t\t\tvar mB = dtB.getMonth();\n\t\t\t\/\/ Figure out which quarter the months are in\n\t\t\tvar qA = Math.floor(mA\/3) + 1;\n\t\t\tvar qB = Math.floor(mB\/3) + 1;\n\t\t\t\/\/ Add quarters for any year difference between the dates\n\t\t\tqB += (yeaDiff * 4);\n\t\t\tret = qB - qA;\n\t\t\tbreak;\n\t\tcase dojo.date.dateParts.MONTH:\n\t\t\tret = monDiff;\n\t\t\tbreak;\n\t\tcase dojo.date.dateParts.WEEK:\n\t\t\t\/\/ Truncate instead of rounding\n\t\t\t\/\/ Don't use Math.floor -- value may be negative\n\t\t\tret = parseInt(weeDiff);\n\t\t\tbreak;\n\t\tcase dojo.date.dateParts.DAY:\n\t\t\tret = dayDiff;\n\t\t\tbreak;\n\t\tcase dojo.date.dateParts.WEEKDAY:\n\t\t\tvar days = Math.round(dayDiff);\n\t\t\tvar weeks = parseInt(days\/7);\n\t\t\tvar mod = days % 7;\n\t\t\t\n\t\t\t\/\/ Even number of weeks\n\t\t\tif (mod == 0) {\n\t\t\t\tdays = weeks*5;\n\t\t\t}\n\t\t\t\/\/ Weeks plus spare change (< 7 days)\n\t\t\telse {\n\t\t\t\tvar adj = 0;\n\t\t\t\tvar aDay = dtA.getDay();\n\t\t\t\tvar bDay = dtB.getDay();\n\n\t\t\t\tweeks = parseInt(days\/7);\n\t\t\t\tmod = days % 7;\n\t\t\t\t\/\/ Mark the date advanced by the number of\n\t\t\t\t\/\/ round weeks (may be zero)\n\t\t\t\tvar dtMark = new Date(dtA);\n\t\t\t\tdtMark.setDate(dtMark.getDate()+(weeks*7));\n\t\t\t\tvar dayMark = dtMark.getDay();\n\t\t\t\t\/\/ Spare change days -- 6 or less\n\t\t\t\t\/\/ ----------\n\t\t\t\t\/\/ Positive diff\n\t\t\t\tif (dayDiff > 0) {\n\t\t\t\t\tswitch (true) {\n\t\t\t\t\t\t\/\/ Range starts on Sat\n\t\t\t\t\t\tcase aDay == 6:\n\t\t\t\t\t\t\tadj = -1;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\/\/ Range starts on Sun\n\t\t\t\t\t\tcase aDay == 0:\n\t\t\t\t\t\t\tadj = 0;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\/\/ Range ends on Sat\n\t\t\t\t\t\tcase bDay == 6:\n\t\t\t\t\t\t\tadj = -1;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\/\/ Range ends on Sun\n\t\t\t\t\t\tcase bDay == 0:\n\t\t\t\t\t\t\tadj = -2;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\/\/ Range contains weekend\n\t\t\t\t\t\tcase (dayMark + mod) > 5:\n\t\t\t\t\t\t\tadj = -2;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\/\/ Do nothing\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\/\/ Negative diff\n\t\t\t\telse if (dayDiff < 0) {\n\t\t\t\t\tswitch (true) {\n\t\t\t\t\t\t\/\/ Range starts on Sat\n\t\t\t\t\t\tcase aDay == 6:\n\t\t\t\t\t\t\tadj = 0;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\/\/ Range starts on Sun\n\t\t\t\t\t\tcase aDay == 0:\n\t\t\t\t\t\t\tadj = 1;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\/\/ Range ends on Sat\n\t\t\t\t\t\tcase bDay == 6:\n\t\t\t\t\t\t\tadj = 2;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\/\/ Range ends on Sun\n\t\t\t\t\t\tcase bDay == 0:\n\t\t\t\t\t\t\tadj = 1;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\/\/ Range contains weekend\n\t\t\t\t\t\tcase (dayMark + mod) < 0:\n\t\t\t\t\t\t\tadj = 2;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\/\/ Do nothing\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdays += adj;\n\t\t\t\tdays -= (weeks*2);\n\t\t\t}\n\t\t\tret = days;\n\t\t\t\n\t\t\tbreak;\n\t\tcase dojo.date.dateParts.HOUR:\n\t\t\tret = houDiff;\n\t\t\tbreak;\n\t\tcase dojo.date.dateParts.MINUTE:\n\t\t\tret = minDiff;\n\t\t\tbreak;\n\t\tcase dojo.date.dateParts.SECOND:\n\t\t\tret = secDiff;\n\t\t\tbreak;\n\t\tcase dojo.date.dateParts.MILLISECOND:\n\t\t\tret = msDiff;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t\/\/ Do nothing\n\t\t\tbreak;\n\t}\n\n\t\/\/ Round for fractional values and DST leaps\n\treturn Math.round(ret); \/\/ Number (integer)","returns":"Number (integer)"}}}}}},"dojo.date.format":{"meta":{"requires":{"common":["dojo.experimental","dojo.date.common","dojo.lang.array","dojo.lang.common","dojo.lang.func","dojo.string.common","dojo.i18n.common"]},"functions":{"dojo.date.format":{"_":{"meta":{"summary":" Format a Date object as a String, using locale-specific settings.","parameters":{"dateObject":{"type":"Date"},"options":{"type":"Object?"}},"description":" Create a string from a Date object using a known localized pattern. By default, this method formats both date and time from dateObject. Formatting patterns are chosen appropriate to the locale.  Different formatting lengths may be chosen, with \"full\" used by default. Custom patterns may be used or registered with translations using the addCustomBundle method. Formatting patterns are implemented using the syntax described at http:\/\/www.unicode.org\/reports\/tr35\/tr35-4.html#Date_Format_Patterns","src":"\t\tdojo.deprecated(\"dojo.date.format\", \"To format dates with POSIX-style strings, please use dojo.date.strftime instead\", \"0.5\");\n\t\treturn dojo.date.strftime(dateObject, options);\n\t}\n\n\t\/\/ Format a pattern without literals\n\tfunction formatPattern(dateObject, pattern) {\n\t\treturn pattern.replace(\/[a-zA-Z]+\/g, function(match){\n\t\t\tvar s;\n\t\t\tvar c = match.charAt(0);\n\t\t\tvar l = match.length;\n\t\t\tvar pad;\n\t\t\tvar widthList = [\"abbr\", \"wide\", \"narrow\"];\n\t\t\tswitch(c){\n\t\t\t\tcase 'G':\n\t\t\t\t\tif(l>3){dojo.unimplemented(\"Era format not implemented\");}\n\t\t\t\t\ts = info.eras[dateObject.getFullYear() < 0 ? 1 : 0];\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'y':\n\t\t\t\t\ts = dateObject.getFullYear();\n\t\t\t\t\tswitch(l){\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\ts = String(s).substr(-2);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tpad = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Q':\n\t\t\t\tcase 'q':\n\t\t\t\t\ts = Math.ceil((dateObject.getMonth()+1)\/3);\n\t\t\t\t\tswitch(l){\n\t\t\t\t\t\tcase 1: case 2:\n\t\t\t\t\t\t\tpad = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\tdojo.unimplemented(\"Quarter format not implemented\");\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'M':\n\t\t\t\tcase 'L':\n\t\t\t\t\tvar m = dateObject.getMonth();\n\t\t\t\t\tvar width;\n\t\t\t\t\tswitch(l){\n\t\t\t\t\t\tcase 1: case 2:\n\t\t\t\t\t\t\ts = m+1; pad = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 3: case 4: case 5:\n\t\t\t\t\t\t\twidth = widthList[l-3];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif(width){\n\t\t\t\t\t\tvar type = (c == \"L\") ? \"standalone\" : \"format\";\n\t\t\t\t\t\tvar prop = [\"months\",type,width].join(\"-\");\n\t\t\t\t\t\ts = info[prop][m];\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'w':\n\t\t\t\t\tvar firstDay = 0;\n\t\t\t\t\ts = dojo.date.getWeekOfYear(dateObject, firstDay); pad = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'd':\n\t\t\t\t\ts = dateObject.getDate(); pad = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'D':\n\t\t\t\t\ts = dojo.date.getDayOfYear(dateObject); pad = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'E':\n\t\t\t\tcase 'e':\n\t\t\t\tcase 'c': \/\/ REVIEW: don't see this in the spec?\n\t\t\t\t\tvar d = dateObject.getDay();\n\t\t\t\t\tvar width;\n\t\t\t\t\tswitch(l){\n\t\t\t\t\t\tcase 1: case 2:\n\t\t\t\t\t\t\tif(c == 'e'){\n\t\t\t\t\t\t\t\tvar first = dojo.date.getFirstDayOfWeek(options.locale);\n\t\t\t\t\t\t\t\td = (d-first+7)%7;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(c != 'c'){\n\t\t\t\t\t\t\t\ts = d+1; pad = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\/\/ else fallthrough...\n\t\t\t\t\t\tcase 3: case 4: case 5:\n\t\t\t\t\t\t\twidth = widthList[l-3];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif(width){\n\t\t\t\t\t\tvar type = (c == \"c\") ? \"standalone\" : \"format\";\n\t\t\t\t\t\tvar prop = [\"days\",type,width].join(\"-\");\n\t\t\t\t\t\ts = info[prop][d];\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'a':\n\t\t\t\t\tvar timePeriod = (dateObject.getHours() < 12) ? 'am' : 'pm';\n\t\t\t\t\ts = info[timePeriod];\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'h':\n\t\t\t\tcase 'H':\n\t\t\t\tcase 'K':\n\t\t\t\tcase 'k':\n\t\t\t\t\tvar h = dateObject.getHours();\n\t\t\t\t\t\/\/ strange choices in the date format make it impossible to write this succinctly\n\t\t\t\t\tswitch (c) {\n\t\t\t\t\t\tcase 'h': \/\/ 1-12\n\t\t\t\t\t\t\ts = (h % 12) || 12;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'H': \/\/ 0-23\n\t\t\t\t\t\t\ts = h;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'K': \/\/ 0-11\n\t\t\t\t\t\t\ts = (h % 12);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'k': \/\/ 1-24\n\t\t\t\t\t\t\ts = h || 24;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tpad = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'm':\n\t\t\t\t\ts = dateObject.getMinutes(); pad = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 's':\n\t\t\t\t\ts = dateObject.getSeconds(); pad = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'S':\n\t\t\t\t\ts = Math.round(dateObject.getMilliseconds() * Math.pow(10, l-3));\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Z':\n\t\t\t\t\tvar offset = dateObject.getTimezoneOffset();\n\t\t\t\t\tvar tz = [\n\t\t\t\t\t\t(offset<=0 ? \"+\" : \"-\"),\n\t\t\t\t\t\tdojo.string.pad(Math.floor(Math.abs(offset)\/60), 2),\n\t\t\t\t\t\tdojo.string.pad(Math.abs(offset)% 60, 2)\n\t\t\t\t\t];\n\t\t\t\t\tif(l==4){\n\t\t\t\t\t\ttz.splice(0, 0, \"GMT\");\n\t\t\t\t\t\ttz.splice(3, 0, \":\");\n\t\t\t\t\t}\n\t\t\t\t\ts = tz.join(\"\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Y':\n\t\t\t\tcase 'u':\n\t\t\t\tcase 'W':\n\t\t\t\tcase 'F':\n\t\t\t\tcase 'g':\n\t\t\t\tcase 'A':\n\t\t\t\tcase 'v':\n\t\t\t\tcase 'z':\n\t\t\t\t\tdojo.debug(match+\" modifier not yet implemented\");\n\t\t\t\t\ts = \"?\";\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tdojo.raise(\"invalid format: \"+pattern);\n\t\t\t}\n\t\t\tif(pad){ s = dojo.string.pad(s, l); }\n\t\t\treturn s;\n\t\t});\n\t}\n\n\toptions = options || {};\n\n\tvar locale = dojo.normalizeLocale(options.locale);\n\tvar formatLength = options.formatLength || 'full';\n\tvar info = dojo.date._getGregorianBundle(locale);\n\tvar str = [];\n\tvar sauce = dojo.lang.curry(this, formatPattern, dateObject);\n\tif (options.selector != \"timeOnly\") {\n\t\tvar datePattern = options.datePattern || info[\"dateFormat-\"+formatLength];\n\t\tif(datePattern){str.push(_processPattern(datePattern, sauce));}\n\t}\n\tif (options.selector != \"dateOnly\") {\n\t\tvar timePattern = options.timePattern || info[\"timeFormat-\"+formatLength];\n\t\tif(timePattern){str.push(_processPattern(timePattern, sauce));}\n\t}\n\tvar result = str.join(\" \"); \/\/TODO: use locale-specific pattern to assemble date + time\n\treturn result; \/*String*\/","returns":"String*\/"}}},"dojo.date.parse":{"_":{"meta":{"summary":" Convert a properly formatted string to a primitive Date object, using locale-specific settings.","parameters":{"value":{"type":"String"},"options":{"type":"Object?"}},"description":" Create a Date object from a string using a known localized pattern. By default, this method parses looking for both date and time in the string. Formatting patterns are chosen appropriate to the locale.  Different formatting lengths may be chosen, with \"full\" used by default. Custom patterns may be used or registered with translations using the addCustomBundle method. Formatting patterns are implemented using the syntax described at http:\/\/www.unicode.org\/reports\/tr35\/#Date_Format_Patterns","src":"\t\/\/TODO: this is still quite rough - it only implements a small portion of the parsing algorithm needed,\n\t\/\/ and doesn't provide much flexibility in matching.\n\tvar locale = dojo.normalizeLocale(options.locale);\n\tvar info = dojo.date._getGregorianBundle(locale);\n\tvar formatLength = options.formatLength || 'full';\n\tif (options.selector != 'dateOnly'){ dojo.unimplemented(\"can only parse dates at this time\"); }\n\tvar pattern = options.datePattern || info[\"dateFormat-\"+formatLength];\n\tvar groups = [];\n\n\tvar dateREString = _processPattern(pattern, dojo.lang.curry(this, _buildDateTimeRE, groups));\n\t\/\/TODO: escape special regexp chars\n\t\/\/TODO: make whitespace flexible?\n\tvar dateRE = new RegExp(\"^\" + dateREString + \"$\");\n\n\tvar match = dateRE.exec(value);\n\tvar result = new Date();\n\tresult.setHours(0,0,0,0);\n\tfor(var i=1; i<match.length; i++){\n\t\tvar grp=groups[i-1];\n\t\tvar l=grp.length;\n\t\tvar v=match[i];\n\t\tswitch(grp.charAt(0)){\n\t\t\tcase 'd':\n\t\t\t\tresult.setDate(v);\n\t\t\t\tbreak;\n\t\t\tcase 'M':\n\t\t\t\tresult.setMonth(v-1);\n\t\t\t\tbreak;\n\t\t\tcase 'y':\n\t\t\t\tvar century = Math.floor(result.getFullYear()\/100)*100;\n\t\t\t\tresult.setFullYear(century+Number(v));\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tdojo.unimplemented(\"incomplete parse algorithm\");\n\t\t}\n\t}\n\treturn result \/*Date*\/;","returns":"Date*\/;"}}},"_processPattern":{"_":{"meta":{"summary":"","parameters":{"pattern":{"type":""},"applyPattern":{"type":""},"applyLiteral":{"type":""},"applyAll":{"type":""}},"src":"\tapplyPattern = applyPattern || identity;\n\tapplyLiteral = applyLiteral || identity;\n\tapplyAll = applyAll || identity;\n\n\tvar chunks = pattern.split('\\'');\n\tvar literal = false;\n\tfor(var i=0; i<chunks.length; i++){\n\t\tif(!chunks[i]){chunks[i]='\\'';}\n\t\telse{\n\t\t\tchunks[i]=(literal ? applyLiteral : applyPattern)(chunks[i]);\n\t\t\tliteral = !literal;\n\t\t}\n\t}\n\n\treturn applyAll(chunks.join(\"\"));"}}},"_buildDateTimeRE":{"_":{"meta":{"summary":"","parameters":{"groups":{"type":""},"pattern":{"type":""}},"src":"\treturn pattern.replace(\/[a-zA-Z]+\/g, function(match){\n\t\tvar s;\n\t\tvar c = match.charAt(0);\n\t\tvar l = match.length;\n\t\tswitch(c){\n\t\t\tcase 'y':\n\t\t\t\ts = \"\\\\d\" + ((l==2)?\"{2}\":\"+\");\n\t\t\t\tbreak;\n\t\t\tcase 'M':\n\t\t\t\ts = \"\\\\d{2}\"; \/\/TODO make sure it conforms to month range...\n\t\t\t\tbreak;\n\t\t\tcase 'd':\n\t\t\t\ts = \"\\\\d{2}\"; \/\/TODO\n\t\t\t\tbreak;\n\t\t\tcase 'h': case 'H': case 'K': case 'k':\n\t\t\t\ts = \"\\\\d{2}\"; \/\/TODO\n\t\t\t\tbreak;\n\t\t\tcase 'm':\n\t\t\tcase 's':\n\t\t\t\ts = \"\\\\d{2}\"; \/\/TODO\n\t\t\t\tbreak;\n\t\t\tcase 'S':\n\t\t\t\ts = \"\\\\d+\"; \/\/TODO\n\t\t\t\tbreak;\n\t\t\tcase 'a':\n\t\t\t\ts = info.am + \"|\" + info.pm;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tdojo.unimplemented(\"parse of date format, pattern=\"+pattern);\n\t\t}\n\t\tif(groups){ groups.push(match); }\n\t\treturn \"(\"+s+\")\";\n\t});"}}},"dojo.date.strftime":{"_":{"meta":{"summary":" Formats the date object using the specifications of the POSIX strftime function","parameters":{"dateObject":{"type":"Date"},"format":{"type":"String"},"locale":{"type":"String?"}},"description":" see <http:\/\/www.opengroup.org\/onlinepubs\/007908799\/xsh\/strftime.html> zero pad","src":"\tfunction _(s, n) {\n\t\treturn dojo.string.pad(s, n || 2, padChar || \"0\");\n\t}\n\n\tvar info = dojo.date._getGregorianBundle(locale);\n\n\tfunction $ (property) {\n\t\tswitch (property) {\n\t\t\tcase \"a\": \/\/ abbreviated weekday name according to the current locale\n\t\t\t\treturn dojo.date.getDayShortName(dateObject, locale);\n\n\t\t\tcase \"A\": \/\/ full weekday name according to the current locale\n\t\t\t\treturn dojo.date.getDayName(dateObject, locale);\n\n\t\t\tcase \"b\":\n\t\t\tcase \"h\": \/\/ abbreviated month name according to the current locale\n\t\t\t\treturn dojo.date.getMonthShortName(dateObject, locale);\n\t\t\t\t\n\t\t\tcase \"B\": \/\/ full month name according to the current locale\n\t\t\t\treturn dojo.date.getMonthName(dateObject, locale);\n\t\t\t\t\n\t\t\tcase \"c\": \/\/ preferred date and time representation for the current\n\t\t\t\t      \/\/ locale\n\t\t\t\treturn dojo.date.format(dateObject, {locale: locale});\n\n\t\t\tcase \"C\": \/\/ century number (the year divided by 100 and truncated\n\t\t\t\t      \/\/ to an integer, range 00 to 99)\n\t\t\t\treturn _(Math.floor(dateObject.getFullYear()\/100));\n\t\t\t\t\n\t\t\tcase \"d\": \/\/ day of the month as a decimal number (range 01 to 31)\n\t\t\t\treturn _(dateObject.getDate());\n\t\t\t\t\n\t\t\tcase \"D\": \/\/ same as %m\/%d\/%y\n\t\t\t\treturn $(\"m\") + \"\/\" + $(\"d\") + \"\/\" + $(\"y\");\n\t\t\t\t\t\n\t\t\tcase \"e\": \/\/ day of the month as a decimal number, a single digit is\n\t\t\t\t      \/\/ preceded by a space (range ' 1' to '31')\n\t\t\t\tif (padChar == null) { padChar = \" \"; }\n\t\t\t\treturn _(dateObject.getDate());\n\t\t\t\n\t\t\tcase \"f\": \/\/ month as a decimal number, a single digit is\n\t\t\t\t\t\t\t\/\/ preceded by a space (range ' 1' to '12')\n\t\t\t\tif (padChar == null) { padChar = \" \"; }\n\t\t\t\treturn _(dateObject.getMonth()+1);\t\t\t\t\n\t\t\t\n\t\t\tcase \"g\": \/\/ like %G, but without the century.\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase \"G\": \/\/ The 4-digit year corresponding to the ISO week number\n\t\t\t\t      \/\/ (see %V).  This has the same format and value as %Y,\n\t\t\t\t      \/\/ except that if the ISO week number belongs to the\n\t\t\t\t      \/\/ previous or next year, that year is used instead.\n\t\t\t\tdojo.unimplemented(\"unimplemented modifier 'G'\");\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase \"F\": \/\/ same as %Y-%m-%d\n\t\t\t\treturn $(\"Y\") + \"-\" + $(\"m\") + \"-\" + $(\"d\");\n\t\t\t\t\n\t\t\tcase \"H\": \/\/ hour as a decimal number using a 24-hour clock (range\n\t\t\t\t      \/\/ 00 to 23)\n\t\t\t\treturn _(dateObject.getHours());\n\t\t\t\t\n\t\t\tcase \"I\": \/\/ hour as a decimal number using a 12-hour clock (range\n\t\t\t\t      \/\/ 01 to 12)\n\t\t\t\treturn _(dateObject.getHours() % 12 || 12);\n\t\t\t\t\n\t\t\tcase \"j\": \/\/ day of the year as a decimal number (range 001 to 366)\n\t\t\t\treturn _(dojo.date.getDayOfYear(dateObject), 3);\n\t\t\t\t\n\t\t\tcase \"k\": \/\/ Hour as a decimal number using a 24-hour clock (range\n\t\t\t\t\t  \/\/ 0 to 23 (space-padded))\n\t\t\t\tif (padChar == null) { padChar = \" \" };\n\t\t\t\treturn _(dateObject.getHours());\n\n\t\t\tcase \"l\": \/\/ Hour as a decimal number using a 12-hour clock (range\n\t\t\t\t\t  \/\/ 1 to 12 (space-padded))\n\t\t\t\tif (padChar == null) { padChar = \" \" };\n\t\t\t\treturn _(dateObject.getHours() % 12 || 12);\n\t\t\t\n\t\t\tcase \"m\": \/\/ month as a decimal number (range 01 to 12)\n\t\t\t\treturn _(dateObject.getMonth() + 1);\n\t\t\t\t\n\t\t\tcase \"M\": \/\/ minute as a decimal number\n\t\t\t\treturn _(dateObject.getMinutes());\n\t\t\t\n\t\t\tcase \"n\":\n\t\t\t\treturn \"\\n\";\n\n\t\t\tcase \"p\": \/\/ either `am' or `pm' according to the given time value,\n\t\t\t\t      \/\/ or the corresponding strings for the current locale\n\t\t\t\treturn info[dateObject.getHours() < 12 ? \"am\" : \"pm\"];\n\t\t\t\t\n\t\t\tcase \"r\": \/\/ time in a.m. and p.m. notation\n\t\t\t\treturn $(\"I\") + \":\" + $(\"M\") + \":\" + $(\"S\") + \" \" + $(\"p\");\n\t\t\t\t\n\t\t\tcase \"R\": \/\/ time in 24 hour notation\n\t\t\t\treturn $(\"H\") + \":\" + $(\"M\");\n\t\t\t\t\n\t\t\tcase \"S\": \/\/ second as a decimal number\n\t\t\t\treturn _(dateObject.getSeconds());\n\n\t\t\tcase \"t\":\n\t\t\t\treturn \"\\t\";\n\n\t\t\tcase \"T\": \/\/ current time, equal to %H:%M:%S\n\t\t\t\treturn $(\"H\") + \":\" + $(\"M\") + \":\" + $(\"S\");\n\t\t\t\t\n\t\t\tcase \"u\": \/\/ weekday as a decimal number [1,7], with 1 representing\n\t\t\t\t      \/\/ Monday\n\t\t\t\treturn String(dateObject.getDay() || 7);\n\t\t\t\t\n\t\t\tcase \"U\": \/\/ week number of the current year as a decimal number,\n\t\t\t\t      \/\/ starting with the first Sunday as the first day of the\n\t\t\t\t      \/\/ first week\n\t\t\t\treturn _(dojo.date.getWeekOfYear(dateObject));\n\n\t\t\tcase \"V\": \/\/ week number of the year (Monday as the first day of the\n\t\t\t\t      \/\/ week) as a decimal number [01,53]. If the week containing\n\t\t\t\t      \/\/ 1 January has four or more days in the new year, then it \n\t\t\t\t      \/\/ is considered week 1. Otherwise, it is the last week of \n\t\t\t\t      \/\/ the previous year, and the next week is week 1.\n\t\t\t\treturn _(dojo.date.getIsoWeekOfYear(dateObject));\n\t\t\t\t\n\t\t\tcase \"W\": \/\/ week number of the current year as a decimal number,\n\t\t\t\t      \/\/ starting with the first Monday as the first day of the\n\t\t\t\t      \/\/ first week\n\t\t\t\treturn _(dojo.date.getWeekOfYear(dateObject, 1));\n\t\t\t\t\n\t\t\tcase \"w\": \/\/ day of the week as a decimal, Sunday being 0\n\t\t\t\treturn String(dateObject.getDay());\n\n\t\t\tcase \"x\": \/\/ preferred date representation for the current locale\n\t\t\t\t      \/\/ without the time\n\t\t\t\treturn dojo.date.format(dateObject, {selector:'dateOnly', locale:locale});\n\n\t\t\tcase \"X\": \/\/ preferred time representation for the current locale\n\t\t\t\t      \/\/ without the date\n\t\t\t\treturn dojo.date.format(dateObject, {selector:'timeOnly', locale:locale});\n\n\t\t\tcase \"y\": \/\/ year as a decimal number without a century (range 00 to\n\t\t\t\t      \/\/ 99)\n\t\t\t\treturn _(dateObject.getFullYear()%100);\n\t\t\t\t\n\t\t\tcase \"Y\": \/\/ year as a decimal number including the century\n\t\t\t\treturn String(dateObject.getFullYear());\n\t\t\t\n\t\t\tcase \"z\": \/\/ time zone or name or abbreviation\n\t\t\t\tvar timezoneOffset = dateObject.getTimezoneOffset();\n\t\t\t\treturn (timezoneOffset > 0 ? \"-\" : \"+\") + \n\t\t\t\t\t_(Math.floor(Math.abs(timezoneOffset)\/60)) + \":\" +\n\t\t\t\t\t_(Math.abs(timezoneOffset)%60);\n\n\t\t\tcase \"Z\": \/\/ time zone or name or abbreviation\n\t\t\t\treturn dojo.date.getTimezoneName(dateObject); \/\/TODO\n\t\t\t\n\t\t\tcase \"%\":\n\t\t\t\treturn \"%\";\n\t\t}\n\t}\n\n\t\/\/ parse the formatting string and construct the resulting string\n\tvar string = \"\";\n\tvar i = 0;\n\tvar index = 0;\n\tvar switchCase = null;\n\twhile ((index = format.indexOf(\"%\", i)) != -1) {\n\t\tstring += format.substring(i, index++);\n\t\t\n\t\t\/\/ inspect modifier flag\n\t\tswitch (format.charAt(index++)) {\n\t\t\tcase \"_\": \/\/ Pad a numeric result string with spaces.\n\t\t\t\tpadChar = \" \"; break;\n\t\t\tcase \"-\": \/\/ Do not pad a numeric result string.\n\t\t\t\tpadChar = \"\"; break;\n\t\t\tcase \"0\": \/\/ Pad a numeric result string with zeros.\n\t\t\t\tpadChar = \"0\"; break;\n\t\t\tcase \"^\": \/\/ Convert characters in result string to uppercase.\n\t\t\t\tswitchCase = \"upper\"; break;\n\t\t\tcase \"*\": \/\/ Convert characters in result string to lowercase\n\t\t\t\tswitchCase = \"lower\"; break;\n\t\t\tcase \"#\": \/\/ Swap the case of the result string.\n\t\t\t\tswitchCase = \"swap\"; break;\n\t\t\tdefault: \/\/ no modifier flag so decrement the index\n\t\t\t\tpadChar = null; index--; break;\n\t\t}\n\n\t\t\/\/ toggle case if a flag is set\n\t\tvar property = $(format.charAt(index++));\n\t\tswitch (switchCase) {\n\t\t\tcase \"upper\":\n\t\t\tproperty = property.toUpperCase();\n\t\t\t\tbreak;\n\t\t\tcase \"lower\":\n\t\t\tproperty = property.toLowerCase();\n\t\t\t\tbreak;\n\t\t\tcase \"swap\": \/\/ Upper to lower, and versey-vicea\n\t\t\t\tvar compareString = property.toLowerCase();\n\t\t\t\tvar swapString = '';\n\t\t\t\tvar j = 0;\n\t\t\t\tvar ch = '';\n\t\t\t\twhile (j < property.length) {\n\t\t\t\t\tch = property.charAt(j);\n\t\t\t\t\tswapString += (ch == compareString.charAt(j)) ?\n\t\t\t\t\t\tch.toUpperCase() : ch.toLowerCase();\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t\tproperty = swapString;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t\tswitchCase = null;\n\t\t\n\t\tstring += property;\n\t\ti = index;\n\t}\n\tstring += format.substring(i);\n\t\n\treturn string;","returns":"TODO"}}},"dojo.date.addCustomFormats":{"_":{"meta":{"summary":" Add a reference to a bundle containing localized custom formats to be used by date\/time formatting and parsing routines.","parameters":{"packageName":{"type":""},"bundleName":{"type":""}},"description":" The user may add custom localized formats where the bundle has properties following the same naming convention used by dojo for the CLDR data: dateFormat-xxxx \/ timeFormat-xxxx The pattern string should match the format used by the CLDR. See dojo.date.format for details. The resources must be loaded by dojo.requireLocalization() prior to use","src":""}}},"dojo.date._getGregorianBundle":{"_":{"meta":{"summary":"","parameters":{"locale":{"type":""}},"src":"\tvar gregorian = {};\n\tdojo.lang.forEach(_customFormats, function(desc){\n\t\tvar bundle = dojo.i18n.getLocalization(desc.pkg, desc.name, locale);\n\t\tgregorian = dojo.lang.mixin(gregorian, bundle);\n\t}, this);\n\treturn gregorian;"}}},"dojo.date.getNames":{"_":{"meta":{"summary":" Used to get localized strings for day or month names.","parameters":{"item":{"type":"String"},"type":{"type":"String"},"use":{"type":"String?"},"locale":{"type":"String?"}},"src":"\tvar lookup = dojo.date._getGregorianBundle(locale);\n\tvar props = [item, use, type];\n\tif (use == 'standAlone') {\n\t\tlabel = lookup[props.join('-')];\n\t}\n\tprops[1] = 'format';\n\treturn label || lookup[props.join('-')]; \/*Array*\/","returns":"Array*\/"}}},"dojo.date.getDayName":{"_":{"meta":{"summary":"","parameters":{"dateObject":{"type":"Date"},"locale":{"type":"String?"}},"src":"\treturn dojo.date.getNames('days', 'wide', 'format', locale)[dateObject.getDay()];           ","returns":"String*\/"}}},"dojo.date.getDayShortName":{"_":{"meta":{"summary":"","parameters":{"dateObject":{"type":"Date"},"locale":{"type":"String?"}},"src":"\treturn dojo.date.getNames('days', 'abbr', 'format', locale)[dateObject.getDay()];           ","returns":"String*\/"}}},"dojo.date.getMonthName":{"_":{"meta":{"summary":"","parameters":{"dateObject":{"type":"Date"},"locale":{"type":"String?"}},"src":"\treturn dojo.date.getNames('months', 'wide', 'format', locale)[dateObject.getMonth()];           ","returns":"String*\/"}}},"dojo.date.getMonthShortName":{"_":{"meta":{"summary":"","parameters":{"dateObject":{"type":"Date"},"locale":{"type":"String?"}},"src":"\treturn dojo.date.getNames('months', 'abbr', 'format', locale)[dateObject.getMonth()];           ","returns":"String*\/"}}},"dojo.date.getFirstDayOfWeek":{"_":{"meta":{"summary":" Returns a zero-based index for first day of the week, as used by the local (Gregorian) calendar. e.g. Sunday (returns 0), or Monday (returns 1) from http:\/\/www.unicode.org\/cldr\/data\/common\/supplemental\/supplementalData.xml:supplementalData\/weekData\/firstDay default is 1","parameters":{"locale":{"type":"String?"}},"src":"\t\tmv:5,\n\t\tae:6,af:6,bh:6,dj:6,dz:6,eg:6,er:6,et:6,iq:6,ir:6,jo:6,ke:6,kw:6,lb:6,ly:6,ma:6,om:6,qa:6,sa:6,\n\t\tsd:6,so:6,tn:6,ye:6,\n\t\tas:0,au:0,az:0,bw:0,ca:0,cn:0,fo:0,ge:0,gl:0,gu:0,hk:0,ie:0,il:0,is:0,jm:0,jp:0,kg:0,kr:0,la:0,\n\t\tmh:0,mo:0,mp:0,mt:0,nz:0,ph:0,pk:0,sg:0,th:0,tt:0,tw:0,um:0,us:0,uz:0,vi:0,za:0,zw:0,\n\t\tet:0,mw:0,ng:0,tj:0,\n\t\tgb:0,\n\t\tsy:4\n\t};\n\n\tlocale = dojo.normalizeLocale(locale);\n\tvar country = locale.split(\"-\")[1];\n\tvar dow = firstDay[country];\n\treturn (typeof dow == 'undefined') ? 1 : dow;"}}},"dojo.date.toRelativeString":{"_":{"meta":{"summary":"","parameters":{"date":{"type":""}},"src":"\tvar now = new Date();\n\tvar diff = (now - date) \/ 1000;\n\tvar end = \" ago\";\n\tvar future = false;\n\tif(diff < 0) {\n\t\tfuture = true;\n\t\tend = \" from now\";\n\t\tdiff = -diff;\n\t}\n\n\tif(diff < 60) {\n\t\tdiff = Math.round(diff);\n\t\treturn diff + \" second\" + (diff == 1 ? \"\" : \"s\") + end;\n\t}\n\tif(diff < 60*60) {\n\t\tdiff = Math.round(diff\/60);\n\t\treturn diff + \" minute\" + (diff == 1 ? \"\" : \"s\") + end;\n\t}\n\tif(diff < 60*60*24) {\n\t\tdiff = Math.round(diff\/3600);\n\t\treturn diff + \" hour\" + (diff == 1 ? \"\" : \"s\") + end;\n\t}\n\tif(diff < 60*60*24*7) {\n\t\tdiff = Math.round(diff\/(3600*24));\n\t\tif(diff == 1) {\n\t\t\treturn future ? \"Tomorrow\" : \"Yesterday\";\n\t\t} else {\n\t\t\treturn diff + \" days\" + end;\n\t\t}\n\t}\n\treturn dojo.date.toShortDateString(date);"}}},"dojo.date.toSql":{"_":{"meta":{"summary":"","parameters":{"date":{"type":""},"noTime":{"type":""}},"src":"\treturn dojo.date.strftime(date, \"%F\" + !noTime ? \" %T\" : \"\");"}}},"dojo.date.fromSql":{"_":{"meta":{"summary":"","parameters":{"sqlDate":{"type":""}},"src":"\tvar parts = sqlDate.split(\/[\\- :]\/g);\n\twhile(parts.length < 6) {\n\t\tparts.push(0);\n\t}\n\treturn new Date(parts[0], (parseInt(parts[1],10)-1), parts[2], parts[3], parts[4], parts[5]);"}}}}}},"dojo.date.serialize":{"meta":{"requires":{"common":["dojo.string.common"]},"functions":{"dojo.date.setIso8601":{"_":{"meta":{"summary":"","parameters":{"dateObject":{"type":""},"formattedString":{"type":""}},"src":"\tvar comps = (formattedString.indexOf(\"T\") == -1) ? formattedString.split(\" \") : formattedString.split(\"T\");\n\tdateObject = dojo.date.setIso8601Date(dateObject, comps[0]);\n\tif (comps.length == 2) { dateObject = dojo.date.setIso8601Time(dateObject, comps[1]); }\n\treturn dateObject; \/* Date or null *\/","returns":"Date or null *\/"}}},"dojo.date.fromIso8601":{"_":{"meta":{"summary":"","parameters":{"formattedString":{"type":""}},"src":"\treturn dojo.date.setIso8601(new Date(0, 0), formattedString);"}}},"dojo.date.setIso8601Date":{"_":{"meta":{"summary":"","parameters":{"dateObject":{"type":""},"formattedString":{"type":""}},"src":"\tvar regexp = \"^([0-9]{4})((-?([0-9]{2})(-?([0-9]{2}))?)|\" +\n\t\t\t\"(-?([0-9]{3}))|(-?W([0-9]{2})(-?([1-7]))?))?$\";\n\tvar d = formattedString.match(new RegExp(regexp));\n\tif(!d) {\n\t\tdojo.debug(\"invalid date string: \" + formattedString);\n\t\treturn null;\n\t}\n\tvar year = d[1];\n\tvar month = d[4];\n\tvar date = d[6];\n\tvar dayofyear = d[8];\n\tvar week = d[10];\n\tvar dayofweek = (d[12]) ? d[12] : 1;\n\n\tdateObject.setFullYear(year);\n\t\n\tif (dayofyear) { \n\t\tdateObject.setMonth(0);\n\t\tdateObject.setDate(Number(dayofyear));\n\t}\n\telse if (week) {\n\t\tdateObject.setMonth(0);\n\t\tdateObject.setDate(1);\n\t\tvar gd = dateObject.getDay();\n\t\tvar day =  (gd) ? gd : 7;\n\t\tvar offset = Number(dayofweek) + (7 * Number(week));\n\t\t\n\t\tif (day <= 4) { dateObject.setDate(offset + 1 - day); }\n\t\telse { dateObject.setDate(offset + 8 - day); }\n\t} else {\n\t\tif (month) { \n\t\t\tdateObject.setDate(1);\n\t\t\tdateObject.setMonth(month - 1); \n\t\t}\n\t\tif (date) { dateObject.setDate(date); }\n\t}\n\t\n\treturn dateObject;"}}},"dojo.date.fromIso8601Date":{"_":{"meta":{"summary":"","parameters":{"formattedString":{"type":""}},"src":"\treturn dojo.date.setIso8601Date(new Date(0, 0), formattedString);"}}},"dojo.date.setIso8601Time":{"_":{"meta":{"summary":"","parameters":{"dateObject":{"type":""},"formattedString":{"type":""}},"src":"\tvar d = formattedString.match(new RegExp(timezone));\n\n\tvar offset = 0; \/\/ local time if no tz info\n\tif (d) {\n\t\tif (d[0] != 'Z') {\n\t\t\toffset = (Number(d[3]) * 60) + Number(d[5]);\n\t\t\toffset *= ((d[2] == '-') ? 1 : -1);\n\t\t}\n\t\toffset -= dateObject.getTimezoneOffset();\n\t\tformattedString = formattedString.substr(0, formattedString.length - d[0].length);\n\t}\n\n\t\/\/ then work out the time\n\tvar regexp = \"^([0-9]{2})(:?([0-9]{2})(:?([0-9]{2})(\\.([0-9]+))?)?)?$\";\n\td = formattedString.match(new RegExp(regexp));\n\tif(!d) {\n\t\tdojo.debug(\"invalid time string: \" + formattedString);\n\t\treturn null;\n\t}\n\tvar hours = d[1];\n\tvar mins = Number((d[3]) ? d[3] : 0);\n\tvar secs = (d[5]) ? d[5] : 0;\n\tvar ms = d[7] ? (Number(\"0.\" + d[7]) * 1000) : 0;\n\n\tdateObject.setHours(hours);\n\tdateObject.setMinutes(mins);\n\tdateObject.setSeconds(secs);\n\tdateObject.setMilliseconds(ms);\n\n\tif (offset !== 0) {\n\t\tdateObject.setTime(dateObject.getTime() + offset * 60000);\n\t}\t\n\treturn dateObject;"}}},"dojo.date.fromIso8601Time":{"_":{"meta":{"summary":"","parameters":{"formattedString":{"type":""}},"src":"\treturn dojo.date.setIso8601Time(new Date(0, 0), formattedString);"}}},"dojo.date.toRfc3339":{"_":{"meta":{"summary":" Format a JavaScript Date object as a string according to RFC 3339","parameters":{"dateObject":{"type":"Date?"},"selector":{"type":"String?"}},"src":"\t\tdateObject = new Date();\n\t}\n\n\tvar _ = dojo.string.pad;\n\tvar formattedDate = [];\n\tif (selector != \"timeOnly\"){\n\t\tvar date = [_(dateObject.getFullYear(),4), _(dateObject.getMonth()+1,2), _(dateObject.getDate(),2)].join('-');\n\t\tformattedDate.push(date);\n\t}\n\tif (selector != \"dateOnly\"){\n\t\tvar time = [_(dateObject.getHours(),2), _(dateObject.getMinutes(),2), _(dateObject.getSeconds(),2)].join(':');\n\t\tvar timezoneOffset = dateObject.getTimezoneOffset();\n\t\ttime += (timezoneOffset > 0 ? \"-\" : \"+\") + \n\t\t\t\t\t_(Math.floor(Math.abs(timezoneOffset)\/60),2) + \":\" +\n\t\t\t\t\t_(Math.abs(timezoneOffset)%60,2);\n\t\tformattedDate.push(time);\n\t}\n\treturn formattedDate.join('T'); \/\/ String","returns":"String"}}},"dojo.date.fromRfc3339":{"_":{"meta":{"summary":" Create a JavaScript Date object from a string formatted according to RFC 3339","parameters":{"rfcDate":{"type":"String"}},"src":"\t\trfcDate = rfcDate.replace(\"Tany\",\"\");\n\t}\n\tvar dateObject = new Date();\n\treturn dojo.date.setIso8601(dateObject, rfcDate); \/\/ Date or null","returns":"Date or null"}}}}}}}