{"dojo.collections.ArrayList":{"meta":{"requires":{"common":["dojo.collections.Collections"]},"functions":{"dojo.collections.ArrayList":{"_":{"meta":{"summary":" Returns a new object of type dojo.collections.ArrayList","parameters":{"arr":{"type":"array?"}},"src":"\tif(arr) items=items.concat(arr);\n\tthis.count=items.length;\n\tthis.add=function(\/* object *\/obj){\n\t\t\/\/\tsummary\n\t\t\/\/\tAdd an element to the collection.\n\t\titems.push(obj);\n\t\tthis.count=items.length;\n\t};\n\tthis.addRange=function(\/* array *\/a){\n\t\t\/\/\tsummary\n\t\t\/\/\tAdd a range of objects to the ArrayList\n\t\tif(a.getIterator){\n\t\t\tvar e=a.getIterator();\n\t\t\twhile(!e.atEnd()){\n\t\t\t\tthis.add(e.get());\n\t\t\t}\n\t\t\tthis.count=items.length;\n\t\t}else{\n\t\t\tfor(var i=0; i<a.length; i++){\n\t\t\t\titems.push(a[i]);\n\t\t\t}\n\t\t\tthis.count=items.length;\n\t\t}\n\t};\n\tthis.clear=function(){\n\t\t\/\/\tsummary\n\t\t\/\/\tClear all elements out of the collection, and reset the count.\n\t\titems.splice(0, items.length);\n\t\tthis.count=0;\n\t};\n\tthis.clone=function(){\n\t\t\/\/\tsummary\n\t\t\/\/\tClone the array list\n\t\treturn new dojo.collections.ArrayList(items);\t\/\/\tdojo.collections.ArrayList\n\t};\n\tthis.contains=function(\/* object *\/obj){\n\t\t\/\/\tsummary\n\t\t\/\/\tCheck to see if the passed object is a member in the ArrayList\n\t\tfor(var i=0; i < items.length; i++){\n\t\t\tif(items[i] == obj) {\n\t\t\t\treturn true;\t\/\/\tbool\n\t\t\t}\n\t\t}\n\t\treturn false;\t\/\/\tbool\n\t};\n\tthis.forEach=function(\/* function *\/ fn, \/* object? *\/ scope){\n\t\t\/\/\tsummary\n\t\t\/\/\tfunctional iterator, following the mozilla spec.\n\t\tvar s=scope||dj_global;\n\t\tif(Array.forEach){\n\t\t\tArray.forEach(items, fn, s);\n\t\t}else{\n\t\t\tfor(var i=0; i<items.length; i++){\n\t\t\t\tfn.call(s, items[i], i, items);\n\t\t\t}\n\t\t}\n\t};\n\tthis.getIterator=function(){\n\t\t\/\/\tsummary\n\t\t\/\/\tGet an Iterator for this object\n\t\treturn new dojo.collections.Iterator(items);\t\/\/\tdojo.collections.Iterator\n\t};\n\tthis.indexOf=function(\/* object *\/obj){\n\t\t\/\/\tsummary\n\t\t\/\/\tReturn the numeric index of the passed object; will return -1 if not found.\n\t\tfor(var i=0; i < items.length; i++){\n\t\t\tif(items[i] == obj) {\n\t\t\t\treturn i;\t\/\/\tint\n\t\t\t}\n\t\t}\n\t\treturn -1;\t\/\/ int\n\t};\n\tthis.insert=function(\/* int *\/ i, \/* object *\/ obj){\n\t\t\/\/\tsummary\n\t\t\/\/\tInsert the passed object at index i\n\t\titems.splice(i,0,obj);\n\t\tthis.count=items.length;\n\t};\n\tthis.item=function(\/* int *\/ i){\n\t\t\/\/\tsummary\n\t\t\/\/\treturn the element at index i\n\t\treturn items[i];\t\/\/\tobject\n\t};\n\tthis.remove=function(\/* object *\/obj){\n\t\t\/\/\tsummary\n\t\t\/\/\tLook for the passed object, and if found, remove it from the internal array.\n\t\tvar i=this.indexOf(obj);\n\t\tif(i >=0) {\n\t\t\titems.splice(i,1);\n\t\t}\n\t\tthis.count=items.length;\n\t};\n\tthis.removeAt=function(\/* int *\/ i){\n\t\t\/\/\tsummary\n\t\t\/\/\treturn an array with function applied to all elements\n\t\titems.splice(i,1);\n\t\tthis.count=items.length;\n\t};\n\tthis.reverse=function(){\n\t\t\/\/\tsummary\n\t\t\/\/\tReverse the internal array\n\t\titems.reverse();\n\t};\n\tthis.sort=function(\/* function? *\/ fn){\n\t\t\/\/\tsummary\n\t\t\/\/\tsort the internal array\n\t\tif(fn){\n\t\t\titems.sort(fn);\n\t\t}else{\n\t\t\titems.sort();\n\t\t}\n\t};\n\tthis.setByIndex=function(\/* int *\/ i, \/* object *\/ obj){\n\t\t\/\/\tsummary\n\t\t\/\/\tSet an element in the array by the passed index.\n\t\titems[i]=obj;\n\t\tthis.count=items.length;\n\t};\n\tthis.toArray=function(){\n\t\t\/\/\tsummary\n\t\t\/\/\tReturn a new array with all of the items of the internal array concatenated.\n\t\treturn [].concat(items);\n\t}\n\tthis.toString=function(\/* string *\/ delim){\n\t\t\/\/\tsummary\n\t\t\/\/\timplementation of toString, follows [].toString();\n\t\treturn items.join((delim||\",\"));\n\t};","this_variables":["count","add","addRange","clear","clone","contains","forEach","getIterator","indexOf","insert","item","remove","removeAt","reverse","sort","setByIndex","toArray","toString"],"returns":"mixed"}}},"dojo.collections.ArrayList.add":{"_":{"meta":{"summary":" Add an element to the collection.","parameters":{"obj":{"type":"object"}},"src":"\t\tthis.count=items.length;","this_variables":["count"]}}},"dojo.collections.ArrayList.addRange":{"_":{"meta":{"summary":" Add a range of objects to the ArrayList","parameters":{"a":{"type":"array"}},"src":"\t\t\tvar e=a.getIterator();\n\t\t\twhile(!e.atEnd()){\n\t\t\t\tthis.add(e.get());\n\t\t\t}\n\t\t\tthis.count=items.length;\n\t\t}else{\n\t\t\tfor(var i=0; i<a.length; i++){\n\t\t\t\titems.push(a[i]);\n\t\t\t}\n\t\t\tthis.count=items.length;\n\t\t}","this_variables":["count"]}}},"dojo.collections.ArrayList.clear":{"_":{"meta":{"summary":" Clear all elements out of the collection, and reset the count.","src":"\t\tthis.count=0;","this_variables":["count"]}}},"dojo.collections.ArrayList.clone":{"_":{"meta":{"summary":" Clone the array list dojo.collections.ArrayList","src":"","returns":"dojo.collections.ArrayList"}}},"dojo.collections.ArrayList.contains":{"_":{"meta":{"summary":" Check to see if the passed object is a member in the ArrayList","parameters":{"obj":{"type":"object"}},"src":"\t\t\tif(items[i] == obj) {\n\t\t\t\treturn true;\t\/\/\tbool\n\t\t\t}\n\t\t}\n\t\treturn false;\t\/\/\tbool","returns":"bool"}}},"dojo.collections.ArrayList.forEach":{"_":{"meta":{"summary":" functional iterator, following the mozilla spec.","parameters":{"fn":{"type":"function"},"scope":{"type":"object?"}},"src":"\t\tif(Array.forEach){\n\t\t\tArray.forEach(items, fn, s);\n\t\t}else{\n\t\t\tfor(var i=0; i<items.length; i++){\n\t\t\t\tfn.call(s, items[i], i, items);\n\t\t\t}\n\t\t}"}}},"dojo.collections.ArrayList.getIterator":{"_":{"meta":{"summary":" Get an Iterator for this object dojo.collections.Iterator","src":"","returns":"dojo.collections.Iterator"}}},"dojo.collections.ArrayList.indexOf":{"_":{"meta":{"summary":" Return the numeric index of the passed object; will return -1 if not found.","parameters":{"obj":{"type":"object"}},"src":"\t\t\tif(items[i] == obj) {\n\t\t\t\treturn i;\t\/\/\tint\n\t\t\t}\n\t\t}\n\t\treturn -1;\t\/\/ int","returns":"int"}}},"dojo.collections.ArrayList.insert":{"_":{"meta":{"summary":" Insert the passed object at index i","parameters":{"i":{"type":"int"},"obj":{"type":"object"}},"src":"\t\tthis.count=items.length;","this_variables":["count"]}}},"dojo.collections.ArrayList.item":{"_":{"meta":{"summary":" return the element at index i object","parameters":{"i":{"type":"int"}},"src":"","returns":"object"}}},"dojo.collections.ArrayList.remove":{"_":{"meta":{"summary":" Look for the passed object, and if found, remove it from the internal array.","parameters":{"obj":{"type":"object"}},"src":"\t\tif(i >=0) {\n\t\t\titems.splice(i,1);\n\t\t}\n\t\tthis.count=items.length;","this_variables":["count"]}}},"dojo.collections.ArrayList.removeAt":{"_":{"meta":{"summary":" return an array with function applied to all elements","parameters":{"i":{"type":"int"}},"src":"\t\tthis.count=items.length;","this_variables":["count"]}}},"dojo.collections.ArrayList.reverse":{"_":{"meta":{"summary":" Reverse the internal array","src":""}}},"dojo.collections.ArrayList.sort":{"_":{"meta":{"summary":" sort the internal array","parameters":{"fn":{"type":"function?"}},"src":"\t\t\titems.sort(fn);\n\t\t}else{\n\t\t\titems.sort();\n\t\t}"}}},"dojo.collections.ArrayList.setByIndex":{"_":{"meta":{"summary":" Set an element in the array by the passed index.","parameters":{"i":{"type":"int"},"obj":{"type":"object"}},"src":"\t\tthis.count=items.length;","this_variables":["count"]}}},"dojo.collections.ArrayList.toArray":{"_":{"meta":{"summary":" Return a new array with all of the items of the internal array concatenated.","src":""}}},"dojo.collections.ArrayList.toString":{"_":{"meta":{"summary":" implementation of toString, follows [].toString();","parameters":{"delim":{"type":"string"}},"src":""}}}}}},"dojo.collections.BinaryTree":{"meta":{"requires":{"common":["dojo.collections.Collections","dojo.experimental"]},"functions":{"dojo.collections.BinaryTree":{"_":{"meta":{"summary":"","parameters":{"data":{"type":""}},"src":"\tfunction node(data, rnode, lnode){\n\t\tthis.value=data||null;\n\t\tthis.right=rnode||null;\n\t\tthis.left=lnode||null;\n\t\tthis.clone=function(){\n\t\t\tvar c=new node();\n\t\t\tif (this.value.value) c.value=this.value.clone();\n\t\t\telse c.value=this.value;\n\t\t\tif (this.left) c.left=this.left.clone();\n\t\t\tif (this.right) c.right=this.right.clone();\n\t\t}\n\t\tthis.compare=function(n){\n\t\t\tif (this.value > n.value) return 1;\n\t\t\tif (this.value < n.value) return -1;\n\t\t\treturn 0;\n\t\t}\n\t\tthis.compareData=function(d){\n\t\t\tif (this.value > d) return 1;\n\t\t\tif (this.value < d) return -1;\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tfunction inorderTraversalBuildup(current, a){\n\t\tif (current){\n\t\t\tinorderTraversalBuildup(current.left, a);\n\t\t\ta.add(current);\n\t\t\tinorderTraversalBuildup(current.right, a);\n\t\t}\n\t}\n\n\tfunction preorderTraversal(current, sep){\n\t\tvar s=\"\";\n\t\tif (current){\n\t\t\ts=current.value.toString() + sep;\n\t\t\ts += preorderTraversal(current.left, sep);\n\t\t\ts += preorderTraversal(current.right, sep);\n\t\t}\n\t\treturn s;\n\t}\n\tfunction inorderTraversal(current, sep){\n\t\tvar s=\"\";\n\t\tif (current){\n\t\t\ts=inorderTraversal(current.left, sep);\n\t\t\ts += current.value.toString() + sep;\n\t\t\ts += inorderTraversal(current.right, sep);\n\t\t}\n\t\treturn s;\n\t}\n\tfunction postorderTraversal(current, sep){\n\t\tvar s=\"\";\n\t\tif (current){\n\t\t\ts=postorderTraversal(current.left, sep);\n\t\t\ts += postorderTraversal(current.right, sep);\n\t\t\ts += current.value.toString() + sep;\n\t\t}\n\t\treturn s;\n\t}\n\t\n\tfunction searchHelper(current, data){\n\t\tif (!current) return null;\n\t\tvar i=current.compareData(data);\n\t\tif (i==0) return current;\n\t\tif (i>0) return searchHelper(current.left, data);\n\t\telse return searchHelper(current.right, data);\n\t}\n\n\tthis.add=function(data){\n\t\tvar n=new node(data);\n\t\tvar i;\n\t\tvar current=root;\n\t\tvar parent=null;\n\t\twhile (current){\n\t\t\ti=current.compare(n);\n\t\t\tif (i == 0) return;\n\t\t\tparent=current;\n\t\t\tif (i > 0) current=current.left;\n\t\t\telse current=current.right;\n\t\t}\n\t\tthis.count++;\n\t\tif (!parent) root=n;\n\t\telse {\n\t\t\ti=parent.compare(n);\n\t\t\tif (i > 0) parent.left=n;\n\t\t\telse parent.right=n;\n\t\t}\n\t};\n\tthis.clear=function(){\n\t\troot=null;\n\t\tthis.count=0;\n\t};\n\tthis.clone=function(){\n\t\tvar c=new dojo.collections.BinaryTree();\n\t\tc.root=root.clone();\n\t\tc.count=this.count;\n\t\treturn c;\n\t};\n\tthis.contains=function(data){\n\t\treturn this.search(data) != null;\n\t};\n\tthis.deleteData=function(data){\n\t\tvar current=root;\n\t\tvar parent=null;\n\t\tvar i=current.compareData(data);\n\t\twhile (i != 0 && current != null){\n\t\t\tif (i > 0){\n\t\t\t\tparent=current;\n\t\t\t\tcurrent=current.left;\n\t\t\t} else if (i < 0) {\n\t\t\t\tparent=current;\n\t\t\t\tcurrent=current.right;\n\t\t\t}\n\t\t\ti=current.compareData(data);\n\t\t}\n\t\tif (!current) return;\n\t\tthis.count--;\n\t\tif (!current.right) {\n\t\t\tif (!parent) root=current.left;\n\t\t\telse {\n\t\t\t\ti=parent.compare(current);\n\t\t\t\tif (i > 0) parent.left=current.left;\n\t\t\t\telse if (i < 0) parent.right=current.left;\n\t\t\t}\n\t\t} else if (!current.right.left){\n\t\t\tif (!parent) root=current.right;\n\t\t\telse {\n\t\t\t\ti=parent.compare(current);\n\t\t\t\tif (i > 0) parent.left=current.right;\n\t\t\t\telse if (i < 0) parent.right=current.right;\n\t\t\t}\n\t\t} else {\n\t\t\tvar leftmost=current.right.left;\n\t\t\tvar lmParent=current.right;\n\t\t\twhile (leftmost.left != null){\n\t\t\t\tlmParent=leftmost;\n\t\t\t\tleftmost=leftmost.left;\n\t\t\t}\n\t\t\tlmParent.left=leftmost.right;\n\t\t\tleftmost.left=current.left;\n\t\t\tleftmost.right=current.right;\n\t\t\tif (!parent) root=leftmost;\n\t\t\telse {\n\t\t\t\ti=parent.compare(current);\n\t\t\t\tif (i > 0) parent.left=leftmost;\n\t\t\t\telse if (i < 0) parent.right=leftmost;\n\t\t\t}\n\t\t}\n\t};\n\tthis.getIterator=function(){\n\t\tvar a=[];\n\t\tinorderTraversalBuildup(root, a);\n\t\treturn new dojo.collections.Iterator(a);\n\t};\n\tthis.search=function(data){\n\t\treturn searchHelper(root, data);\n\t};\n\tthis.toString=function(order, sep){\n\t\tif (!order) var order=dojo.collections.BinaryTree.TraversalMethods.Inorder;\n\t\tif (!sep) var sep=\" \";\n\t\tvar s=\"\";\n\t\tswitch (order){\n\t\t\tcase dojo.collections.BinaryTree.TraversalMethods.Preorder:\n\t\t\t\ts=preorderTraversal(root, sep);\n\t\t\t\tbreak;\n\t\t\tcase dojo.collections.BinaryTree.TraversalMethods.Inorder:\n\t\t\t\ts=inorderTraversal(root, sep);\n\t\t\t\tbreak;\n\t\t\tcase dojo.collections.BinaryTree.TraversalMethods.Postorder:\n\t\t\t\ts=postorderTraversal(root, sep);\n\t\t\t\tbreak;\n\t\t};\n\t\tif (s.length == 0) return \"\";\n\t\telse return s.substring(0, s.length - sep.length);\n\t};\n\n\tthis.count=0;\n\tvar root=this.root=null;\n\tif (data) {\n\t\tthis.add(data);\n\t}","this_variables":["value","right","left","clone","compare","compareData","add","clear","count","contains","deleteData","getIterator","search","toString","root"]}}},"dojo.collections.BinaryTree.clone":{"_":{"meta":{"summary":"","src":"\t\tvar c=new dojo.collections.BinaryTree();\n\t\tc.root=root.clone();\n\t\tc.count=this.count;\n\t\treturn c;"}}},"dojo.collections.BinaryTree.compare":{"_":{"meta":{"summary":"","parameters":{"n":{"type":""}},"src":"\t\t\tif (this.value > n.value) return 1;\n\t\t\tif (this.value < n.value) return -1;\n\t\t\treturn 0;"}}},"dojo.collections.BinaryTree.compareData":{"_":{"meta":{"summary":"","parameters":{"d":{"type":""}},"src":"\t\t\tif (this.value > d) return 1;\n\t\t\tif (this.value < d) return -1;\n\t\t\treturn 0;"}}},"dojo.collections.BinaryTree.add":{"_":{"meta":{"summary":"","parameters":{"data":{"type":""}},"src":"\t\tvar n=new node(data);\n\t\tvar i;\n\t\tvar current=root;\n\t\tvar parent=null;\n\t\twhile (current){\n\t\t\ti=current.compare(n);\n\t\t\tif (i == 0) return;\n\t\t\tparent=current;\n\t\t\tif (i > 0) current=current.left;\n\t\t\telse current=current.right;\n\t\t}\n\t\tthis.count++;\n\t\tif (!parent) root=n;\n\t\telse {\n\t\t\ti=parent.compare(n);\n\t\t\tif (i > 0) parent.left=n;\n\t\t\telse parent.right=n;\n\t\t}"}}},"dojo.collections.BinaryTree.clear":{"_":{"meta":{"summary":"","src":"\t\troot=null;\n\t\tthis.count=0;","this_variables":["count"]}}},"dojo.collections.BinaryTree.contains":{"_":{"meta":{"summary":"","parameters":{"data":{"type":""}},"src":"\t\treturn this.search(data) != null;"}}},"dojo.collections.BinaryTree.deleteData":{"_":{"meta":{"summary":"","parameters":{"data":{"type":""}},"src":"\t\tvar current=root;\n\t\tvar parent=null;\n\t\tvar i=current.compareData(data);\n\t\twhile (i != 0 && current != null){\n\t\t\tif (i > 0){\n\t\t\t\tparent=current;\n\t\t\t\tcurrent=current.left;\n\t\t\t} else if (i < 0) {\n\t\t\t\tparent=current;\n\t\t\t\tcurrent=current.right;\n\t\t\t}\n\t\t\ti=current.compareData(data);\n\t\t}\n\t\tif (!current) return;\n\t\tthis.count--;\n\t\tif (!current.right) {\n\t\t\tif (!parent) root=current.left;\n\t\t\telse {\n\t\t\t\ti=parent.compare(current);\n\t\t\t\tif (i > 0) parent.left=current.left;\n\t\t\t\telse if (i < 0) parent.right=current.left;\n\t\t\t}\n\t\t} else if (!current.right.left){\n\t\t\tif (!parent) root=current.right;\n\t\t\telse {\n\t\t\t\ti=parent.compare(current);\n\t\t\t\tif (i > 0) parent.left=current.right;\n\t\t\t\telse if (i < 0) parent.right=current.right;\n\t\t\t}\n\t\t} else {\n\t\t\tvar leftmost=current.right.left;\n\t\t\tvar lmParent=current.right;\n\t\t\twhile (leftmost.left != null){\n\t\t\t\tlmParent=leftmost;\n\t\t\t\tleftmost=leftmost.left;\n\t\t\t}\n\t\t\tlmParent.left=leftmost.right;\n\t\t\tleftmost.left=current.left;\n\t\t\tleftmost.right=current.right;\n\t\t\tif (!parent) root=leftmost;\n\t\t\telse {\n\t\t\t\ti=parent.compare(current);\n\t\t\t\tif (i > 0) parent.left=leftmost;\n\t\t\t\telse if (i < 0) parent.right=leftmost;\n\t\t\t}\n\t\t}"}}},"dojo.collections.BinaryTree.getIterator":{"_":{"meta":{"summary":"","src":"\t\tvar a=[];\n\t\tinorderTraversalBuildup(root, a);\n\t\treturn new dojo.collections.Iterator(a);"}}},"dojo.collections.BinaryTree.search":{"_":{"meta":{"summary":"","parameters":{"data":{"type":""}},"src":"\t\treturn searchHelper(root, data);"}}},"dojo.collections.BinaryTree.toString":{"_":{"meta":{"summary":"","parameters":{"order":{"type":""},"sep":{"type":""}},"src":"\t\tif (!order) var order=dojo.collections.BinaryTree.TraversalMethods.Inorder;\n\t\tif (!sep) var sep=\" \";\n\t\tvar s=\"\";\n\t\tswitch (order){\n\t\t\tcase dojo.collections.BinaryTree.TraversalMethods.Preorder:\n\t\t\t\ts=preorderTraversal(root, sep);\n\t\t\t\tbreak;\n\t\t\tcase dojo.collections.BinaryTree.TraversalMethods.Inorder:\n\t\t\t\ts=inorderTraversal(root, sep);\n\t\t\t\tbreak;\n\t\t\tcase dojo.collections.BinaryTree.TraversalMethods.Postorder:\n\t\t\t\ts=postorderTraversal(root, sep);\n\t\t\t\tbreak;\n\t\t};\n\t\tif (s.length == 0) return \"\";\n\t\telse return s.substring(0, s.length - sep.length);"}}}}}},"dojo.collections.Collections":{"meta":{"functions":{"dojo.collections.DictionaryEntry":{"_":{"meta":{"summary":" return an object of type dojo.collections.DictionaryEntry","parameters":{"k":{"type":"string"},"v":{"type":"object"}},"src":"\tthis.value=v;\n\tthis.valueOf=function(){ \n\t\treturn this.value; \t\/\/\tobject\n\t};\n\tthis.toString=function(){ \n\t\treturn String(this.value);\t\/\/\tstring \n\t};","this_variables":["key","value","valueOf","toString"],"returns":"mixed"}}},"dojo.collections.DictionaryEntry.valueOf":{"_":{"meta":{"summary":"","src":"\t\treturn this.value; \t         ","returns":"object"}}},"dojo.collections.DictionaryEntry.toString":{"_":{"meta":{"summary":"","src":"\t\treturn String(this.value);\t          ","returns":"string"}}},"dojo.collections.Iterator":{"_":{"meta":{"summary":" return an object of type dojo.collections.Iterator","parameters":{"arr":{"type":"array"}},"src":"\tvar position=0;\n\tthis.element=a[position]||null;\n\tthis.atEnd=function(){\n\t\t\/\/\tsummary\n\t\t\/\/\tTest to see if the internal cursor has reached the end of the internal collection.\n\t\treturn (position>=a.length);\t\/\/\tbool\n\t};\n\tthis.get=function(){\n\t\t\/\/\tsummary\n\t\t\/\/\tTest to see if the internal cursor has reached the end of the internal collection.\n\t\tif(this.atEnd()){\n\t\t\treturn null;\t\t\/\/\tobject\n\t\t}\n\t\tthis.element=a[position++];\n\t\treturn this.element;\t\/\/\tobject\n\t};\n\tthis.map=function(\/* function *\/fn, \/* object? *\/scope){\n\t\t\/\/\tsummary\n\t\t\/\/\tFunctional iteration with optional scope.\n\t\tvar s=scope||dj_global;\n\t\tif(Array.map){\n\t\t\treturn Array.map(a,fn,s);\t\/\/\tarray\n\t\t}else{\n\t\t\tvar arr=[];\n\t\t\tfor(var i=0; i<a.length; i++){\n\t\t\t\tarr.push(fn.call(s,a[i]));\n\t\t\t}\n\t\t\treturn arr;\t\t\/\/\tarray\n\t\t}\n\t};\n\tthis.reset=function(){\n\t\t\/\/\tsummary\n\t\t\/\/\treset the internal cursor.\n\t\tposition=0;\n\t\tthis.element=a[position];\n\t};","this_variables":["element","atEnd","get","map","reset"],"returns":"mixed"}}},"dojo.collections.Iterator.atEnd":{"_":{"meta":{"summary":" Test to see if the internal cursor has reached the end of the internal collection. bool","src":"","returns":"bool"}}},"dojo.collections.Iterator.get":{"_":{"meta":{"summary":" Test to see if the internal cursor has reached the end of the internal collection.","src":"\t\t\treturn null;\t\t\/\/\tobject\n\t\t}\n\t\tthis.element=a[position++];\n\t\treturn this.element;\t\/\/\tobject","this_variables":["element"],"returns":"object"}}},"dojo.collections.Iterator.map":{"_":{"meta":{"summary":" Functional iteration with optional scope.","parameters":{"fn":{"type":"function"},"scope":{"type":"object?"}},"src":"\t\tif(Array.map){\n\t\t\treturn Array.map(a,fn,s);\t\/\/\tarray\n\t\t}else{\n\t\t\tvar arr=[];\n\t\t\tfor(var i=0; i<a.length; i++){\n\t\t\t\tarr.push(fn.call(s,a[i]));\n\t\t\t}\n\t\t\treturn arr;\t\t\/\/\tarray\n\t\t}","returns":"array"}}},"dojo.collections.Iterator.reset":{"_":{"meta":{"summary":" reset the internal cursor.","src":"\t\tthis.element=a[position];","this_variables":["element"]}}},"dojo.collections.DictionaryIterator":{"_":{"meta":{"summary":" return an object of type dojo.collections.DictionaryIterator Create an indexing array","parameters":{"obj":{"type":"object"}},"src":"\tvar testObject={};\n\tfor(var p in obj){\n\t\tif(!testObject[p]){\n\t\t\ta.push(obj[p]);\t\/\/\tfill it up\n\t\t}\n\t}\n\tvar position=0;\n\tthis.element=a[position]||null;\n\tthis.atEnd=function(){\n\t\t\/\/\tsummary\n\t\t\/\/\tTest to see if the internal cursor has reached the end of the internal collection.\n\t\treturn (position>=a.length);\t\/\/\tbool\n\t};\n\tthis.get=function(){\n\t\t\/\/\tsummary\n\t\t\/\/\tTest to see if the internal cursor has reached the end of the internal collection.\n\t\tif(this.atEnd()){\n\t\t\treturn null;\t\t\/\/\tobject\n\t\t}\n\t\tthis.element=a[position++];\n\t\treturn this.element;\t\/\/\tobject\n\t};\n\tthis.map=function(\/* function *\/fn, \/* object? *\/scope){\n\t\t\/\/\tsummary\n\t\t\/\/\tFunctional iteration with optional scope.\n\t\tvar s=scope||dj_global;\n\t\tif(Array.map){\n\t\t\treturn Array.map(a,fn,s);\t\/\/\tarray\n\t\t}else{\n\t\t\tvar arr=[];\n\t\t\tfor(var i=0; i<a.length; i++){\n\t\t\t\tarr.push(fn.call(s,a[i]));\n\t\t\t}\n\t\t\treturn arr;\t\t\/\/\tarray\n\t\t}\n\t};\n\tthis.reset=function() { \n\t\t\/\/\tsummary\n\t\t\/\/\treset the internal cursor.\n\t\tposition=0; \n\t\tthis.element=a[position];\n\t};","this_variables":["element","atEnd","get","map","reset"],"returns":"mixed"}}},"dojo.collections.DictionaryIterator.atEnd":{"_":{"meta":{"summary":" Test to see if the internal cursor has reached the end of the internal collection. bool","src":"","returns":"bool"}}},"dojo.collections.DictionaryIterator.get":{"_":{"meta":{"summary":" Test to see if the internal cursor has reached the end of the internal collection.","src":"\t\t\treturn null;\t\t\/\/\tobject\n\t\t}\n\t\tthis.element=a[position++];\n\t\treturn this.element;\t\/\/\tobject","this_variables":["element"],"returns":"object"}}},"dojo.collections.DictionaryIterator.map":{"_":{"meta":{"summary":" Functional iteration with optional scope.","parameters":{"fn":{"type":"function"},"scope":{"type":"object?"}},"src":"\t\tif(Array.map){\n\t\t\treturn Array.map(a,fn,s);\t\/\/\tarray\n\t\t}else{\n\t\t\tvar arr=[];\n\t\t\tfor(var i=0; i<a.length; i++){\n\t\t\t\tarr.push(fn.call(s,a[i]));\n\t\t\t}\n\t\t\treturn arr;\t\t\/\/\tarray\n\t\t}","returns":"array"}}},"dojo.collections.DictionaryIterator.reset":{"_":{"meta":{"summary":" reset the internal cursor.","src":"\t\tthis.element=a[position];","this_variables":["element"]}}}}}},"dojo.collections.Dictionary":{"meta":{"requires":{"common":["dojo.collections.Collections"]},"functions":{"dojo.collections.Dictionary":{"_":{"meta":{"summary":" Returns an object of type dojo.collections.Dictionary","parameters":{"dictionary":{"type":"dojo.collections.Dictionary?"}},"src":"\tthis.count=0;\n\n\t\/\/\tcomparator for property addition and access.\n\tvar testObject={};\n\n\tthis.add=function(\/* string *\/k, \/* object *\/v){\n\t\t\/\/\tsummary\n\t\t\/\/\tAdd a new item to the Dictionary.\n\t\tvar b=(k in items);\n\t\titems[k]=new dojo.collections.DictionaryEntry(k,v);\n\t\tif(!b){\n\t\t\tthis.count++;\n\t\t}\n\t};\n\tthis.clear=function(){\n\t\t\/\/\tsummary\n\t\t\/\/\tClears the internal dictionary.\n\t\titems={};\n\t\tthis.count=0;\n\t};\n\tthis.clone=function(){\n\t\t\/\/\tsummary\n\t\t\/\/\tReturns a new instance of dojo.collections.Dictionary; note the the dictionary is a clone but items might not be.\n\t\treturn new dojo.collections.Dictionary(this);\t\/\/\tdojo.collections.Dictionary\n\t};\n\tthis.contains=this.containsKey=function(\/* string *\/k){\n\t\t\/\/\tsummary\n\t\t\/\/\tCheck to see if the dictionary has an entry at key \"k\".\n\t\tif(testObject[k]){\n\t\t\treturn false;\t\t\t\/\/ bool\n\t\t}\n\t\treturn (items[k]!=null);\t\/\/\tbool\n\t};\n\tthis.containsValue=function(\/* object *\/v){\n\t\t\/\/\tsummary\n\t\t\/\/\tCheck to see if the dictionary has an entry with value \"v\".\n\t\tvar e=this.getIterator();\n\t\twhile(e.get()){\n\t\t\tif(e.element.value==v){\n\t\t\t\treturn true;\t\/\/\tbool\n\t\t\t}\n\t\t}\n\t\treturn false;\t\/\/\tbool\n\t};\n\tthis.entry=function(\/* string *\/k){\n\t\t\/\/\tsummary\n\t\t\/\/\tAccessor method; similar to dojo.collections.Dictionary.item but returns the actual Entry object.\n\t\treturn items[k];\t\/\/\tdojo.collections.DictionaryEntry\n\t};\n\tthis.forEach=function(\/* function *\/ fn, \/* object? *\/ scope){\n\t\t\/\/\tsummary\n\t\t\/\/\tfunctional iterator, following the mozilla spec.\n\t\tvar a=[];\t\/\/\tCreate an indexing array\n\t\tfor(var p in items) {\n\t\t\tif(!testObject[p]){\n\t\t\t\ta.push(items[p]);\t\/\/\tfill it up\n\t\t\t}\n\t\t}\n\t\tvar s=scope||dj_global;\n\t\tif(Array.forEach){\n\t\t\tArray.forEach(a, fn, s);\n\t\t}else{\n\t\t\tfor(var i=0; i<a.length; i++){\n\t\t\t\tfn.call(s, a[i], i, a);\n\t\t\t}\n\t\t}\n\t};\n\tthis.getKeyList=function(){\n\t\t\/\/\tsummary\n\t\t\/\/\tReturns an array of the keys in the dictionary.\n\t\treturn (this.getIterator()).map(function(entry){ \n\t\t\treturn entry.key; \n\t\t});\t\/\/\tarray\n\t};\n\tthis.getValueList=function(){\n\t\t\/\/\tsummary\n\t\t\/\/\tReturns an array of the values in the dictionary.\n\t\treturn (this.getIterator()).map(function(entry){ \n\t\t\treturn entry.value; \n\t\t});\t\/\/\tarray\n\t};\n\tthis.item=function(\/* string *\/k){\n\t\t\/\/\tsummary\n\t\t\/\/\tAccessor method.\n\t\tif(k in items){\n\t\t\treturn items[k].valueOf();\t\/\/\tobject\n\t\t}\n\t\treturn undefined;\t\/\/\tobject\n\t};\n\tthis.getIterator=function(){\n\t\t\/\/\tsummary\n\t\t\/\/\tGets a dojo.collections.DictionaryIterator for iteration purposes.\n\t\treturn new dojo.collections.DictionaryIterator(items);\t\/\/\tdojo.collections.DictionaryIterator\n\t};\n\tthis.remove=function(\/* string *\/k){\n\t\t\/\/\tsummary\n\t\t\/\/\tRemoves the item at k from the internal collection.\n\t\tif(k in items && !testObject[k]){\n\t\t\tdelete items[k];\n\t\t\tthis.count--;\n\t\t\treturn true;\t\/\/\tbool\n\t\t}\n\t\treturn false;\t\/\/\tbool\n\t};\n\n\tif (dictionary){\n\t\tvar e=dictionary.getIterator();\n\t\twhile(e.get()) {\n\t\t\t this.add(e.element.key, e.element.value);\n\t\t}\n\t}","this_variables":["count","add","clear","clone","contains","containsValue","entry","forEach","getKeyList","getValueList","item","getIterator","remove"],"returns":"mixed"}}},"dojo.collections.Dictionary.add":{"_":{"meta":{"summary":" Add a new item to the Dictionary.","parameters":{"k":{"type":"string"},"v":{"type":"object"}},"src":"\t\titems[k]=new dojo.collections.DictionaryEntry(k,v);\n\t\tif(!b){\n\t\t\tthis.count++;\n\t\t}"}}},"dojo.collections.Dictionary.clear":{"_":{"meta":{"summary":" Clears the internal dictionary.","src":"\t\tthis.count=0;","this_variables":["count"]}}},"dojo.collections.Dictionary.clone":{"_":{"meta":{"summary":" Returns a new instance of dojo.collections.Dictionary; note the the dictionary is a clone but items might not be. dojo.collections.Dictionary","src":"","returns":"dojo.collections.Dictionary"}}},"dojo.collections.Dictionary.containsKey":{"_":{"meta":{"summary":" Check to see if the dictionary has an entry at key \"k\".","parameters":{"k":{"type":"string"}},"src":"\t\t\treturn false;\t\t\t\/\/ bool\n\t\t}\n\t\treturn (items[k]!=null);\t\/\/\tbool","returns":"bool"}}},"dojo.collections.Dictionary.containsValue":{"_":{"meta":{"summary":" Check to see if the dictionary has an entry with value \"v\".","parameters":{"v":{"type":"object"}},"src":"\t\twhile(e.get()){\n\t\t\tif(e.element.value==v){\n\t\t\t\treturn true;\t\/\/\tbool\n\t\t\t}\n\t\t}\n\t\treturn false;\t\/\/\tbool","returns":"bool"}}},"dojo.collections.Dictionary.entry":{"_":{"meta":{"summary":" Accessor method; similar to dojo.collections.Dictionary.item but returns the actual Entry object. dojo.collections.DictionaryEntry","parameters":{"k":{"type":"string"}},"src":"","returns":"dojo.collections.DictionaryEntry"}}},"dojo.collections.Dictionary.forEach":{"_":{"meta":{"summary":" functional iterator, following the mozilla spec. Create an indexing array","parameters":{"fn":{"type":"function"},"scope":{"type":"object?"}},"src":"\t\tfor(var p in items) {\n\t\t\tif(!testObject[p]){\n\t\t\t\ta.push(items[p]);\t\/\/\tfill it up\n\t\t\t}\n\t\t}\n\t\tvar s=scope||dj_global;\n\t\tif(Array.forEach){\n\t\t\tArray.forEach(a, fn, s);\n\t\t}else{\n\t\t\tfor(var i=0; i<a.length; i++){\n\t\t\t\tfn.call(s, a[i], i, a);\n\t\t\t}\n\t\t}"}}},"dojo.collections.Dictionary.getKeyList":{"_":{"meta":{"summary":" Returns an array of the keys in the dictionary.","src":"\t\t\treturn entry.key; \n\t\t});\t\/\/\tarray"}}},"dojo.collections.Dictionary.getValueList":{"_":{"meta":{"summary":" Returns an array of the values in the dictionary.","src":"\t\t\treturn entry.value; \n\t\t});\t\/\/\tarray"}}},"dojo.collections.Dictionary.item":{"_":{"meta":{"summary":" Accessor method.","parameters":{"k":{"type":"string"}},"src":"\t\t\treturn items[k].valueOf();\t\/\/\tobject\n\t\t}\n\t\treturn undefined;\t\/\/\tobject","returns":"object"}}},"dojo.collections.Dictionary.getIterator":{"_":{"meta":{"summary":" Gets a dojo.collections.DictionaryIterator for iteration purposes. dojo.collections.DictionaryIterator","src":"","returns":"dojo.collections.DictionaryIterator"}}},"dojo.collections.Dictionary.remove":{"_":{"meta":{"summary":" Removes the item at k from the internal collection.","parameters":{"k":{"type":"string"}},"src":"\t\t\tdelete items[k];\n\t\t\tthis.count--;\n\t\t\treturn true;\t\/\/\tbool\n\t\t}\n\t\treturn false;\t\/\/\tbool","returns":"bool"}}}}}},"dojo.collections.Graph":{"meta":{"requires":{"common":["dojo.collections.Collections"]},"functions":{"dojo.collections.Graph":{"_":{"meta":{"summary":"","parameters":{"nodes":{"type":""}},"src":"\tfunction node(key, data, neighbors) {\n\t\tthis.key=key;\n\t\tthis.data=data;\n\t\tthis.neighbors=neighbors||new adjacencyList();\n\t\tthis.addDirected=function(){\n\t\t\tif (arguments[0].constructor==edgeToNeighbor){\n\t\t\t\tthis.neighbors.add(arguments[0]);\n\t\t\t}else{\n\t\t\t\tvar n=arguments[0];\n\t\t\t\tvar cost=arguments[1]||0;\n\t\t\t\tthis.neighbors.add(new edgeToNeighbor(n, cost));\n\t\t\t}\n\t\t}\n\t}\n\tfunction nodeList(){\n\t\tvar d=new dojo.collections.Dictionary();\n\t\tfunction nodelistiterator(){\n\t\t\tvar o=[] ;\t\/\/\tCreate an indexing array\n\t\t\tvar e=d.getIterator();\n\t\t\twhile(e.get()){\n\t\t\t\to[o.length]=e.element;\n\t\t\t}\n\n\t\t\tvar position=0;\n\t\t\tthis.element=o[position]||null;\n\t\t\tthis.atEnd=function(){\n\t\t\t\treturn (position>=o.length);\n\t\t\t}\n\t\t\tthis.get=function(){\n\t\t\t\tif(this.atEnd()){\n\t\t\t\t\treturn null;\t\t\/\/\tobject\n\t\t\t\t}\n\t\t\t\tthis.element=o[position++];\n\t\t\t\treturn this.element;\t\/\/\tobject\n\t\t\t};\n\t\t\tthis.map=function(\/* function *\/fn, \/* object? *\/scope){\n\t\t\t\tvar s=scope||dj_global;\n\t\t\t\tif(Array.map){\n\t\t\t\t\treturn Array.map(o,fn,s);\t\/\/\tarray\n\t\t\t\t}else{\n\t\t\t\t\tvar arr=[];\n\t\t\t\t\tfor(var i=0; i<o.length; i++){\n\t\t\t\t\t\tarr.push(fn.call(s,o[i]));\n\t\t\t\t\t}\n\t\t\t\t\treturn arr;\t\t\/\/\tarray\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.reset=function(){\n\t\t\t\tposition=0;\n\t\t\t\tthis.element=o[position];\n\t\t\t};\n\t\t}\n\t\t\n\t\tthis.add=function(node){\n\t\t\td.add(node.key, node);\n\t\t};\n\t\tthis.clear=function(){\n\t\t\td.clear();\n\t\t};\n\t\tthis.containsKey=function(key){\n\t\t\treturn d.containsKey(key);\n\t\t};\n\t\tthis.getIterator=function(){\n\t\t\treturn new nodelistiterator(this);\n\t\t};\n\t\tthis.item=function(key){\n\t\t\treturn d.item(key);\n\t\t};\n\t\tthis.remove=function(node){\n\t\t\td.remove(node.key);\n\t\t};\n\t}\n\tfunction edgeToNeighbor(node, cost){\n\t\tthis.neighbor=node;\n\t\tthis.cost=cost;\n\t}\n\tfunction adjacencyList(){\n\t\tvar d=[];\n\t\tthis.add=function(o){\n\t\t\td.push(o);\n\t\t};\n\t\tthis.item=function(i){\n\t\t\treturn d[i];\n\t\t};\n\t\tthis.getIterator=function(){\n\t\t\treturn new dojo.collections.Iterator([].concat(d));\n\t\t};\n\t}\n\n\tthis.nodes=nodes||new nodeList();\n\tthis.count=this.nodes.count;\n\tthis.clear=function(){\n\t\tthis.nodes.clear();\n\t\tthis.count=0;\n\t};\n\tthis.addNode=function(){\n\t\tvar n=arguments[0];\n\t\tif(arguments.length > 1){\n\t\t\tn=new node(arguments[0],arguments[1]);\n\t\t}\n\t\tif(!this.nodes.containsKey(n.key)){\n\t\t\tthis.nodes.add(n);\n\t\t\tthis.count++;\n\t\t}\n\t};\n\tthis.addDirectedEdge=function(uKey, vKey, cost){\n\t\tvar uNode,vNode;\n\t\tif(uKey.constructor!= node){\n\t\t\tuNode=this.nodes.item(uKey);\n\t\t\tvNode=this.nodes.item(vKey);\n\t\t}else{\n\t\t\tuNode=uKey;\n\t\t\tvNode=vKey;\n\t\t}\n\t\tvar c=cost||0;\n\t\tuNode.addDirected(vNode,c);\n\t};\n\tthis.addUndirectedEdge=function(uKey, vKey, cost){\n\t\tvar uNode, vNode;\n\t\tif(uKey.constructor!=node){\n\t\t\tuNode=this.nodes.item(uKey);\n\t\t\tvNode=this.nodes.item(vKey);\n\t\t}else{\n\t\t\tuNode=uKey;\n\t\t\tvNode=vKey;\n\t\t}\n\t\tvar c=cost||0;\n\t\tuNode.addDirected(vNode,c);\n\t\tvNode.addDirected(uNode,c);\n\t};\n\tthis.contains=function(n){\n\t\treturn this.nodes.containsKey(n.key);\n\t};\n\tthis.containsKey=function(k){\n\t\treturn this.nodes.containsKey(k);\n\t};","this_variables":["key","data","neighbors","addDirected","element","atEnd","get","map","reset","add","clear","containsKey","getIterator","item","remove","neighbor","cost","nodes","count","addNode","addDirectedEdge","addUndirectedEdge","contains"],"returns":"mixed"}}},"dojo.collections.Graph.addDirected":{"_":{"meta":{"summary":"","src":"\t\t\tif (arguments[0].constructor==edgeToNeighbor){\n\t\t\t\tthis.neighbors.add(arguments[0]);\n\t\t\t}else{\n\t\t\t\tvar n=arguments[0];\n\t\t\t\tvar cost=arguments[1]||0;\n\t\t\t\tthis.neighbors.add(new edgeToNeighbor(n, cost));\n\t\t\t}"}}},"dojo.collections.Graph.atEnd":{"_":{"meta":{"summary":"","src":"\t\t\t\treturn (position>=o.length);"}}},"dojo.collections.Graph.get":{"_":{"meta":{"summary":"","src":"\t\t\t\tif(this.atEnd()){\n\t\t\t\t\treturn null;\t\t\/\/\tobject\n\t\t\t\t}\n\t\t\t\tthis.element=o[position++];\n\t\t\t\treturn this.element;\t\/\/\tobject","this_variables":["element"],"returns":"object"}}},"dojo.collections.Graph.map":{"_":{"meta":{"summary":"","parameters":{"fn":{"type":"function"},"scope":{"type":"object?"}},"src":"\t\t\t\tvar s=scope||dj_global;\n\t\t\t\tif(Array.map){\n\t\t\t\t\treturn Array.map(o,fn,s);\t\/\/\tarray\n\t\t\t\t}else{\n\t\t\t\t\tvar arr=[];\n\t\t\t\t\tfor(var i=0; i<o.length; i++){\n\t\t\t\t\t\tarr.push(fn.call(s,o[i]));\n\t\t\t\t\t}\n\t\t\t\t\treturn arr;\t\t\/\/\tarray\n\t\t\t\t}","returns":"array"}}},"dojo.collections.Graph.reset":{"_":{"meta":{"summary":"","src":"\t\t\t\tposition=0;\n\t\t\t\tthis.element=o[position];","this_variables":["element"]}}},"dojo.collections.Graph.add":{"_":{"meta":{"summary":"","parameters":{"node":{"type":""},"o":{"type":""}},"src":"\t\t\td.push(o);"}}},"dojo.collections.Graph.clear":{"_":{"meta":{"summary":"","src":"\t\tthis.nodes.clear();\n\t\tthis.count=0;","this_variables":["count"]}}},"dojo.collections.Graph.containsKey":{"_":{"meta":{"summary":"","parameters":{"key":{"type":""},"k":{"type":""}},"src":"\t\treturn this.nodes.containsKey(k);"}}},"dojo.collections.Graph.getIterator":{"_":{"meta":{"summary":"","src":"\t\t\treturn new dojo.collections.Iterator([].concat(d));"}}},"dojo.collections.Graph.item":{"_":{"meta":{"summary":"","parameters":{"key":{"type":""},"i":{"type":""}},"src":"\t\t\treturn d[i];"}}},"dojo.collections.Graph.remove":{"_":{"meta":{"summary":"","parameters":{"node":{"type":""}},"src":"\t\t\td.remove(node.key);"}}},"dojo.collections.Graph.addNode":{"_":{"meta":{"summary":"","src":"\t\tvar n=arguments[0];\n\t\tif(arguments.length > 1){\n\t\t\tn=new node(arguments[0],arguments[1]);\n\t\t}\n\t\tif(!this.nodes.containsKey(n.key)){\n\t\t\tthis.nodes.add(n);\n\t\t\tthis.count++;\n\t\t}"}}},"dojo.collections.Graph.addDirectedEdge":{"_":{"meta":{"summary":"","parameters":{"uKey":{"type":""},"vKey":{"type":""},"cost":{"type":""}},"src":"\t\tvar uNode,vNode;\n\t\tif(uKey.constructor!= node){\n\t\t\tuNode=this.nodes.item(uKey);\n\t\t\tvNode=this.nodes.item(vKey);\n\t\t}else{\n\t\t\tuNode=uKey;\n\t\t\tvNode=vKey;\n\t\t}\n\t\tvar c=cost||0;\n\t\tuNode.addDirected(vNode,c);"}}},"dojo.collections.Graph.addUndirectedEdge":{"_":{"meta":{"summary":"","parameters":{"uKey":{"type":""},"vKey":{"type":""},"cost":{"type":""}},"src":"\t\tvar uNode, vNode;\n\t\tif(uKey.constructor!=node){\n\t\t\tuNode=this.nodes.item(uKey);\n\t\t\tvNode=this.nodes.item(vKey);\n\t\t}else{\n\t\t\tuNode=uKey;\n\t\t\tvNode=vKey;\n\t\t}\n\t\tvar c=cost||0;\n\t\tuNode.addDirected(vNode,c);\n\t\tvNode.addDirected(uNode,c);"}}},"dojo.collections.Graph.contains":{"_":{"meta":{"summary":"","parameters":{"n":{"type":""}},"src":"\t\treturn this.nodes.containsKey(n.key);"}}}}}},"dojo.collections.Queue":{"meta":{"requires":{"common":["dojo.collections.Collections"]},"functions":{"dojo.collections.Queue":{"_":{"meta":{"summary":" return an object of type dojo.collections.Queue","parameters":{"arr":{"type":"array?"}},"src":"\tif (arr){\n\t\tq=q.concat(arr);\n\t}\n\tthis.count=q.length;\n\tthis.clear=function(){\n\t\t\/\/\tsummary\n\t\t\/\/\tclears the internal collection\n\t\tq=[];\n\t\tthis.count=q.length;\n\t};\n\tthis.clone=function(){\n\t\t\/\/\tsummary\n\t\t\/\/\tcreates a new Queue based on this one\n\t\treturn new dojo.collections.Queue(q);\t\/\/\tdojo.collections.Queue\n\t};\n\tthis.contains=function(\/* object *\/ o){\n\t\t\/\/\tsummary\n\t\t\/\/\tCheck to see if the passed object is an element in this queue\n\t\tfor(var i=0; i<q.length; i++){\n\t\t\tif (q[i]==o){\n\t\t\t\treturn true;\t\/\/\tbool\n\t\t\t}\n\t\t}\n\t\treturn false;\t\/\/\tbool\n\t};\n\tthis.copyTo=function(\/* array *\/ arr, \/* int *\/ i){\n\t\t\/\/\tsummary\n\t\t\/\/\tCopy the contents of this queue into the passed array at index i.\n\t\tarr.splice(i,0,q);\n\t};\n\tthis.dequeue=function(){\n\t\t\/\/\tsummary\n\t\t\/\/\tshift the first element off the queue and return it\n\t\tvar r=q.shift();\n\t\tthis.count=q.length;\n\t\treturn r;\t\/\/\tobject\n\t};\n\tthis.enqueue=function(\/* object *\/ o){\n\t\t\/\/\tsummary\n\t\t\/\/\tput the passed object at the end of the queue\n\t\tthis.count=q.push(o);\n\t};\n\tthis.forEach=function(\/* function *\/ fn, \/* object? *\/ scope){\n\t\t\/\/\tsummary\n\t\t\/\/\tfunctional iterator, following the mozilla spec.\n\t\tvar s=scope||dj_global;\n\t\tif(Array.forEach){\n\t\t\tArray.forEach(q, fn, s);\n\t\t}else{\n\t\t\tfor(var i=0; i<q.length; i++){\n\t\t\t\tfn.call(s, q[i], i, q);\n\t\t\t}\n\t\t}\n\t};\n\tthis.getIterator=function(){\n\t\t\/\/\tsummary\n\t\t\/\/\tget an Iterator based on this queue.\n\t\treturn new dojo.collections.Iterator(q);\t\/\/\tdojo.collections.Iterator\n\t};\n\tthis.peek=function(){\n\t\t\/\/\tsummary\n\t\t\/\/\tget the next element in the queue without altering the queue.\n\t\treturn q[0];\n\t};\n\tthis.toArray=function(){\n\t\t\/\/\tsummary\n\t\t\/\/\treturn an array based on the internal array of the queue.\n\t\treturn [].concat(q);\n\t};","this_variables":["count","clear","clone","contains","copyTo","dequeue","enqueue","forEach","getIterator","peek","toArray"],"returns":"mixed"}}},"dojo.collections.Queue.clear":{"_":{"meta":{"summary":" clears the internal collection","src":"\t\tthis.count=q.length;","this_variables":["count"]}}},"dojo.collections.Queue.clone":{"_":{"meta":{"summary":" creates a new Queue based on this one dojo.collections.Queue","src":"","returns":"dojo.collections.Queue"}}},"dojo.collections.Queue.contains":{"_":{"meta":{"summary":" Check to see if the passed object is an element in this queue","parameters":{"o":{"type":"object"}},"src":"\t\t\tif (q[i]==o){\n\t\t\t\treturn true;\t\/\/\tbool\n\t\t\t}\n\t\t}\n\t\treturn false;\t\/\/\tbool","returns":"bool"}}},"dojo.collections.Queue.copyTo":{"_":{"meta":{"summary":" Copy the contents of this queue into the passed array at index i.","parameters":{"arr":{"type":"array"},"i":{"type":"int"}},"src":""}}},"dojo.collections.Queue.dequeue":{"_":{"meta":{"summary":" shift the first element off the queue and return it","src":"\t\tthis.count=q.length;\n\t\treturn r;\t\/\/\tobject","this_variables":["count"],"returns":"object"}}},"dojo.collections.Queue.enqueue":{"_":{"meta":{"summary":" put the passed object at the end of the queue","parameters":{"o":{"type":"object"}},"src":"","this_variables":["count"]}}},"dojo.collections.Queue.forEach":{"_":{"meta":{"summary":" functional iterator, following the mozilla spec.","parameters":{"fn":{"type":"function"},"scope":{"type":"object?"}},"src":"\t\tif(Array.forEach){\n\t\t\tArray.forEach(q, fn, s);\n\t\t}else{\n\t\t\tfor(var i=0; i<q.length; i++){\n\t\t\t\tfn.call(s, q[i], i, q);\n\t\t\t}\n\t\t}"}}},"dojo.collections.Queue.getIterator":{"_":{"meta":{"summary":" get an Iterator based on this queue. dojo.collections.Iterator","src":"","returns":"dojo.collections.Iterator"}}},"dojo.collections.Queue.peek":{"_":{"meta":{"summary":" get the next element in the queue without altering the queue.","src":""}}},"dojo.collections.Queue.toArray":{"_":{"meta":{"summary":" return an array based on the internal array of the queue.","src":""}}}}}},"dojo.collections.Set":{"meta":{"requires":{"common":["dojo.collections.Collections","dojo.collections.ArrayList"]},"functions":{"dojo.collections.Set.union":{"_":{"meta":{"summary":" Return the union of the two passed sets.","parameters":{"setA":{"type":"array"},"setB":{"type":"array"}},"src":"\t\tif (setB.constructor == Array) var setB = new dojo.collections.ArrayList(setB);\n\t\tif (!setA.toArray || !setB.toArray) dojo.raise(\"Set operations can only be performed on array-based collections.\");\n\t\tvar result = new dojo.collections.ArrayList(setA.toArray());\n\t\tvar e = setB.getIterator();\n\t\twhile(!e.atEnd()){\n\t\t\tvar item=e.get();\n\t\t\tif(!result.contains(item)){\n\t\t\t\tresult.add(item);\n\t\t\t}\n\t\t}\n\t\treturn result;\t\/\/\tdojo.collections.ArrayList","returns":"dojo.collections.ArrayList"}}},"dojo.collections.Set.intersection":{"_":{"meta":{"summary":" Return the intersection of the two passed sets.","parameters":{"setA":{"type":"array"},"setB":{"type":"array"}},"src":"\t\tif (setB.constructor == Array) var setB = new dojo.collections.ArrayList(setB);\n\t\tif (!setA.toArray || !setB.toArray) dojo.raise(\"Set operations can only be performed on array-based collections.\");\n\t\tvar result = new dojo.collections.ArrayList();\n\t\tvar e = setB.getIterator();\n\t\twhile(!e.atEnd()){\n\t\t\tvar item=e.get();\n\t\t\tif(setA.contains(item)){\n\t\t\t\tresult.add(item);\n\t\t\t}\n\t\t}\n\t\treturn result;\t\/\/\tdojo.collections.ArrayList","returns":"dojo.collections.ArrayList"}}},"dojo.collections.Set.difference":{"_":{"meta":{"summary":" Returns everything in setA that is not in setB.","parameters":{"setA":{"type":"array"},"setB":{"type":"array"}},"src":"\t\tif (setB.constructor == Array) var setB = new dojo.collections.ArrayList(setB);\n\t\tif (!setA.toArray || !setB.toArray) dojo.raise(\"Set operations can only be performed on array-based collections.\");\n\t\tvar result = new dojo.collections.ArrayList();\n\t\tvar e=setA.getIterator();\n\t\twhile(!e.atEnd()){\n\t\t\tvar item=e.get();\n\t\t\tif(!setB.contains(item)){\n\t\t\t\tresult.add(item);\n\t\t\t}\n\t\t}\n\t\treturn result;\t\/\/\tdojo.collections.ArrayList","returns":"dojo.collections.ArrayList"}}},"dojo.collections.Set.isSubSet":{"_":{"meta":{"summary":" Returns if set B is a subset of set A.","parameters":{"setA":{"type":"array"},"setB":{"type":"array"}},"src":"\t\tif (setB.constructor == Array) var setB = new dojo.collections.ArrayList(setB);\n\t\tif (!setA.toArray || !setB.toArray) dojo.raise(\"Set operations can only be performed on array-based collections.\");\n\t\tvar e = setA.getIterator();\n\t\twhile(!e.atEnd()){\n\t\t\tif(!setB.contains(e.get())){\n\t\t\t\treturn false;\t\/\/\tboolean\n\t\t\t}\n\t\t}\n\t\treturn true;\t\/\/\tboolean","returns":"boolean"}}},"dojo.collections.Set.isSuperSet":{"_":{"meta":{"summary":" Returns if set B is a superset of set A.","parameters":{"setA":{"type":"array"},"setB":{"type":"array"}},"src":"\t\tif (setB.constructor == Array) var setB = new dojo.collections.ArrayList(setB);\n\t\tif (!setA.toArray || !setB.toArray) dojo.raise(\"Set operations can only be performed on array-based collections.\");\n\t\tvar e = setB.getIterator();\n\t\twhile(!e.atEnd()){\n\t\t\tif(!setA.contains(e.get())){\n\t\t\t\treturn false;\t\/\/\tboolean\n\t\t\t}\n\t\t}\n\t\treturn true;\t\/\/\tboolean","returns":"boolean"}}}}}},"dojo.collections.SkipList":{"meta":{"requires":{"common":["dojo.collections.Collections","dojo.experimental"]},"functions":{"dojo.collections.SkipList":{"_":{"meta":{"summary":"","src":"\tfunction node(height, val){\n\t\tthis.value = val;\n\t\tthis.height = height;\n\t\tthis.nodes = new nodeList(height);\n\t\tthis.compare = function(val){\n\t\t\tif (this.value > val) return 1;\n\t\t\tif (this.value < val) return -1;\n\t\t\treturn 0;\n\t\t}\n\t\tthis.incrementHeight = function(){\n\t\t\tthis.nodes.incrementHeight();\n\t\t\tthis.height++;\n\t\t};\n\t\tthis.decrementHeight = function(){\n\t\t\tthis.nodes.decrementHeight();\n\t\t\tthis.height--;\n\t\t};\n\t}\n\tfunction nodeList(height){\n\t\tvar arr = [];\n\t\tthis.height = height;\n\t\tfor (var i = 0; i < height; i++) arr[i] = null;\n\t\tthis.item = function(i){\n\t\t\treturn arr[i];\n\t\t};\n\t\tthis.incrementHeight = function(){\n\t\t\tthis.height++;\n\t\t\tarr[this.height] = null;\n\t\t};\n\t\tthis.decrementHeight = function(){\n\t\t\tarr.splice(arr.length - 1, 1);\n\t\t\tthis.height--;\n\t\t};\n\t}\n\tfunction iterator(list){\n\t\tthis.element = list.head;\n\t\tthis.atEnd = function(){\n\t\t\treturn (this.element==null);\n\t\t}\n\t\tthis.get = function(){\n\t\t\tif(this.atEnd()){\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tthis.element=this.element.nodes[0];\n\t\t\treturn this.element;\n\t\t}\n\t\tthis.reset = function(){\n\t\t\tthis.element = list.head;\n\t\t}\n\t}\n\n\tfunction chooseRandomHeight(max){\n\t\tvar level = 1;\n\t\twhile (Math.random() < PROB && level < max) level++;\n\t\treturn level;\n\t}\n\n\tvar PROB = 0.5;\n\tvar comparisons = 0;\n\n\tthis.head = new node(1);\n\tthis.count = 0;\n\tthis.add = function(val){\n\t\tvar updates = [];\n\t\tvar current = this.head;\n\t\tfor (var i = this.head.height; i >= 0; i--){\n\t\t\tif (!(current.nodes[i] != null && current.nodes[i].compare(val) < 0)) comparisons++;\n\t\t\twhile (current.nodes[i] != null && current.nodes[i].compare(val) < 0){\n\t\t\t\tcurrent = current.nodes[i];\n\t\t\t\tcomparisons++;\n\t\t\t}\n\t\t\tupdates[i] = current;\n\t\t}\n\t\tif (current.nodes[0] != null && current.nodes[0].compare(val) == 0) return;\n\t\tvar n = new node(val, chooseRandomHeight(this.head.height + 1));\n\t\tthis.count++;\n\t\tif (n.height > this.head.height){\n\t\t\tthis.head.incrementHeight();\n\t\t\tthis.head.nodes[this.head.height - 1] = n;\n\t\t}\n\t\tfor (i = 0; i < n.height; i++){\n\t\t\tif (i < updates.length) {\n\t\t\t\tn.nodes[i] = updates[i].nodes[i];\n\t\t\t\tupdates[i].nodes[i] = n;\n\t\t\t}\n\t\t}\n\t};\n\t\n\tthis.contains = function(val){\n\t\tvar current = this.head;\n\t\tvar i;\n\t\tfor (i = this.head.height - 1; i >= 0; i--) {\n\t\t\twhile (current.item(i) != null) {\n\t\t\t\tcomparisons++;\n\t\t\t\tvar result = current.nodes[i].compare(val);\n\t\t\t\tif (result == 0) return true;\n\t\t\t\telse if (result < 0) current = current.nodes[i];\n\t\t\t\telse break;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t};\n\tthis.getIterator = function(){\n\t\treturn new iterator(this);\n\t};\n\n\tthis.remove = function(val){\n\t\tvar updates = [];\n\t\tvar current = this.head;\n\t\tfor (var i = this.head.height - 1; i >= 0; i--){\n\t\t\tif (!(current.nodes[i] != null && current.nodes[i].compare(val) < 0)) comparisons++;\n\t\t\twhile (current.nodes[i] != null && current.nodes[i].compare(val) < 0) {\n\t\t\t\tcurrent = current.nodes[i];\n\t\t\t\tcomparisons++;\n\t\t\t}\n\t\t\tupdates[i] = current;\n\t\t}\n\t\t\n\t\tcurrent = current.nodes[0];\n\t\tif (current != null && current.compare(val) == 0){\n\t\t\tthis.count--;\n\t\t\tfor (var i = 0; i < this.head.height; i++){\n\t\t\t\tif (updates[i].nodes[i] != current) break;\n\t\t\t\telse updates[i].nodes[i] = current.nodes[i];\n\t\t\t}\n\t\t\tif (this.head.nodes[this.head.height - 1] == null) this.head.decrementHeight();\n\t\t}\n\t};\n\tthis.resetComparisons = function(){ \n\t\tcomparisons = 0; \n\t};","this_variables":["value","height","nodes","compare","incrementHeight","decrementHeight","item","element","atEnd","get","reset","head","count","add","contains","getIterator","remove","resetComparisons"]}}},"dojo.collections.SkipList.compare":{"_":{"meta":{"summary":"","parameters":{"val":{"type":""}},"src":"\t\t\tif (this.value > val) return 1;\n\t\t\tif (this.value < val) return -1;\n\t\t\treturn 0;"}}},"dojo.collections.SkipList.incrementHeight":{"_":{"meta":{"summary":"","src":"\t\t\tthis.height++;\n\t\t\tarr[this.height] = null;"}}},"dojo.collections.SkipList.decrementHeight":{"_":{"meta":{"summary":"","src":"\t\t\tarr.splice(arr.length - 1, 1);\n\t\t\tthis.height--;"}}},"dojo.collections.SkipList.item":{"_":{"meta":{"summary":"","parameters":{"i":{"type":""}},"src":"\t\t\treturn arr[i];"}}},"dojo.collections.SkipList.atEnd":{"_":{"meta":{"summary":"","src":"\t\t\treturn (this.element==null);","this_variables":["element"]}}},"dojo.collections.SkipList.get":{"_":{"meta":{"summary":"","src":"\t\t\tif(this.atEnd()){\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tthis.element=this.element.nodes[0];\n\t\t\treturn this.element;","this_variables":["element"]}}},"dojo.collections.SkipList.reset":{"_":{"meta":{"summary":"","src":"\t\t\tthis.element = list.head;","this_variables":["element"]}}},"dojo.collections.SkipList.add":{"_":{"meta":{"summary":"","parameters":{"val":{"type":""}},"src":"\t\tvar updates = [];\n\t\tvar current = this.head;\n\t\tfor (var i = this.head.height; i >= 0; i--){\n\t\t\tif (!(current.nodes[i] != null && current.nodes[i].compare(val) < 0)) comparisons++;\n\t\t\twhile (current.nodes[i] != null && current.nodes[i].compare(val) < 0){\n\t\t\t\tcurrent = current.nodes[i];\n\t\t\t\tcomparisons++;\n\t\t\t}\n\t\t\tupdates[i] = current;\n\t\t}\n\t\tif (current.nodes[0] != null && current.nodes[0].compare(val) == 0) return;\n\t\tvar n = new node(val, chooseRandomHeight(this.head.height + 1));\n\t\tthis.count++;\n\t\tif (n.height > this.head.height){\n\t\t\tthis.head.incrementHeight();\n\t\t\tthis.head.nodes[this.head.height - 1] = n;\n\t\t}\n\t\tfor (i = 0; i < n.height; i++){\n\t\t\tif (i < updates.length) {\n\t\t\t\tn.nodes[i] = updates[i].nodes[i];\n\t\t\t\tupdates[i].nodes[i] = n;\n\t\t\t}\n\t\t}"}}},"dojo.collections.SkipList.contains":{"_":{"meta":{"summary":"","parameters":{"val":{"type":""}},"src":"\t\tvar current = this.head;\n\t\tvar i;\n\t\tfor (i = this.head.height - 1; i >= 0; i--) {\n\t\t\twhile (current.item(i) != null) {\n\t\t\t\tcomparisons++;\n\t\t\t\tvar result = current.nodes[i].compare(val);\n\t\t\t\tif (result == 0) return true;\n\t\t\t\telse if (result < 0) current = current.nodes[i];\n\t\t\t\telse break;\n\t\t\t}\n\t\t}\n\t\treturn false;"}}},"dojo.collections.SkipList.getIterator":{"_":{"meta":{"summary":"","src":"\t\treturn new iterator(this);"}}},"dojo.collections.SkipList.remove":{"_":{"meta":{"summary":"","parameters":{"val":{"type":""}},"src":"\t\tvar updates = [];\n\t\tvar current = this.head;\n\t\tfor (var i = this.head.height - 1; i >= 0; i--){\n\t\t\tif (!(current.nodes[i] != null && current.nodes[i].compare(val) < 0)) comparisons++;\n\t\t\twhile (current.nodes[i] != null && current.nodes[i].compare(val) < 0) {\n\t\t\t\tcurrent = current.nodes[i];\n\t\t\t\tcomparisons++;\n\t\t\t}\n\t\t\tupdates[i] = current;\n\t\t}\n\t\t\n\t\tcurrent = current.nodes[0];\n\t\tif (current != null && current.compare(val) == 0){\n\t\t\tthis.count--;\n\t\t\tfor (var i = 0; i < this.head.height; i++){\n\t\t\t\tif (updates[i].nodes[i] != current) break;\n\t\t\t\telse updates[i].nodes[i] = current.nodes[i];\n\t\t\t}\n\t\t\tif (this.head.nodes[this.head.height - 1] == null) this.head.decrementHeight();\n\t\t}"}}},"dojo.collections.SkipList.resetComparisons":{"_":{"meta":{"summary":"","src":"\t\tcomparisons = 0; "}}}}}},"dojo.collections.SortedList":{"meta":{"requires":{"common":["dojo.collections.Collections"]},"functions":{"dojo.collections.SortedList":{"_":{"meta":{"summary":" creates a collection that acts like a dictionary but is also internally sorted. Note that the act of adding any elements forces an internal resort, making this object potentially slow.","parameters":{"dictionary":{"type":"object?"}},"src":"\tvar items={};\n\tvar q=[];\n\tvar sorter=function(a,b){\n\t\tif (a.key > b.key) return 1;\n\t\tif (a.key < b.key) return -1;\n\t\treturn 0;\n\t};\n\tvar build=function(){\n\t\tq=[];\n\t\tvar e=_this.getIterator();\n\t\twhile (!e.atEnd()){\n\t\t\tq.push(e.get());\n\t\t}\n\t\tq.sort(sorter);\n\t};\n\tvar testObject={};\n\n\tthis.count=q.length;\n\tthis.add=function(\/* string *\/ k,\/* object *\/v){\n\t\t\/\/\tsummary\n\t\t\/\/\tadd the passed value to the dictionary at location k\n\t\tif (!items[k]) {\n\t\t\titems[k]=new dojo.collections.DictionaryEntry(k,v);\n\t\t\tthis.count=q.push(items[k]);\n\t\t\tq.sort(sorter);\n\t\t}\n\t};\n\tthis.clear=function(){\n\t\t\/\/\tsummary\n\t\t\/\/\tclear the internal collections\n\t\titems={};\n\t\tq=[];\n\t\tthis.count=q.length;\n\t};\n\tthis.clone=function(){\n\t\t\/\/\tsummary\n\t\t\/\/\tcreate a clone of this sorted list\n\t\treturn new dojo.collections.SortedList(this);\t\/\/\tdojo.collections.SortedList\n\t};\n\tthis.contains=this.containsKey=function(\/* string *\/ k){\n\t\t\/\/\tsummary\n\t\t\/\/\tCheck to see if the list has a location k\n\t\tif(testObject[k]){\n\t\t\treturn false;\t\t\t\/\/\tbool\n\t\t}\n\t\treturn (items[k]!=null);\t\/\/\tbool\n\t};\n\tthis.containsValue=function(\/* object *\/ o){\n\t\t\/\/\tsummary\n\t\t\/\/\tCheck to see if this list contains the passed object\n\t\tvar e=this.getIterator();\n\t\twhile (!e.atEnd()){\n\t\t\tvar item=e.get();\n\t\t\tif(item.value==o){ \n\t\t\t\treturn true;\t\/\/\tbool\n\t\t\t}\n\t\t}\n\t\treturn false;\t\/\/\tbool\n\t};\n\tthis.copyTo=function(\/* array *\/ arr, \/* int *\/ i){\n\t\t\/\/\tsummary\n\t\t\/\/\tcopy the contents of the list into array arr at index i\n\t\tvar e=this.getIterator();\n\t\tvar idx=i;\n\t\twhile(!e.atEnd()){\n\t\t\tarr.splice(idx,0,e.get());\n\t\t\tidx++;\n\t\t}\n\t};\n\tthis.entry=function(\/* string *\/ k){\n\t\t\/\/\tsummary\n\t\t\/\/\treturn the object at location k\n\t\treturn items[k];\t\/\/\tdojo.collections.DictionaryEntry\n\t};\n\tthis.forEach=function(\/* function *\/ fn, \/* object? *\/ scope){\n\t\t\/\/\tsummary\n\t\t\/\/\tfunctional iterator, following the mozilla spec.\n\t\tvar s=scope||dj_global;\n\t\tif(Array.forEach){\n\t\t\tArray.forEach(q, fn, s);\n\t\t}else{\n\t\t\tfor(var i=0; i<q.length; i++){\n\t\t\t\tfn.call(s, q[i], i, q);\n\t\t\t}\n\t\t}\n\t};\n\tthis.getByIndex=function(\/* int *\/ i){\n\t\t\/\/\tsummary\n\t\t\/\/\treturn the item at index i\n\t\treturn q[i].valueOf();\t\/\/\tobject\n\t};\n\tthis.getIterator=function(){\n\t\t\/\/\tsummary\n\t\t\/\/\tget an iterator for this object\n\t\treturn new dojo.collections.DictionaryIterator(items);\t\/\/\tdojo.collections.DictionaryIterator\n\t};\n\tthis.getKey=function(\/* int *\/ i){\n\t\t\/\/\tsummary\n\t\t\/\/\treturn the key of the item at index i\n\t\treturn q[i].key;\n\t};\n\tthis.getKeyList=function(){\n\t\t\/\/\tsummary\n\t\t\/\/\treturn an array of the keys set in this list\n\t\tvar arr=[];\n\t\tvar e=this.getIterator();\n\t\twhile (!e.atEnd()){\n\t\t\tarr.push(e.get().key);\n\t\t}\n\t\treturn arr;\t\/\/\tarray\n\t};\n\tthis.getValueList=function(){\n\t\t\/\/\tsummary\n\t\t\/\/\treturn an array of values in this list\n\t\tvar arr=[];\n\t\tvar e=this.getIterator();\n\t\twhile (!e.atEnd()){\n\t\t\tarr.push(e.get().value);\n\t\t}\n\t\treturn arr;\t\/\/\tarray\n\t};\n\tthis.indexOfKey=function(\/* string *\/ k){\n\t\t\/\/\tsummary\n\t\t\/\/\treturn the index of the passed key.\n\t\tfor (var i=0; i<q.length; i++){\n\t\t\tif (q[i].key==k){\n\t\t\t\treturn i;\t\/\/\tint\n\t\t\t}\n\t\t}\n\t\treturn -1;\t\/\/\tint\n\t};\n\tthis.indexOfValue=function(\/* object *\/ o){\n\t\t\/\/\tsummary\n\t\t\/\/\treturn the first index of object o\n\t\tfor (var i=0; i<q.length; i++){\n\t\t\tif (q[i].value==o){\n\t\t\t\treturn i;\t\/\/\tint\n\t\t\t}\n\t\t}\n\t\treturn -1;\t\/\/\tint\n\t};\n\tthis.item=function(\/* string *\/ k){\n\t\t\/\/ \tsummary\n\t\t\/\/\treturn the value of the object at location k.\n\t\tif(k in items && !testObject[k]){\n\t\t\treturn items[k].valueOf();\t\/\/\tobject\n\t\t}\n\t\treturn undefined;\t\/\/\tobject\n\t};\n\tthis.remove=function(\/* string *\/k){\n\t\t\/\/ \tsummary\n\t\t\/\/\tremove the item at location k and rebuild the internal collections.\n\t\tdelete items[k];\n\t\tbuild();\n\t\tthis.count=q.length;\n\t};\n\tthis.removeAt=function(\/* int *\/ i){\n\t\t\/\/\tsummary\n\t\t\/\/\tremove the item at index i, and rebuild the internal collections.\n\t\tdelete items[q[i].key];\n\t\tbuild();\n\t\tthis.count=q.length;\n\t};\n\tthis.replace=function(\/* string *\/ k, \/* object *\/ v){\n\t\t\/\/\tsummary\n\t\t\/\/\tReplace an existing item if it's there, and add a new one if not.\n\t\tif (!items[k]){\n\t\t\t\/\/\twe're adding a new object, return false\n\t\t\tthis.add(k,v);\n\t\t\treturn false; \/\/ bool\n\t\t}else{\n\t\t\t\/\/\twe're replacing an object, return true\n\t\t\titems[k]=new dojo.collections.DictionaryEntry(k,v);\n\t\t\tq.sort(sorter);\n\t\t\treturn true; \/\/ bool\n\t\t}\n\t};\n\tthis.setByIndex=function(\/* int *\/ i, \/* object *\/ o){\n\t\t\/\/\tsummary\n\t\t\/\/\tset an item by index\n\t\titems[q[i].key].value=o;\n\t\tbuild();\n\t\tthis.count=q.length;\n\t};\n\tif (dictionary){\n\t\tvar e=dictionary.getIterator();\n\t\twhile (!e.atEnd()){\n\t\t\tvar item=e.get();\n\t\t\tq[q.length]=items[item.key]=new dojo.collections.DictionaryEntry(item.key,item.value);\n\t\t}\n\t\tq.sort(sorter);\n\t}","this_variables":["count","add","clear","clone","contains","containsValue","copyTo","entry","forEach","getByIndex","getIterator","getKey","getKeyList","getValueList","indexOfKey","indexOfValue","item","remove","removeAt","replace","setByIndex"],"returns":"mixed"}}},"dojo.collections.SortedList.add":{"_":{"meta":{"summary":" add the passed value to the dictionary at location k","parameters":{"k":{"type":"string"},"* object *\/v":{"type":""}},"src":"\t\t\titems[k]=new dojo.collections.DictionaryEntry(k,v);\n\t\t\tthis.count=q.push(items[k]);\n\t\t\tq.sort(sorter);\n\t\t}","this_variables":["count"]}}},"dojo.collections.SortedList.clear":{"_":{"meta":{"summary":" clear the internal collections","src":"\t\tq=[];\n\t\tthis.count=q.length;","this_variables":["count"]}}},"dojo.collections.SortedList.clone":{"_":{"meta":{"summary":" create a clone of this sorted list dojo.collections.SortedList","src":"","returns":"dojo.collections.SortedList"}}},"dojo.collections.SortedList.containsKey":{"_":{"meta":{"summary":" Check to see if the list has a location k","parameters":{"k":{"type":"string"}},"src":"\t\t\treturn false;\t\t\t\/\/\tbool\n\t\t}\n\t\treturn (items[k]!=null);\t\/\/\tbool","returns":"bool"}}},"dojo.collections.SortedList.containsValue":{"_":{"meta":{"summary":" Check to see if this list contains the passed object","parameters":{"o":{"type":"object"}},"src":"\t\twhile (!e.atEnd()){\n\t\t\tvar item=e.get();\n\t\t\tif(item.value==o){ \n\t\t\t\treturn true;\t\/\/\tbool\n\t\t\t}\n\t\t}\n\t\treturn false;\t\/\/\tbool","returns":"bool"}}},"dojo.collections.SortedList.copyTo":{"_":{"meta":{"summary":" copy the contents of the list into array arr at index i","parameters":{"arr":{"type":"array"},"i":{"type":"int"}},"src":"\t\tvar idx=i;\n\t\twhile(!e.atEnd()){\n\t\t\tarr.splice(idx,0,e.get());\n\t\t\tidx++;\n\t\t}"}}},"dojo.collections.SortedList.entry":{"_":{"meta":{"summary":" return the object at location k dojo.collections.DictionaryEntry","parameters":{"k":{"type":"string"}},"src":"","returns":"dojo.collections.DictionaryEntry"}}},"dojo.collections.SortedList.forEach":{"_":{"meta":{"summary":" functional iterator, following the mozilla spec.","parameters":{"fn":{"type":"function"},"scope":{"type":"object?"}},"src":"\t\tif(Array.forEach){\n\t\t\tArray.forEach(q, fn, s);\n\t\t}else{\n\t\t\tfor(var i=0; i<q.length; i++){\n\t\t\t\tfn.call(s, q[i], i, q);\n\t\t\t}\n\t\t}"}}},"dojo.collections.SortedList.getByIndex":{"_":{"meta":{"summary":" return the item at index i object","parameters":{"i":{"type":"int"}},"src":"","returns":"object"}}},"dojo.collections.SortedList.getIterator":{"_":{"meta":{"summary":" get an iterator for this object dojo.collections.DictionaryIterator","src":"","returns":"dojo.collections.DictionaryIterator"}}},"dojo.collections.SortedList.getKey":{"_":{"meta":{"summary":" return the key of the item at index i","parameters":{"i":{"type":"int"}},"src":""}}},"dojo.collections.SortedList.getKeyList":{"_":{"meta":{"summary":" return an array of the keys set in this list","src":"\t\tvar e=this.getIterator();\n\t\twhile (!e.atEnd()){\n\t\t\tarr.push(e.get().key);\n\t\t}\n\t\treturn arr;\t\/\/\tarray","returns":"array"}}},"dojo.collections.SortedList.getValueList":{"_":{"meta":{"summary":" return an array of values in this list","src":"\t\tvar e=this.getIterator();\n\t\twhile (!e.atEnd()){\n\t\t\tarr.push(e.get().value);\n\t\t}\n\t\treturn arr;\t\/\/\tarray","returns":"array"}}},"dojo.collections.SortedList.indexOfKey":{"_":{"meta":{"summary":" return the index of the passed key.","parameters":{"k":{"type":"string"}},"src":"\t\t\tif (q[i].key==k){\n\t\t\t\treturn i;\t\/\/\tint\n\t\t\t}\n\t\t}\n\t\treturn -1;\t\/\/\tint","returns":"int"}}},"dojo.collections.SortedList.indexOfValue":{"_":{"meta":{"summary":" return the first index of object o","parameters":{"o":{"type":"object"}},"src":"\t\t\tif (q[i].value==o){\n\t\t\t\treturn i;\t\/\/\tint\n\t\t\t}\n\t\t}\n\t\treturn -1;\t\/\/\tint","returns":"int"}}},"dojo.collections.SortedList.item":{"_":{"meta":{"summary":" return the value of the object at location k.","parameters":{"k":{"type":"string"}},"src":"\t\t\treturn items[k].valueOf();\t\/\/\tobject\n\t\t}\n\t\treturn undefined;\t\/\/\tobject","returns":"object"}}},"dojo.collections.SortedList.remove":{"_":{"meta":{"summary":" remove the item at location k and rebuild the internal collections.","parameters":{"k":{"type":"string"}},"src":"\t\tbuild();\n\t\tthis.count=q.length;","this_variables":["count"]}}},"dojo.collections.SortedList.removeAt":{"_":{"meta":{"summary":" remove the item at index i, and rebuild the internal collections.","parameters":{"i":{"type":"int"}},"src":"\t\tbuild();\n\t\tthis.count=q.length;","this_variables":["count"]}}},"dojo.collections.SortedList.replace":{"_":{"meta":{"summary":" Replace an existing item if it's there, and add a new one if not.","parameters":{"k":{"type":"string"},"v":{"type":"object"}},"src":"\t\t\t\/\/\twe're adding a new object, return false\n\t\t\tthis.add(k,v);\n\t\t\treturn false; \/\/ bool\n\t\t}else{\n\t\t\t\/\/\twe're replacing an object, return true\n\t\t\titems[k]=new dojo.collections.DictionaryEntry(k,v);\n\t\t\tq.sort(sorter);\n\t\t\treturn true; \/\/ bool\n\t\t}","returns":"bool"}}},"dojo.collections.SortedList.setByIndex":{"_":{"meta":{"summary":" set an item by index","parameters":{"i":{"type":"int"},"o":{"type":"object"}},"src":"\t\tbuild();\n\t\tthis.count=q.length;","this_variables":["count"]}}}}}},"dojo.collections.Stack":{"meta":{"requires":{"common":["dojo.collections.Collections"]},"functions":{"dojo.collections.Stack":{"_":{"meta":{"summary":" returns an object of type dojo.collections.Stack","parameters":{"arr":{"type":"array?"}},"src":"\tif (arr) q=q.concat(arr);\n\tthis.count=q.length;\n\tthis.clear=function(){\n\t\t\/\/\tsummary\n\t\t\/\/\tClear the internal array and reset the count\n\t\tq=[];\n\t\tthis.count=q.length;\n\t};\n\tthis.clone=function(){\n\t\t\/\/\tsummary\n\t\t\/\/\tCreate and return a clone of this Stack\n\t\treturn new dojo.collections.Stack(q);\n\t};\n\tthis.contains=function(\/* object *\/o){\n\t\t\/\/\tsummary\n\t\t\/\/\tcheck to see if the stack contains object o\n\t\tfor (var i=0; i<q.length; i++){\n\t\t\tif (q[i] == o){\n\t\t\t\treturn true;\t\/\/\tbool\n\t\t\t}\n\t\t}\n\t\treturn false;\t\/\/\tbool\n\t};\n\tthis.copyTo=function(\/* array *\/ arr, \/* int *\/ i){\n\t\t\/\/\tsummary\n\t\t\/\/\tcopy the stack into array arr at index i\n\t\tarr.splice(i,0,q);\n\t};\n\tthis.forEach=function(\/* function *\/ fn, \/* object? *\/ scope){\n\t\t\/\/\tsummary\n\t\t\/\/\tfunctional iterator, following the mozilla spec.\n\t\tvar s=scope||dj_global;\n\t\tif(Array.forEach){\n\t\t\tArray.forEach(q, fn, s);\n\t\t}else{\n\t\t\tfor(var i=0; i<q.length; i++){\n\t\t\t\tfn.call(s, q[i], i, q);\n\t\t\t}\n\t\t}\n\t};\n\tthis.getIterator=function(){\n\t\t\/\/\tsummary\n\t\t\/\/\tget an iterator for this collection\n\t\treturn new dojo.collections.Iterator(q);\t\/\/\tdojo.collections.Iterator\n\t};\n\tthis.peek=function(){\n\t\t\/\/\tsummary\n\t\t\/\/\tReturn the next item without altering the stack itself.\n\t\treturn q[(q.length-1)];\t\/\/\tobject\n\t};\n\tthis.pop=function(){\n\t\t\/\/\tsummary\n\t\t\/\/\tpop and return the next item on the stack\n\t\tvar r=q.pop();\n\t\tthis.count=q.length;\n\t\treturn r;\t\/\/\tobject\n\t};\n\tthis.push=function(\/* object *\/ o){\n\t\t\/\/\tsummary\n\t\t\/\/\tPush object o onto the stack\n\t\tthis.count=q.push(o);\n\t};\n\tthis.toArray=function(){\n\t\t\/\/\tsummary\n\t\t\/\/\tcreate and return an array based on the internal collection\n\t\treturn [].concat(q);\t\/\/\tarray\n\t};","this_variables":["count","clear","clone","contains","copyTo","forEach","getIterator","peek","pop","push","toArray"],"returns":"mixed"}}},"dojo.collections.Stack.clear":{"_":{"meta":{"summary":" Clear the internal array and reset the count","src":"\t\tthis.count=q.length;","this_variables":["count"]}}},"dojo.collections.Stack.clone":{"_":{"meta":{"summary":" Create and return a clone of this Stack","src":""}}},"dojo.collections.Stack.contains":{"_":{"meta":{"summary":" check to see if the stack contains object o","parameters":{"o":{"type":"object"}},"src":"\t\t\tif (q[i] == o){\n\t\t\t\treturn true;\t\/\/\tbool\n\t\t\t}\n\t\t}\n\t\treturn false;\t\/\/\tbool","returns":"bool"}}},"dojo.collections.Stack.copyTo":{"_":{"meta":{"summary":" copy the stack into array arr at index i","parameters":{"arr":{"type":"array"},"i":{"type":"int"}},"src":""}}},"dojo.collections.Stack.forEach":{"_":{"meta":{"summary":" functional iterator, following the mozilla spec.","parameters":{"fn":{"type":"function"},"scope":{"type":"object?"}},"src":"\t\tif(Array.forEach){\n\t\t\tArray.forEach(q, fn, s);\n\t\t}else{\n\t\t\tfor(var i=0; i<q.length; i++){\n\t\t\t\tfn.call(s, q[i], i, q);\n\t\t\t}\n\t\t}"}}},"dojo.collections.Stack.getIterator":{"_":{"meta":{"summary":" get an iterator for this collection dojo.collections.Iterator","src":"","returns":"dojo.collections.Iterator"}}},"dojo.collections.Stack.peek":{"_":{"meta":{"summary":" Return the next item without altering the stack itself. object","src":"","returns":"object"}}},"dojo.collections.Stack.pop":{"_":{"meta":{"summary":" pop and return the next item on the stack","src":"\t\tthis.count=q.length;\n\t\treturn r;\t\/\/\tobject","this_variables":["count"],"returns":"object"}}},"dojo.collections.Stack.push":{"_":{"meta":{"summary":" Push object o onto the stack","parameters":{"o":{"type":"object"}},"src":"","this_variables":["count"]}}},"dojo.collections.Stack.toArray":{"_":{"meta":{"summary":" create and return an array based on the internal collection array","src":"","returns":"array"}}}}}},"dojo.collections._":{"meta":{"requires":{"common":["dojo.collections.Collections","dojo.collections.SortedList","dojo.collections.Dictionary","dojo.collections.Queue","dojo.collections.ArrayList","dojo.collections.Stack","dojo.collections.Set"]}}}}