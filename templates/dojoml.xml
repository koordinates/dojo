<?xml version="1.0" encoding="utf-8"?>
<dojo:application xmlns:dojo="http://www.dojotoolkit.org/2004/dojoml">
	<!-- TODO: -->

	<!-- attributes
		id: unique identifier, string
		cssClassName: string, follows rules of a css class name, will match css clases in an external stylesheet
		cssStyle: inline css rules... seems like a reasonable compromose rather than the slew of presentational attributes in other similiar syntaxes
		dojoStyle: presentational attributes on a component level that are not css... TODO: we may break these into attributes in their own namespace, or perhaps consider something like a -dojo-cssPropertyName for them...
		dataProivder: data or a pointer to a data source or data model using JavaScript syntax... decided to use ognl/jsf style syntax rather than xpath for simplicity:
			text: dataProvider="some plain text"
			reference to a model: dataProvider="modelName"
			reference to an item in a model: dataProvider="modelName.elementName"
			xmlHttpRequest result: dataProvider="uri"
			TODO: soap, real-time/mod_pubsub, wsdl, etc.
		action: uri for form submission

		TODO: "virtual" actions, i.e. events sent to the server upon submitting a form or completing an action
		TODO: a way to specify event triggers, drag and drop, etc.
		TODO: add the rest of the components... this is a non-exhaustive list to get started on
		TODO: how do we want to handle data validation models... separate elements or as an attribute on the field... basically as part of the model or part of the ui?

	-->
	<!-- TODO: Define relationships between components, if any -->
	<!-- TODO: Determine how to define events declaratively? -->
	<!-- TODO: How to define nontrivial relationships between data structures for different components -->
	<!-- TODO: How to define data models that grab elements from different data sources -->

	<!-- structure
		There are two fundamentally different approaches that were considered here for how the markup works.  One is the XAML style where the structure can actually represent the underlying data model: http://myxaml.com/marcclifton/archive/2004/04/04/193.aspx .  The other is to make the markup reflective of what components are, and to abstract away the particular structure of the underlying implementation.  In this case, I think our target market is more in line with the latter.  I'm thinking that we're not looking for a way to program with xml, but rather a way to configure with xml.
	-->

	<!-- ways to specify attributes
			1. as nested elements:
			<component>
				<prop1>prop1Value</prop1>
				<prop2>prop2Value</prop2>
				<prop3>prop3Value</prop3>
				...
			</component>

			2. as nested elements, with more complex property structures:
			<component>
				<prop1>
					<item1>
						prop1Item1Value
					</item1>
					<item2>
						prop1Item2Value
					</item2>
				</prop1>
				<prop2>prop2Value</prop2>
				<prop3>prop3Value</prop3>
				...
			</component>

			3. as an xml fragment somewhere in the current or external document:
			<component propertyProvider="file.elementId" />

			<properties>
				<propertyGroup id="elementId">
					<prop1>prop1Value</prop1>
					<prop2>prop2Value</prop2>
					<prop3>prop3Value</prop3>
				</propertyGroup>
			</properties>

			in essence, this is a componentDefinitionModel, so there's no reason to
			arbitrarily place it in a properties element, i.e....

			<dojo:componentDefinitionModel id="" type="">
				<prop1>prop1Value</prop1>
				<prop2>prop2Value</prop2>
				<prop3>prop3Value</prop3>
			</dojo:componentDefinitionModel>


			4. as attributes
			<component prop1="prop1Value" prop2="prop2Value" prop3="prop3Value" />

			5. as a css selector style name value pairs in a properties attribute
			<component properties="prop1:prop1Value;prop2:prop2Value;prop3:prop3Value;" />

			6. perhaps we may now or later consider also supporting the use of an external css-like selector file for properties without consideration for cascading (for now, we are NOT SUPPORTING THIS):

			<component propertyProvider="file.className" />

			.className {
				prop1:prop1Value;
				prop2:prop2Value;
				prop3:prop3Value;
			}
	-->

	<!-- components -->
	<dojo:button id="" cssClassName="" cssStyle="" dojoStyle="" dataProvider="" />
	<dojo:contextMenu id="" cssClassName="" cssStyle="" dojoStyle="" dataProvider="" />
	<dojo:menu id="" cssClassName="" cssStyle="" dojoStyle="" dataProvider="" />
	<dojo:progressBar id="" cssClassName="" cssStyle="" dojoStyle="" dataProvider="" />
	<dojo:list id="" cssClassName="" cssStyle="" dojoStyle="" dataProvider="" />
	<dojo:splitPane id="" cssClassName="" cssStyle="" dojoStyle="" dataProvider="" />
	<dojo:tabbedPane id="" cssClassName="" cssStyle="" dojoStyle="" dataProvider="" />
	<dojo:tree id="" cssClassName="" cssStyle="" dojoStyle="" dataProvider="" />
	<dojo:wizard id="" cssClassName="" cssStyle="" dojoStyle="" dataProvider="" />

	<dojo:form id="" cssClassName="" cssStyle="" dojoStyle="" action="">
		<!-- TODO: We should make an effort to include items in the whatwg's web forms 2.0 spec -->
		<dojo:textInput type="text|password|hidden|image|datetime|date|month|week|time|name|range|email|uri" />
		<dojo:button />
		<dojo:selectOne type="list|dropdown|radio" /> <!-- drop down and radio buttons -->
		<dojo:selectMultiple type="list|checkbox" /> <!-- multiple select and checkboxes -->
		<dojo:comboBox />
		<dojo:file />
		<dojo:datePicker />
		<!-- dojo:numericStepper should be replaced by a select list with the appropriate dataProvider? -->

	</dojo:form>

	<!-- traditionally static or non-componentized elements -->
	<dojo:label id="" cssClassName="" cssStyle="" dojoStyle="" dataProvider="" /> <!-- container to insert text through a static or dynamic dataProvider -->
	<dojo:list id="" cssClassName="" cssStyle="" dojoStyle="" dataProvider="" />
	<dojo:link id="" cssClassName="" cssStyle="" dojoStyle="" dataProvider="" />

	<dojo:resource dataProvider="" type="css|xslt|javascript|rss|atom" version="" />
	<dojo:htmlFragment dataProvider="" />
	<dojo:svgFragment dataProvider="" />
	<dojo:xmlFragment dataProvider="" /><!-- for generic namespaces? -->

	<dojo:grid /><!-- TODO: add attributes -->
	<dojo:tabPane /><!-- TODO: add attributes -->
	<dojo:box /><!-- TODO: add attributes -->

	<!-- models -->

	<dojo:dataModel id="" src="" type="xml|javascript"><!-- src is a uri -->
		<!-- dataModel can be empty, or cotain xml describing the structure of the data that will be passed from the src, or it can contain an xml data structure inline.  xml is allowed in any namespace... perhaps we should consider requiring a descriptor of the data structure, though that seems silly, and I'm not sure if it buys us anything. Actually, I've figured out what it buys us... it allows us to define the translation between any arbitrary xml data source or javascript data structure, and that required for the component's data model... so someone could easily have an xml fragment somewhere and use part or all of that data structure to feed a component -->
	</dojo:dataModel>


</dojo>
