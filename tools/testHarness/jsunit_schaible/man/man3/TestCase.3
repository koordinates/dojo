.TH "TestCase" 3 "9 Nov 2002" "JsUnit" \" -*- nroff -*-
.ad l
.nh
.SH NAME
TestCase \- A test case defines the fixture to run multiple tests. 
.SH SYNOPSIS
.br
.PP
Inherits \fBAssert\fP, and \fBTest\fP.
.PP
Inherited by \fBExceptionTestCase\fP.
.PP
.SS "Public Methods"

.in +1c
.ti -1c
.RI "void \fBTestCase\fP (\fBString\fP name)"
.br
.RI "\fIConstructs a test case with the given name.\fP"
.ti -1c
.RI "void \fBrunTest\fP ()"
.br
.RI "\fIOverride to run the test and assert its state.\fP"
.ti -1c
.RI "\fBString\fP \fBgetName\fP ()"
.br
.RI "\fIRetrieves the name of the test.\fP"
.ti -1c
.RI "void \fBtearDown\fP ()"
.br
.RI "\fIClear up the environment of the fixture.\fP"
.ti -1c
.RI "void \fBsetName\fP (\fBString\fP name)"
.br
.RI "\fISets the name of the test case.\fP"
.ti -1c
.RI "\fBTestResult\fP \fBrun\fP (\fBTestResult\fP result)"
.br
.RI "\fIRuns a test and collects its result in a \fBTestResult\fP instance.\fP"
.ti -1c
.RI "void \fBsetUp\fP ()"
.br
.RI "\fISet up the environment of the fixture.\fP"
.ti -1c
.RI "Number \fBcountTestCases\fP ()"
.br
.RI "\fICounts the number of test cases that will be run by this test.\fP"
.ti -1c
.RI "\fBTest\fP \fBfindTest\fP (\fBString\fP testName)"
.br
.RI "\fIFind a test by name.\fP"
.ti -1c
.RI "\fBTestResult\fP \fBcreateResult\fP ()"
.br
.RI "\fICreates a default \fBTestResult\fP object.\fP"
.ti -1c
.RI "void \fBrunBare\fP ()"
.br
.ti -1c
.RI "\fBString\fP \fBtoString\fP ()"
.br
.RI "\fIRetrieve the test case as string.\fP"
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "int \fBmName\fP"
.br
.in -1c
.SH "DETAILED DESCRIPTION"
.PP 
A test case defines the fixture to run multiple tests.
.PP
To define a test case
.TP
implement a subclass of TestCase
.TP
define instance variables that store the state of the fixture
.TP
initialize the fixture state by overriding \fCsetUp\fP
.TP
clean-up after a test by overriding \fCtearDown\fP. Each test runs in its own fixture so there can be no side effects among  test runs.
.PP
For each test implement a method which interacts with the fixture. Verify the expected results with assertions specified by calling \fCassertTrue\fP with a boolean or one of the other assert  functions.
.PP
Once the methods are defined you can run them. The framework supports both a static and more generic way to run a test. In the static way you override the runTest method and define the method to be invoked. The generic way uses the JavaScript functionality to enumerate a function's methods to implement \fCrunTest\fP. In this case the name of the case has to correspond to the test method to be run.
.PP
The tests to be run can be collected into a \fBTestSuite\fP. JsUnit provides several \fItest runners\fP which can run a test suite and collect the results. A test runner expects a function \fC\fIFileName\fPSuite\fP as the  entry point to get a test to run.
.PP
\fBSee also: \fP
.in +1c
\fBTestResult\fP , \fBTestSuite\fP 
.PP
.SH "CONSTRUCTOR & DESTRUCTOR DOCUMENTATION"
.PP 
.SS "void TestCase::TestCase (\fBString\fP name)"
.PP
Constructs a test case with the given name.
.PP
Parameters: \fP
.in +1c
.TP
\fB\fIname\fP\fP
The name of the test case. 
.SH "MEMBER FUNCTION DOCUMENTATION"
.PP 
.SS "Number TestCase::countTestCases ()\fC [virtual]\fP"
.PP
Counts the number of test cases that will be run by this test.
.PP
\fBReturns: \fP
.in +1c
Returns 1. 
.PP
Implements \fBTest\fP.
.SS "\fBTestResult\fP TestCase::createResult ()"
.PP
Creates a default \fBTestResult\fP object.
.PP
\fBReturns: \fP
.in +1c
Returns the new object. 
.SS "\fBTest\fP TestCase::findTest (\fBString\fP testName)\fC [virtual]\fP"
.PP
Find a test by name.
.PP
\fBNote: \fP
.in +1c
This is an enhancement to JUnit 3.8 
.PP
Parameters: \fP
.in +1c
.TP
\fB\fItestName\fP\fP
The name of the searched test. 
.PP
\fBReturns: \fP
.in +1c
Returns this if the test's name matches or null. 
.PP
Implements \fBTest\fP.
.SS "\fBString\fP TestCase::getName ()\fC [virtual]\fP"
.PP
Retrieves the name of the test.
.PP
\fBReturns: \fP
.in +1c
The name of test cases. 
.PP
Implements \fBTest\fP.
.SS "\fBTestResult\fP TestCase::run (\fBTestResult\fP result)\fC [virtual]\fP"
.PP
Runs a test and collects its result in a \fBTestResult\fP instance.
.PP
The function can be called with or without argument. If no argument is given, the function will create a default result set and return it. Otherwise the return value can be omitted. 
.PP
Parameters: \fP
.in +1c
.TP
\fB\fIresult\fP\fP
The test result to fill. 
.PP
\fBReturns: \fP
.in +1c
Returns the test result. 
.PP
Implements \fBTest\fP.
.SS "void TestCase::runBare ()"
.PP
.SS "void TestCase::runTest ()"
.PP
Override to run the test and assert its state.
.PP
Reimplemented in \fBExceptionTestCase\fP.
.SS "void TestCase::setName (\fBString\fP name)\fC [virtual]\fP"
.PP
Sets the name of the test case.
.PP
Parameters: \fP
.in +1c
.TP
\fB\fIname\fP\fP
The new name of test cases. 
.PP
Implements \fBTest\fP.
.SS "void TestCase::setUp ()"
.PP
Set up the environment of the fixture.
.PP
.SS "void TestCase::tearDown ()"
.PP
Clear up the environment of the fixture.
.PP
.SS "\fBString\fP TestCase::toString ()"
.PP
Retrieve the test case as string.
.PP
\fBReturns: \fP
.in +1c
Returns the name of the test case. 
.SH "MEMBER DATA DOCUMENTATION"
.PP 
.SS "int TestCase::mName"
.PP


.SH "AUTHOR"
.PP 
Generated automatically by Doxygen for JsUnit from the source code.
