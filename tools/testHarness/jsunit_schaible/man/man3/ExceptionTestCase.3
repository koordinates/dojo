.TH "ExceptionTestCase" 3 "9 Nov 2002" "JsUnit" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ExceptionTestCase \- A \fBTestCase\fP that expects an exception of class mClass to be thrown. 
.SH SYNOPSIS
.br
.PP
Inherits \fBTestCase\fP.
.PP
.SS "Public Methods"

.in +1c
.ti -1c
.RI "void \fBExceptionTestCase\fP (\fBString\fP name, \fBFunction\fP clazz)"
.br
.RI "\fIConstructor.\fP"
.ti -1c
.RI "void \fBrunTest\fP ()"
.br
.RI "\fIExecute the test method expecting that an exception of class mClass or one of its subclasses will be thrown.\fP"
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBFunction\fP \fBmClass\fP"
.br
.RI "\fISave the class.\fP"
.in -1c
.SH "DETAILED DESCRIPTION"
.PP 
A \fBTestCase\fP that expects an exception of class mClass to be thrown.
.PP
The other way to check that an expected exception is thrown is: 
.PP
.nf

 try {
   this.shouldThrow();
 }
 catch (ex) {
   if (ex instanceof SpecialException)
   	return;
   else
      throw ex;
 }
 this.fail('Expected SpecialException');
 
.fi
.PP
To use ExceptionTestCase, create a \fBTestCase\fP like: 
.PP
.nf

 new ExceptionTestCase('testShouldThrow', SpecialException);
 
.fi
 
.PP
.SH "CONSTRUCTOR & DESTRUCTOR DOCUMENTATION"
.PP 
.SS "void ExceptionTestCase::ExceptionTestCase (\fBString\fP name, \fBFunction\fP clazz)"
.PP
Constructor.
.PP
The constructor is initialized with the name of the test and the expected class to be thrown. 
.PP
Parameters: \fP
.in +1c
.TP
\fB\fIname\fP\fP
The name of the test case. 
.TP
\fB\fIclazz\fP\fP
The class to be thrown. 
.SH "MEMBER FUNCTION DOCUMENTATION"
.PP 
.SS "void ExceptionTestCase::runTest ()"
.PP
Execute the test method expecting that an exception of class mClass or one of its subclasses will be thrown.
.PP
Reimplemented from \fBTestCase\fP.
.SH "MEMBER DATA DOCUMENTATION"
.PP 
.SS "\fBFunction\fP ExceptionTestCase::mClass"
.PP
Save the class.
.PP


.SH "AUTHOR"
.PP 
Generated automatically by Doxygen for JsUnit from the source code.
