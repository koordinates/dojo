Index: BrowserIO.js
===================================================================
--- BrowserIO.js	(revision 1152)
+++ BrowserIO.js	(working copy)
@@ -19,40 +19,33 @@
 	return dojo.io.checkChildrenForFile(formNode);
 }
 
-dojo.io.buildFormGetString = function(sNode){
-	// FIXME: we should probably be building an array and then join()-ing to
-	// make this fast for large forms
+// TODO: Move to htmlUtils
+dojo.io.encodeForm = function(formNode){
+	if(!formNode || !formNode.tagName || !formNode.tagName.toLowerCase() == "form") {
+		dj_throw("Attempted to encode a non-form element.");
+	}
 	var ec = encodeURIComponent;
-	//the argument is a DOM Node corresponding to a form element.
-	var tvar = "";
-	var ctyp = sNode.nodeName ? sNode.nodeName.toLowerCase() : "";
-	var etyp = sNode.type ? sNode.type.toLowerCase() : "";
-	if( ( (ctyp=="input") && (etyp!="radio") && (etyp!="checkbox") ) || (ctyp=="select") || (ctyp=="textarea")){
-		if((ctyp=='input') && (etyp=='submit')){
-			// we shouldn't be adding values of submit buttons, so ommit them here
-		}else if(!((ctyp=="select")&&(sNode.getAttribute("multiple")))){
-			tvar = ec(sNode.getAttribute("name")) + "=" + ec(sNode.value) + "&";
-		}else{
-			// otherwise we have a multi-select element, so gather all of it's values
-			var tn = ec(sNode.getAttribute("name")); 
-			var copts = sNode.getElementsByTagName("option");
-			for(var x=0; x<copts.length; x++){
-				if(copts[x].selected){
-					tvar += tn+"="+ec(copts[x].value)+"&";
-				}
+	var values = [];
+
+	for(var i = 0; i < formNode.elements.length; i++) {
+		var elm = formNode.elements[i];
+		if(elm.disabled) { continue; }
+		var name = ec(elm.name);
+		var type == elm.type.toLowerCase();
+
+		if(type == "select" && elm.multiple) {
+			for(var j = 0; j < elm.options.length; j++) {
+				values.push(name + "=" + ec(elm.options[j].value));
 			}
+		} else if(dojo.alg.inArray(type, ["radio", "checked"])) {
+			if(elm.checked) {
+				values.push(name + "=" + ec(elm.value));
+			}
+		} else if(!dojo.alg.inArray(type, ["file", "submit", "reset", "button"])) {
+			values.push(name + "=" + ec(elm.value));
 		}
-	}else if(ctyp=="input"){
-		if(sNode.checked){
-			tvar = ec(sNode.getAttribute("name")) + "=" + ec(sNode.value)  + "&";
-		}
 	}
-	if(sNode.hasChildNodes()){
-		for(var temp_count=(sNode.childNodes.length-1); temp_count >= 0; temp_count--){
-			tvar += dojo.io.buildFormGetString(sNode.childNodes.item(temp_count));
-		}
-	}
-	return tvar;
+	return values.join("&");
 }
 
 dojo.io.setIFrameSrc = function(iframe, src, replace){
@@ -432,7 +425,7 @@
 			if((ta)&&(!kwArgs["url"])){ url = ta; }
 			var tp = kwArgs.formNode.getAttribute("method");
 			if((tp)&&(!kwArgs["method"])){ kwArgs.method = tp; }
-			query += dojo.io.buildFormGetString(kwArgs.formNode);
+			query += dojo.io.encodeForm(kwArgs.formNode);
 		}
 
 		if(!kwArgs["method"]) {
