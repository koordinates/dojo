{"dojo.animation.Animation":{"meta":{"requires":{"common":["dojo.animation.AnimationEvent","dojo.lang.func","dojo.math","dojo.math.curves"]},"functions":{"dojo.animation.Animation":{"meta":{"summary":"Animation object iterates a set of numbers over a curve for a given amount of time, calling 'onAnimate' at each step.","parameters":{"curve":{"type":"dojo.math.curves.*"},"duration":{"type":"int"},"accel":{"type":"Decimal?"},"repeatCount":{"type":"int?"},"rate":{"type":"int?"}},"src":"\tif(dojo.lang.isArray(curve)) {\n\t\t\/\/ curve: Array\n\t\t\/\/ id: i\n\t\tcurve = new dojo.math.curves.Line(curve[0], curve[1]);\n\t}\n\tthis.curve = curve;\n\tthis.duration = duration;\n\tthis.repeatCount = repeatCount || 0;\n\tthis.rate = rate || 25;\n\tif(accel) {\n\t\t\/\/ accel: Decimal\n\t\t\/\/ id: j\n\t\tif(dojo.lang.isFunction(accel.getValue)) {\n\t\t\t\/\/ accel: dojo.math.curves.CatmullRom\n\t\t\t\/\/ id: k\n\t\t\tthis.accel = accel;\n\t\t} else {\n\t\t\tvar i = 0.35*accel+0.5;\t\/\/ 0.15 <= i <= 0.85\n\t\t\tthis.accel = new dojo.math.curves.CatmullRom([[0], [i], [1]], 0.45);\n\t\t}\n\t}","instance_variables":["curve","duration","repeatCount","rate","accel","_active","_paused","_percent","_startTime","_endTime","_lastFrame","_startRepeatCount","handler","onBegin","onPlay","onPause","onStop","onAnimate","_timer","onEnd"],"description":"Calls the following events: \"onBegin\", \"onAnimate\", \"onEnd\", \"onPlay\", \"onPause\", \"onStop\" If the animation implements a \"handler\" function, that will be called before each event is called.","prototype_variables":["curve","duration","repeatCount","accel","onBegin","onAnimate","onEnd","onPlay","onPause","onStop","handler","_animSequence","_startTime","_endTime","_lastFrame","_timer","_percent","_active","_paused","_startRepeatCount"]},"extra":{"variables":{"curve":{"type":"Curve","summary":"to animate over."},"duration":{"type":"Duration","summary":"of the animation, in milliseconds."},"accel":{"type":"Either","summary":"an integer or curve representing amount of acceleration. (?) Default is linear acceleration."},"repeatCount":{"type":"Number","summary":"of times to repeat the animation. Default is 0."},"rate":{"type":"Time","summary":"between animation steps, in milliseconds. Default is 25."}}}},"dojo.animation.Animation.play":{"meta":{"summary":"Play the animation. goToStart: If true, will restart the animation from the beginning. Otherwise, starts from current play counter.","parameters":{"gotoStart":{"type":"Boolean?"}},"src":" \tif( gotoStart ) {\n\t\t\tclearTimeout(this._timer);\n\t\t\tthis._active = false;\n\t\t\tthis._paused = false;\n\t\t\tthis._percent = 0;\n\t\t} else if( this._active && !this._paused ) {\n\t\t\treturn;\n\t\t}\n\t\tthis._startTime = new Date().valueOf();\n\t\tif( this._paused ) {\n\t\t\tthis._startTime -= (this.duration * this._percent \/ 100);\n\t\t}\n\t\tthis._endTime = this._startTime + this.duration;\n\t\tthis._lastFrame = this._startTime;\n\t\tvar e = new dojo.animation.AnimationEvent(this, null, this.curve.getValue(this._percent),\n\t\t\tthis._startTime, this._startTime, this._endTime, this.duration, this._percent, 0);\n\t\tthis._active = true;\n\t\tthis._paused = false;\n\t\tif( this._percent == 0 ) {\n\t\t\tif(!this._startRepeatCount) {\n\t\t\t\tthis._startRepeatCount = this.repeatCount;\n\t\t\t}\n\t\t\te.type = \"begin\";\n\t\t\tif(typeof this.handler == \"function\") { this.handler(e); }\n\t\t\tif(typeof this.onBegin == \"function\") { this.onBegin(e); }\n\t\t}\n\t\te.type = \"play\";\n\t\tif(typeof this.handler == \"function\") { this.handler(e); }\n\t\tif(typeof this.onPlay == \"function\") { this.onPlay(e); }\n\t\tif(this._animSequence) { this._animSequence._setCurrent(this); }\n\t\tthis._cycle();","description":"Sends an \"onPlay\" event to any observers. Also sends an \"onBegin\" event if starting from the beginning.","prototype":"dojo.animation.Animation"}},"dojo.animation.Animation.pause":{"meta":{"summary":"Temporarily stop the animation, leaving the play counter at the current location. Resume later with sequence.play()","src":" \tclearTimeout(this._timer);\n\t\tif( !this._active ) { return; }\n\t\tthis._paused = true;\n\t\tvar e = new dojo.animation.AnimationEvent(this, \"pause\", this.curve.getValue(this._percent),\n\t\t\tthis._startTime, new Date().valueOf(), this._endTime, this.duration, this._percent, 0);\n\t\tif(typeof this.handler == \"function\") { this.handler(e); }\n\t\tif(typeof this.onPause == \"function\") { this.onPause(e); }","description":"Sends an \"onPause\" AnimationEvent to any observers.","prototype":"dojo.animation.Animation"}},"dojo.animation.Animation.playPause":{"meta":{"summary":"Toggle between play and paused states.","src":" \tif( !this._active || this._paused ) {\n\t\t\tthis.play();\n\t\t} else {\n\t\t\tthis.pause();\n\t\t}","prototype":"dojo.animation.Animation"}},"dojo.animation.Animation.gotoPercent":{"meta":{"summary":"Set the play counter at a certain point in the animation.","parameters":{"pct":{"type":"int"},"andPlay":{"type":"Boolean"}},"src":" \tclearTimeout(this._timer);\n\t\tthis._active = true;\n\t\tthis._paused = true;\n\t\tthis._percent = pct;\n\t\tif( andPlay ) { this.play(); }","prototype":"dojo.animation.Animation"},"extra":{"parameters":{"pct":{"type":"Point","summary":"to set the play counter to, expressed as a percentage (0 to 100)."},"andPlay":{"type":"If","summary":"true, will start the animation at the counter automatically."}}}},"dojo.animation.Animation.stop":{"meta":{"summary":"Stop the animation.","parameters":{"gotoEnd":{"type":"Boolean?"}},"src":" \tclearTimeout(this._timer);\n\t\tvar step = this._percent \/ 100;\n\t\tif( gotoEnd ) {\n\t\t\tstep = 1;\n\t\t}\n\t\tvar e = new dojo.animation.AnimationEvent(this, \"stop\", this.curve.getValue(step),\n\t\t\tthis._startTime, new Date().valueOf(), this._endTime, this.duration, this._percent);\n\t\tif(typeof this.handler == \"function\") { this.handler(e); }\n\t\tif(typeof this.onStop == \"function\") { this.onStop(e); }\n\t\tthis._active = false;\n\t\tthis._paused = false;","description":"Sends an \"onStop\" AnimationEvent to any observers.","prototype":"dojo.animation.Animation"},"extra":{"parameters":{"gotoEnd":{"type":"If","summary":"true, will advance play counter to the end before sending the event."}}}},"dojo.animation.Animation.status":{"meta":{"summary":"Return the status of the animation.","src":" \tif( this._active ) {\n\t\t\treturn this._paused ? \"paused\" : \"playing\";\t\/* String *\/\n\t\t} else {\n\t\t\treturn \"stopped\";\t\/* String *\/\n\t\t}","description":"Returns one of \"playing\", \"paused\" or \"stopped\".","returns":"String","prototype":"dojo.animation.Animation"}},"dojo.animation.Animation._cycle":{"meta":{"summary":"Perform once 'cycle' or step of the animation.","src":" \tclearTimeout(this._timer);\n\t\tif( this._active ) {\n\t\t\tvar curr = new Date().valueOf();\n\t\t\tvar step = (curr - this._startTime) \/ (this._endTime - this._startTime);\n\t\t\tvar fps = 1000 \/ (curr - this._lastFrame);\n\t\t\tthis._lastFrame = curr;\n\t\t\tif( step >= 1 ) {\n\t\t\t\tstep = 1;\n\t\t\t\tthis._percent = 100;\n\t\t\t} else {\n\t\t\t\tthis._percent = step * 100;\n\t\t\t}\n\t\t\t\/\/ Perform accelleration\n\t\t\tif(this.accel && this.accel.getValue) {\n\t\t\t\tstep = this.accel.getValue(step);\n\t\t\t}\n\t\t\tvar e = new dojo.animation.AnimationEvent(this, \"animate\", this.curve.getValue(step),\n\t\t\t\tthis._startTime, curr, this._endTime, this.duration, this._percent, Math.round(fps));\n\t\t\tif(typeof this.handler == \"function\") { this.handler(e); }\n\t\t\tif(typeof this.onAnimate == \"function\") { this.onAnimate(e); }\n\t\t\tif( step < 1 ) {\n\t\t\t\tthis._timer = setTimeout(dojo.lang.hitch(this, \"_cycle\"), this.rate);\n\t\t\t} else {\n\t\t\t\te.type = \"end\";\n\t\t\t\tthis._active = false;\n\t\t\t\tif(typeof this.handler == \"function\") { this.handler(e); }\n\t\t\t\tif(typeof this.onEnd == \"function\") { this.onEnd(e); }\n\t\t\t\tif( this.repeatCount > 0 ) {\n\t\t\t\t\tthis.repeatCount--;\n\t\t\t\t\tthis.play(true);\n\t\t\t\t} else if( this.repeatCount == -1 ) {\n\t\t\t\t\tthis.play(true);\n\t\t\t\t} else {\n\t\t\t\t\tif(this._startRepeatCount) {\n\t\t\t\t\t\tthis.repeatCount = this._startRepeatCount;\n\t\t\t\t\t\tthis._startRepeatCount = 0;\n\t\t\t\t\t}\n\t\t\t\t\tif( this._animSequence ) {\n\t\t\t\t\t\tthis._animSequence._playNext();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}","prototype":"dojo.animation.Animation"}}}}}}