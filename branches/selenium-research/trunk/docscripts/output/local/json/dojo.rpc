{"dojo.rpc.Deferred":{"meta":{"requires":{"common":["dojo.Deferred"]}}},"dojo.rpc.JotService":{"meta":{"requires":{"common":["dojo.rpc.RpcService"]},"functions":{"dojo.rpc.JotService":{"meta":{"summary":"","src":" this.serviceUrl = \"\/_\/jsonrpc\";","instance_variables":["serviceUrl"],"prototype_chain":["dojo.rpc.JsonService"]}},"dojo.rpc.JotService.bind":{"meta":{"summary":"Jot bind method. Takes remote method, parameters, deferred, and a url, calls createRequest to make a Jot RPC envelope and passes that off with bind.","parameters":{"method":{"type":""},"parameters":{"type":""},"deferredRequestHandler":{"type":""},"url":{"type":""}},"src":" \tdojo.io.bind({\n\t\t\turl: url||this.serviceUrl,\n\t\t\tcontent: {\n\t\t\t\tjson: this.createRequest(method, parameters)\n\t\t\t},\n\t\t\tmethod: \"POST\",\n\t\t\tmimetype: \"text\/json\",\n\t\t\tload: this.resultCallback(deferredRequestHandler),\n\t\t\terror: this.errorCallback(deferredRequestHandler),\n\t\t\tpreventCache: true\n\t\t});","prototype":"dojo.rpc.JotService"}},"dojo.rpc.JotService.createRequest":{"meta":{"summary":"create the json portion of the Jot request","parameters":{"method":{"type":""},"params":{"type":""}},"src":" \tvar req = { \"params\": params, \"method\": method, \"id\": this.lastSubmissionId++ };\n\t\treturn dojo.json.serialize(req);","prototype":"dojo.rpc.JotService"}}}}},"dojo.rpc.JsonService":{"meta":{"requires":{"common":["dojo.rpc.RpcService","dojo.io.*","dojo.json","dojo.lang.common"]},"functions":{"dojo.rpc.JsonService":{"meta":{"summary":"","parameters":{"args":{"type":""}},"src":" if(args){\n\t\tif(dojo.lang.isString(args)){\n\t\t\t\/\/ we assume it's an SMD file to be processed, since this was the\n\t\t\t\/\/ earlier function signature\n\t\t\t\/\/ FIXME: also accept dojo.uri.Uri objects?\n\t\t\tthis.connect(args);\n\t\t}else{\n\t\t\t\/\/ otherwise we assume it's an arguments object with the following\n\t\t\t\/\/ (optional) properties:\n\t\t\t\/\/\t- serviceUrl\n\t\t\t\/\/\t- strictArgChecks\n\t\t\t\/\/\t- smdUrl\n\t\t\t\/\/\t- smdStr\n\t\t\t\/\/\t- smdObj\n\t\t\tif(args[\"smdUrl\"]){\n\t\t\t\tthis.connect(args.smdUrl);\n\t\t\t}\n\t\t\tif(args[\"smdStr\"]){\n\t\t\t\tthis.processSmd(dj_eval(\"(\"+args.smdStr+\")\"));\n\t\t\t}\n\t\t\tif(args[\"smdObj\"]){\n\t\t\t\tthis.processSmd(args.smdObj);\n\t\t\t}\n\t\t\tif(args[\"serviceUrl\"]){\n\t\t\t\tthis.serviceUrl = args.serviceUrl;\n\t\t\t}\n\t\t\tif(typeof args[\"strictArgChecks\"] != \"undefined\"){\n\t\t\t\tthis.strictArgChecks = args.strictArgChecks;\n\t\t\t}\n\t\t}\n\t}","instance_variables":["serviceUrl","strictArgChecks"],"prototype_chain":["dojo.rpc.RpcService"],"prototype_variables":["bustCache","contentType","lastSubmissionId"]}},"dojo.rpc.JsonService.callRemote":{"meta":{"summary":"call an arbitrary remote method without requiring it to be predefined with SMD","parameters":{"method":{"type":""},"params":{"type":""}},"src":" \tvar deferred = new dojo.Deferred();\n\t\tthis.bind(method, params, deferred);\n\t\treturn deferred;"}},"dojo.rpc.JsonService.bind":{"meta":{"summary":"JSON-RPC bind method. Takes remote method, parameters, deferred, and a url, calls createRequest to make a JSON-RPC envelope and passes that off with bind.","parameters":{"method":{"type":""},"parameters":{"type":""},"deferredRequestHandler":{"type":""},"url":{"type":""}},"src":"\t\tdojo.io.bind({\n\t\t\turl: url||this.serviceUrl,\n\t\t\tpostContent: this.createRequest(method, parameters),\n\t\t\tmethod: \"POST\",\n\t\t\tcontentType: this.contentType,\n\t\t\tmimetype: \"text\/json\",\n\t\t\tload: this.resultCallback(deferredRequestHandler),\n\t\t\terror: this.errorCallback(deferredRequestHandler),\n\t\t\tpreventCache:this.bustCache \n\t\t});"}},"dojo.rpc.JsonService.createRequest":{"meta":{"summary":"create a JSON-RPC envelope for the request","parameters":{"method":{"type":""},"params":{"type":""}},"src":" \tvar req = { \"params\": params, \"method\": method, \"id\": ++this.lastSubmissionId };\n\t\tvar data = dojo.json.serialize(req);\n\t\tdojo.debug(\"JsonService: JSON-RPC Request: \" + data);\n\t\treturn data;"}},"dojo.rpc.JsonService.parseResults":{"meta":{"summary":"parse the result envelope and pass the results back to to the callback function","parameters":{"obj":{"type":""}},"src":" \tif(!obj){ return; }\n\t\tif (obj[\"Result\"]!=null){ \n\t\t\treturn obj[\"Result\"]; \n\t\t}else if(obj[\"result\"]!=null){ \n\t\t\treturn obj[\"result\"]; \n\t\t}else if(obj[\"ResultSet\"]){\n\t\t\treturn obj[\"ResultSet\"];\n\t\t}else{\n\t\t\treturn obj;\n\t\t}"}}}}},"dojo.rpc.RpcService":{"meta":{"requires":{"common":["dojo.io.*","dojo.json","dojo.lang.func","dojo.Deferred"]},"functions":{"dojo.rpc.RpcService":{"meta":{"summary":"constructor for rpc base class","parameters":{"url":{"type":""}},"src":" if(url){\n\t\tthis.connect(url);\n\t}","prototype_variables":["strictArgChecks","serviceUrl"],"instance_variables":["serviceUrl"]}},"dojo.rpc.RpcService.parseResults":{"meta":{"summary":"parse the results coming back from an rpc request. this base implementation, just returns the full object subclasses should parse and only return the actual results","parameters":{"obj":{"type":""}},"src":" \treturn obj;","prototype":"dojo.rpc.RpcService"}},"dojo.rpc.RpcService.errorCallback":{"meta":{"summary":"create callback that calls the Deferres errback method","parameters":{"deferredRequestHandler":{"type":"dojo.Deferred"}},"src":" \treturn function(type, e){\n\t\t\tdeferredRequestHandler.errback(new Error(e.message));\n\t\t}","prototype":"dojo.rpc.RpcService"}},"dojo.rpc.RpcService.resultCallback":{"meta":{"summary":"create callback that calls the Deferred's callback method","parameters":{"deferredRequestHandler":{"type":"dojo.Deferred"}},"src":" \tvar tf = dojo.lang.hitch(this, \n\t\t\tfunction(type, obj, e){\n\t\t\t\tif (obj[\"error\"]!=null) {\n\t\t\t\t\tvar err = new Error(obj.error);\n\t\t\t\t\terr.id = obj.id;\n\t\t\t\t\tdeferredRequestHandler.errback(err);\n\t\t\t\t} else {\n\t\t\t\t\tvar results = this.parseResults(obj);\n\t\t\t\t\tdeferredRequestHandler.callback(results); \n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t\treturn tf;","prototype":"dojo.rpc.RpcService"}},"dojo.rpc.RpcService.generateMethod":{"meta":{"summary":"generate the local bind methods for the remote object","parameters":{"method":{"type":"string"},"parameters":{"type":"array"},"url":{"type":"string"}},"src":" \treturn dojo.lang.hitch(this, function(){\n\t\t\tvar deferredRequestHandler = new dojo.Deferred();\n\t\t\t\/\/ if params weren't specified, then we can assume it's varargs\n\t\t\tif( (this.strictArgChecks) &&\n\t\t\t\t(parameters != null) &&\n\t\t\t\t(arguments.length != parameters.length)\n\t\t\t){\n\t\t\t\t\/\/ put error stuff here, no enough params\n\t\t\t\tdojo.raise(\"Invalid number of parameters for remote method.\");\n\t\t\t} else {\n\t\t\t\tthis.bind(method, arguments, deferredRequestHandler, url);\n\t\t\t}\n\t\t\treturn deferredRequestHandler;\n\t\t});","prototype":"dojo.rpc.RpcService"}},"dojo.rpc.RpcService.processSmd":{"meta":{"summary":"callback method for reciept of a smd object. Parse the smd and generate functions based on the description","parameters":{"object":{"type":"json"}},"src":" \tdojo.debug(\"RpcService: Processing returned SMD.\");\n\t\tif(object.methods){\n\t\t\tdojo.lang.forEach(object.methods, function(m){\n\t\t\t\tif(m && m[\"name\"]){\n\t\t\t\t\tdojo.debug(\"RpcService: Creating Method: this.\", m.name, \"()\");\n\t\t\t\t\tthis[m.name] = this.generateMethod(\tm.name,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tm.parameters, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tm[\"url\"]||m[\"serviceUrl\"]||m[\"serviceURL\"]);\n\t\t\t\t\tif(dojo.lang.isFunction(this[m.name])){\n\t\t\t\t\t\tdojo.debug(\"RpcService: Successfully created\", m.name, \"()\");\n\t\t\t\t\t}else{\n\t\t\t\t\t\tdojo.debug(\"RpcService: Failed to create\", m.name, \"()\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, this);\n\t\t}\n\t\tthis.serviceUrl = object.serviceUrl||object.serviceURL;\n\t\tdojo.debug(\"RpcService: Dojo RpcService is ready for use.\");","prototype":"dojo.rpc.RpcService"}},"dojo.rpc.RpcService.connect":{"meta":{"summary":"connect to a remote url and retrieve a smd object","parameters":{"smdUrl":{"type":"String"}},"src":" \tdojo.debug(\"RpcService: Attempting to load SMD document from:\", smdUrl);\n\t\tdojo.io.bind({\n\t\t\turl: smdUrl,\n\t\t\tmimetype: \"text\/json\",\n\t\t\tload: dojo.lang.hitch(this, function(type, object, e){ return this.processSmd(object); }),\n\t\t\tsync: true\n\t\t});\t\t","prototype":"dojo.rpc.RpcService"}}}}},"dojo.rpc.YahooService":{"meta":{"requires":{"common":["dojo.rpc.RpcService","dojo.rpc.JsonService","dojo.json","dojo.uri.*","dojo.io.ScriptSrcIO"]},"functions":{"dojo.rpc.YahooService":{"meta":{"summary":"","parameters":{"appId":{"type":""}},"src":" this.appId = appId;\n\tif(!appId){\n\t\tthis.appId = \"dojotoolkit\";\n\t\tdojo.debug(\t\"please initialize the YahooService class with your own\",\n\t\t\t\t\t\"application ID. Using the default may cause problems during\",\n\t\t\t\t\t\"deployment of your application\");\n\t}\n\tthis.connect(dojo.uri.dojoUri(\"src\/rpc\/yahoo.smd\"));\n\tthis.strictArgChecks = false;","instance_variables":["appId","strictArgChecks"],"prototype_chain":["dojo.rpc.JsonService"],"prototype_variables":["strictArgChecks"]}},"dojo.rpc.YahooService.bind":{"meta":{"summary":"Yahoo RPC bind method. Takes remote method, parameters, deferred, and a url and sends of a ScriptSrcIO request to connect to Yahoo services crossplatform","parameters":{"method":{"type":""},"parameters":{"type":""},"deferredRequestHandler":{"type":""},"url":{"type":""}},"src":" \tvar params = parameters;\n\t\tif(\t(dojo.lang.isArrayLike(parameters))&&\n\t\t\t(parameters.length == 1)){\n\t\t\tparams = parameters[0];\n\t\t}\n\t\tparams.output = \"json\";\n\t\tparams.appid= this.appId;\n\t\tdojo.io.bind({\n\t\t\turl: url||this.serviceUrl,\n\t\t\ttransport: \"ScriptSrcTransport\",\n\t\t\t\/\/ FIXME: need to get content interpolation fixed\n\t\t\tcontent: params,\n\t\t\tjsonParamName: \"callback\",\n\t\t\tmimetype: \"text\/json\",\n\t\t\tload: this.resultCallback(deferredRequestHandler),\n\t\t\terror: this.errorCallback(deferredRequestHandler),\n\t\t\tpreventCache: true\n\t\t});","prototype":"dojo.rpc.YahooService"}}}}}}