{"dojo.flash":{"meta":{"requires":{"common":["dojo.string.*","dojo.uri.*","dojo.html.common"]},"functions":{"dojo.flash":{"meta":{"summary":"The goal of dojo.flash is to make it easy to extend Flash's capabilities into an AJAX\/DHTML environment.","src":"\t\/\/ summary:\n\t\/\/\tThe goal of dojo.flash is to make it easy to extend Flash's capabilities\n\t\/\/\tinto an AJAX\/DHTML environment.\n\t\/\/ description:  \n\t\/\/\tThe goal of dojo.flash is to make it easy to extend Flash's capabilities\n\t\/\/\tinto an AJAX\/DHTML environment. Robust, performant, reliable \n\t\/\/\tJavaScript\/Flash communication is harder than most realize when they\n\t\/\/\tdelve into the topic, especially if you want it\n\t\/\/\tto work on Internet Explorer, Firefox, and Safari, and to be able to\n\t\/\/\tpush around hundreds of K of information quickly. Dojo.flash makes it\n\t\/\/\tpossible to support these platforms; you have to jump through a few\n\t\/\/\thoops to get its capabilites, but if you are a library writer \n\t\/\/\twho wants to bring Flash's storage or streaming sockets ability into\n\t\/\/\tDHTML, for example, then dojo.flash is perfect for you.\n\t\/\/  \n\t\/\/\tDojo.flash provides an easy object for interacting with the Flash plugin. \n\t\/\/\tThis object provides methods to determine the current version of the Flash\n\t\/\/\tplugin (dojo.flash.info); execute Flash instance methods \n\t\/\/\tindependent of the Flash version\n\t\/\/\tbeing used (dojo.flash.comm); write out the necessary markup to \n\t\/\/\tdynamically insert a Flash object into the page (dojo.flash.Embed; and \n\t\/\/\tdo dynamic installation and upgrading of the current Flash plugin in \n\t\/\/\tuse (dojo.flash.Install).\n\t\/\/\t\t\n\t\/\/\tTo use dojo.flash, you must first wait until Flash is finished loading \n\t\/\/\tand initializing before you attempt communication or interaction. \n\t\/\/\tTo know when Flash is finished use dojo.event.connect:\n\t\/\/\t\t\n\t\/\/\tdojo.event.connect(dojo.flash, \"loaded\", myInstance, \"myCallback\");\n\t\/\/\t\t\n\t\/\/\tThen, while the page is still loading provide the file name\n\t\/\/\tand the major version of Flash that will be used for Flash\/JavaScript\n\t\/\/\tcommunication (see \"Flash Communication\" below for information on the \n\t\/\/\tdifferent kinds of Flash\/JavaScript communication supported and how they \n\t\/\/\tdepend on the version of Flash installed):\n\t\/\/\t\t\n\t\/\/\tdojo.flash.setSwf({flash6: \"src\/storage\/storage_flash6.swf\",\n\t\/\/\t\t\t\t\t\t\t\t\t\t flash8: \"src\/storage\/storage_flash8.swf\"});\n\t\/\/\t\t\n\t\/\/\tThis will cause dojo.flash to pick the best way of communicating\n\t\/\/\tbetween Flash and JavaScript based on the platform.\n\t\/\/\t\t\n\t\/\/\tIf no SWF files are specified, then Flash is not initialized.\n\t\/\/\t\t\n\t\/\/\tYour Flash must use DojoExternalInterface to expose Flash methods and\n\t\/\/\tto call JavaScript; see \"Flash Communication\" below for details.\n\t\/\/\t\t\n\t\/\/\tsetSwf can take an optional 'visible' attribute to control whether\n\t\/\/\tthe Flash object is visible or not on the page; the default is visible:\n\t\/\/\t\t\n\t\/\/\tdojo.flash.setSwf({flash6: \"src\/storage\/storage_flash6.swf\",\n\t\/\/\t\t\t\t\t\t\t\t\t\t flash8: \"src\/storage\/storage_flash8.swf\",\n\t\/\/\t\t\t\t\t\t\t\t\t\t visible: false});\n\t\/\/\t\t\n\t\/\/\tOnce finished, you can query Flash version information:\n\t\/\/\t\t\n\t\/\/\tdojo.flash.info.version\n\t\/\/\t\t\n\t\/\/\tOr can communicate with Flash methods that were exposed:\n\t\/\/\t\t\n\t\/\/\tvar results = dojo.flash.comm.sayHello(\"Some Message\");\n\t\/\/\t\t\n\t\/\/\tOnly string values are currently supported for both arguments and\n\t\/\/\tfor return results. Everything will be cast to a string on both\n\t\/\/\tthe JavaScript and Flash sides.\n\t\/\/\t\t\n\t\/\/\t-------------------\n\t\/\/\tFlash Communication\n\t\/\/\t-------------------\n\t\/\/\t\t\n\t\/\/\tdojo.flash allows Flash\/JavaScript communication in \n\t\/\/\ta way that can pass large amounts of data back and forth reliably and\n\t\/\/\tvery fast. The dojo.flash\n\t\/\/\tframework encapsulates the specific way in which this communication occurs,\n\t\/\/\tpresenting a common interface to JavaScript irrespective of the underlying\n\t\/\/\tFlash version.\n\t\/\/\t\t\n\t\/\/\tThere are currently three major ways to do Flash\/JavaScript communication\n\t\/\/\tin the Flash community:\n\t\/\/\t\t\n\t\/\/\t1) Flash 6+ - Uses Flash methods, such as SetVariable and TCallLabel,\n\t\/\/\tand the fscommand handler to do communication. Strengths: Very fast,\n\t\/\/\tmature, and can send extremely large amounts of data; can do\n\t\/\/\tsynchronous method calls. Problems: Does not work on Safari; works on \n\t\/\/\tFirefox\/Mac OS X only if Flash 8 plugin is installed; cryptic to work with.\n\t\/\/\t\t\n\t\/\/\t2) Flash 8+ - Uses ExternalInterface, which provides a way for Flash\n\t\/\/\tmethods to register themselves for callbacks from JavaScript, and a way\n\t\/\/\tfor Flash to call JavaScript. Strengths: Works on Safari; elegant to\n\t\/\/\twork with; can do synchronous method calls. Problems: Extremely buggy \n\t\/\/\t(fails if there are new lines in the data, for example); performance\n\t\/\/\tdegrades drastically in O(n^2) time as data grows; locks up the browser while\n\t\/\/\tit is communicating; does not work in Internet Explorer if Flash\n\t\/\/\tobject is dynamically added to page with document.writeln, DOM methods,\n\t\/\/\tor innerHTML.\n\t\/\/\t\t\n\t\/\/\t3) Flash 6+ - Uses two seperate Flash applets, one that we \n\t\/\/\tcreate over and over, passing input data into it using the PARAM tag, \n\t\/\/\twhich then uses a Flash LocalConnection to pass the data to the main Flash\n\t\/\/\tapplet; communication back to Flash is accomplished using a getURL\n\t\/\/\tcall with a javascript protocol handler, such as \"javascript:myMethod()\".\n\t\/\/\tStrengths: the most cross browser, cross platform pre-Flash 8 method\n\t\/\/\tof Flash communication known; works on Safari. Problems: Timing issues;\n\t\/\/\tclunky and complicated; slow; can only send very small amounts of\n\t\/\/\tdata (several K); all method calls are asynchronous.\n\t\/\/\t\t\n\t\/\/\tdojo.flash.comm uses only the first two methods. This framework\n\t\/\/\twas created primarily for dojo.storage, which needs to pass very large\n\t\/\/\tamounts of data synchronously and reliably across the Flash\/JavaScript\n\t\/\/\tboundary. We use the first method, the Flash 6 method, on all platforms\n\t\/\/\tthat support it, while using the Flash 8 ExternalInterface method\n\t\/\/\tonly on Safari with some special code to help correct ExternalInterface's\n\t\/\/\tbugs.\n\t\/\/\t\t\n\t\/\/\tSince dojo.flash needs to have two versions of the Flash\n\t\/\/\tfile it wants to generate, a Flash 6 and a Flash 8 version to gain\n\t\/\/\ttrue cross-browser compatibility, several tools are provided to ease\n\t\/\/\tdevelopment on the Flash side.\n\t\/\/\t\t\n\t\/\/\tIn your Flash file, if you want to expose Flash methods that can be\n\t\/\/\tcalled, use the DojoExternalInterface class to register methods. This\n\t\/\/\tclass is an exact API clone of the standard ExternalInterface class, but\n\t\/\/\tcan work in Flash 6+ browsers. Under the covers it uses the best\n\t\/\/\tmechanism to do communication:\n\t\/\/\t\t\n\t\/\/\tclass HelloWorld{\n\t\/\/\t\tfunction HelloWorld(){\n\t\/\/\t\t\t\/\/ Initialize the DojoExternalInterface class\n\t\/\/\t\t\tDojoExternalInterface.initialize();\n\t\/\/\t\t\t\n\t\/\/\t\t\t\/\/ Expose your methods\n\t\/\/\t\t\tDojoExternalInterface.addCallback(\"sayHello\", this, this.sayHello);\n\t\/\/\t\t\t\t\n\t\/\/\t\t\t\/\/ Tell JavaScript that you are ready to have method calls\n\t\/\/\t\t\tDojoExternalInterface.loaded();\n\t\/\/\t\t\t\t\n\t\/\/\t\t\t\/\/ Call some JavaScript\n\t\/\/\t\t\tvar resultsReady = function(results){\n\t\/\/\t\t\t\ttrace(\"Received the following results from JavaScript: \" + results);\n\t\/\/\t\t\t}\n\t\/\/\t\t\tDojoExternalInterface.call(\"someJavaScriptMethod\", resultsReady, \n\t\/\/\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t someParameter);\n\t\/\/\t\t}\n\t\/\/\t\t\t\n\t\/\/\t\tfunction sayHello(){ ... }\n\t\/\/\t\t\t\n\t\/\/\t\tstatic main(){ ... }\n\t\/\/\t}\n\t\/\/\t\t\n\t\/\/\tDojoExternalInterface adds two new functions to the ExternalInterface\n\t\/\/\tAPI: initialize() and loaded(). initialize() must be called before\n\t\/\/\tany addCallback() or call() methods are run, and loaded() must be\n\t\/\/\tcalled after you are finished adding your callbacks. Calling loaded()\n\t\/\/\twill fire the dojo.flash.loaded() event, so that JavaScript can know that\n\t\/\/\tFlash has finished loading and adding its callbacks, and can begin to\n\t\/\/\tinteract with the Flash file.\n\t\/\/\t\t\n\t\/\/\tTo generate your SWF files, use the ant task\n\t\/\/\t\"buildFlash\". You must have the open source Motion Twin ActionScript \n\t\/\/\tcompiler (mtasc) installed and in your path to use the \"buildFlash\"\n\t\/\/\tant task; download and install mtasc from http:\/\/www.mtasc.org\/.\n\t\/\/\t\t\n\t\/\/\t\t\n\t\/\/\t\t\n\t\/\/\tbuildFlash usage:\n\t\/\/\t\t\n\t\/\/\tant buildFlash -Ddojo.flash.file=..\/tests\/flash\/HelloWorld.as\n\t\/\/\t\t\n\t\/\/\twhere \"dojo.flash.file\" is the relative path to your Flash \n\t\/\/\tActionScript file.\n\t\/\/\t\t\n\t\/\/\tThis will generate two SWF files, one ending in _flash6.swf and the other\n\t\/\/\tending in _flash8.swf in the same directory as your ActionScript method:\n\t\/\/\t\t\n\t\/\/\tHelloWorld_flash6.swf\n\t\/\/\tHelloWorld_flash8.swf\n\t\/\/\t\t\n\t\/\/\tInitialize dojo.flash with the filename and Flash communication version to\n\t\/\/\tuse during page load; see the documentation for dojo.flash for details:\n\t\/\/\t\t\n\t\/\/\tdojo.flash.setSwf({flash6: \"tests\/flash\/HelloWorld_flash6.swf\",\n\t\/\/\t\t\t\t\t flash8: \"tests\/flash\/HelloWorld_flash8.swf\"});\n\t\/\/\t\t\n\t\/\/\tNow, your Flash methods can be called from JavaScript as if they are native\n\t\/\/\tFlash methods, mirrored exactly on the JavaScript side:\n\t\/\/\t\t\n\t\/\/\tdojo.flash.comm.sayHello();\n\t\/\/\t\t\n\t\/\/\tOnly Strings are supported being passed back and forth currently.\n\t\/\/\t\t\n\t\/\/\tJavaScript to Flash communication is synchronous; i.e., results are returned\n\t\/\/\tdirectly from the method call:\n\t\/\/\t\t\n\t\/\/\tvar results = dojo.flash.comm.sayHello();\n\t\/\/\t\t\n\t\/\/\tFlash to JavaScript communication is asynchronous due to limitations in\n\t\/\/\tthe underlying technologies; you must use a results callback to handle\n\t\/\/\tresults returned by JavaScript in your Flash AS files:\n\t\/\/\t\t\n\t\/\/\tvar resultsReady = function(results){\n\t\/\/\t\ttrace(\"Received the following results from JavaScript: \" + results);\n\t\/\/\t}\n\t\/\/\tDojoExternalInterface.call(\"someJavaScriptMethod\", resultsReady);\n\t\/\/\t\t\n\t\/\/\t\t\n\t\/\/\t\t\n\t\/\/\t-------------------\n\t\/\/\tNotes\n\t\/\/\t-------------------\n\t\/\/\t\t\n\t\/\/\tIf you have both Flash 6 and Flash 8 versions of your file:\n\t\/\/\t\t\n\t\/\/\tdojo.flash.setSwf({flash6: \"tests\/flash\/HelloWorld_flash6.swf\",\n\t\/\/\t\t\t\t\t flash8: \"tests\/flash\/HelloWorld_flash8.swf\"});\n\t\/\/\t\t\t\t\t\t\t\t\t\t\t \n\t\/\/\tbut want to force the browser to use a certain version of Flash for\n\t\/\/\tall platforms (for testing, for example), use the djConfig\n\t\/\/\tvariable 'forceFlashComm' with the version number to force:\n\t\/\/\t\t\n\t\/\/\tvar djConfig = { forceFlashComm: 6 };\n\t\/\/\t\t\n\t\/\/\tTwo values are currently supported, 6 and 8, for the two styles of\n\t\/\/\tcommunication described above. Just because you force dojo.flash\n\t\/\/\tto use a particular communication style is no guarantee that it will\n\t\/\/\twork; for example, Flash 8 communication doesn't work in Internet\n\t\/\/\tExplorer due to bugs in Flash, and Flash 6 communication does not work\n\t\/\/\tin Safari. It is best to let dojo.flash determine the best communication\n\t\/\/\tmechanism, and to use the value above only for debugging the dojo.flash\n\t\/\/\tframework itself.\n\t\/\/\t\t\n\t\/\/\tAlso note that dojo.flash can currently only work with one Flash object\n\t\/\/\ton the page; it and the API do not yet support multiple Flash objects on\n\t\/\/\tthe same page.\n\t\/\/\t\t\n\t\/\/\tWe use some special tricks to get decent, linear performance\n\t\/\/\tout of Flash 8's ExternalInterface on Safari; see the blog\n\t\/\/\tpost \n\t\/\/\thttp:\/\/codinginparadise.org\/weblog\/2006\/02\/how-to-speed-up-flash-8s.html\n\t\/\/\tfor details.\n\t\/\/\t\t\n\t\/\/\tYour code can detect whether the Flash player is installing or having\n\t\/\/\tits version revved in two ways. First, if dojo.flash detects that\n\t\/\/\tFlash installation needs to occur, it sets dojo.flash.info.installing\n\t\/\/\tto true. Second, you can detect if installation is necessary with the\n\t\/\/\tfollowing callback:\n\t\/\/\t\t\n\t\/\/\tdojo.event.connect(dojo.flash, \"installing\", myInstance, \"myCallback\");\n\t\/\/\t\t\n\t\/\/\tYou can use this callback to delay further actions that might need Flash;\n\t\/\/\twhen installation is finished the full page will be refreshed and the\n\t\/\/\tuser will be placed back on your page with Flash installed.\n\t\/\/\t\t\n\t\/\/\tTwo utility methods exist if you want to add loading and installing\n\t\/\/\tlisteners without creating dependencies on dojo.event; these are\n\t\/\/\t'addLoadingListener' and 'addInstallingListener'.\n\t\/\/\t\t\n\t\/\/\t-------------------\n\t\/\/\tTodo\/Known Issues\n\t\/\/\t-------------------\n\t\/\/\n\t\/\/\tThere are several tasks I was not able to do, or did not need to fix\n\t\/\/\tto get dojo.storage out:\t\t\n\t\/\/\t\t\n\t\/\/\t* When using Flash 8 communication, Flash method calls to JavaScript\n\t\/\/\tare not working properly; serialization might also be broken for certain\n\t\/\/\tinvalid characters when it is Flash invoking JavaScript methods.\n\t\/\/\tThe Flash side needs to have more sophisticated serialization\/\n\t\/\/\tdeserialization mechanisms like JavaScript currently has. The\n\t\/\/\ttest_flash2.html unit tests should also be updated to have much more\n\t\/\/\tsophisticated Flash to JavaScript unit tests, including large\n\t\/\/\tamounts of data.\n\t\/\/\t\t\n\t\/\/\t* On Internet Explorer, after doing a basic install, the page is\n\t\/\/\tnot refreshed or does not detect that Flash is now available. The way\n\t\/\/\tto fix this is to create a custom small Flash file that is pointed to\n\t\/\/\tduring installation; when it is finished loading, it does a callback\n\t\/\/\tthat says that Flash installation is complete on IE, and we can proceed\n\t\/\/\tto initialize the dojo.flash subsystem.\n\t\/\/\t\t\n\t\/\/\tAuthor- Brad Neuberg, bkn3@columbia.edu","description":"The goal of dojo.flash is to make it easy to extend Flash's capabilities into an AJAX\/DHTML environment. Robust, performant, reliable JavaScript\/Flash communication is harder than most realize when they delve into the topic, especially if you want it to work on Internet Explorer, Firefox, and Safari, and to be able to push around hundreds of K of information quickly. Dojo.flash makes it possible to support these platforms; you have to jump through a few hoops to get its capabilites, but if you are a library writer who wants to bring Flash's storage or streaming sockets ability into DHTML, for example, then dojo.flash is perfect for you. Dojo.flash provides an easy object for interacting with the Flash plugin. This object provides methods to determine the current version of the Flash plugin (dojo.flash.info); execute Flash instance methods independent of the Flash version being used (dojo.flash.comm); write out the necessary markup to dynamically insert a Flash object into the page (dojo.flash.Embed; and do dynamic installation and upgrading of the current Flash plugin in use (dojo.flash.Install). To use dojo.flash, you must first wait until Flash is finished loading and initializing before you attempt communication or interaction. To know when Flash is finished use dojo.event.connect: dojo.event.connect(dojo.flash, \"loaded\", myInstance, \"myCallback\"); Then, while the page is still loading provide the file name and the major version of Flash that will be used for Flash\/JavaScript communication (see \"Flash Communication\" below for information on the different kinds of Flash\/JavaScript communication supported and how they depend on the version of Flash installed): dojo.flash.setSwf({flash6: \"src\/storage\/storage_flash6.swf\", flash8: \"src\/storage\/storage_flash8.swf\"}); This will cause dojo.flash to pick the best way of communicating between Flash and JavaScript based on the platform. If no SWF files are specified, then Flash is not initialized. Your Flash must use DojoExternalInterface to expose Flash methods and to call JavaScript; see \"Flash Communication\" below for details. setSwf can take an optional 'visible' attribute to control whether the Flash object is visible or not on the page; the default is visible: dojo.flash.setSwf({flash6: \"src\/storage\/storage_flash6.swf\", flash8: \"src\/storage\/storage_flash8.swf\", visible: false}); Once finished, you can query Flash version information: dojo.flash.info.version Or can communicate with Flash methods that were exposed: var results = dojo.flash.comm.sayHello(\"Some Message\"); Only string values are currently supported for both arguments and for return results. Everything will be cast to a string on both the JavaScript and Flash sides. ------------------- Flash Communication ------------------- dojo.flash allows Flash\/JavaScript communication in a way that can pass large amounts of data back and forth reliably and very fast. The dojo.flash framework encapsulates the specific way in which this communication occurs, presenting a common interface to JavaScript irrespective of the underlying Flash version. There are currently three major ways to do Flash\/JavaScript communication in the Flash community: 1) Flash 6+ - Uses Flash methods, such as SetVariable and TCallLabel, and the fscommand handler to do communication. Strengths: Very fast, mature, and can send extremely large amounts of data; can do synchronous method calls. Problems: Does not work on Safari; works on Firefox\/Mac OS X only if Flash 8 plugin is installed; cryptic to work with. 2) Flash 8+ - Uses ExternalInterface, which provides a way for Flash methods to register themselves for callbacks from JavaScript, and a way for Flash to call JavaScript. Strengths: Works on Safari; elegant to work with; can do synchronous method calls. Problems: Extremely buggy (fails if there are new lines in the data, for example); performance degrades drastically in O(n^2) time as data grows; locks up the browser while it is communicating; does not work in Internet Explorer if Flash object is dynamically added to page with document.writeln, DOM methods, or innerHTML. 3) Flash 6+ - Uses two seperate Flash applets, one that we create over and over, passing input data into it using the PARAM tag, which then uses a Flash LocalConnection to pass the data to the main Flash applet; communication back to Flash is accomplished using a getURL call with a javascript protocol handler, such as \"javascript:myMethod()\". Strengths: the most cross browser, cross platform pre-Flash 8 method of Flash communication known; works on Safari. Problems: Timing issues; clunky and complicated; slow; can only send very small amounts of data (several K); all method calls are asynchronous. dojo.flash.comm uses only the first two methods. This framework was created primarily for dojo.storage, which needs to pass very large amounts of data synchronously and reliably across the Flash\/JavaScript boundary. We use the first method, the Flash 6 method, on all platforms that support it, while using the Flash 8 ExternalInterface method only on Safari with some special code to help correct ExternalInterface's bugs. Since dojo.flash needs to have two versions of the Flash file it wants to generate, a Flash 6 and a Flash 8 version to gain true cross-browser compatibility, several tools are provided to ease development on the Flash side. In your Flash file, if you want to expose Flash methods that can be called, use the DojoExternalInterface class to register methods. This class is an exact API clone of the standard ExternalInterface class, but can work in Flash 6+ browsers. Under the covers it uses the best mechanism to do communication: class HelloWorld{ function HelloWorld(){ \/\/ Initialize the DojoExternalInterface class DojoExternalInterface.initialize(); \/\/ Expose your methods DojoExternalInterface.addCallback(\"sayHello\", this, this.sayHello); \/\/ Tell JavaScript that you are ready to have method calls DojoExternalInterface.loaded(); \/\/ Call some JavaScript var resultsReady = function(results){ trace(\"Received the following results from JavaScript: \" + results); } DojoExternalInterface.call(\"someJavaScriptMethod\", resultsReady, someParameter); } function sayHello(){ ... } static main(){ ... } } DojoExternalInterface adds two new functions to the ExternalInterface API: initialize() and loaded(). initialize() must be called before any addCallback() or call() methods are run, and loaded() must be called after you are finished adding your callbacks. Calling loaded() will fire the dojo.flash.loaded() event, so that JavaScript can know that Flash has finished loading and adding its callbacks, and can begin to interact with the Flash file. To generate your SWF files, use the ant task \"buildFlash\". You must have the open source Motion Twin ActionScript compiler (mtasc) installed and in your path to use the \"buildFlash\" ant task; download and install mtasc from http: \/\/ www.mtasc.org\/. buildFlash usage: ant buildFlash -Ddojo.flash.file=..\/tests\/flash\/HelloWorld.as where \"dojo.flash.file\" is the relative path to your Flash ActionScript file. This will generate two SWF files, one ending in _flash6.swf and the other ending in _flash8.swf in the same directory as your ActionScript method: HelloWorld_flash6.swf HelloWorld_flash8.swf Initialize dojo.flash with the filename and Flash communication version to use during page load; see the documentation for dojo.flash for details: dojo.flash.setSwf({flash6: \"tests\/flash\/HelloWorld_flash6.swf\", flash8: \"tests\/flash\/HelloWorld_flash8.swf\"}); Now, your Flash methods can be called from JavaScript as if they are native Flash methods, mirrored exactly on the JavaScript side: dojo.flash.comm.sayHello(); Only Strings are supported being passed back and forth currently. JavaScript to Flash communication is synchronous; i.e., results are returned directly from the method call: var results = dojo.flash.comm.sayHello(); Flash to JavaScript communication is asynchronous due to limitations in the underlying technologies; you must use a results callback to handle results returned by JavaScript in your Flash AS files: var resultsReady = function(results){ trace(\"Received the following results from JavaScript: \" + results); } DojoExternalInterface.call(\"someJavaScriptMethod\", resultsReady); ------------------- Notes ------------------- If you have both Flash 6 and Flash 8 versions of your file: dojo.flash.setSwf({flash6: \"tests\/flash\/HelloWorld_flash6.swf\", flash8: \"tests\/flash\/HelloWorld_flash8.swf\"}); but want to force the browser to use a certain version of Flash for all platforms (for testing, for example), use the djConfig variable 'forceFlashComm' with the version number to force: var djConfig = { forceFlashComm: 6 }; Two values are currently supported, 6 and 8, for the two styles of communication described above. Just because you force dojo.flash to use a particular communication style is no guarantee that it will work; for example, Flash 8 communication doesn't work in Internet Explorer due to bugs in Flash, and Flash 6 communication does not work in Safari. It is best to let dojo.flash determine the best communication mechanism, and to use the value above only for debugging the dojo.flash framework itself. Also note that dojo.flash can currently only work with one Flash object on the page; it and the API do not yet support multiple Flash objects on the same page. We use some special tricks to get decent, linear performance out of Flash 8's ExternalInterface on Safari; see the blog post http: \/\/ codinginparadise.org\/weblog\/2006\/02\/how-to-speed-up-flash-8s.html for details. Your code can detect whether the Flash player is installing or having its version revved in two ways. First, if dojo.flash detects that Flash installation needs to occur, it sets dojo.flash.info.installing to true. Second, you can detect if installation is necessary with the following callback: dojo.event.connect(dojo.flash, \"installing\", myInstance, \"myCallback\"); You can use this callback to delay further actions that might need Flash; when installation is finished the full page will be refreshed and the user will be placed back on your page with Flash installed. Two utility methods exist if you want to add loading and installing listeners without creating dependencies on dojo.event; these are 'addLoadingListener' and 'addInstallingListener'. ------------------- Todo\/Known Issues ------------------- There are several tasks I was not able to do, or did not need to fix to get dojo.storage out: * When using Flash 8 communication, Flash method calls to JavaScript are not working properly; serialization might also be broken for certain invalid characters when it is Flash invoking JavaScript methods. The Flash side needs to have more sophisticated serialization\/ deserialization mechanisms like JavaScript currently has. The test_flash2.html unit tests should also be updated to have much more sophisticated Flash to JavaScript unit tests, including large amounts of data. * On Internet Explorer, after doing a basic install, the page is not refreshed or does not detect that Flash is now available. The way to fix this is to create a custom small Flash file that is pointed to during installation; when it is finished loading, it does a callback that says that Flash installation is complete on IE, and we can proceed to initialize the dojo.flash subsystem. Author- Brad Neuberg, bkn3@columbia.edu"}},"dojo.flash.Info":{"meta":{"summary":"A class that helps us determine whether Flash is available.","src":" if(dojo.render.html.ie){\n\t\tdocument.writeln('<script language=\"VBScript\" type=\"text\/vbscript\"\\>');\n\t\tdocument.writeln('Function VBGetSwfVer(i)');\n\t\tdocument.writeln('  on error resume next');\n\t\tdocument.writeln('  Dim swControl, swVersion');\n\t\tdocument.writeln('  swVersion = 0');\n\t\tdocument.writeln('  set swControl = CreateObject(\"ShockwaveFlash.ShockwaveFlash.\" + CStr(i))');\n\t\tdocument.writeln('  if (IsObject(swControl)) then');\n\t\tdocument.writeln('    swVersion = swControl.GetVariable(\"$version\")');\n\t\tdocument.writeln('  end if');\n\t\tdocument.writeln('  VBGetSwfVer = swVersion');\n\t\tdocument.writeln('End Function');\n\t\tdocument.writeln('<\/script\\>');\n\t}\n\tthis._detectVersion();\n\tthis._detectCommunicationVersion();","description":"A class that helps us determine whether Flash is available, it's major and minor versions, and what Flash version features should be used for Flash\/JavaScript communication. Parts of this code are adapted from the automatic Flash plugin detection code autogenerated by the Macromedia Flash 8 authoring environment. An instance of this class can be accessed on dojo.flash.info after the page is finished loading. This constructor must be called before the page is finished loading. Visual basic helper required to detect Flash Player ActiveX control version information on Internet Explorer"}},"dojo.flash.Embed":{"meta":{"summary":"A class that is used to write out the Flash object into the page.","parameters":{"visible":{"type":""}},"src":" this._visible = visible;","instance_variables":["_visible"]}},"dojo.flash.Communicator":{"meta":{"summary":"A class that is used to communicate between Flash and JavaScript in a way that can pass large amounts of data back and forth reliably, very fast, and with synchronous method calls.","src":"\tif(dojo.flash.useFlash6()){\n\t\tthis._writeFlash6();\n\t}else if (dojo.flash.useFlash8()){\n\t\tthis._writeFlash8();\n\t}","description":"A class that is used to communicate between Flash and JavaScript in a way that can pass large amounts of data back and forth reliably, very fast, and with synchronous method calls. This class encapsulates the specific way in which this communication occurs, presenting a common interface to JavaScript irrespective of the underlying Flash version."}},"callFunc":{"meta":{"summary":"","src":" \t\treturn dojo.flash.comm._call(functionName, arguments);"}},"wrapperCall":{"meta":{"summary":"","src":" \t\tvar methodArgs = new Array(arguments.length);\n\t\t\tfor(var i = 0; i < arguments.length; i++){\n\t\t\t\tmethodArgs[i] = arguments[i];\n\t\t\t}\n\t\t\treturn dojo.flash.comm._execFlash(methodName, methodArgs);"}},"dojo.flash.Install":{"meta":{"summary":"Helps install Flash plugin if needed.","src":"\t\/\/ summary: Helps install Flash plugin if needed.\n\t\/\/ description:\n\t\/\/\tFigures out the best way to automatically install the Flash plugin\n\t\/\/\tfor this browser and platform. Also determines if installation or\n\t\/\/\trevving of the current plugin is needed on this platform.","description":"Figures out the best way to automatically install the Flash plugin for this browser and platform. Also determines if installation or revving of the current plugin is needed on this platform."}},"dojo.flash.setSwf":{"meta":{"summary":"Sets the SWF files and versions we are using.","parameters":{"fileInfo":{"type":"Object"}},"src":" \tif(fileInfo == null || dojo.lang.isUndefined(fileInfo)){\n\t\t\treturn;\n\t\t}\n\t\tif(fileInfo.flash6 != null && !dojo.lang.isUndefined(fileInfo.flash6)){\n\t\t\tthis.flash6_version = fileInfo.flash6;\n\t\t}\n\t\tif(fileInfo.flash8 != null && !dojo.lang.isUndefined(fileInfo.flash8)){\n\t\t\tthis.flash8_version = fileInfo.flash8;\n\t\t}\n\t\tif(!dojo.lang.isUndefined(fileInfo.visible)){\n\t\t\tthis._visible = fileInfo.visible;\n\t\t}\n\t\t\/\/ initialize ourselves\t\t\n\t\tthis._initialize();","instance_variables":["flash6_version","flash8_version","_visible"]},"extra":{"parameters":{"fileInfo":{"type":"Object","summary":"An object that contains two attributes, 'flash6' and 'flash8', each of which contains the path to our Flash 6 and Flash 8 versions of the file we want to script. Example- var swfloc6 = dojo.uri.dojoUri(\"Storage_version6.swf\").toString(); var swfloc8 = dojo.uri.dojoUri(\"Storage_version8.swf\").toString(); dojo.flash.setSwf({flash6: swfloc6, flash8: swfloc8, visible: false});"}}}},"dojo.flash.useFlash6":{"meta":{"summary":"Boolean Returns whether we are using Flash 6 for communication on this platform.","src":" \tif(this.flash6_version == null){\n\t\t\treturn false;\n\t\t}else if (this.flash6_version != null && dojo.flash.info.commVersion == 6){\n\t\t\t\/\/ if we have a flash 6 version of this SWF, and this browser supports \n\t\t\t\/\/ communicating using Flash 6 features...\n\t\t\treturn true;\n\t\t}else{\n\t\t\treturn false;\n\t\t}","instance_variables":["flash6_version"]}},"dojo.flash.useFlash8":{"meta":{"summary":"Boolean Returns whether we are using Flash 8 for communication on this platform.","src":" \tif(this.flash8_version == null){\n\t\t\treturn false;\n\t\t}else if (this.flash8_version != null && dojo.flash.info.commVersion == 8){\n\t\t\t\/\/ if we have a flash 8 version of this SWF, and this browser supports\n\t\t\t\/\/ communicating using Flash 8 features...\n\t\t\treturn true;\n\t\t}else{\n\t\t\treturn false;\n\t\t}","instance_variables":["flash8_version"]}},"dojo.flash.addLoadedListener":{"meta":{"summary":"Adds a listener to know when Flash is finished loading. Useful if you don't want a dependency on dojo.event.","parameters":{"listener":{"type":"Function"}},"src":" \tthis._loadedListeners.push(listener);"},"extra":{"parameters":{"listener":{"type":"Function","summary":"A function that will be called when Flash is done loading."}}}},"dojo.flash.addInstallingListener":{"meta":{"summary":"Adds a listener to know if Flash is being installed. Useful if you don't want a dependency on dojo.event.","parameters":{"listener":{"type":"Function"}},"src":" \tthis._installingListeners.push(listener);"},"extra":{"parameters":{"listener":{"type":"Function","summary":"A function that will be called if Flash is being installed"}}}},"dojo.flash.loaded":{"meta":{"summary":"Called back when the Flash subsystem is finished loading.","src":" \tdojo.flash.ready = true;\n\t\tif(dojo.flash._loadedListeners.length > 0){\n\t\t\tfor(var i = 0;i < dojo.flash._loadedListeners.length; i++){\n\t\t\t\tdojo.flash._loadedListeners[i].call(null);\n\t\t\t}\n\t\t}","description":"A callback when the Flash subsystem is finished loading and can be worked with. To be notified when Flash is finished loading, connect your callback to this method using the following: dojo.event.connect(dojo.flash, \"loaded\", myInstance, \"myCallback\"); dojo.debug(\"dojo.flash.loaded\");"}},"dojo.flash.installing":{"meta":{"summary":"Called if Flash is being installed.","src":" \tif(dojo.flash._installingListeners.length > 0){\n\t\t\tfor(var i = 0; i < dojo.flash._installingListeners.length; i++){\n\t\t\t\tdojo.flash._installingListeners[i].call(null);\n\t\t\t}\n\t\t}","description":"A callback to know if Flash is currently being installed or having its version revved. To be notified if Flash is installing, connect your callback to this method using the following: dojo.event.connect(dojo.flash, \"installing\", myInstance, \"myCallback\"); dojo.debug(\"installing\");"}},"dojo.flash._initialize":{"meta":{"summary":"","src":" \tvar installer = new dojo.flash.Install();\n\t\tdojo.flash.installer = installer;\n\t\tif(installer.needed() == true){\t\t\n\t\t\tinstaller.install();\n\t\t}else{\n\t\t\t\/\/dojo.debug(\"Writing object out\");\n\t\t\t\/\/ write the flash object into the page\n\t\t\tdojo.flash.obj = new dojo.flash.Embed(this._visible);\n\t\t\tdojo.flash.obj.write(dojo.flash.info.commVersion);\n\t\t\t\/\/ initialize the way we do Flash\/JavaScript communication\n\t\t\tdojo.flash.comm = new dojo.flash.Communicator();\n\t\t}"}},"dojo.flash.Info.prototype.isVersionOrAbove":{"meta":{"summary":"Boolean Asserts that this environment has the given major, minor, and revision numbers for the Flash player.","parameters":{"reqMajorVer":{"type":"int"},"reqMinorVer":{"type":"int"},"reqVer":{"type":"int"}},"src":" \treqVer = parseFloat(\".\" + reqVer);\n\t\tif(this.versionMajor >= reqMajorVer && this.versionMinor >= reqMinorVer\n\t\t\t && this.versionRevision >= reqVer){\n\t\t\treturn true;\n\t\t}else{\n\t\t\treturn false;\n\t\t}","description":"Asserts that this environment has the given major, minor, and revision numbers for the Flash player. Example- To test for Flash Player 7r14: dojo.flash.info.isVersionOrAbove(7, 0, 14)"},"extra":{"returns":"Returns true if the player is equal or above the given version, false otherwise. make the revision a decimal (i.e. transform revision 14 into 0.14"}},"dojo.flash.Info.prototype._detectVersion":{"meta":{"summary":"","src":" \tvar versionStr;\n\t\t\/\/ loop backwards through the versions until we find the newest version\t\n\t\tfor(var testVersion = 25; testVersion > 0; testVersion--){\n\t\t\tif(dojo.render.html.ie){\n\t\t\t\tversionStr = VBGetSwfVer(testVersion);\n\t\t\t}else{\n\t\t\t\tversionStr = this._JSFlashInfo(testVersion);\t\t\n\t\t\t}\n\t\t\tif(versionStr == -1 ){\n\t\t\t\tthis.capable = false; \n\t\t\t\treturn;\n\t\t\t}else if(versionStr != 0){\n\t\t\t\tvar versionArray;\n\t\t\t\tif(dojo.render.html.ie){\n\t\t\t\t\tvar tempArray = versionStr.split(\" \");\n\t\t\t\t\tvar tempString = tempArray[1];\n\t\t\t\t\tversionArray = tempString.split(\",\");\n\t\t\t\t}else{\n\t\t\t\t\tversionArray = versionStr.split(\".\");\n\t\t\t\t}\n\t\t\t\tthis.versionMajor = versionArray[0];\n\t\t\t\tthis.versionMinor = versionArray[1];\n\t\t\t\tthis.versionRevision = versionArray[2];\n\t\t\t\t\/\/ 7.0r24 == 7.24\n\t\t\t\tvar versionString = this.versionMajor + \".\" + this.versionRevision;\n\t\t\t\tthis.version = parseFloat(versionString);\n\t\t\t\tthis.capable = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}","instance_variables":["capable","versionMajor","versionMinor","versionRevision","version"]}},"dojo.flash.Info.prototype._JSFlashInfo":{"meta":{"summary":"","parameters":{"testVersion":{"type":""}},"src":" \tif(navigator.plugins != null && navigator.plugins.length > 0){\n\t\t\tif(navigator.plugins[\"Shockwave Flash 2.0\"] || \n\t\t\t\t navigator.plugins[\"Shockwave Flash\"]){\n\t\t\t\tvar swVer2 = navigator.plugins[\"Shockwave Flash 2.0\"] ? \" 2.0\" : \"\";\n\t\t\t\tvar flashDescription = navigator.plugins[\"Shockwave Flash\" + swVer2].description;\n\t\t\t\tvar descArray = flashDescription.split(\" \");\n\t\t\t\tvar tempArrayMajor = descArray[2].split(\".\");\n\t\t\t\tvar versionMajor = tempArrayMajor[0];\n\t\t\t\tvar versionMinor = tempArrayMajor[1];\n\t\t\t\tif(descArray[3] != \"\"){\n\t\t\t\t\tvar tempArrayMinor = descArray[3].split(\"r\");\n\t\t\t\t}else{\n\t\t\t\t\tvar tempArrayMinor = descArray[4].split(\"r\");\n\t\t\t\t}\n\t\t\t\tvar versionRevision = tempArrayMinor[1] > 0 ? tempArrayMinor[1] : 0;\n\t\t\t\tvar version = versionMajor + \".\" + versionMinor + \".\" \n\t\t\t\t\t\t\t\t\t\t\t+ versionRevision;\n\t\t\t\treturn version;\n\t\t\t}\n\t\t}\n\t\treturn -1;"}},"dojo.flash.Info.prototype._detectCommunicationVersion":{"meta":{"summary":"","src":" \tif(this.capable == false){\n\t\t\tthis.commVersion = null;\n\t\t\treturn;\n\t\t}\n\t\t\/\/ detect if the user has over-ridden the default flash version\n\t\tif (typeof djConfig[\"forceFlashComm\"] != \"undefined\" &&\n\t\t\t\ttypeof djConfig[\"forceFlashComm\"] != null){\n\t\t\tthis.commVersion = djConfig[\"forceFlashComm\"];\n\t\t\treturn;\n\t\t}\n\t\t\/\/ we prefer Flash 6 features over Flash 8, because they are much faster\n\t\t\/\/ and much less buggy\n\t\t\/\/ at this point, we don't have a flash file to detect features on,\n\t\t\/\/ so we need to instead look at the browser environment we are in\n\t\tif(dojo.render.html.safari == true || dojo.render.html.opera == true){\n\t\t\tthis.commVersion = 8;\n\t\t}else{\n\t\t\tthis.commVersion = 6;\n\t\t}","instance_variables":["capable","commVersion"]}},"dojo.flash.Embed.prototype.protocol":{"meta":{"summary":"","src":" \tswitch(window.location.protocol){\n\t\t\tcase \"https:\":\n\t\t\t\treturn \"https\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn \"http\";\n\t\t\t\tbreak;\n\t\t}"}},"dojo.flash.Embed.prototype.write":{"meta":{"summary":"Writes the Flash into the page.","parameters":{"flashVer":{"type":"String"},"doExpressInstall":{"type":"Boolean?"}},"src":" \tif(dojo.lang.isUndefined(doExpressInstall)){\n\t\t\tdoExpressInstall = false;\n\t\t}\n\t\t\/\/ determine our container div's styling\n\t\tvar containerStyle = new dojo.string.Builder();\n\t\tcontainerStyle.append(\"width: \" + this.width + \"px; \");\n\t\tcontainerStyle.append(\"height: \" + this.height + \"px; \");\n\t\tif(this._visible == false){\n\t\t\tcontainerStyle.append(\"position: absolute; \");\n\t\t\tcontainerStyle.append(\"z-index: 10000; \");\n\t\t\tcontainerStyle.append(\"top: -1000px; \");\n\t\t\tcontainerStyle.append(\"left: -1000px; \");\n\t\t}\n\t\tcontainerStyle = containerStyle.toString();\n\t\t\/\/ figure out the SWF file to get and how to write out the correct HTML\n\t\t\/\/ for this Flash version\n\t\tvar objectHTML;\n\t\tvar swfloc;\n\t\t\/\/ Flash 6\n\t\tif(flashVer == 6){\n\t\t\tswfloc = dojo.flash.flash6_version;\n\t\t\tvar dojoPath = djConfig.baseRelativePath;\n\t\t\tswfloc = swfloc + \"?baseRelativePath=\" + escape(dojoPath);\n\t\t\tobjectHTML = \n\t\t\t\t\t\t  '<embed id=\"' + this.id + '\" src=\"' + swfloc + '\" '\n\t\t\t\t\t\t+ '    quality=\"high\" bgcolor=\"#ffffff\" '\n\t\t\t\t\t\t+ '    width=\"' + this.width + '\" height=\"' + this.height + '\" '\n\t\t\t\t\t\t+ '    name=\"' + this.id + '\" '\n\t\t\t\t\t\t+ '    align=\"middle\" allowScriptAccess=\"sameDomain\" '\n\t\t\t\t\t\t+ '    type=\"application\/x-shockwave-flash\" swLiveConnect=\"true\" '\n\t\t\t\t\t\t+ '    pluginspage=\"'\n\t\t\t\t\t\t+ this.protocol()\n\t\t\t\t\t\t+ ':\/\/www.macromedia.com\/go\/getflashplayer\">';\n\t\t}else{ \/\/ Flash 8\n\t\t\tswfloc = dojo.flash.flash8_version;\n\t\t\tvar swflocObject = swfloc;\n\t\t\tvar swflocEmbed = swfloc;\n\t\t\tvar dojoPath = djConfig.baseRelativePath;\n\t\t\tif(doExpressInstall){\n\t\t\t\t\/\/ the location to redirect to after installing\n\t\t\t\tvar redirectURL = escape(window.location);\n\t\t\t\tdocument.title = document.title.slice(0, 47) + \" - Flash Player Installation\";\n\t\t\t\tvar docTitle = escape(document.title);\n\t\t\t\tswflocObject += \"?MMredirectURL=\" + redirectURL\n\t\t\t\t                + \"&MMplayerType=ActiveX\"\n\t\t\t\t                + \"&MMdoctitle=\" + docTitle\n\t\t\t\t\t\t\t\t+ \"&baseRelativePath=\" + escape(dojoPath);\n\t\t\t\tswflocEmbed += \"?MMredirectURL=\" + redirectURL \n\t\t\t\t\t\t\t\t+ \"&MMplayerType=PlugIn\"\n\t\t\t\t\t\t\t\t+ \"&baseRelativePath=\" + escape(dojoPath);\n\t\t\t}\n\t\t\tif(swflocEmbed.indexOf(\"?\") == -1){\n\t\t\t\tswflocEmbed +=  \"?baseRelativePath=\"+escape(dojoPath)+\"' \";\n\t\t\t}\n\t\t\tobjectHTML =\n\t\t\t\t'<object classid=\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\" '\n\t\t\t\t  + 'codebase=\"'\n\t\t\t\t\t+ this.protocol()\n\t\t\t\t\t+ ':\/\/fpdownload.macromedia.com\/pub\/shockwave\/cabs\/flash\/'\n\t\t\t\t\t+ 'swflash.cab#version=8,0,0,0\" '\n\t\t\t\t  + 'width=\"' + this.width + '\" '\n\t\t\t\t  + 'height=\"' + this.height + '\" '\n\t\t\t\t  + 'id=\"' + this.id + '\" '\n\t\t\t\t  + 'align=\"middle\"> '\n\t\t\t\t  + '<param name=\"allowScriptAccess\" value=\"sameDomain\" \/> '\n\t\t\t\t  + '<param name=\"movie\" value=\"' + swflocObject + '\" \/> '\n\t\t\t\t  + '<param name=\"quality\" value=\"high\" \/> '\n\t\t\t\t  + '<param name=\"bgcolor\" value=\"#ffffff\" \/> '\n\t\t\t\t  + '<embed src=\"' + swflocEmbed + \"' \"\n\t\t\t\t  + 'quality=\"high\" '\n\t\t\t\t  + 'bgcolor=\"#ffffff\" '\n\t\t\t\t  + 'width=\"' + this.width + '\" '\n\t\t\t\t  + 'height=\"' + this.height + '\" '\n\t\t\t\t  + 'id=\"' + this.id + '\" '\n\t\t\t\t  + 'name=\"' + this.id + '\" '\n\t\t\t\t  + 'swLiveConnect=\"true\" '\n\t\t\t\t  + 'align=\"middle\" '\n\t\t\t\t  + 'allowScriptAccess=\"sameDomain\" '\n\t\t\t\t  + 'type=\"application\/x-shockwave-flash\" '\n\t\t\t\t  + 'pluginspage=\"'\n\t\t\t\t\t+ this.protocol()\n\t\t\t\t\t+':\/\/www.macromedia.com\/go\/getflashplayer\" \/>'\n\t\t\t\t+ '<\/object>';\n\t\t}\n\t\t\/\/ now write everything out\n\t\tobjectHTML = '<div id=\"' + this.id + 'Container\" style=\"' + containerStyle + '\"> '\n\t\t\t\t\t\t+ objectHTML\n\t\t\t\t\t + '<\/div>';\n\t\tdocument.writeln(objectHTML);","instance_variables":["_visible"],"description":"This must be called before the page is finished loading."},"extra":{"parameters":{"flashVer":{"type":"String","summary":"The Flash version to write."},"doExpressInstall":{"type":"Boolean","summary":"Whether to write out Express Install information. Optional value; defaults to false. dojo.debug(\"write\");"}}}},"dojo.flash.Embed.prototype.get":{"meta":{"summary":"Object Gets the Flash object DOM node. return (dojo.render.html.ie) ? window[this.id] : document[this.id]; more robust way to get Flash object; version above can break communication on IE sometimes","src":" \treturn document.getElementById(this.id);"}},"dojo.flash.Embed.prototype.setVisible":{"meta":{"summary":"Sets the visibility of this Flash object.","parameters":{"visible":{"type":"Boolean"}},"src":" \tvar container = dojo.byId(this.id + \"Container\");\n\t\tif(visible == true){\n\t\t\tcontainer.style.visibility = \"visible\";\n\t\t}else{\n\t\t\tcontainer.style.position = \"absolute\";\n\t\t\tcontainer.style.x = \"-1000px\";\n\t\t\tcontainer.style.y = \"-1000px\";\n\t\t\tcontainer.style.visibility = \"hidden\";\n\t\t}"}},"dojo.flash.Embed.prototype.center":{"meta":{"summary":"Centers the flash applet on the page.","src":" \tvar elementWidth = this.width;\n\t\tvar elementHeight = this.height;\n\t\tvar scroll_offset = dojo.html.getScroll().offset;\n\t\tvar viewport_size = dojo.html.getViewport();\n\t\t\/\/ compute the centered position    \n\t\tvar x = scroll_offset.x + (viewport_size.width - elementWidth) \/ 2;\n\t\tvar y = scroll_offset.y + (viewport_size.height - elementHeight) \/ 2; \n\t\t\/\/ set the centered position\n\t\tvar container = dojo.byId(this.id + \"Container\");\n\t\tcontainer.style.top = y + \"px\";\n\t\tcontainer.style.left = x + \"px\";"}},"dojo.flash.Communicator.prototype._writeFlash6":{"meta":{"summary":"","src":" \tvar id = dojo.flash.obj.id;\n\t\t\/\/ global function needed for Flash 6 callback;\n\t\t\/\/ we write it out as a script tag because the VBScript hook for IE\n\t\t\/\/ callbacks does not work properly if this function is evalled() from\n\t\t\/\/ within the Dojo system\n\t\tdocument.writeln('<script language=\"JavaScript\">');\n\t\tdocument.writeln('  function ' + id + '_DoFSCommand(command, args){ ');\n\t\tdocument.writeln('    dojo.flash.comm._handleFSCommand(command, args); ');\n\t\tdocument.writeln('}');\n\t\tdocument.writeln('<\/script>');\n\t\t\/\/ hook for Internet Explorer to receive FSCommands from Flash\n\t\tif(dojo.render.html.ie){\n\t\t\tdocument.writeln('<SCRIPT LANGUAGE=VBScript\\> ');\n\t\t\tdocument.writeln('on error resume next ');\n\t\t\tdocument.writeln('Sub ' + id + '_FSCommand(ByVal command, ByVal args)');\n\t\t\tdocument.writeln(' call ' + id + '_DoFSCommand(command, args)');\n\t\t\tdocument.writeln('end sub');\n\t\t\tdocument.writeln('<\/SCRIPT\\> ');\n\t\t}"}},"dojo.flash.Communicator.prototype._writeFlash8":{"meta":{"summary":"","src":"\t\t\/\/ nothing needs to be written out for Flash 8 communication; \n\t\t\/\/ happens automatically"}},"dojo.flash.Communicator.prototype._handleFSCommand":{"meta":{"summary":"","parameters":{"command":{"type":""},"args":{"type":""}},"src":" \tif(command != null && !dojo.lang.isUndefined(command)\n\t\t\t&& \/^FSCommand:(.*)\/.test(command) == true){\n\t\t\tcommand = command.match(\/^FSCommand:(.*)\/)[1];\n\t\t}\n\t\tif(command == \"addCallback\"){ \/\/ add Flash method for JavaScript callback\n\t\t\tthis._fscommandAddCallback(command, args);\n\t\t}else if(command == \"call\"){ \/\/ Flash to JavaScript method call\n\t\t\tthis._fscommandCall(command, args);\n\t\t}else if(command == \"fscommandReady\"){ \/\/ see if fscommands are ready\n\t\t\tthis._fscommandReady();\n\t\t}"}},"dojo.flash.Communicator.prototype._fscommandAddCallback":{"meta":{"summary":"","parameters":{"command":{"type":""},"args":{"type":""}},"src":" \tvar functionName = args;\n\t\t\/\/ do a trick, where we link this function name to our wrapper\n\t\t\/\/ function, _call, that does the actual JavaScript to Flash call\n\t\tvar callFunc = function(){\n\t\t\treturn dojo.flash.comm._call(functionName, arguments);\n\t\t};\t\t\t\n\t\tdojo.flash.comm[functionName] = callFunc;\n\t\t\/\/ indicate that the call was successful\n\t\tdojo.flash.obj.get().SetVariable(\"_succeeded\", true);"}},"dojo.flash.Communicator.prototype._fscommandCall":{"meta":{"summary":"","parameters":{"command":{"type":""},"args":{"type":""}},"src":" \tvar plugin = dojo.flash.obj.get();\n\t\tvar functionName = args;\n\t\t\/\/ get the number of arguments to this method call and build them up\n\t\tvar numArgs = parseInt(plugin.GetVariable(\"_numArgs\"));\n\t\tvar flashArgs = new Array();\n\t\tfor(var i = 0; i < numArgs; i++){\n\t\t\tvar currentArg = plugin.GetVariable(\"_\" + i);\n\t\t\tflashArgs.push(currentArg);\n\t\t}\n\t\t\/\/ get the function instance; we technically support more capabilities\n\t\t\/\/ than ExternalInterface, which can only call global functions; if\n\t\t\/\/ the method name has a dot in it, such as \"dojo.flash.loaded\", we\n\t\t\/\/ eval it so that the method gets run against an instance\n\t\tvar runMe;\n\t\tif(functionName.indexOf(\".\") == -1){ \/\/ global function\n\t\t\trunMe = window[functionName];\n\t\t}else{\n\t\t\t\/\/ instance function\n\t\t\trunMe = eval(functionName);\n\t\t}\n\t\t\/\/ make the call and get the results\n\t\tvar results = null;\n\t\tif(!dojo.lang.isUndefined(runMe) && runMe != null){\n\t\t\tresults = runMe.apply(null, flashArgs);\n\t\t}\n\t\t\/\/ return the results to flash\n\t\tplugin.SetVariable(\"_returnResult\", results);","call_chain":["runMe"]}},"dojo.flash.Communicator.prototype._fscommandReady":{"meta":{"summary":"","src":" \tvar plugin = dojo.flash.obj.get();\n\t\tplugin.SetVariable(\"fscommandReady\", \"true\");"}},"dojo.flash.Communicator.prototype._call":{"meta":{"summary":"","parameters":{"args":{"type":""}},"src":" \tvar plugin = dojo.flash.obj.get();\n\t\tplugin.SetVariable(\"_functionName\", functionName);\n\t\tplugin.SetVariable(\"_numArgs\", args.length);\n\t\tfor(var i = 0; i < args.length; i++){\n\t\t\t\/\/ unlike Flash 8's ExternalInterface, Flash 6 has no problem with\n\t\t\t\/\/ any special characters _except_ for the null character \\0; double\n\t\t\t\/\/ encode this so the Flash side never sees it, but we can get it \n\t\t\t\/\/ back if the value comes back to JavaScript\n\t\t\tvar value = args[i];\n\t\t\tvalue = value.replace(\/\\0\/g, \"\\\\0\");\n\t\t\tplugin.SetVariable(\"_\" + i, value);\n\t\t}\n\t\t\/\/ now tell Flash to execute this method using the Flash Runner\n\t\tplugin.TCallLabel(\"\/_flashRunner\", \"execute\");\n\t\t\/\/ get the results\n\t\tvar results = plugin.GetVariable(\"_returnResult\");\n\t\t\/\/ we double encoded all null characters as \/\/0 because Flash breaks\n\t\t\/\/ if they are present; turn the \/\/0 back into \/0\n\t\tresults = results.replace(\/\\\\0\/g, \"\\0\");\n\t\treturn results;"}},"dojo.flash.Communicator.prototype._addExternalInterfaceCallback":{"meta":{"summary":"","parameters":{"methodName":{"type":""}},"src":" \tvar wrapperCall = function(){\n\t\t\t\/\/ some browsers don't like us changing values in the 'arguments' array, so\n\t\t\t\/\/ make a fresh copy of it\n\t\t\tvar methodArgs = new Array(arguments.length);\n\t\t\tfor(var i = 0; i < arguments.length; i++){\n\t\t\t\tmethodArgs[i] = arguments[i];\n\t\t\t}\n\t\t\treturn dojo.flash.comm._execFlash(methodName, methodArgs);\n\t\t};\n\t\tdojo.flash.comm[methodName] = wrapperCall;"}},"dojo.flash.Communicator.prototype._encodeData":{"meta":{"summary":"","parameters":{"data":{"type":""}},"src":" \tvar entityRE = \/\\&([^;]*)\\;\/g;\n\t\tdata = data.replace(entityRE, \"&amp;$1;\");\n\t\t\/\/ entity encode XML-ish characters, or Flash's broken XML serializer\n\t\t\/\/ breaks\n\t\tdata = data.replace(\/<\/g, \"&lt;\");\n\t\tdata = data.replace(\/>\/g, \"&gt;\");\n\t\t\/\/ transforming \\ into \\\\ doesn't work; just use a custom encoding\n\t\tdata = data.replace(\"\\\\\", \"&custom_backslash;&custom_backslash;\");\n\t\tdata = data.replace(\/\\n\/g, \"\\\\n\");\n\t\tdata = data.replace(\/\\r\/g, \"\\\\r\");\n\t\tdata = data.replace(\/\\f\/g, \"\\\\f\");\n\t\tdata = data.replace(\/\\0\/g, \"\\\\0\"); \/\/ null character\n\t\tdata = data.replace(\/\\'\/g, \"\\\\\\'\");\n\t\tdata = data.replace(\/\\\"\/g, '\\\\\\\"');\n\t\treturn data;"}},"dojo.flash.Communicator.prototype._decodeData":{"meta":{"summary":"","parameters":{"data":{"type":""}},"src":" \tif(data == null || typeof data == \"undefined\"){\n\t\t\treturn data;\n\t\t}\n\t\t\/\/ certain XMLish characters break Flash's wire serialization for\n\t\t\/\/ ExternalInterface; these are encoded on the \n\t\t\/\/ DojoExternalInterface side into a custom encoding, rather than\n\t\t\/\/ the standard entity encoding, because otherwise we won't be able to\n\t\t\/\/ differentiate between our own encoding and any entity characters\n\t\t\/\/ that are being used in the string itself\n\t\tdata = data.replace(\/\\&custom_lt\\;\/g, \"<\");\n\t\tdata = data.replace(\/\\&custom_gt\\;\/g, \">\");\n\t\t\/\/ Unfortunately, Flash returns us our String with special characters\n\t\t\/\/ like newlines broken into seperate characters. So if \\n represents\n\t\t\/\/ a new line, Flash returns it as \"\\\" and \"n\". This means the character\n\t\t\/\/ is _not_ a newline. This forces us to eval() the string to cause\n\t\t\/\/ escaped characters to turn into their real special character values.\n\t\tdata = eval('\"' + data + '\"');\n\t\treturn data;"}},"dojo.flash.Communicator.prototype._chunkArgumentData":{"meta":{"summary":"","parameters":{"value":{"type":""},"argIndex":{"type":""}},"src":" \tvar plugin = dojo.flash.obj.get();\n\t\t\/\/ cut up the string into pieces, and push over each piece one\n\t\t\/\/ at a time\n\t\tvar numSegments = Math.ceil(value.length \/ 1024);\n\t\tfor(var i = 0; i < numSegments; i++){\n\t\t\tvar startCut = i * 1024;\n\t\t\tvar endCut = i * 1024 + 1024;\n\t\t\tif(i == (numSegments - 1)){\n\t\t\t\tendCut = i * 1024 + value.length;\n\t\t\t}\n\t\t\tvar piece = value.substring(startCut, endCut);\n\t\t\t\/\/ encode each piece seperately, rather than the entire\n\t\t\t\/\/ argument data, because ocassionally a special \n\t\t\t\/\/ character, such as an entity like &foobar;, will fall between\n\t\t\t\/\/ piece boundaries, and we _don't_ want to encode that value if\n\t\t\t\/\/ it falls between boundaries, or else we will end up with incorrect\n\t\t\t\/\/ data when we patch the pieces back together on the other side\n\t\t\tpiece = this._encodeData(piece);\n\t\t\t\/\/ directly use the underlying CallFunction method used by\n\t\t\t\/\/ ExternalInterface, which is vastly faster for large strings\n\t\t\t\/\/ and lets us bypass some Flash serialization bugs\n\t\t\tplugin.CallFunction('<invoke name=\"chunkArgumentData\" '\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ 'returntype=\"javascript\">'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ '<arguments>'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ '<string>' + piece + '<\/string>'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ '<number>' + argIndex + '<\/number>'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ '<\/arguments>'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ '<\/invoke>');\n\t\t}"}},"dojo.flash.Communicator.prototype._chunkReturnData":{"meta":{"summary":"","src":" \tvar plugin = dojo.flash.obj.get();\n\t\tvar numSegments = plugin.getReturnLength();\n\t\tvar resultsArray = new Array();\n\t\tfor(var i = 0; i < numSegments; i++){\n\t\t\t\/\/ directly use the underlying CallFunction method used by\n\t\t\t\/\/ ExternalInterface, which is vastly faster for large strings\n\t\t\tvar piece = \n\t\t\t\t\tplugin.CallFunction('<invoke name=\"chunkReturnData\" '\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ 'returntype=\"javascript\">'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ '<arguments>'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ '<number>' + i + '<\/number>'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ '<\/arguments>'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ '<\/invoke>');\n\t\t\t\/\/ remove any leading or trailing JavaScript delimiters, which surround\n\t\t\t\/\/ our String when it comes back from Flash since we bypass Flash's\n\t\t\t\/\/ deserialization routines by directly calling CallFunction on the\n\t\t\t\/\/ plugin\n\t\t\tif(piece == '\"\"' || piece == \"''\"){\n\t\t\t\tpiece = \"\";\n\t\t\t}else{\n\t\t\t\tpiece = piece.substring(1, piece.length-1);\n\t\t\t}\n\t\t\tresultsArray.push(piece);\n\t\t}\n\t\tvar results = resultsArray.join(\"\");\n\t\treturn results;"}},"dojo.flash.Communicator.prototype._execFlash":{"meta":{"summary":"","parameters":{"methodName":{"type":""},"methodArgs":{"type":""}},"src":" \tvar plugin = dojo.flash.obj.get();\n\t\t\/\/ begin Flash method execution\n\t\tplugin.startExec();\n\t\t\/\/ set the number of arguments\n\t\tplugin.setNumberArguments(methodArgs.length);\n\t\t\/\/ chunk and send over each argument\n\t\tfor(var i = 0; i < methodArgs.length; i++){\n\t\t\tthis._chunkArgumentData(methodArgs[i], i);\n\t\t}\n\t\t\/\/ execute the method\n\t\tplugin.exec(methodName);\n\t\t\/\/ get the return result\n\t\tvar results = this._chunkReturnData();\n\t\t\/\/ decode the results\n\t\tresults = this._decodeData(results);\n\t\t\/\/ reset everything\n\t\tplugin.endExec();\n\t\treturn results;"}},"dojo.flash.Install.prototype.needed":{"meta":{"summary":"Boolean Determines if installation or revving of the current plugin is needed. do we even have flash?","src":" \tif(dojo.flash.info.capable == false){\n\t\t\treturn true;\n\t\t}\n\t\t\/\/ are we on the Mac? Safari needs Flash version 8 to do Flash 8\n\t\t\/\/ communication, while Firefox\/Mac needs Flash 8 to fix bugs it has\n\t\t\/\/ with Flash 6 communication\n\t\tif(dojo.render.os.mac == true && !dojo.flash.info.isVersionOrAbove(8, 0, 0)){\n\t\t\treturn true;\n\t\t}\n\t\t\/\/ other platforms need at least Flash 6 or above\n\t\tif(!dojo.flash.info.isVersionOrAbove(6, 0, 0)){\n\t\t\treturn true;\n\t\t}\n\t\t\/\/ otherwise we don't need installation\n\t\treturn false;"}},"dojo.flash.Install.prototype.install":{"meta":{"summary":"Performs installation or revving of the Flash plugin. dojo.debug(\"install\"); indicate that we are installing","src":" \tdojo.flash.info.installing = true;\n\t\tdojo.flash.installing();\n\t\tif(dojo.flash.info.capable == false){ \/\/ we have no Flash at all\n\t\t\t\/\/dojo.debug(\"Completely new install\");\n\t\t\t\/\/ write out a simple Flash object to force the browser to prompt\n\t\t\t\/\/ the user to install things\n\t\t\tvar installObj = new dojo.flash.Embed(false);\n\t\t\tinstallObj.write(8); \/\/ write out HTML for Flash 8 version+\n\t\t}else if(dojo.flash.info.isVersionOrAbove(6, 0, 65)){ \/\/ Express Install\n\t\t\t\/\/dojo.debug(\"Express install\");\n\t\t\tvar installObj = new dojo.flash.Embed(false);\n\t\t\tinstallObj.write(8, true); \/\/ write out HTML for Flash 8 version+\n\t\t\tinstallObj.setVisible(true);\n\t\t\tinstallObj.center();\n\t\t}else{ \/\/ older Flash install than version 6r65\n\t\t\talert(\"This content requires a more recent version of the Macromedia \"\n\t\t\t\t\t\t+\" Flash Player.\");\n\t\t\twindow.location.href = + dojo.flash.Embed.protocol() +\n\t\t\t\t\t\t\":\/\/www.macromedia.com\/go\/getflashplayer\";\n\t\t}"}},"dojo.flash.Install.prototype._onInstallStatus":{"meta":{"summary":"","parameters":{"msg":{"type":""}},"src":" \tif (msg == \"Download.Complete\"){\n\t\t\t\/\/ Installation is complete.\n\t\t\tdojo.flash._initialize();\n\t\t}else if(msg == \"Download.Cancelled\"){\n\t\t\talert(\"This content requires a more recent version of the Macromedia \"\n\t\t\t\t\t\t+\" Flash Player.\");\n\t\t\twindow.location.href = dojo.flash.Embed.protocol() +\n\t\t\t\t\t\t\":\/\/www.macromedia.com\/go\/getflashplayer\";\n\t\t}else if (msg == \"Download.Failed\"){\n\t\t\t\/\/ The end user failed to download the installer due to a network failure\n\t\t\talert(\"There was an error downloading the Flash Player update. \"\n\t\t\t\t\t\t+ \"Please try again later, or visit macromedia.com to download \"\n\t\t\t\t\t\t+ \"the latest version of the Flash plugin.\");\n\t\t}\t"}}},"objects":{"dojo.flash":{"meta":{"variables":["flash6_version","flash8_version","ready","_visible","_loadedListeners","_installingListeners"]}},"dojo.flash.Info.prototype":{"meta":{"variables":["version","versionMajor","versionMinor","versionRevision","capable","commVersion","installing"]},"extra":{"variables":{"version":{"type":"to","summary":"interact with the Flash ActiveX control. Detects the mechanisms that should be used for Flash\/JavaScript communication, setting 'commVersion' to either 6 or 8. If the value is 6, we use Flash Plugin 6+ features, such as GetVariable, TCallLabel, and fscommand, to do Flash\/JavaScript communication; if the value is 8, we use the ExternalInterface API for communication."},"versionMajor":{"type":"versionMinor","summary":"versionRevision: String The major, minor, and revisions of the plugin. For example, if the plugin is 8r22, then the major version is 8, the minor version is 0, and the revision is 22."},"capable":{"type":"Boolean","summary":"Whether this platform has Flash already installed."},"commVersion":{"type":"int","summary":"The major version number for how our Flash and JavaScript communicate. This can currently be the following values: 6 - We use a combination of the Flash plugin methods, such as SetVariable and TCallLabel, along with fscommands, to do communication. 8 - We use the ExternalInterface API. -1 - For some reason neither method is supported, and no communication is possible."},"installing":{"type":"Boolean","summary":"Set if we are in the middle of a Flash installation session. JavaScript helper required to detect Flash Player PlugIn version information. Internet Explorer uses a corresponding Visual Basic"}}}},"dojo.flash.Embed.prototype":{"meta":{"variables":["width","height","id","_visible"]},"extra":{"variables":{"width":{"type":"int","summary":"The width of this Flash applet. The default is the minimal width necessary to show the Flash settings dialog. Current value is 215 pixels."},"height":{"type":"int","summary":"The height of this Flash applet. The default is the minimal height necessary to show the Flash settings dialog. Current value is 138 pixels."},"id":{"type":"String","summary":"The id of the Flash object. Current value is 'flashObject'. Controls whether this is a visible Flash applet or not."}}}}}}}}