{"dojo.uuid.LightweightGenerator":{"meta":{"functions":{"dojo.uuid.LightweightGenerator.generate":{"_":{"meta":{"summary":"","parameters":{"returnType":{"type":""}},"src":"\t\tvar hyphen = \"-\";\n\t\tvar versionCodeForRandomlyGeneratedUuids = \"4\"; \/\/ 8 == binary2hex(\"0100\")\n\t\tvar variantCodeForDCEUuids = \"8\"; \/\/ 8 == binary2hex(\"1000\")\n\t\tvar a = _generateRandomEightCharacterHexString();\n\t\tvar b = _generateRandomEightCharacterHexString();\n\t\tb = b.substring(0, 4) + hyphen + versionCodeForRandomlyGeneratedUuids + b.substring(5, 8);\n\t\tvar c = _generateRandomEightCharacterHexString();\n\t\tc = variantCodeForDCEUuids + c.substring(1, 4) + hyphen + c.substring(4, 8);\n\t\tvar d = _generateRandomEightCharacterHexString();\n\t\tvar returnValue = a + hyphen + b + hyphen + c + d;\n\t\treturnValue = returnValue.toLowerCase();\n\t\tif (returnType && (returnType != String)) {\n\t\t\treturnValue = new returnType(returnValue);\n\t\t}\n\t\treturn returnValue;"}}}}}},"dojo.uuid.NameBasedGenerator":{"meta":{"functions":{"dojo.uuid.NameBasedGenerator.generate":{"_":{"meta":{"summary":"","parameters":{"returnType":{"type":""}},"src":"\t\tdojo.unimplemented('dojo.uuid.NameBasedGenerator.generate');\n\t\t\n\t\t\/\/ FIXME:\n\t\t\/\/ For an algorithm to generate name-based UUIDs, \n\t\t\/\/ see sections 4.3 of RFC 4122:\n\t\t\/\/  http:\/\/www.ietf.org\/rfc\/rfc4122.txt\n\t\t\n\t\tvar returnValue = \"00000000-0000-0000-0000-000000000000\"; \/\/ FIXME\n\t\tif (returnType && (returnType != String)) {\n\t\t\treturnValue = new returnType(returnValue);\n\t\t}\n\t\treturn returnValue;","returns":"FIXME"}}}}}},"dojo.uuid.NilGenerator":{"meta":{"functions":{"dojo.uuid.NilGenerator.generate":{"_":{"meta":{"summary":"","parameters":{"returnType":{"type":""}},"src":"\t\tvar returnValue = \"00000000-0000-0000-0000-000000000000\";\n\t\tif (returnType && (returnType != String)) {\n\t\t\treturnValue = new returnType(returnValue);\n\t\t}\n\t\treturn returnValue;"}}}}}},"dojo.uuid.RandomGenerator":{"meta":{"functions":{"dojo.uuid.RandomGenerator.generate":{"_":{"meta":{"summary":"","parameters":{"returnType":{"type":""}},"src":"\t\tdojo.unimplemented('dojo.uuid.RandomGenerator.generate');\n\t\t\n\t\t\/\/ FIXME:\n\t\t\/\/ For an algorithm to generate a random UUID, see\n\t\t\/\/ sections 4.4 and 4.5 of RFC 4122:\n\t\t\/\/  http:\/\/www.ietf.org\/rfc\/rfc4122.txt\n\t\t\n\t\tvar returnValue = \"00000000-0000-0000-0000-000000000000\"; \/\/ FIXME\n\t\tif (returnType && (returnType != String)) {\n\t\t\treturnValue = new returnType(returnValue);\n\t\t}\n\t\treturn returnValue;","returns":"FIXME"}}}}}},"dojo.uuid.TimeBasedGenerator":{"meta":{"requires":{"common":["dojo.lang.*"]},"functions":{"dojo.uuid.TimeBasedGenerator.setNode":{"_":{"meta":{"summary":"","parameters":{"node":{"type":""}},"src":"\t\tdojo.lang.assert((node === null) || (node.length == 12));\n\t\t_uniformNode = node;"}}},"dojo.uuid.TimeBasedGenerator.getNode":{"_":{"meta":{"summary":"","src":"\t\treturn _uniformNode;"}}},"dojo.uuid.TimeBasedGenerator.generate":{"_":{"meta":{"summary":"","parameters":{"input":{"type":""}},"src":"\t\tvar nodeString = null;\n\t\tvar returnType = null;\n\t\t\n\t\tif (input) {\n\t\t\tif (dojo.lang.isObject(input) && !dojo.lang.isBuiltIn(input)) {\n\t\t\t\tvar namedParameters = input;\n\t\t\t\tdojo.lang.assertValidKeywords(namedParameters, [\"node\", \"hardwareNode\", \"pseudoNode\", \"returnType\"]);\n\t\t\t\tvar node = namedParameters[\"node\"];\n\t\t\t\tvar hardwareNode = namedParameters[\"hardwareNode\"];\n\t\t\t\tvar pseudoNode = namedParameters[\"pseudoNode\"];\n\t\t\t\tnodeString = (node || pseudoNode || hardwareNode);\n\t\t\t\tif (nodeString) {\n\t\t\t\t\tvar firstCharacter = nodeString.charAt(0);\n\t\t\t\t\tvar firstDigit = parseInt(firstCharacter, HEX_RADIX);\n\t\t\t\t\tif (hardwareNode) {\n\t\t\t\t\t\tdojo.lang.assert((firstDigit >= 0x0) && (firstDigit <= 0x7));\n\t\t\t\t\t}\n\t\t\t\t\tif (pseudoNode) {\n\t\t\t\t\t\tdojo.lang.assert((firstDigit >= 0x8) && (firstDigit <= 0xF));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturnType = namedParameters[\"returnType\"];\n\t\t\t\tdojo.lang.assertType(returnType, Function, {optional: true});\n\t\t\t} else {\n\t\t\t\tif (dojo.lang.isString(input)) {\n\t\t\t\t\tnodeString = input;\n\t\t\t\t\treturnType = null;\n\t\t\t\t} else {\n\t\t\t\t\tif (dojo.lang.isFunction(input)) {\n\t\t\t\t\t\tnodeString = null;\n\t\t\t\t\t\treturnType = input;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (nodeString) {\n\t\t\t\tdojo.lang.assert(nodeString.length == 12);\n\t\t\t\tvar integer = parseInt(nodeString, HEX_RADIX);\n\t\t\t\tdojo.lang.assert(isFinite(integer));\n\t\t\t}\n\t\t\tdojo.lang.assertType(returnType, Function, {optional: true});\n\t\t}\n\t\t\n\t\tvar uuidString = _generateUuidString(nodeString);\n\t\tvar returnValue;\n\t\tif (returnType && (returnType != String)) {\n\t\t\treturnValue = new returnType(uuidString);\n\t\t} else {\n\t\t\treturnValue = uuidString;\n\t\t}\n\t\treturn returnValue;"}}}}}},"dojo.uuid.Uuid":{"meta":{"requires":{"common":["dojo.lang.*"]},"functions":{"dojo.uuid.Uuid":{"_":{"meta":{"summary":"","parameters":{"input":{"type":""}},"src":"\tthis._uuidString = dojo.uuid.Uuid.NIL_UUID;\n\tif (input) {\n\t\tif (dojo.lang.isString(input)) {\n\t\t\tthis._uuidString = input.toLowerCase();\n\t\t\tdojo.lang.assert(this.isValid());\n\t\t} else {\n\t\t\tif (dojo.lang.isObject(input) && input.generate) {\n\t\t\t\tvar generator = input;\n\t\t\t\tthis._uuidString = generator.generate();\n\t\t\t\tdojo.lang.assert(this.isValid());\n\t\t\t} else {\n\t\t\t\t\/\/ we got passed something other than a string\n\t\t\t\tdojo.lang.assert(false, \"The dojo.uuid.Uuid() constructor must be initializated with a UUID string.\");\n\t\t\t}\n\t\t}\n\t} else {\n\t\tvar ourGenerator = dojo.uuid.Uuid.getGenerator();\n\t\tif (ourGenerator) {\n\t\t\tthis._uuidString = ourGenerator.generate();\n\t\t\tdojo.lang.assert(this.isValid());\n\t\t}\n\t}","this_variables":["_uuidString","_uuidString","_versionNumber","_nodeString","_timestampAsHexString","_timestampAsDate"]}}},"dojo.uuid.Uuid.compare":{"_":{"meta":{"summary":"","parameters":{"uuidOne":{"type":""},"uuidTwo":{"type":""},"otherUuid":{"type":""}},"src":"\treturn dojo.uuid.Uuid.compare(this, otherUuid);","this":"dojo.uuid.Uuid"}}},"dojo.uuid.Uuid.setGenerator":{"_":{"meta":{"summary":"","parameters":{"generator":{"type":""}},"src":"\tdojo.lang.assert(!generator || (dojo.lang.isObject(generator) && generator.generate));\n\tdojo.uuid.Uuid._ourGenerator = generator;"}}},"dojo.uuid.Uuid.getGenerator":{"_":{"meta":{"summary":"","parameters":{"generator":{"type":""}},"src":"\treturn dojo.uuid.Uuid._ourGenerator;"}}},"dojo.uuid.Uuid.toString":{"_":{"meta":{"summary":"","parameters":{"format":{"type":""}},"src":"\tif (format) {\n\t\tswitch (format) {\n\t\t\tcase '{}':\n\t\t\t\treturn '{' + this._uuidString + '}';\n\t\t\t\tbreak;\n\t\t\tcase '()':\n\t\t\t\treturn '(' + this._uuidString + ')';\n\t\t\t\tbreak;\n\t\t\tcase '\"\"':\n\t\t\t\treturn '\"' + this._uuidString + '\"';\n\t\t\t\tbreak;\n\t\t\tcase \"''\":\n\t\t\t\treturn \"'\" + this._uuidString + \"'\";\n\t\t\t\tbreak;\n\t\t\tcase 'urn':\n\t\t\t\treturn 'urn:uuid:' + this._uuidString;\n\t\t\t\tbreak;\n\t\t\tcase '!-':\n\t\t\t\treturn this._uuidString.split('-').join('');\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t\/\/ we got passed something other than what we expected\n\t\t\t\tdojo.lang.assert(false, \"The toString() method of dojo.uuid.Uuid was passed a bogus format.\");\n\t\t}\n\t} else {\n\t\treturn this._uuidString;\n\t}","this":"dojo.uuid.Uuid"}}},"dojo.uuid.Uuid.isEqual":{"_":{"meta":{"summary":"","parameters":{"otherUuid":{"type":""}},"src":"\treturn (this.compare(otherUuid) == 0);","this":"dojo.uuid.Uuid"}}},"dojo.uuid.Uuid.isValid":{"_":{"meta":{"summary":"","src":"\ttry {\n\t\tdojo.lang.assertType(this._uuidString, String);\n\t\tdojo.lang.assert(this._uuidString.length == 36);\n\t\tdojo.lang.assert(this._uuidString == this._uuidString.toLowerCase());\n\t\tvar arrayOfParts = this._uuidString.split(\"-\");\n\t\tdojo.lang.assert(arrayOfParts.length == 5);\n\t\tdojo.lang.assert(arrayOfParts[0].length == 8);\n\t\tdojo.lang.assert(arrayOfParts[1].length == 4);\n\t\tdojo.lang.assert(arrayOfParts[2].length == 4);\n\t\tdojo.lang.assert(arrayOfParts[3].length == 4);\n\t\tdojo.lang.assert(arrayOfParts[4].length == 12);\n\t\tfor (var i in arrayOfParts) {\n\t\t\tvar part = arrayOfParts[i];\n\t\t\tvar integer = parseInt(part, dojo.uuid.Uuid.HEX_RADIX);\n\t\t\tdojo.lang.assert(isFinite(integer));\n\t\t}\n\t\treturn true;\n\t} catch (e) {\n\t\treturn false;\n\t}","this":"dojo.uuid.Uuid"}}},"dojo.uuid.Uuid.getVariant":{"_":{"meta":{"summary":"","src":"\tvar variantNumber = parseInt(variantCharacter, dojo.uuid.Uuid.HEX_RADIX);\n\tdojo.lang.assert((variantNumber >= 0) && (variantNumber <= 16));\n\n\tif (!dojo.uuid.Uuid._ourVariantLookupTable) {\n\t\tvar Variant = dojo.uuid.Uuid.Variant;\n\t\tvar lookupTable = [];\n\n\t\tlookupTable[0x0] = Variant.NCS;       \/\/ 0000\n\t\tlookupTable[0x1] = Variant.NCS;       \/\/ 0001\n\t\tlookupTable[0x2] = Variant.NCS;       \/\/ 0010\n\t\tlookupTable[0x3] = Variant.NCS;       \/\/ 0011\n\n\t\tlookupTable[0x4] = Variant.NCS;       \/\/ 0100\n\t\tlookupTable[0x5] = Variant.NCS;       \/\/ 0101\n\t\tlookupTable[0x6] = Variant.NCS;       \/\/ 0110\n\t\tlookupTable[0x7] = Variant.NCS;       \/\/ 0111\n\n\t\tlookupTable[0x8] = Variant.DCE;       \/\/ 1000\n\t\tlookupTable[0x9] = Variant.DCE;       \/\/ 1001\n\t\tlookupTable[0xA] = Variant.DCE;       \/\/ 1010\n\t\tlookupTable[0xB] = Variant.DCE;       \/\/ 1011\n\n\t\tlookupTable[0xC] = Variant.MICROSOFT; \/\/ 1100\n\t\tlookupTable[0xD] = Variant.MICROSOFT; \/\/ 1101\n\t\tlookupTable[0xE] = Variant.UNKNOWN;   \/\/ 1110\n\t\tlookupTable[0xF] = Variant.UNKNOWN;   \/\/ 1111\n\t\t\n\t\tdojo.uuid.Uuid._ourVariantLookupTable = lookupTable;\n\t}\n\n\treturn dojo.uuid.Uuid._ourVariantLookupTable[variantNumber];","this":"dojo.uuid.Uuid"}}},"dojo.uuid.Uuid.getVersion":{"_":{"meta":{"summary":"","src":"\tif (!this._versionNumber) {\n\t\tvar errorMessage = \"Called getVersion() on a dojo.uuid.Uuid that was not a DCE Variant UUID.\";\n\t\tdojo.lang.assert(this.getVariant() == dojo.uuid.Uuid.Variant.DCE, errorMessage);\n\t\n\t\t\/\/ \"b4308fb0-86cd-11da-a72b-0800200c9a66\"\n\t\t\/\/                ^\n\t\t\/\/                |\n\t\t\/\/       (version 1 == TIME_BASED)\n\t\tvar versionCharacter = this._uuidString.charAt(14);\n\t\tthis._versionNumber = parseInt(versionCharacter, dojo.uuid.Uuid.HEX_RADIX);\n\t}\n\treturn this._versionNumber;","this":"dojo.uuid.Uuid"}}},"dojo.uuid.Uuid.getNode":{"_":{"meta":{"summary":"","src":"\tif (!this._nodeString) {\n\t\tvar errorMessage = \"Called getNode() on a dojo.uuid.Uuid that was not a TIME_BASED UUID.\";\n\t\tdojo.lang.assert(this.getVersion() == dojo.uuid.Uuid.Version.TIME_BASED, errorMessage);\n\n\t\tvar arrayOfStrings = this._uuidString.split('-');\n\t\tthis._nodeString = arrayOfStrings[4];\n\t}\n\treturn this._nodeString;","this":"dojo.uuid.Uuid"}}},"dojo.uuid.Uuid.getTimestamp":{"_":{"meta":{"summary":"","parameters":{"returnType":{"type":""}},"src":"\tvar errorMessage = \"Called getTimestamp() on a dojo.uuid.Uuid that was not a TIME_BASED UUID.\";\n\tdojo.lang.assert(this.getVersion() == dojo.uuid.Uuid.Version.TIME_BASED, errorMessage);\n\t\n\tif (!returnType) {returnType = null};\n\tswitch (returnType) {\n\t\tcase \"string\":\n\t\tcase String:\n\t\t\treturn this.getTimestamp(Date).toUTCString();\n\t\t\tbreak;\n\t\tcase \"hex\":\n\t\t\t\/\/ Return a 15-character string of hex digits containing the \n\t\t\t\/\/ timestamp for this UUID, with the high-order bits first.\n\t\t\tif (!this._timestampAsHexString) {\n\t\t\t\tvar arrayOfStrings = this._uuidString.split('-');\n\t\t\t\tvar hexTimeLow = arrayOfStrings[0];\n\t\t\t\tvar hexTimeMid = arrayOfStrings[1];\n\t\t\t\tvar hexTimeHigh = arrayOfStrings[2];\n\t\t\t\n\t\t\t\t\/\/ Chop off the leading \"1\" character, which is the UUID \n\t\t\t\t\/\/ version number for time-based UUIDs.\n\t\t\t\thexTimeHigh = hexTimeHigh.slice(1);\n\t\t\t\n\t\t\t\tthis._timestampAsHexString = hexTimeHigh + hexTimeMid + hexTimeLow;\n\t\t\t\tdojo.lang.assert(this._timestampAsHexString.length == 15);\n\t\t\t}\n\t\t\treturn this._timestampAsHexString;\n\t\t\tbreak;\n\t\tcase null: \/\/ no returnType was specified, so default to Date\n\t\tcase \"date\":\n\t\tcase Date:\n\t\t\t\/\/ Return a JavaScript Date object. \n\t\t\tif (!this._timestampAsDate) {\n\t\t\t\tvar GREGORIAN_CHANGE_OFFSET_IN_HOURS = 3394248;\n\t\t\t\n\t\t\t\tvar arrayOfParts = this._uuidString.split('-');\n\t\t\t\tvar timeLow = parseInt(arrayOfParts[0], dojo.uuid.Uuid.HEX_RADIX);\n\t\t\t\tvar timeMid = parseInt(arrayOfParts[1], dojo.uuid.Uuid.HEX_RADIX);\n\t\t\t\tvar timeHigh = parseInt(arrayOfParts[2], dojo.uuid.Uuid.HEX_RADIX);\n\t\t\t\tvar hundredNanosecondIntervalsSince1582 = timeHigh & 0x0FFF;\n\t\t\t\thundredNanosecondIntervalsSince1582 <<= 16;\n\t\t\t\thundredNanosecondIntervalsSince1582 += timeMid;\n\t\t\t\t\/\/ What we really want to do next is shift left 32 bits, but the \n\t\t\t\t\/\/ result will be too big to fit in an int, so we'll multiply by 2^32,\n\t\t\t\t\/\/ and the result will be a floating point approximation.\n\t\t\t\thundredNanosecondIntervalsSince1582 *= 0x100000000;\n\t\t\t\thundredNanosecondIntervalsSince1582 += timeLow;\n\t\t\t\tvar millisecondsSince1582 = hundredNanosecondIntervalsSince1582 \/ 10000;\n\t\t\t\n\t\t\t\t\/\/ Again, this will be a floating point approximation.\n\t\t\t\t\/\/ We can make things exact later if we need to.\n\t\t\t\tvar secondsPerHour = 60 * 60;\n\t\t\t\tvar hoursBetween1582and1970 = GREGORIAN_CHANGE_OFFSET_IN_HOURS;\n\t\t\t\tvar secondsBetween1582and1970 = hoursBetween1582and1970 * secondsPerHour;\n\t\t\t\tvar millisecondsBetween1582and1970 = secondsBetween1582and1970 * 1000;\n\t\t\t\tvar millisecondsSince1970 = millisecondsSince1582 - millisecondsBetween1582and1970;\n\t\t\t\n\t\t\t\tthis._timestampAsDate = new Date(millisecondsSince1970);\n\t\t\t}\n\t\t\treturn this._timestampAsDate;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t\/\/ we got passed something other than a valid returnType\n\t\t\tdojo.lang.assert(false, \"The getTimestamp() method dojo.uuid.Uuid was passed a bogus returnType: \" + returnType);\n\t\t\tbreak;\n\t}","this":"dojo.uuid.Uuid"}}}}}},"dojo.uuid._":{"meta":{"requires":{"common":["dojo.uuid.Uuid","dojo.uuid.LightweightGenerator","dojo.uuid.RandomGenerator","dojo.uuid.TimeBasedGenerator","dojo.uuid.NameBasedGenerator","dojo.uuid.NilGenerator"]}}}}