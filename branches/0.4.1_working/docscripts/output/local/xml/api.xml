<?xml version="1.0"?>
<dojo><resource location="dojo.AdapterRegistry"><requires><environment type="common"><require>dojo.lang.func</require></environment></requires><function name="dojo.AdapterRegistry"><summary>A registry to make contextual calling/searching easier.</summary><parameters><parameter name="returnWrappers" optional="true" type="Boolean"/></parameters><variables><variable scope="instance" name="pairs"/><variable scope="instance" name="returnWrappers"/></variables><description>Objects of this class keep list of arrays in the form [name, check, wrap, directReturn] that are used to determine what the contextual result of a set of checked arguments is. All check/wrap functions in this registry should be of the same arity.</description></function><function name="dojo.AdapterRegistry.register" prototype="dojo.AdapterRegistry"><summary>register a check function to determine if the wrap function or object gets selected</summary><parameters><parameter name="name" type="String">a way to identify this matcher.</parameter><parameter name="check" type="Function">a function that arguments are passed to from the adapter's match() function. The check function should return true if the given arguments are appropriate for the wrap function.</parameter><parameter name="wrap" type="Function"/><parameter name="directReturn" optional="true" type="Boolean">If directReturn is true, the value passed in for wrap will be returned instead of being called. Alternately, the AdapterRegistry can be set globally to "return not call" using the returnWrappers property. Either way, this behavior allows the registry to act as a "search" function instead of a function interception library.</parameter><parameter name="override" optional="true" type="Boolean">If override is given and true, the check function will be given highest priority. Otherwise, it will be the lowest priority adapter.</parameter></parameters></function><function name="dojo.AdapterRegistry.match" prototype="dojo.AdapterRegistry"><summary>Find an adapter for the given arguments. If no suitable adapter is found, throws an exception. match() accepts any number of arguments, all of which are passed to all matching functions from the registered pairs.</summary></function><function name="dojo.AdapterRegistry.unregister" prototype="dojo.AdapterRegistry"><summary>Remove a named adapter from the registry</summary><parameters><parameter name="name"/></parameters></function></resource><resource location="dojo.Deferred"><requires><environment type="common"><require>dojo.lang.func</require></environment></requires><function name="dojo.Deferred"><parameters><parameter name="canceller" optional="true" type="Function"/></parameters><variables><variable scope="instance" name="chain"/><variable scope="instance" name="id"/><variable scope="instance" name="fired"/><variable scope="instance" name="paused"/><variable scope="instance" name="results"/><variable scope="instance" name="canceller"/><variable scope="instance" name="silentlyCancelled"/><variable scope="prototype" name="toString"/><variable scope="prototype" name="_nextId"/></variables></function><function name="dojo.Deferred.getFunctionFromArgs" prototype="dojo.Deferred"/><function name="dojo.Deferred.makeCalled" prototype="dojo.Deferred"/><function name="dojo.Deferred.repr" prototype="dojo.Deferred"/><function name="dojo.Deferred.cancel" prototype="dojo.Deferred"><summary>Cancels a Deferred that has not yet received a value, or is waiting on another Deferred as its value.</summary><description>If a canceller is defined, the canceller is called. If the canceller did not return an error, or there was no canceller, then the errback chain is started with CancelledError.</description></function><function name="dojo.Deferred._pause" prototype="dojo.Deferred"><summary>Used internally to signal that it's waiting on another Deferred</summary></function><function name="dojo.Deferred._unpause" prototype="dojo.Deferred"><summary>Used internally to signal that it's no longer waiting on another Deferred.</summary></function><function name="dojo.Deferred._continue" prototype="dojo.Deferred"><summary>Used internally when a dependent deferred fires.</summary><parameters><parameter name="res"/></parameters></function><function name="dojo.Deferred._resback" prototype="dojo.Deferred"><parameters><parameter name="res"/></parameters></function><function name="dojo.Deferred._check" prototype="dojo.Deferred"/><function name="dojo.Deferred.callback" prototype="dojo.Deferred"><summary>Begin the callback sequence with a non-error value.</summary><parameters><parameter name="res"/></parameters></function><function name="dojo.Deferred.errback" prototype="dojo.Deferred"><summary>Begin the callback sequence with an error result.</summary><parameters><parameter name="res"/></parameters></function><function name="dojo.Deferred.addBoth" prototype="dojo.Deferred"><parameters><parameter name="cb"/><parameter name="cbfn"/></parameters></function><function name="dojo.Deferred.addCallback" prototype="dojo.Deferred"><summary>Add a single callback to the end of the callback sequence.</summary><parameters><parameter name="cb"/><parameter name="cbfn"/></parameters></function><function name="dojo.Deferred.addErrback" prototype="dojo.Deferred"><summary>Add a single callback to the end of the callback sequence.</summary><parameters><parameter name="cb"/><parameter name="cbfn"/></parameters></function><function name="dojo.Deferred.addCallbacks" prototype="dojo.Deferred"><summary>Add separate callback and errback to the end of the callback sequence.</summary><parameters><parameter name="cb"/><parameter name="eb"/></parameters></function><function name="dojo.Deferred._fire" prototype="dojo.Deferred"><summary>Used internally to exhaust the callback sequence when a result is available.</summary></function></resource><resource location="dojo.DeferredList"><requires><environment type="common"><require>dojo.Deferred</require></environment></requires><function name="dojo.DeferredList"><parameters><parameter name="list"/><parameter name="fireOnOneCallback" optional="true" type="bool"/><parameter name="fireOnOneErrback" optional="true" type="bool"/><parameter name="consumeErrors" optional="true" type="bool"/><parameter name="canceller" optional="true" type="Function"/></parameters><chains><chain type="prototype">dojo.Deferred</chain></chains><variables><variable scope="instance" name="list"/><variable scope="instance" name="resultList"/><variable scope="instance" name="chain"/><variable scope="instance" name="id"/><variable scope="instance" name="fired"/><variable scope="instance" name="paused"/><variable scope="instance" name="results"/><variable scope="instance" name="canceller"/><variable scope="instance" name="silentlyCancelled"/><variable scope="instance" name="list.length"/><variable scope="instance" name="finishedCount"/><variable scope="instance" name="fireOnOneCallback"/><variable scope="instance" name="fireOnOneErrback"/><variable scope="instance" name="consumeErrors"/></variables></function><function name="dojo.DeferredList._cbDeferred" prototype="dojo.DeferredList"><parameters><parameter name="index"/><parameter name="succeeded"/><parameter name="result"/></parameters></function><function name="dojo.DeferredList.gatherResults" prototype="dojo.DeferredList"><parameters><parameter name="deferredList"/></parameters></function></resource><resource location="dojo.a11y"><requires><environment type="common"><require>dojo.uri.*</require><require>dojo.html.common</require></environment></requires><function name="dojo.a11y.checkAccessible"><returns type="Boolean"/><summary>perform check for accessibility if accessibility checking is turned on and the accessibility test has not been performed yet</summary><variables><variable scope="instance" name="accessible"/><variable scope="instance" name="doAccessibleCheck"/></variables></function><function name="dojo.a11y.testAccessible"><returns type="Boolean"/><summary>Always perform the accessibility check to determine if high contrast mode is on or display of images are turned off. Currently only checks in IE and Mozilla.</summary><variables><variable scope="instance" name="accessible"/></variables></function><function name="dojo.a11y.setCheckAccessible"><summary>Set whether or not to check for accessibility mode. Default value of module is true - perform check for accessibility modes.</summary><parameters><parameter name="bTest" type="Boolean">- true to check; false to turn off checking</parameter></parameters><variables><variable scope="instance" name="doAccessibleCheck"/></variables></function><function name="dojo.a11y.setAccessibleMode"><returns type="Boolean"/><summary>perform the accessibility check and sets the correct mode to load a11y widgets. Only runs if test for accessiiblity has not been performed yet. Call testAccessible() to force the test.</summary><variables><variable scope="instance" name="accessible"/></variables></function><object name="dojo.a11y"><variables><variable name="imgPath" type="String">path to the test image for determining if images are displayed or not</variable><variable name="doAccessibleCheck" type="Boolean">if true will perform check for need to create accessible widgets</variable><variable name="accessible" type="Boolean">uninitialized when null (accessible check has not been performed) if true generate accessible widgets</variable></variables></object></resource><resource location="dojo.animation.Animation"><requires><environment type="common"><require>dojo.animation.AnimationEvent</require><require>dojo.lang.func</require><require>dojo.math</require><require>dojo.math.curves</require></environment></requires><function name="dojo.animation.Animation"><summary>Animation object iterates a set of numbers over a curve for a given amount of time, calling 'onAnimate' at each step.</summary><parameters><parameter name="curve" type="dojo.math.curves.*"/><parameter name="duration" type="int"/><parameter name="accel" optional="true" type="Decimal"/><parameter name="repeatCount" optional="true" type="int"/><parameter name="rate" optional="true" type="int"/></parameters><variables><variable scope="instance" name="curve" type="Curve">to animate over.</variable><variable scope="instance" name="duration" type="Duration">of the animation, in milliseconds.</variable><variable scope="instance" name="repeatCount" type="Number">of times to repeat the animation. Default is 0.</variable><variable scope="instance" name="rate" type="Time">between animation steps, in milliseconds. Default is 25.</variable><variable scope="instance" name="accel" type="Either">an integer or curve representing amount of acceleration. (?) Default is linear acceleration.</variable><variable scope="instance" name="_active"/><variable scope="instance" name="_paused"/><variable scope="instance" name="_percent"/><variable scope="instance" name="_startTime"/><variable scope="instance" name="_endTime"/><variable scope="instance" name="_lastFrame"/><variable scope="instance" name="_startRepeatCount"/><variable scope="instance" name="handler"/><variable scope="instance" name="onBegin"/><variable scope="instance" name="onPlay"/><variable scope="instance" name="onPause"/><variable scope="instance" name="onStop"/><variable scope="instance" name="onAnimate"/><variable scope="instance" name="_timer"/><variable scope="instance" name="onEnd"/><variable scope="prototype" name="curve">to animate over.</variable><variable scope="prototype" name="duration">of the animation, in milliseconds.</variable><variable scope="prototype" name="repeatCount">of times to repeat the animation. Default is 0.</variable><variable scope="prototype" name="accel">an integer or curve representing amount of acceleration. (?) Default is linear acceleration.</variable><variable scope="prototype" name="onBegin"/><variable scope="prototype" name="onAnimate"/><variable scope="prototype" name="onEnd"/><variable scope="prototype" name="onPlay"/><variable scope="prototype" name="onPause"/><variable scope="prototype" name="onStop"/><variable scope="prototype" name="handler"/><variable scope="prototype" name="_animSequence"/><variable scope="prototype" name="_startTime"/><variable scope="prototype" name="_endTime"/><variable scope="prototype" name="_lastFrame"/><variable scope="prototype" name="_timer"/><variable scope="prototype" name="_percent"/><variable scope="prototype" name="_active"/><variable scope="prototype" name="_paused"/><variable scope="prototype" name="_startRepeatCount"/></variables><description>Calls the following events: "onBegin", "onAnimate", "onEnd", "onPlay", "onPause", "onStop" If the animation implements a "handler" function, that will be called before each event is called.</description></function><function name="dojo.animation.Animation.play" prototype="dojo.animation.Animation"><summary>Play the animation. goToStart: If true, will restart the animation from the beginning. Otherwise, starts from current play counter.</summary><parameters><parameter name="gotoStart" optional="true" type="Boolean"/></parameters><description>Sends an "onPlay" event to any observers. Also sends an "onBegin" event if starting from the beginning.</description></function><function name="dojo.animation.Animation.pause" prototype="dojo.animation.Animation"><summary>Temporarily stop the animation, leaving the play counter at the current location. Resume later with sequence.play()</summary><description>Sends an "onPause" AnimationEvent to any observers.</description></function><function name="dojo.animation.Animation.playPause" prototype="dojo.animation.Animation"><summary>Toggle between play and paused states.</summary></function><function name="dojo.animation.Animation.gotoPercent" prototype="dojo.animation.Animation"><summary>Set the play counter at a certain point in the animation.</summary><parameters><parameter name="pct" type="Point">to set the play counter to, expressed as a percentage (0 to 100).</parameter><parameter name="andPlay" type="If">true, will start the animation at the counter automatically.</parameter></parameters></function><function name="dojo.animation.Animation.stop" prototype="dojo.animation.Animation"><summary>Stop the animation.</summary><parameters><parameter name="gotoEnd" type="If">true, will advance play counter to the end before sending the event.</parameter></parameters><description>Sends an "onStop" AnimationEvent to any observers.</description></function><function name="dojo.animation.Animation.status" prototype="dojo.animation.Animation"><returns type="String"/><summary>Return the status of the animation.</summary><description>Returns one of "playing", "paused" or "stopped".</description></function><function name="dojo.animation.Animation._cycle" prototype="dojo.animation.Animation"><summary>Perform once 'cycle' or step of the animation.</summary></function></resource><resource location="dojo.animation.AnimationEvent"><requires><environment type="common"><require>dojo.lang.common</require></environment></requires><function name="dojo.animation.AnimationEvent"><summary>Event sent at various points during an Animation.</summary><parameters><parameter name="animation" type="dojo.animation.Animation"/><parameter name="type" type="String"/><parameter name="coords" type="int[]"/><parameter name="startTime" type="int"/><parameter name="currentTime" type="int"/><parameter name="endTime" type="int"/><parameter name="duration" type="int"/><parameter name="percent" type="int"/><parameter name="fps" optional="true" type="int"/></parameters><variables><variable scope="instance" name="type" type="One">of: "animate", "begin", "end", "play", "pause" or "stop".</variable><variable scope="instance" name="animation" type="Animation">throwing the event.</variable><variable scope="instance" name="coords" type="Current">coordinates of the animation.</variable><variable scope="instance" name="x"/><variable scope="instance" name="y"/><variable scope="instance" name="z"/><variable scope="instance" name="startTime" type="Time">the animation was started, as milliseconds.</variable><variable scope="instance" name="currentTime" type="Time">the event was thrown, as milliseconds.</variable><variable scope="instance" name="endTime" type="Time">the animation is expected to complete, as milliseconds.</variable><variable scope="instance" name="duration" type="Duration">of the animation, in milliseconds.</variable><variable scope="instance" name="percent" type="Percent">of the animation that has completed, between 0 and 100.</variable><variable scope="instance" name="fps" type="Frames">currently shown per second. (Only sent for "animate" event).</variable></variables><description>The AnimationEvent has public properties of the same name as all constructor arguments, plus "x", "y" and "z".</description></function><function name="dojo.animation.AnimationEvent.coordsAsInts"><summary>Coerce the coordinates into integers.</summary></function></resource><resource location="dojo.animation.AnimationSequence"><requires><environment type="common"><require>dojo.animation.AnimationEvent</require><require>dojo.animation.Animation</require></environment></requires><function name="dojo.animation.AnimationSequence"><summary>Sequence of Animations, played one after the other.</summary><parameters><parameter name="repeatCount" optional="true" type="int"/></parameters><variables><variable scope="instance" name="_anims"/><variable scope="instance" name="repeatCount" type="Number">of times to repeat the entire sequence. Default is 0 (play once only).</variable><variable scope="instance" name="_currAnim"/><variable scope="instance" name="_anims.length"/><variable scope="instance" name="handler"/><variable scope="instance" name="onBegin"/><variable scope="instance" name="onNext"/><variable scope="instance" name="onEnd"/><variable scope="prototype" name="repeatCount">of times to repeat the entire sequence. Default is 0 (play once only).</variable><variable scope="prototype" name="_anims"/><variable scope="prototype" name="_currAnim"/><variable scope="prototype" name="onBegin"/><variable scope="prototype" name="onEnd"/><variable scope="prototype" name="onNext"/><variable scope="prototype" name="handler"/></variables><description>Calls the following events: "onBegin", "onEnd", "onNext" If the animation implements a "handler" function, that will be called before each event is called.</description></function><function name="dojo.animation.AnimationSequence.add" prototype="dojo.animation.AnimationSequence"><summary>Add one or more Animations to the sequence.</summary><description>args: Animations (dojo.animation.Animation) to add to the sequence.</description></function><function name="dojo.animation.AnimationSequence.remove" prototype="dojo.animation.AnimationSequence"><summary>Remove one particular animation from the sequence. amim: Animation to remove.</summary><parameters><parameter name="anim" type="dojo.animation.Animation"/></parameters></function><function name="dojo.animation.AnimationSequence.removeAll" prototype="dojo.animation.AnimationSequence"><summary>Remove all animations from the sequence.</summary></function><function name="dojo.animation.AnimationSequence.clear" prototype="dojo.animation.AnimationSequence"><summary>Remove all animations from the sequence.</summary></function><function name="dojo.animation.AnimationSequence.play" prototype="dojo.animation.AnimationSequence"><summary>Play the animation sequence.</summary><parameters><parameter name="gotoStart" type="If">true, will start at the beginning of the first sequence. Otherwise, starts at the current play counter of the current animation.</parameter></parameters><description>Sends an "onBegin" event to any observers.</description></function><function name="dojo.animation.AnimationSequence.pause" prototype="dojo.animation.AnimationSequence"><summary>temporarily stop the current animation. Resume later with sequence.play()</summary></function><function name="dojo.animation.AnimationSequence.playPause" prototype="dojo.animation.AnimationSequence"><summary>Toggle between play and paused states.</summary></function><function name="dojo.animation.AnimationSequence.stop" prototype="dojo.animation.AnimationSequence"><summary>Stop the current animation.</summary></function><function name="dojo.animation.AnimationSequence.status" prototype="dojo.animation.AnimationSequence"><summary>Return the status of the current animation.</summary><description>Returns one of "playing", "paused" or "stopped".</description></function><function name="dojo.animation.AnimationSequence._setCurrent" prototype="dojo.animation.AnimationSequence"><summary>Set the current animation.</summary><parameters><parameter name="anim" type="Animation">to make current, must have already been added to the sequence.</parameter></parameters></function><function name="dojo.animation.AnimationSequence._playNext" prototype="dojo.animation.AnimationSequence"><summary>Play the next animation in the sequence.</summary><description>Sends an "onNext" event to any observers. Also sends "onEnd" if the last animation is finished.</description></function></resource><resource location="dojo.animation.Timer"><requires><environment type="common"><require>dojo.lang.timing.Timer</require></environment></requires></resource><resource location="dojo.animation._"><requires><environment type="common"><require>dojo.animation.AnimationEvent</require><require>dojo.animation.Animation</require><require>dojo.animation.AnimationSequence</require></environment></requires></resource><resource location="dojo.animation"><requires><environment type="common"><require>dojo.animation.Animation</require></environment></requires></resource><resource location="dojo.behavior"><requires><environment type="common"><require>dojo.event.*</require><require>dojo.experimental</require></environment></requires><function name="dojo.behavior" initialized="true"><chains><chain type="call">func</chain></chains><variables><variable scope="instance" name="behaviors"/><variable scope="instance" name="add"/><variable scope="instance" name="apply"/><variable scope="instance" name="matchCache"/><variable scope="instance" name="elementsById"/><variable scope="instance" name="applyToNode"/><variable scope="instance" name="applyFast"/><variable scope="instance" name="applySlow"/></variables></function><function name="dojo.behavior.add" instance="dojo.behavior"><parameters><parameter name="behaviorObj"/></parameters></function><function name="dojo.behavior.apply" instance="dojo.behavior"/><function name="dojo.behavior.elementsById" instance="dojo.behavior"><parameters><parameter name="id"/><parameter name="handleRemoved"/></parameters></function><function name="dojo.behavior.applyToNode" instance="dojo.behavior"><parameters><parameter name="node"/><parameter name="action"/><parameter name="ruleSetName"/></parameters></function><function name="dojo.behavior.applyFast" instance="dojo.behavior"/><function name="dojo.behavior.applySlow" instance="dojo.behavior"/></resource><resource location="dojo"><function name="dj_undef"><returns type="Boolean"/><summary>Returns true if 'name' is defined on 'object' (or globally if 'object' is null).</summary><parameters><parameter name="name" type="String"/><parameter name="object" optional="true" type="Object"/></parameters><description>Note that 'defined' and 'exists' are not the same concept.</description></function><function name="dojo.global"><summary>return the current global context object (e.g., the window object in a browser).</summary><description>Refer to 'dojo.global()' rather than referring to window to ensure your code runs correctly in contexts other than web browsers (eg: Rhino on a server).</description></function><function name="dojo.evalProp"><returns type="mixed"/><summary>Returns 'object[name]'. If not defined and 'create' is true, will return a new Object.</summary><parameters><parameter name="name" type="String"/><parameter name="object" type="Object"/><parameter name="create" optional="true" type="Boolean"/></parameters><description>Returns null if 'object[name]' is not defined and 'create' is not true. Note: 'defined' and 'exists' are not the same concept.</description></function><function name="dojo.parseObjPath"><returns type="Object: {obj: Object, prop: String}"/><summary>Parse string path to an object, and return corresponding object reference and property name.</summary><parameters><parameter name="path" type="Path">to an object, in the form "A.B.C".</parameter><parameter name="context" type="Object">to use as root of path. Defaults to 'dojo.global()'.</parameter><parameter name="create" type="If">true, Objects will be created at any point along the 'path' that is undefined.</parameter></parameters><description>Returns an object with two properties, 'obj' and 'prop'. 'obj[prop]' is the reference indicated by 'path'.</description></function><function name="dojo.evalObjPath"><returns type="mixed"/><summary>Return the value of object at 'path' in the global scope, without using 'eval()'.</summary><parameters><parameter name="path" type="Path">to an object, in the form "A.B.C".</parameter><parameter name="create" type="If">true, Objects will be created at any point along the 'path' that is undefined.</parameter></parameters></function><function name="dojo.errorToString"><returns type="mixed"/><summary>Return an exception's 'message', 'description' or text.</summary><parameters><parameter name="exception" type="Error"/></parameters></function><function name="dojo.raise"><summary>Common point for raising exceptions in Dojo to enable logging. Throws an error message with text of 'exception' if provided, or rethrows exception object.</summary><parameters><parameter name="message" type="String"/><parameter name="exception" optional="true" type="Error"/></parameters></function><function name="dojo.debug"/><function name="dojo.debugShallow"><parameters><parameter name="obj"/></parameters></function><function name="dj_eval"><returns type="mixed"/><summary>Perform an evaluation in the global scope. Use this rather than calling 'eval()' directly.</summary><parameters><parameter name="scriptFragment" type="String"/></parameters><description>Placed in a separate function to minimize size of trapped evaluation context. note: - JSC eval() takes an optional second argument which can be 'unsafe'. - Mozilla/SpiderMonkey eval() takes an optional second argument which is the scope object for new symbols.</description></function><function name="dojo.unimplemented"><summary>Throw an exception because some function is not implemented.</summary><parameters><parameter name="funcname" type="String"/><parameter name="extra" type="Text">to append to the exception message.</parameter></parameters></function><function name="dojo.deprecated"><summary>Log a debug message to indicate that a behavior has been deprecated.</summary><parameters><parameter name="behaviour" type="String"/><parameter name="extra" type="Text">to append to the message.</parameter><parameter name="removal" type="Text">to indicate when in the future the behavior will be removed.</parameter></parameters></function><function name="vscaffold"><parameters><parameter name="prefs"/><parameter name="names"/></parameters></function><function name="dojo.hostenv.getBaseScriptUri"><returns type="String"/><summary>Return the base script uri that other scripts are found relative to. TODOC: HUH? This comment means nothing to me. What other scripts? Is this the path to other dojo libraries? MAYBE: Return the base uri to scripts in the dojo library. ??? return: Empty string or a path ending in '/'.</summary></function><function name="dojo.version.toString"><returns type="String"/></function><function name="dojo.profile.start"/><function name="dojo.profile.end"/><function name="dojo.profile.stop"/><function name="dojo.profile.dump"/><function name="dojo.hostenv.loadPath"><returns type="Boolean"/><summary>Load a Javascript module given a relative path</summary><parameters><parameter name="relpath" type="A">relative path to a script (no leading '/', and typically ending in '.js').</parameter><parameter name="module" type="A">module whose existance to check for after loading a path. Can be used to determine success or failure of the load.</parameter><parameter name="cb" type="a">callback function to pass the result of evaluating the script</parameter></parameters><description>Loads and interprets the script located at relpath, which is relative to the script root directory. If the script is found but its interpretation causes a runtime exception, that exception is not caught by us, so the caller will see it. We return a true value if and only if the script is found. For now, we do not have an implementation of a true search path. We consider only the single base script uri, as returned by getBaseScriptUri().</description></function><function name="dojo.hostenv.loadUri"><returns type="Boolean"/><summary>Loads JavaScript from a URI</summary><parameters><parameter name="uri" type="a">uri which points at the script to be loaded</parameter><parameter name="cb" type="a">callback function to process the result of evaluating the script as an expression, typically used by the resource bundle loader to load JSON-style resources</parameter></parameters><description>Reads the contents of the URI, and evaluates the contents. This is used to load modules as well as resource bundles. Returns true if it succeeded. Returns false if the URI reading failed. Throws if the evaluation throws.</description></function><function name="dojo.hostenv.loadUriAndCheck"><returns type="Boolean"/><summary>calls loadUri then findModule and returns true if both succeed</summary><parameters><parameter name="uri" type="String (URL)"/><parameter name="moduleName" type="String"/><parameter name="cb" optional="true" type="Function"/></parameters></function><function name="dojo.loaded"/><function name="dojo.unloaded"/><function name="dojo.hostenv.loaded"><variables><variable scope="instance" name="loadNotifying"/><variable scope="instance" name="post_load_"/><variable scope="instance" name="modulesLoadedListeners"/></variables></function><function name="dojo.hostenv.unloaded"/><function name="dojo.addOnLoad"><summary>Registers a function to be triggered after the DOM has finished loading and widgets declared in markup have been instantiated. Images and CSS files may or may not have finished downloading when the specified function is called. (Note that widgets' CSS and HTML code is guaranteed to be downloaded before said widgets are instantiated.) usage: dojo.addOnLoad(functionPointer) dojo.addOnLoad(object, "functionName")</summary><parameters><parameter name="obj" optional="true" type="Object"/></parameters></function><function name="dojo.addOnUnload"><summary>registers a function to be triggered when the page unloads usage: dojo.addOnLoad(functionPointer) dojo.addOnLoad(object, "functionName")</summary><parameters><parameter name="obj" optional="true" type="Object"/></parameters></function><function name="dojo.hostenv.modulesLoaded"><variables><variable scope="instance" name="loadUriStack.length"/></variables></function><function name="dojo.hostenv.callLoaded"/><function name="dojo.hostenv.getModuleSymbols"><returns type="Array"/><summary>Converts a module name in dotted JS notation to an array representing the path in the source tree</summary><parameters><parameter name="modulename" type="String"/></parameters></function><function name="dojo.hostenv.loadModule"><summary>loads a Javascript module from the appropriate URI</summary><parameters><parameter name="moduleName" type="String"/><parameter name="exactOnly" optional="true" type="Boolean"/><parameter name="omitModuleCheck" optional="true" type="Boolean"/></parameters><description>loadModule("A.B") first checks to see if symbol A.B is defined. If it is, it is simply returned (nothing to do). If it is not defined, it will look for "A/B.js" in the script root directory, followed by "A.js". It throws if it cannot find a file to load, or if the symbol A.B is not defined after loading. It returns the object A.B. This does nothing about importing symbols into the current package. It is presumed that the caller will take care of that. For example, to import all symbols: with (dojo.hostenv.loadModule("A.B")) { ... } And to import just the leaf symbol: var B = dojo.hostenv.loadModule("A.B"); ... dj_load is an alias for dojo.hostenv.loadModule</description></function><function name="dojo.hostenv.startPackage"><returns type="Object"/><summary>Creates a JavaScript package</summary><parameters><parameter name="packageName" type="the">package to be created as a String in dot notation</parameter></parameters><description>startPackage("A.B") follows the path, and at each level creates a new empty object or uses what already exists. It returns the result.</description></function><function name="dojo.hostenv.findModule"><returns type="mixed"/><summary>Returns the Object representing the module, if it exists, otherwise null.</summary><parameters><parameter name="moduleName" type="A">fully qualified module including package name, like 'A.B'.</parameter><parameter name="mustExist" type="Optional">default false. throw instead of returning null if the module does not currently exist.</parameter></parameters></function><function name="dojo.kwCompoundRequire"><parameters><parameter name="modMap" type="Object containing Arrays"/></parameters><chains><chain type="call">dojo.hostenv.loadModule</chain></chains><description>This method taks a "map" of arrays which one can use to optionally load dojo modules. The map is indexed by the possible dojo.hostenv.name_ values, with two additional values: "default" and "common". The items in the "default" array will be loaded if none of the other items have been choosen based on the hostenv.name_ item. The items in the "common" array will _always_ be loaded, regardless of which list is chosen. Here's how it's normally called: dojo.kwCompoundRequire({ browser: [ ["foo.bar.baz", true, true], // an example that passes multiple args to loadModule() "foo.sample.*", "foo.test, ], default: [ "foo.sample.*" ], common: [ "really.important.module.*" ] });</description></function><function name="dojo.require"><summary>Ensure that the given resource (ie, javascript source file) has been loaded.</summary><parameters><parameter name="resourceName" type="String"/></parameters><chains><chain type="call">dojo.hostenv.loadModule</chain></chains><description>dojo.require() is similar to C's #include command or java's "import" command. You call dojo.require() to pull in the resources (ie, javascript source files) that define the functions you are using. Note that in the case of a build, many resources have already been included into dojo.js (ie, many of the javascript source files have been compressed and concatened into dojo.js), so many dojo.require() calls will simply return without downloading anything.</description></function><function name="dojo.requireIf"><summary>If the condition is true then call dojo.require() for the specified resource</summary><parameters><parameter name="condition" type="Boolean"/><parameter name="resourceName" type="String"/></parameters><chains><chain type="call">dojo.require</chain></chains></function><function name="dojo.provide"><summary>Each javascript source file must have (exactly) one dojo.provide() call at the top of the file, corresponding to the file name. For example, dojo/src/foo.js must have dojo.provide("dojo.foo"); at the top of the file.</summary><parameters><parameter name="resourceName" type="String"/></parameters><chains><chain type="call">dojo.hostenv.startPackage</chain></chains><description>Each javascript source file is called a resource. When a resource is loaded by the browser, dojo.provide() registers that it has been loaded. For backwards compatibility reasons, in addition to registering the resource, dojo.provide() also ensures that the javascript object for the module exists. For example, dojo.provide("dojo.html.common"), in addition to registering that common.js is a resource for the dojo.html module, will ensure that the dojo.html javascript object exists, so that calls like dojo.html.foo = function(){ ... } don't fail. In the case of a build (or in the future, a rollup), where multiple javascript source files are combined into one bigger file (similar to a .lib or .jar file), that file will contain multiple dojo.provide() calls, to note that it includes multiple resources.</description></function><function name="dojo.registerModulePath"><summary>maps a module name to a path</summary><parameters><parameter name="module" type="String"/><parameter name="prefix" type="String"/></parameters><description>An unregistered module is given the default path of ../&lt;module&gt;, relative to Dojo root. For example, module acme is mapped to ../acme. If you want to use a different module name, use dojo.registerModulePath.</description></function><function name="dojo.setModulePrefix"><summary>maps a module name to a path</summary><parameters><parameter name="module" type="String"/><parameter name="prefix" type="String"/></parameters></function><function name="dojo.exists"><returns type="Boolean"/><summary>determine if an object supports a given method</summary><parameters><parameter name="obj" type="Object"/><parameter name="name" type="String"/></parameters><description>useful for longer api chains where you have to test each object in the chain</description></function><function name="dojo.hostenv.normalizeLocale"><returns type="String"/><summary>Returns canonical form of locale, as used by Dojo. All variants are case-insensitive and are separated by '-' as specified in RFC 3066. If no locale is specified, the user agent's default is returned.</summary><parameters><parameter name="locale" optional="true" type="String"/></parameters></function><function name="dojo.hostenv.searchLocalePath"><summary>A helper method to assist in searching for locale-based resources. Will iterate through the variants of a particular locale, either up or down, executing a callback function. For example, "en-us" and true will try "en-us" followed by "en" and finally "ROOT".</summary><parameters><parameter name="locale" type="String"/><parameter name="down" type="Boolean"/><parameter name="searchFunc" type="Function"/></parameters></function><function name="dojo.hostenv.registerNlsPrefix"><summary>Register module "nls" to point where Dojo can find pre-built localization files</summary></function><function name="dojo.hostenv.preloadLocalizations"><returns type="Boolean"/><summary>Load built, flattened resource bundles, if available for all locales used in the page. Execute only once. Note that this is a no-op unless there is a build.</summary></function><function name="dojo.requireLocalization"><parameters><parameter name="m"/><parameter name="b"/><parameter name="locale"/><parameter name="availableFlatLocales"/></parameters></function><object name="dojo.version"><summary>version number of this instance of dojo.</summary><variables><variable name="major"/><variable name="minor"/><variable name="patch"/><variable name="flag"/><variable name="revision"/></variables></object></resource><resource location="dojo.browser_debug"><function name="removeComments"><parameters><parameter name="contents"/></parameters></function><function name="dojo.hostenv.getRequiresAndProvides"><parameters><parameter name="contents"/></parameters></function><function name="dojo.hostenv.getDelayRequiresAndProvides"><parameters><parameter name="contents"/></parameters></function><function name="dojo.clobberLastObject"><parameters><parameter name="objpath"/></parameters></function><function name="zip"><parameters><parameter name="arr"/></parameters></function><function name="dj_eval"/><function name="dojo.hostenv.loadUri"><returns type="fixes endless recursion opera trac 471"/><parameters><parameter name="uri"/><parameter name="cb" type="optional"/></parameters></function><function name="dojo.hostenv.writeIncludes"><parameters><parameter name="willCallAgain"/></parameters></function></resource><resource location="dojo.cal.iCalendar"><requires><environment type="common"><require>dojo.lang.common</require><require>dojo.cal.textDirectory</require><require>dojo.date.common</require><require>dojo.date.serialize</require></environment></requires><function name="dojo.cal.iCalendar.fromText"><summary>Parse text of an iCalendar and return an array of iCalendar objects</summary><parameters><parameter name="text" type="string"/></parameters></function><function name="dojo.cal.iCalendar.Component"><summary>A component is the basic container of all this stuff.</summary><parameters><parameter name="body" type="string"/></parameters><variables><variable scope="instance" name="name"/><variable scope="instance" name="properties"/><variable scope="instance" name="components"/></variables></function><function name="dojo.cal.iCalendar.Property"><summary>A single property of a component.</summary><parameters><parameter name="prop"/></parameters><variables><variable scope="instance" name="name"/><variable scope="instance" name="group"/><variable scope="instance" name="params"/><variable scope="instance" name="value"/></variables></function><function name="_P"><parameters><parameter name="n"/><parameter name="oc"/><parameter name="req"/></parameters></function><function name="dojo.cal.iCalendar.VCalendar"><summary>VCALENDAR Component</summary><parameters><parameter name="calbody" type="string"/></parameters><chains><chain type="call">dojo.cal.iCalendar.Component</chain><chain type="prototype">dojo.cal.iCalendar.Component</chain></chains><variables><variable scope="instance" name="name"/><variable scope="instance" name="recurring"/><variable scope="instance" name="nonRecurringEvents"/></variables></function><function name="dojo.cal.iCalendar.VCalendar.nonRecurringEvents" instance="dojo.cal.iCalendar.VCalendar"/><function name="dojo.cal.iCalendar.Standard"><summary>STANDARD Component</summary><parameters><parameter name="body" type="string"/></parameters><chains><chain type="call">dojo.cal.iCalendar.Component</chain><chain type="prototype">dojo.cal.iCalendar.Component</chain></chains><variables><variable scope="instance" name="name"/><variable scope="instance" name="_ValidProperties"/></variables></function><function name="dojo.cal.iCalendar.Daylight"><summary>Daylight Component</summary><parameters><parameter name="body" type="string"/></parameters><chains><chain type="call">dojo.cal.iCalendar.Component</chain><chain type="prototype">dojo.cal.iCalendar.Component</chain></chains><variables><variable scope="instance" name="name"/><variable scope="instance" name="_ValidProperties"/></variables></function><function name="dojo.cal.iCalendar.VEvent"><summary>VEVENT Component</summary><parameters><parameter name="body" type="string"/></parameters><chains><chain type="call">dojo.cal.iCalendar.Component</chain><chain type="prototype">dojo.cal.iCalendar.Component</chain></chains><variables><variable scope="instance" name="_ValidProperties"/><variable scope="instance" name="name"/><variable scope="instance" name="recurring"/><variable scope="instance" name="startDate"/></variables></function><function name="dojo.cal.iCalendar.VTimeZone"><summary>VTIMEZONE Component</summary><parameters><parameter name="body" type="string"/></parameters><chains><chain type="call">dojo.cal.iCalendar.Component</chain><chain type="prototype">dojo.cal.iCalendar.Component</chain></chains><variables><variable scope="instance" name="name"/><variable scope="instance" name="_ValidProperties"/></variables></function><function name="dojo.cal.iCalendar.VTodo"><summary>VTODO Componenet</summary><parameters><parameter name="body" type="string"/></parameters><chains><chain type="call">dojo.cal.iCalendar.Component</chain><chain type="prototype">dojo.cal.iCalendar.Component</chain></chains><variables><variable scope="instance" name="name"/><variable scope="instance" name="_ValidProperties"/></variables></function><function name="dojo.cal.iCalendar.VJournal"><summary>VJOURNAL Component</summary><parameters><parameter name="body" type="string"/></parameters><chains><chain type="call">dojo.cal.iCalendar.Component</chain><chain type="prototype">dojo.cal.iCalendar.Component</chain></chains><variables><variable scope="instance" name="name"/><variable scope="instance" name="_ValidProperties"/></variables></function><function name="dojo.cal.iCalendar.VFreeBusy"><summary>VFREEBUSY Component</summary><parameters><parameter name="body" type="string"/></parameters><chains><chain type="call">dojo.cal.iCalendar.Component</chain><chain type="prototype">dojo.cal.iCalendar.Component</chain></chains><variables><variable scope="instance" name="name"/><variable scope="instance" name="_ValidProperties"/></variables></function><function name="dojo.cal.iCalendar.VAlarm"><summary>VALARM Component</summary><parameters><parameter name="body" type="string"/></parameters><chains><chain type="call">dojo.cal.iCalendar.Component</chain><chain type="prototype">dojo.cal.iCalendar.Component</chain></chains><variables><variable scope="instance" name="name"/><variable scope="instance" name="_ValidProperties"/></variables></function><function name="dojo.cal.iCalendar.Component.addProperty"><summary>push a new property onto a component.</summary><parameters><parameter name="prop"/></parameters></function><function name="dojo.cal.iCalendar.Component.addComponent"><summary>add a component to this components list of children.</summary><parameters><parameter name="prop"/></parameters></function><function name="dojo.cal.iCalendar.Component.postCreate"><variables><variable scope="instance" name="recurring"/></variables></function><function name="dojo.cal.iCalendar.Component.toString"><summary>output a string representation of this component.</summary></function><function name="dojo.cal.iCalendar.Property.toString"><summary>output a string reprensentation of this component.</summary></function><function name="dojo.cal.iCalendar.VCalendar.addComponent"><summary>add component to the calenadar that makes it easy to pull them out again later.</summary><parameters><parameter name="prop"/></parameters></function><function name="dojo.cal.iCalendar.VCalendar.preComputeRecurringEvents"><parameters><parameter name="until"/></parameters><variables><variable scope="instance" name="recurringEvents"/></variables></function><function name="dojo.cal.iCalendar.VCalendar.getEvents"><summary>Gets all events occuring on a particular date</summary><parameters><parameter name="date" type="Date"/></parameters></function><function name="dojo.cal.iCalendar.VEvent.getDates"><parameters><parameter name="until"/></parameters></function><function name="dojo.cal.iCalendar.VEvent.getDate"/></resource><resource location="dojo.cal.textDirectory"><requires><environment type="common"><require>dojo.string</require></environment></requires><function name="dojo.cal.textDirectory.Property"><summary>parses a single line from an iCalendar text/directory file and creates an object with four named values; name, group, params and value. name, group and value are strings containing the original tokens unaltered and values is an array containing name/value pairs or a single name token packed into arrays.</summary><parameters><parameter name="line" type="String"/></parameters><variables><variable scope="instance" name="name"/><variable scope="instance" name="params"/><variable scope="instance" name="group"/><variable scope="instance" name="value"/></variables></function><function name="dojo.cal.textDirectory.tokenise"><returns type="Array"/><summary>parses text into an array of properties.</summary><parameters><parameter name="text" type="String"/></parameters></function></resource><resource location="dojo.charting.Axis"><requires><environment type="common"><require>dojo.lang.common</require></environment></requires><function name="dojo.charting.Axis"><parameters><parameter name="label" optional="true" type="string"/><parameter name="scale" optional="true" type="string"/><parameter name="labels" optional="true" type="array"/></parameters><variables><variable scope="instance" name="scale"/><variable scope="instance" name="label"/><variable scope="instance" name="showLabel"/><variable scope="instance" name="showLabels"/><variable scope="instance" name="showLines"/><variable scope="instance" name="showTicks"/><variable scope="instance" name="range"/><variable scope="instance" name="origin"/><variable scope="instance" name="labels"/><variable scope="instance" name="_labels"/><variable scope="instance" name="nodes"/></variables></function><function name="dojo.charting.Axis.getId" instance="dojo.charting.Axis"/><function name="dojo.charting.Axis.setId" instance="dojo.charting.Axis"><parameters><parameter name="key"/></parameters></function><function name="dojo.charting.Axis.getCoord"><returns type="float">the coordinate of val based on this axis range, plot area and plot.</returns><parameters><parameter name="val" type="float"/><parameter name="plotArea" type="dojo.charting.PlotArea"/><parameter name="plot" type="dojo.charting.Plot"/></parameters></function><function name="dojo.charting.Axis.initializeOrigin"><parameters><parameter name="drawAgainst"/><parameter name="plane"/></parameters><variables><variable scope="instance" name="origin"/></variables></function><function name="dojo.charting.Axis.initializeLabels"><variables><variable scope="instance" name="labels.length"/><variable scope="instance" name="showLabels"/><variable scope="instance" name="showLines"/><variable scope="instance" name="showTicks"/></variables></function><function name="dojo.charting.Axis.initialize"><summary>Initialize the passed axis descriptor. Note that this should always be the result of plotArea.getAxes, and not the axis directly!</summary><parameters><parameter name="plotArea"/><parameter name="plot"/><parameter name="drawAgainst"/><parameter name="plane"/></parameters></function><function name="dojo.charting.Axis.destroy"/></resource><resource location="dojo.charting.Chart"><requires><environment type="common"><require>dojo.lang.common</require><require>dojo.charting.PlotArea</require></environment></requires><function name="dojo.charting.Chart"><summary>Create the basic Chart object.</summary><parameters><parameter name="node" optional="true" type="HTMLElement"/><parameter name="title" optional="true" type="string"/><parameter name="description" optional="true" type="string"/></parameters><variables><variable scope="instance" name="node"/><variable scope="instance" name="title"/><variable scope="instance" name="description"/><variable scope="instance" name="plotAreas"/><variable scope="prototype" name="onInitialize"/><variable scope="prototype" name="onRender"/><variable scope="prototype" name="onDestroy"/><variable scope="prototype" name="render"/></variables></function><function name="dojo.charting.Chart.addPlotArea"><summary>Add a PlotArea to this chart; object should be in the form of: { plotArea, (x, y) or (top, left) }</summary><parameters><parameter name="obj" type="object"/><parameter name="doRender" optional="true" type="bool"/></parameters></function><function name="dojo.charting.Chart.initialize"><summary>Initialize the Chart by rendering it.</summary></function><function name="dojo.charting.Chart.destroy"><summary>Destroy any nodes that have maintained references. kill any existing plotAreas</summary></function></resource><resource location="dojo.charting.Plot"><requires><environment type="common"><require>dojo.lang.common</require><require>dojo.charting.Axis</require><require>dojo.charting.Series</require></environment></requires><function name="dojo.charting.Plot"><summary>Creates a new instance of a Plot (X/Y Axis + n Series).</summary><parameters><parameter name="xaxis" optional="true" type="dojo.charting.Axis"/><parameter name="yaxis" optional="true" type="dojo.charting.Axis"/><parameter name="series" optional="true" type="dojo.charting.Series[]"/></parameters><variables><variable scope="instance" name="axisX"/><variable scope="instance" name="axisY"/><variable scope="instance" name="series"/><variable scope="instance" name="dataNode"/><variable scope="instance" name="renderType"/></variables></function><function name="dojo.charting.Plot.getId" instance="dojo.charting.Plot"/><function name="dojo.charting.Plot.setId" instance="dojo.charting.Plot"><parameters><parameter name="key"/></parameters></function><function name="dojo.charting.Plot.addSeries"><summary>Add a new Series to this plot. Can take the form of a Series, or an object of the form { series, plotter }</summary><parameters><parameter name="series" type="dojo.charting.Series || object"/><parameter name="plotter" optional="true" type="function"/></parameters></function><function name="dojo.charting.Plot.setAxis"><summary>Set the axis on which plane.</summary><parameters><parameter name="axis" type="dojo.charting.Axis"/><parameter name="which" type="string"/></parameters><variables><variable scope="instance" name="axisX"/><variable scope="instance" name="axisY"/></variables></function><function name="dojo.charting.Plot.getRanges"><summary>set the ranges on these axes.</summary></function><function name="dojo.charting.Plot.destroy"><summary>Clean out any existing DOM node references.</summary><variables><variable scope="instance" name="dataNode"/></variables></function><object name="dojo.charting.RenderPlotSeries"><variables><variable name="Singly"/><variable name="Grouped"/></variables></object></resource><resource location="dojo.charting.PlotArea"><requires><environment type="common"><require>dojo.lang.common</require><require>dojo.gfx.color</require><require>dojo.gfx.color.hsl</require><require>dojo.charting.Plot</require></environment></requires><function name="dojo.charting.PlotArea"><summary>Creates a new PlotArea for drawing onto a Chart.</summary><variables><variable scope="instance" name="areaType"/><variable scope="instance" name="plots"/><variable scope="instance" name="size"/><variable scope="instance" name="padding"/><variable scope="instance" name="nodes"/><variable scope="instance" name="_color"/><variable scope="prototype" name="getArea"/></variables></function><function name="dojo.charting.PlotArea.getId" instance="dojo.charting.PlotArea"/><function name="dojo.charting.PlotArea.setId" instance="dojo.charting.PlotArea"><parameters><parameter name="key"/></parameters></function><function name="dojo.charting.PlotArea.nextColor"><returns type="string"/><summary>Advances the internal HSV cursor and returns the next generated color.</summary><variables><variable scope="instance" name="_color.h"/></variables></function><function name="dojo.charting.PlotArea.getAxes"><returns type="object"/><summary>get the unique axes for this plot area.</summary></function><function name="dojo.charting.PlotArea.getLegendInfo"><returns type="array"/><summary>return an array describing all data series on this plot area.</summary></function><function name="dojo.charting.PlotArea.setAxesRanges"><summary>Find and set the ranges on all axes on this plotArea. We do this because plots may have axes in common; if you want to use this, make sure you do it *before* initialization.</summary></function><function name="dojo.charting.PlotArea.render"><summary>Render this plotArea. Optional kwArgs are the same as that taken for Series.evaluate;</summary><parameters><parameter name="kwArgs" optional="true" type="object"/><parameter name="applyToData" type="is">a callback function used by plotters for customization.</parameter></parameters></function><function name="dojo.charting.PlotArea.destroy"><summary>Clean out any existing DOM references.</summary></function></resource><resource location="dojo.charting.Series"><requires><environment type="common"><require>dojo.lang.common</require><require>dojo.charting.Plotters</require></environment></requires><function name="dojo.charting.Series"><summary>Create an instance of data series for plotting.</summary><parameters><parameter name="kwArgs" optional="true" type="object"/></parameters><variables><variable scope="instance" name="dataSource"/><variable scope="instance" name="bindings"/><variable scope="instance" name="color"/><variable scope="instance" name="label"/><variable scope="prototype" name="bind"/><variable scope="prototype" name="addBinding"/><variable scope="prototype" name="evaluate"/><variable scope="prototype" name="trends"/></variables></function><function name="dojo.charting.Series.mean"><returns type="float"/><summary>Returns the mean or average over the set of values.</summary><parameters><parameter name="values" type="array"/><parameter name="len" type="int"/></parameters></function><function name="dojo.charting.Series.variance"><returns type="float"/><summary>Returns the variance of the set of values.</summary><parameters><parameter name="values" type="array"/><parameter name="len" type="int"/></parameters></function><function name="dojo.charting.Series.standardDeviation"><returns type="float"/><summary>Returns the standard deviation of the set of values.</summary><parameters><parameter name="values" type="array"/><parameter name="len" type="int"/></parameters></function><function name="dojo.charting.Series.max"><returns type="float"/><summary>Returns the max number in the set of values.</summary><parameters><parameter name="values" type="array"/><parameter name="len" type="int"/></parameters></function><function name="dojo.charting.Series.min"><returns type="float"/><summary>Returns the lowest number in the set of values.</summary><parameters><parameter name="values" type="array"/><parameter name="len" type="int"/></parameters></function><function name="dojo.charting.Series.median"><returns type="float"/><summary>Returns the median in the set of values (number closest to the middle of a sorted set).</summary><parameters><parameter name="values" type="array"/><parameter name="len" type="int"/></parameters></function><function name="dojo.charting.Series.mode"><summary>Returns the mode in the set of values</summary><parameters><parameter name="values" type="array"/><parameter name="len" type="int"/></parameters></function></resource><resource location="dojo.charting.svg.Axis"><requires><environment type="common"><require>dojo.lang.common</require></environment></requires><function name="dojo.charting.Axis.renderLines"><returns type="SVGGElement"/><summary>Renders any reference lines for this axis.</summary><parameters><parameter name="plotArea" type="dojo.charting.PlotArea"/><parameter name="plot" type="dojo.charting.Plot"/><parameter name="plane" type="string"/></parameters><variables><variable scope="instance" name="nodes.lines"/></variables></function><function name="dojo.charting.Axis.renderTicks"><returns type="SVGGElement"/><summary>Renders any tick lines for this axis.</summary><parameters><parameter name="plotArea" type="dojo.charting.PlotArea"/><parameter name="plot" type="dojo.charting.Plot"/><parameter name="plane" type="string"/><parameter name="coord" type="float"/></parameters><variables><variable scope="instance" name="nodes.ticks"/></variables></function><function name="dojo.charting.Axis.renderLabels"><returns type="SVGGelement"/><summary>Render all labels for this axis.</summary><parameters><parameter name="plotArea" type="dojo.charting.PlotArea"/><parameter name="plot" type="dojo.charting.Plot"/><parameter name="plane" type="string"/><parameter name="coord" type="float"/><parameter name="textSize" type="int"/><parameter name="anchor" type="string"/></parameters><variables><variable scope="instance" name="nodes.labels"/></variables></function><function name="dojo.charting.Axis.render"><returns type="SVGGElement"/><summary>Renders this axis to the given plot. get the origin plot point.</summary><parameters><parameter name="plotArea" type="dojo.charting.PlotArea"/><parameter name="plot" type="dojo.charting.Plot"/><parameter name="drawAgainst" type="dojo.charting.Axis"/><parameter name="plane" type="string"/></parameters><variables><variable scope="instance" name="nodes.main"/><variable scope="instance" name="nodes.axis"/><variable scope="instance" name="origin"/></variables></function></resource><resource location="dojo.charting.svg.PlotArea"><requires><environment type="common"><require>dojo.lang.common</require><require>dojo.svg</require></environment></requires><function name="dojo.charting.PlotArea.initializePlot"><returns type="SVGGElement"/><summary>Initialize the plot node for data rendering.</summary><parameters><parameter name="plot"/></parameters></function><function name="dojo.charting.PlotArea.initialize"><returns type="HTMLDivElement"/><summary>Initialize the PlotArea.</summary><variables><variable scope="instance" name="nodes.main"/><variable scope="instance" name="nodes.area"/><variable scope="instance" name="nodes.background"/><variable scope="instance" name="nodes.plots"/><variable scope="instance" name="nodes.axes"/></variables></function></resource><resource location="dojo.charting.svg.Plotters"><requires><environment type="common"><require>dojo.lang.common</require><require>dojo.svg</require></environment></requires><function name="dojo.charting.Plotters.Bar"><returns type="SVGGElement"/><summary>Plots a set of grouped bars. Bindings: y</summary><parameters><parameter name="plotarea" type="dojo.charting.PlotArea"/><parameter name="plot" type="dojo.charting.Plot"/><parameter name="kwArgs" optional="true" type="object"/><parameter name="applyTo" optional="true" type="function"/></parameters></function><function name="dojo.charting.Plotters.HorizontalBar"><returns type="SVGGElement"/><summary>Plots data in a set of grouped bars horizontally. Bindings: y</summary><parameters><parameter name="plotarea" type="dojo.charting.PlotArea"/><parameter name="plot" type="dojo.charting.Plot"/><parameter name="kwArgs" optional="true" type="object"/><parameter name="applyTo" optional="true" type="function"/></parameters></function><function name="dojo.charting.Plotters.Gantt"><returns type="SVGGElement"/><summary>Plots a grouped set of Gantt bars Bindings: high/low</summary><parameters><parameter name="plotarea" type="dojo.charting.PlotArea"/><parameter name="plot" type="dojo.charting.Plot"/><parameter name="kwArgs" optional="true" type="object"/><parameter name="applyTo" optional="true" type="function"/></parameters></function><function name="dojo.charting.Plotters.StackedArea"><returns type="SVGGElement"/><summary>Plots a set of stacked areas. Bindings: x/y</summary><parameters><parameter name="plotarea" type="dojo.charting.PlotArea"/><parameter name="plot" type="dojo.charting.Plot"/><parameter name="kwArgs" optional="true" type="object"/><parameter name="applyTo" optional="true" type="function"/></parameters></function><function name="dojo.charting.Plotters.StackedCurvedArea"><returns type="SVGGElement"/><summary>Plots a set of stacked areas, using a tensioning factor to soften points. Bindings: x/y</summary><parameters><parameter name="plotarea" type="dojo.charting.PlotArea"/><parameter name="plot" type="dojo.charting.Plot"/><parameter name="kwArgs" optional="true" type="object"/><parameter name="applyTo" optional="true" type="function"/></parameters></function><function name="dojo.charting.Plotters.DataBar"><returns type="SVGGElement"/><summary>Plots a set of bars in relation to y==0. Bindings: x/y</summary><parameters><parameter name="data" type="array"/><parameter name="plotarea" type="dojo.charting.PlotArea"/><parameter name="plot" type="dojo.charting.Plot"/><parameter name="applyTo" optional="true" type="function"/></parameters></function><function name="dojo.charting.Plotters.Line"><returns type="SVGGElement"/><summary>Plots the series as a line. Bindings: x/y</summary><parameters><parameter name="data" type="array"/><parameter name="plotarea" type="dojo.charting.PlotArea"/><parameter name="plot" type="dojo.charting.Plot"/><parameter name="applyTo" optional="true" type="function"/></parameters></function><function name="dojo.charting.Plotters.CurvedLine"><returns type="SVGGElement"/><summary>Plots the series as a line with a tension factor for softening. Bindings: x/y</summary><parameters><parameter name="data" type="array"/><parameter name="plotarea" type="dojo.charting.PlotArea"/><parameter name="plot" type="dojo.charting.Plot"/><parameter name="applyTo" optional="true" type="function"/></parameters></function><function name="dojo.charting.Plotters.Area"><returns type="SVGGElement"/><summary>Plots the series as an area. Bindings: x/y</summary><parameters><parameter name="data" type="array"/><parameter name="plotarea" type="dojo.charting.PlotArea"/><parameter name="plot" type="dojo.charting.Plot"/><parameter name="applyTo" optional="true" type="function"/></parameters></function><function name="dojo.charting.Plotters.CurvedArea"><returns type="SVGGElement"/><summary>Plots the series as an area with a tension for softening. Bindings: x/y</summary><parameters><parameter name="data" type="array"/><parameter name="plotarea" type="dojo.charting.PlotArea"/><parameter name="plot" type="dojo.charting.Plot"/><parameter name="applyTo" optional="true" type="function"/></parameters></function><function name="dojo.charting.Plotters.HighLow"><returns type="SVGGElement"/><summary>Plots the series as a set of high/low bars. Bindings: x/high/low</summary><parameters><parameter name="data" type="array"/><parameter name="plotarea" type="dojo.charting.PlotArea"/><parameter name="plot" type="dojo.charting.Plot"/><parameter name="applyTo" optional="true" type="function"/></parameters></function><function name="dojo.charting.Plotters.HighLowClose"><returns type="SVGGElement"/><summary>Plots the series as a set of high/low bars with a close indicator. Bindings: x/high/low/close</summary><parameters><parameter name="data" type="array"/><parameter name="plotarea" type="dojo.charting.PlotArea"/><parameter name="plot" type="dojo.charting.Plot"/><parameter name="applyTo" optional="true" type="function"/></parameters></function><function name="dojo.charting.Plotters.HighLowOpenClose"><returns type="SVGGElement"/><summary>Plots the series as a set of high/low bars with open and close indicators. Bindings: x/high/low/open/close</summary><parameters><parameter name="data" type="array"/><parameter name="plotarea" type="dojo.charting.PlotArea"/><parameter name="plot" type="dojo.charting.Plot"/><parameter name="applyTo" optional="true" type="function"/></parameters></function><function name="dojo.charting.Plotters.Scatter"><returns type="SVGGElement"/><summary>Plots the series as a set of points. Bindings: x/y</summary><parameters><parameter name="data" type="array"/><parameter name="plotarea" type="dojo.charting.PlotArea"/><parameter name="plot" type="dojo.charting.Plot"/><parameter name="applyTo" optional="true" type="function"/></parameters></function><function name="dojo.charting.Plotters.Bubble"><returns type="SVGGElement"/><summary>Plots the series as a set of points with a size factor. Bindings: x/y/size</summary><parameters><parameter name="data" type="array"/><parameter name="plotarea" type="dojo.charting.PlotArea"/><parameter name="plot" type="dojo.charting.Plot"/><parameter name="applyTo" optional="true" type="function"/></parameters></function></resource><resource location="dojo.charting.vml.Axis"><requires><environment type="common"><require>dojo.lang.common</require></environment></requires><function name="dojo.charting.Axis.renderLines"><returns type="HTMLDivElement"/><summary>Renders any reference lines for this axis.</summary><parameters><parameter name="plotArea" type="dojo.charting.PlotArea"/><parameter name="plot" type="dojo.charting.Plot"/><parameter name="plane" type="string"/></parameters><variables><variable scope="instance" name="nodes.lines"/></variables></function><function name="dojo.charting.Axis.renderTicks"><returns type="HTMLDivElement"/><summary>Renders any tick lines for this axis.</summary><parameters><parameter name="plotArea" type="dojo.charting.PlotArea"/><parameter name="plot" type="dojo.charting.Plot"/><parameter name="plane" type="string"/><parameter name="coord" type="float"/></parameters><variables><variable scope="instance" name="nodes.ticks"/></variables></function><function name="dojo.charting.Axis.renderLabels"><returns type="HTMLDivElement"/><summary>Render all labels for this axis.</summary><parameters><parameter name="plotArea" type="dojo.charting.PlotArea"/><parameter name="plot" type="dojo.charting.Plot"/><parameter name="plane" type="string"/><parameter name="coord" type="float"/><parameter name="textSize" type="int"/><parameter name="anchor" type="string"/></parameters><variables><variable scope="instance" name="nodes.labels"/></variables></function><function name="dojo.charting.Axis.render"><returns type="HTMLDivElement"/><summary>Renders this axis to the given plot. get the origin plot point.</summary><parameters><parameter name="plotArea" type="dojo.charting.PlotArea"/><parameter name="plot" type="dojo.charting.Plot"/><parameter name="drawAgainst" type="dojo.charting.Axis"/><parameter name="plane" type="string"/></parameters><variables><variable scope="instance" name="nodes.main"/><variable scope="instance" name="nodes.axis"/><variable scope="instance" name="origin"/></variables></function></resource><resource location="dojo.charting.vml.PlotArea"><requires><environment type="common"><require>dojo.lang.common</require></environment></requires><function name="dojo.charting.PlotArea.initializePlot"><returns type="HTMLDivElement"/><summary>Initialize the plot node for data rendering.</summary><parameters><parameter name="plot"/></parameters></function><function name="dojo.charting.PlotArea"><variables><variable scope="prototype" name="initialize"/></variables></function></resource><resource location="dojo.charting.vml.Plotters"><requires><environment type="common"><require>dojo.lang.common</require></environment></requires><function name="dojo.charting.Plotters._group"><parameters><parameter name="plotarea"/></parameters></function><function name="dojo.charting.Plotters.Bar"><returns type="HTMLDivElement"/><summary>Plots a set of grouped bars. Bindings: y</summary><parameters><parameter name="plotarea" type="dojo.charting.PlotArea"/><parameter name="plot" type="dojo.charting.Plot"/><parameter name="kwArgs" optional="true" type="object"/><parameter name="applyTo" optional="true" type="function"/></parameters></function><function name="dojo.charting.Plotters.HorizontalBar"><returns type="HTMLDivElement"/><summary>Plots data in a set of grouped bars horizontally. Bindings: y</summary><parameters><parameter name="plotarea" type="dojo.charting.PlotArea"/><parameter name="plot" type="dojo.charting.Plot"/><parameter name="kwArgs" optional="true" type="object"/><parameter name="applyTo" optional="true" type="function"/></parameters></function><function name="dojo.charting.Plotters.Gantt"><returns type="HTMLDivElement"/><summary>Plots a grouped set of Gantt bars Bindings: high/low</summary><parameters><parameter name="plotarea" type="dojo.charting.PlotArea"/><parameter name="plot" type="dojo.charting.Plot"/><parameter name="kwArgs" optional="true" type="object"/><parameter name="applyTo" optional="true" type="function"/></parameters></function><function name="dojo.charting.Plotters.StackedArea"><returns type="HTMLDivElement"/><summary>Plots a set of stacked areas. Bindings: x/y</summary><parameters><parameter name="plotarea" type="dojo.charting.PlotArea"/><parameter name="plot" type="dojo.charting.Plot"/><parameter name="kwArgs" optional="true" type="object"/><parameter name="applyTo" optional="true" type="function"/></parameters></function><function name="dojo.charting.Plotters.StackedCurvedArea"><returns type="HTMLDivElement"/><summary>Plots a set of stacked areas, using a tensioning factor to soften points. Bindings: x/y</summary><parameters><parameter name="plotarea" type="dojo.charting.PlotArea"/><parameter name="plot" type="dojo.charting.Plot"/><parameter name="kwArgs" optional="true" type="object"/><parameter name="applyTo" optional="true" type="function"/></parameters></function><function name="dojo.charting.Plotters.DataBar"><returns type="HTMLDivElement"/><summary>Plots a set of bars in relation to y==0. Bindings: x/y</summary><parameters><parameter name="data" type="array"/><parameter name="plotarea" type="dojo.charting.PlotArea"/><parameter name="plot" type="dojo.charting.Plot"/><parameter name="applyTo" optional="true" type="function"/></parameters></function><function name="dojo.charting.Plotters.Line"><returns type="HTMLDivElement"/><summary>Plots the series as a line. Bindings: x/y</summary><parameters><parameter name="data" type="array"/><parameter name="plotarea" type="dojo.charting.PlotArea"/><parameter name="plot" type="dojo.charting.Plot"/><parameter name="applyTo" optional="true" type="function"/></parameters></function><function name="dojo.charting.Plotters.CurvedLine"><returns type="HTMLDivElement"/><summary>Plots the series as a line with a tension factor for softening. Bindings: x/y</summary><parameters><parameter name="data" type="array"/><parameter name="plotarea" type="dojo.charting.PlotArea"/><parameter name="plot" type="dojo.charting.Plot"/><parameter name="applyTo" optional="true" type="function"/></parameters></function><function name="dojo.charting.Plotters.Area"><returns type="HTMLDivElement"/><summary>Plots the series as an area. Bindings: x/y</summary><parameters><parameter name="data" type="array"/><parameter name="plotarea" type="dojo.charting.PlotArea"/><parameter name="plot" type="dojo.charting.Plot"/><parameter name="applyTo" optional="true" type="function"/></parameters></function><function name="dojo.charting.Plotters.CurvedArea"><returns type="HTMLDivElement"/><summary>Plots the series as an area with a tension for softening. Bindings: x/y</summary><parameters><parameter name="data" type="array"/><parameter name="plotarea" type="dojo.charting.PlotArea"/><parameter name="plot" type="dojo.charting.Plot"/><parameter name="applyTo" optional="true" type="function"/></parameters></function><function name="dojo.charting.Plotters.HighLow"><returns type="HTMLDivElement"/><summary>Plots the series as a set of high/low bars. Bindings: x/high/low</summary><parameters><parameter name="data" type="array"/><parameter name="plotarea" type="dojo.charting.PlotArea"/><parameter name="plot" type="dojo.charting.Plot"/><parameter name="applyTo" optional="true" type="function"/></parameters></function><function name="dojo.charting.Plotters.HighLowClose"><returns type="HTMLDivElement"/><summary>Plots the series as a set of high/low bars with a close indicator. Bindings: x/high/low/close</summary><parameters><parameter name="data" type="array"/><parameter name="plotarea" type="dojo.charting.PlotArea"/><parameter name="plot" type="dojo.charting.Plot"/><parameter name="applyTo" optional="true" type="function"/></parameters></function><function name="dojo.charting.Plotters.HighLowOpenClose"><returns type="HTMLDivElement"/><summary>Plots the series as a set of high/low bars with open and close indicators. Bindings: x/high/low/open/close</summary><parameters><parameter name="data" type="array"/><parameter name="plotarea" type="dojo.charting.PlotArea"/><parameter name="plot" type="dojo.charting.Plot"/><parameter name="applyTo" optional="true" type="function"/></parameters></function><function name="dojo.charting.Plotters.Scatter"><returns type="HTMLDivElement"/><summary>Plots the series as a set of points. Bindings: x/y</summary><parameters><parameter name="data" type="array"/><parameter name="plotarea" type="dojo.charting.PlotArea"/><parameter name="plot" type="dojo.charting.Plot"/><parameter name="applyTo" optional="true" type="function"/></parameters></function><function name="dojo.charting.Plotters.Bubble"><returns type="HTMLDivElement"/><summary>Plots the series as a set of points with a size factor. Bindings: x/y/size</summary><parameters><parameter name="data" type="array"/><parameter name="plotarea" type="dojo.charting.PlotArea"/><parameter name="plot" type="dojo.charting.Plot"/><parameter name="applyTo" optional="true" type="function"/></parameters></function></resource><resource location="dojo.collections.ArrayList"><requires><environment type="common"><require>dojo.collections.Collections</require></environment></requires><function name="dojo.collections.ArrayList"><returns type="mixed"/><summary>Returns a new object of type dojo.collections.ArrayList</summary><parameters><parameter name="arr" optional="true" type="array"/></parameters><chains><chain type="call">fn</chain></chains><variables><variable scope="instance" name="count"/></variables></function><function name="dojo.collections.ArrayList.add" instance="dojo.collections.ArrayList"><summary>Add an element to the collection.</summary><parameters><parameter name="obj" type="object"/></parameters></function><function name="dojo.collections.ArrayList.addRange" instance="dojo.collections.ArrayList"><summary>Add a range of objects to the ArrayList</summary><parameters><parameter name="a" type="array"/></parameters></function><function name="dojo.collections.ArrayList.clear" instance="dojo.collections.ArrayList"><summary>Clear all elements out of the collection, and reset the count.</summary></function><function name="dojo.collections.ArrayList.clone" instance="dojo.collections.ArrayList"><returns type="dojo.collections.ArrayList"/><summary>Clone the array list</summary></function><function name="dojo.collections.ArrayList.contains" instance="dojo.collections.ArrayList"><returns type="bool"/><summary>Check to see if the passed object is a member in the ArrayList</summary><parameters><parameter name="obj" type="object"/></parameters></function><function name="dojo.collections.ArrayList.forEach" instance="dojo.collections.ArrayList"><summary>functional iterator, following the mozilla spec.</summary><parameters><parameter name="fn" type="function"/><parameter name="scope" optional="true" type="object"/></parameters><chains><chain type="call">fn</chain></chains></function><function name="dojo.collections.ArrayList.getIterator" instance="dojo.collections.ArrayList"><returns type="dojo.collections.Iterator"/><summary>Get an Iterator for this object</summary></function><function name="dojo.collections.ArrayList.indexOf" instance="dojo.collections.ArrayList"><returns type="int"/><summary>Return the numeric index of the passed object; will return -1 if not found.</summary><parameters><parameter name="obj" type="object"/></parameters></function><function name="dojo.collections.ArrayList.insert" instance="dojo.collections.ArrayList"><summary>Insert the passed object at index i</summary><parameters><parameter name="i" type="int"/><parameter name="obj" type="object"/></parameters></function><function name="dojo.collections.ArrayList.item" instance="dojo.collections.ArrayList"><returns type="object"/><summary>return the element at index i</summary><parameters><parameter name="i" type="int"/></parameters></function><function name="dojo.collections.ArrayList.remove" instance="dojo.collections.ArrayList"><summary>Look for the passed object, and if found, remove it from the internal array.</summary><parameters><parameter name="obj" type="object"/></parameters></function><function name="dojo.collections.ArrayList.removeAt" instance="dojo.collections.ArrayList"><summary>return an array with function applied to all elements</summary><parameters><parameter name="i" type="int"/></parameters></function><function name="dojo.collections.ArrayList.reverse" instance="dojo.collections.ArrayList"><summary>Reverse the internal array</summary></function><function name="dojo.collections.ArrayList.sort" instance="dojo.collections.ArrayList"><summary>sort the internal array</summary><parameters><parameter name="fn" optional="true" type="function"/></parameters></function><function name="dojo.collections.ArrayList.setByIndex" instance="dojo.collections.ArrayList"><summary>Set an element in the array by the passed index.</summary><parameters><parameter name="i" type="int"/><parameter name="obj" type="object"/></parameters></function><function name="dojo.collections.ArrayList.toArray" instance="dojo.collections.ArrayList"><summary>Return a new array with all of the items of the internal array concatenated.</summary></function><function name="dojo.collections.ArrayList.toString" instance="dojo.collections.ArrayList"><summary>implementation of toString, follows [].toString();</summary><parameters><parameter name="delim" type="string"/></parameters></function></resource><resource location="dojo.collections.BinaryTree"><requires><environment type="common"><require>dojo.collections.Collections</require><require>dojo.experimental</require></environment></requires><function name="dojo.collections.BinaryTree"><parameters><parameter name="data"/></parameters><variables><variable scope="instance" name="value"/><variable scope="instance" name="right"/><variable scope="instance" name="left"/><variable scope="instance" name="count"/><variable scope="instance" name="root"/></variables></function><function name="dojo.collections.BinaryTree.clone" instance="dojo.collections.BinaryTree"/><function name="dojo.collections.BinaryTree.compare" instance="dojo.collections.BinaryTree"><parameters><parameter name="n"/></parameters></function><function name="dojo.collections.BinaryTree.compareData" instance="dojo.collections.BinaryTree"><parameters><parameter name="d"/></parameters></function><function name="dojo.collections.BinaryTree.add" instance="dojo.collections.BinaryTree"><parameters><parameter name="data"/></parameters></function><function name="dojo.collections.BinaryTree.clear" instance="dojo.collections.BinaryTree"/><function name="dojo.collections.BinaryTree.contains" instance="dojo.collections.BinaryTree"><parameters><parameter name="data"/></parameters></function><function name="dojo.collections.BinaryTree.deleteData" instance="dojo.collections.BinaryTree"><parameters><parameter name="data"/></parameters></function><function name="dojo.collections.BinaryTree.getIterator" instance="dojo.collections.BinaryTree"/><function name="dojo.collections.BinaryTree.search" instance="dojo.collections.BinaryTree"><parameters><parameter name="data"/></parameters></function><function name="dojo.collections.BinaryTree.toString" instance="dojo.collections.BinaryTree"><parameters><parameter name="order"/><parameter name="sep"/></parameters></function></resource><resource location="dojo.collections.Collections"><function name="dojo.collections.DictionaryEntry"><returns type="mixed"/><summary>return an object of type dojo.collections.DictionaryEntry</summary><parameters><parameter name="k" type="string"/><parameter name="v" type="object"/></parameters><variables><variable scope="instance" name="key"/><variable scope="instance" name="value"/></variables></function><function name="dojo.collections.DictionaryEntry.valueOf" instance="dojo.collections.DictionaryEntry"><returns type="object"/></function><function name="dojo.collections.DictionaryEntry.toString" instance="dojo.collections.DictionaryEntry"><returns type="string"/></function><function name="dojo.collections.Iterator"><returns type="mixed"/><summary>return an object of type dojo.collections.Iterator</summary><parameters><parameter name="arr" type="array"/></parameters><chains><chain type="call">fn</chain></chains><variables><variable scope="instance" name="element"/></variables></function><function name="dojo.collections.Iterator.atEnd" instance="dojo.collections.Iterator"><returns type="bool"/><summary>Test to see if the internal cursor has reached the end of the internal collection.</summary></function><function name="dojo.collections.Iterator.get" instance="dojo.collections.Iterator"><returns type="object"/><summary>Test to see if the internal cursor has reached the end of the internal collection.</summary></function><function name="dojo.collections.Iterator.map" instance="dojo.collections.Iterator"><returns type="array"/><summary>Functional iteration with optional scope.</summary><parameters><parameter name="fn" type="function"/><parameter name="scope" optional="true" type="object"/></parameters><chains><chain type="call">fn</chain></chains></function><function name="dojo.collections.Iterator.reset" instance="dojo.collections.Iterator"><summary>reset the internal cursor.</summary></function><function name="dojo.collections.DictionaryIterator"><returns type="mixed"/><summary>return an object of type dojo.collections.DictionaryIterator</summary><parameters><parameter name="obj" type="object"/></parameters><chains><chain type="call">fn</chain></chains><variables><variable scope="instance" name="element"/></variables></function><function name="dojo.collections.DictionaryIterator.atEnd" instance="dojo.collections.DictionaryIterator"><returns type="bool"/><summary>Test to see if the internal cursor has reached the end of the internal collection.</summary></function><function name="dojo.collections.DictionaryIterator.get" instance="dojo.collections.DictionaryIterator"><returns type="object"/><summary>Test to see if the internal cursor has reached the end of the internal collection.</summary></function><function name="dojo.collections.DictionaryIterator.map" instance="dojo.collections.DictionaryIterator"><returns type="array"/><summary>Functional iteration with optional scope.</summary><parameters><parameter name="fn" type="function"/><parameter name="scope" optional="true" type="object"/></parameters><chains><chain type="call">fn</chain></chains></function><function name="dojo.collections.DictionaryIterator.reset" instance="dojo.collections.DictionaryIterator"><summary>reset the internal cursor.</summary></function></resource><resource location="dojo.collections.Dictionary"><requires><environment type="common"><require>dojo.collections.Collections</require></environment></requires><function name="dojo.collections.Dictionary"><returns type="mixed"/><summary>Returns an object of type dojo.collections.Dictionary</summary><parameters><parameter name="dictionary" optional="true" type="dojo.collections.Dictionary"/></parameters><chains><chain type="call">fn</chain></chains><variables><variable scope="instance" name="count"/><variable scope="instance" name="contains"/></variables></function><function name="dojo.collections.Dictionary.add" instance="dojo.collections.Dictionary"><summary>Add a new item to the Dictionary.</summary><parameters><parameter name="k" type="string"/><parameter name="v" type="object"/></parameters></function><function name="dojo.collections.Dictionary.clear" instance="dojo.collections.Dictionary"><summary>Clears the internal dictionary.</summary></function><function name="dojo.collections.Dictionary.clone" instance="dojo.collections.Dictionary"><returns type="dojo.collections.Dictionary"/><summary>Returns a new instance of dojo.collections.Dictionary; note the the dictionary is a clone but items might not be.</summary></function><function name="dojo.collections.Dictionary.contains" is="dojo.collections.Dictionary.containsKey"/><function name="dojo.collections.Dictionary.containsKey" instance="dojo.collections.Dictionary"><returns type="bool"/><summary>Check to see if the dictionary has an entry at key "k".</summary><parameters><parameter name="k" type="string"/></parameters></function><function name="dojo.collections.Dictionary.containsValue" instance="dojo.collections.Dictionary"><returns type="bool"/><summary>Check to see if the dictionary has an entry with value "v".</summary><parameters><parameter name="v" type="object"/></parameters></function><function name="dojo.collections.Dictionary.entry" instance="dojo.collections.Dictionary"><returns type="dojo.collections.DictionaryEntry"/><summary>Accessor method; similar to dojo.collections.Dictionary.item but returns the actual Entry object.</summary><parameters><parameter name="k" type="string"/></parameters></function><function name="dojo.collections.Dictionary.forEach" instance="dojo.collections.Dictionary"><summary>functional iterator, following the mozilla spec.</summary><parameters><parameter name="fn" type="function"/><parameter name="scope" optional="true" type="object"/></parameters><chains><chain type="call">fn</chain></chains></function><function name="dojo.collections.Dictionary.getKeyList" instance="dojo.collections.Dictionary"><summary>Returns an array of the keys in the dictionary.</summary></function><function name="dojo.collections.Dictionary.getValueList" instance="dojo.collections.Dictionary"><summary>Returns an array of the values in the dictionary.</summary></function><function name="dojo.collections.Dictionary.item" instance="dojo.collections.Dictionary"><returns type="object"/><summary>Accessor method.</summary><parameters><parameter name="k" type="string"/></parameters></function><function name="dojo.collections.Dictionary.getIterator" instance="dojo.collections.Dictionary"><returns type="dojo.collections.DictionaryIterator"/><summary>Gets a dojo.collections.DictionaryIterator for iteration purposes.</summary></function><function name="dojo.collections.Dictionary.remove" instance="dojo.collections.Dictionary"><returns type="bool"/><summary>Removes the item at k from the internal collection.</summary><parameters><parameter name="k" type="string"/></parameters></function></resource><resource location="dojo.collections.Graph"><requires><environment type="common"><require>dojo.collections.Collections</require></environment></requires><function name="dojo.collections.Graph"><returns type="mixed"/><parameters><parameter name="nodes"/></parameters><chains><chain type="call">fn</chain></chains><variables><variable scope="instance" name="key"/><variable scope="instance" name="data"/><variable scope="instance" name="neighbors"/><variable scope="instance" name="element"/><variable scope="instance" name="neighbor"/><variable scope="instance" name="cost"/><variable scope="instance" name="nodes"/><variable scope="instance" name="count"/></variables></function><function name="dojo.collections.Graph.addDirected" instance="dojo.collections.Graph"/><function name="dojo.collections.Graph.atEnd" instance="dojo.collections.Graph"/><function name="dojo.collections.Graph.get" instance="dojo.collections.Graph"><returns type="object"/></function><function name="dojo.collections.Graph.map" instance="dojo.collections.Graph"><returns type="array"/><parameters><parameter name="fn" type="function"/><parameter name="scope" optional="true" type="object"/></parameters><chains><chain type="call">fn</chain></chains></function><function name="dojo.collections.Graph.reset" instance="dojo.collections.Graph"/><function name="dojo.collections.Graph.add" instance="dojo.collections.Graph"><parameters><parameter name="node"/><parameter name="o"/></parameters></function><function name="dojo.collections.Graph.clear" instance="dojo.collections.Graph"/><function name="dojo.collections.Graph.containsKey" instance="dojo.collections.Graph"><parameters><parameter name="key"/><parameter name="k"/></parameters></function><function name="dojo.collections.Graph.getIterator" instance="dojo.collections.Graph"/><function name="dojo.collections.Graph.item" instance="dojo.collections.Graph"><parameters><parameter name="key"/><parameter name="i"/></parameters></function><function name="dojo.collections.Graph.remove" instance="dojo.collections.Graph"><parameters><parameter name="node"/></parameters></function><function name="dojo.collections.Graph.addNode" instance="dojo.collections.Graph"/><function name="dojo.collections.Graph.addDirectedEdge" instance="dojo.collections.Graph"><parameters><parameter name="uKey"/><parameter name="vKey"/><parameter name="cost"/></parameters></function><function name="dojo.collections.Graph.addUndirectedEdge" instance="dojo.collections.Graph"><parameters><parameter name="uKey"/><parameter name="vKey"/><parameter name="cost"/></parameters></function><function name="dojo.collections.Graph.contains" instance="dojo.collections.Graph"><parameters><parameter name="n"/></parameters></function></resource><resource location="dojo.collections.Queue"><requires><environment type="common"><require>dojo.collections.Collections</require></environment></requires><function name="dojo.collections.Queue"><returns type="mixed"/><summary>return an object of type dojo.collections.Queue</summary><parameters><parameter name="arr" optional="true" type="array"/></parameters><chains><chain type="call">fn</chain></chains><variables><variable scope="instance" name="count"/></variables></function><function name="dojo.collections.Queue.clear" instance="dojo.collections.Queue"><summary>clears the internal collection</summary></function><function name="dojo.collections.Queue.clone" instance="dojo.collections.Queue"><returns type="dojo.collections.Queue"/><summary>creates a new Queue based on this one</summary></function><function name="dojo.collections.Queue.contains" instance="dojo.collections.Queue"><returns type="bool"/><summary>Check to see if the passed object is an element in this queue</summary><parameters><parameter name="o" type="object"/></parameters></function><function name="dojo.collections.Queue.copyTo" instance="dojo.collections.Queue"><summary>Copy the contents of this queue into the passed array at index i.</summary><parameters><parameter name="arr" type="array"/><parameter name="i" type="int"/></parameters></function><function name="dojo.collections.Queue.dequeue" instance="dojo.collections.Queue"><returns type="object"/><summary>shift the first element off the queue and return it</summary></function><function name="dojo.collections.Queue.enqueue" instance="dojo.collections.Queue"><summary>put the passed object at the end of the queue</summary><parameters><parameter name="o" type="object"/></parameters></function><function name="dojo.collections.Queue.forEach" instance="dojo.collections.Queue"><summary>functional iterator, following the mozilla spec.</summary><parameters><parameter name="fn" type="function"/><parameter name="scope" optional="true" type="object"/></parameters><chains><chain type="call">fn</chain></chains></function><function name="dojo.collections.Queue.getIterator" instance="dojo.collections.Queue"><returns type="dojo.collections.Iterator"/><summary>get an Iterator based on this queue.</summary></function><function name="dojo.collections.Queue.peek" instance="dojo.collections.Queue"><summary>get the next element in the queue without altering the queue.</summary></function><function name="dojo.collections.Queue.toArray" instance="dojo.collections.Queue"><summary>return an array based on the internal array of the queue.</summary></function></resource><resource location="dojo.collections.Set"><requires><environment type="common"><require>dojo.collections.Collections</require><require>dojo.collections.ArrayList</require></environment></requires><function name="dojo.collections.Set" initialized="true"><returns type="mixed"/><summary>Singleton for dealing with common set operations.</summary><variables><variable scope="instance" name="union"/><variable scope="instance" name="intersection"/><variable scope="instance" name="difference"/><variable scope="instance" name="isSubSet"/><variable scope="instance" name="isSuperSet"/></variables></function><function name="dojo.collections.Set.union" instance="dojo.collections.Set"><returns type="dojo.collections.ArrayList"/><summary>Return the union of the two passed sets.</summary><parameters><parameter name="setA" type="array"/><parameter name="setB" type="array"/></parameters></function><function name="dojo.collections.Set.intersection" instance="dojo.collections.Set"><returns type="dojo.collections.ArrayList"/><summary>Return the intersection of the two passed sets.</summary><parameters><parameter name="setA" type="array"/><parameter name="setB" type="array"/></parameters></function><function name="dojo.collections.Set.difference" instance="dojo.collections.Set"><returns type="dojo.collections.ArrayList"/><summary>Returns everything in setA that is not in setB.</summary><parameters><parameter name="setA" type="array"/><parameter name="setB" type="array"/></parameters></function><function name="dojo.collections.Set.isSubSet" instance="dojo.collections.Set"><returns type="boolean"/><summary>Returns if set B is a subset of set A.</summary><parameters><parameter name="setA" type="array"/><parameter name="setB" type="array"/></parameters></function><function name="dojo.collections.Set.isSuperSet" instance="dojo.collections.Set"><returns type="boolean"/><summary>Returns if set B is a superset of set A.</summary><parameters><parameter name="setA" type="array"/><parameter name="setB" type="array"/></parameters></function></resource><resource location="dojo.collections.SkipList"><requires><environment type="common"><require>dojo.collections.Collections</require><require>dojo.experimental</require></environment></requires><function name="dojo.collections.SkipList"><variables><variable scope="instance" name="value"/><variable scope="instance" name="height"/><variable scope="instance" name="nodes"/><variable scope="instance" name="compare"/><variable scope="instance" name="incrementHeight"/><variable scope="instance" name="decrementHeight"/><variable scope="instance" name="item"/><variable scope="instance" name="element"/><variable scope="instance" name="atEnd"/><variable scope="instance" name="get"/><variable scope="instance" name="reset"/><variable scope="instance" name="head"/><variable scope="instance" name="count"/><variable scope="instance" name="add"/><variable scope="instance" name="contains"/><variable scope="instance" name="getIterator"/><variable scope="instance" name="remove"/><variable scope="instance" name="resetComparisons"/></variables></function><function name="dojo.collections.SkipList.compare" instance="dojo.collections.SkipList"><parameters><parameter name="val"/></parameters></function><function name="dojo.collections.SkipList.incrementHeight" instance="dojo.collections.SkipList"/><function name="dojo.collections.SkipList.decrementHeight" instance="dojo.collections.SkipList"/><function name="dojo.collections.SkipList.item" instance="dojo.collections.SkipList"><parameters><parameter name="i"/></parameters></function><function name="dojo.collections.SkipList.atEnd" instance="dojo.collections.SkipList"/><function name="dojo.collections.SkipList.get" instance="dojo.collections.SkipList"/><function name="dojo.collections.SkipList.reset" instance="dojo.collections.SkipList"/><function name="dojo.collections.SkipList.add" instance="dojo.collections.SkipList"><parameters><parameter name="val"/></parameters></function><function name="dojo.collections.SkipList.contains" instance="dojo.collections.SkipList"><parameters><parameter name="val"/></parameters></function><function name="dojo.collections.SkipList.getIterator" instance="dojo.collections.SkipList"/><function name="dojo.collections.SkipList.remove" instance="dojo.collections.SkipList"><parameters><parameter name="val"/></parameters></function><function name="dojo.collections.SkipList.resetComparisons" instance="dojo.collections.SkipList"/></resource><resource location="dojo.collections.SortedList"><requires><environment type="common"><require>dojo.collections.Collections</require></environment></requires><function name="dojo.collections.SortedList"><returns type="mixed"/><summary>creates a collection that acts like a dictionary but is also internally sorted. Note that the act of adding any elements forces an internal resort, making this object potentially slow.</summary><parameters><parameter name="dictionary" optional="true" type="object"/></parameters><chains><chain type="call">fn</chain></chains><variables><variable scope="instance" name="count"/><variable scope="instance" name="contains"/></variables></function><function name="dojo.collections.SortedList.add" instance="dojo.collections.SortedList"><summary>add the passed value to the dictionary at location k</summary><parameters><parameter name="k" type="string"/><parameter name="v" type="object"/></parameters></function><function name="dojo.collections.SortedList.clear" instance="dojo.collections.SortedList"><summary>clear the internal collections</summary></function><function name="dojo.collections.SortedList.clone" instance="dojo.collections.SortedList"><returns type="dojo.collections.SortedList"/><summary>create a clone of this sorted list</summary></function><function name="dojo.collections.SortedList.contains" is="dojo.collections.SortedList.containsKey"/><function name="dojo.collections.SortedList.containsKey" instance="dojo.collections.SortedList"><returns type="bool"/><summary>Check to see if the list has a location k</summary><parameters><parameter name="k" type="string"/></parameters></function><function name="dojo.collections.SortedList.containsValue" instance="dojo.collections.SortedList"><returns type="bool"/><summary>Check to see if this list contains the passed object</summary><parameters><parameter name="o" type="object"/></parameters></function><function name="dojo.collections.SortedList.copyTo" instance="dojo.collections.SortedList"><summary>copy the contents of the list into array arr at index i</summary><parameters><parameter name="arr" type="array"/><parameter name="i" type="int"/></parameters></function><function name="dojo.collections.SortedList.entry" instance="dojo.collections.SortedList"><returns type="dojo.collections.DictionaryEntry"/><summary>return the object at location k</summary><parameters><parameter name="k" type="string"/></parameters></function><function name="dojo.collections.SortedList.forEach" instance="dojo.collections.SortedList"><summary>functional iterator, following the mozilla spec.</summary><parameters><parameter name="fn" type="function"/><parameter name="scope" optional="true" type="object"/></parameters><chains><chain type="call">fn</chain></chains></function><function name="dojo.collections.SortedList.getByIndex" instance="dojo.collections.SortedList"><returns type="object"/><summary>return the item at index i</summary><parameters><parameter name="i" type="int"/></parameters></function><function name="dojo.collections.SortedList.getIterator" instance="dojo.collections.SortedList"><returns type="dojo.collections.DictionaryIterator"/><summary>get an iterator for this object</summary></function><function name="dojo.collections.SortedList.getKey" instance="dojo.collections.SortedList"><summary>return the key of the item at index i</summary><parameters><parameter name="i" type="int"/></parameters></function><function name="dojo.collections.SortedList.getKeyList" instance="dojo.collections.SortedList"><returns type="array"/><summary>return an array of the keys set in this list</summary></function><function name="dojo.collections.SortedList.getValueList" instance="dojo.collections.SortedList"><returns type="array"/><summary>return an array of values in this list</summary></function><function name="dojo.collections.SortedList.indexOfKey" instance="dojo.collections.SortedList"><returns type="int"/><summary>return the index of the passed key.</summary><parameters><parameter name="k" type="string"/></parameters></function><function name="dojo.collections.SortedList.indexOfValue" instance="dojo.collections.SortedList"><returns type="int"/><summary>return the first index of object o</summary><parameters><parameter name="o" type="object"/></parameters></function><function name="dojo.collections.SortedList.item" instance="dojo.collections.SortedList"><returns type="object"/><summary>return the value of the object at location k.</summary><parameters><parameter name="k" type="string"/></parameters></function><function name="dojo.collections.SortedList.remove" instance="dojo.collections.SortedList"><summary>remove the item at location k and rebuild the internal collections.</summary><parameters><parameter name="k" type="string"/></parameters></function><function name="dojo.collections.SortedList.removeAt" instance="dojo.collections.SortedList"><summary>remove the item at index i, and rebuild the internal collections.</summary><parameters><parameter name="i" type="int"/></parameters></function><function name="dojo.collections.SortedList.replace" instance="dojo.collections.SortedList"><returns type="bool"/><summary>Replace an existing item if it's there, and add a new one if not.</summary><parameters><parameter name="k" type="string"/><parameter name="v" type="object"/></parameters></function><function name="dojo.collections.SortedList.setByIndex" instance="dojo.collections.SortedList"><summary>set an item by index</summary><parameters><parameter name="i" type="int"/><parameter name="o" type="object"/></parameters></function></resource><resource location="dojo.collections.Stack"><requires><environment type="common"><require>dojo.collections.Collections</require></environment></requires><function name="dojo.collections.Stack"><returns type="mixed">an object of type dojo.collections.Stack</returns><parameters><parameter name="arr" optional="true" type="array"/></parameters><chains><chain type="call">fn</chain></chains><variables><variable scope="instance" name="count"/></variables></function><function name="dojo.collections.Stack.clear" instance="dojo.collections.Stack"><summary>Clear the internal array and reset the count</summary></function><function name="dojo.collections.Stack.clone" instance="dojo.collections.Stack"><summary>Create and return a clone of this Stack</summary></function><function name="dojo.collections.Stack.contains" instance="dojo.collections.Stack"><returns type="bool"/><summary>check to see if the stack contains object o</summary><parameters><parameter name="o" type="object"/></parameters></function><function name="dojo.collections.Stack.copyTo" instance="dojo.collections.Stack"><summary>copy the stack into array arr at index i</summary><parameters><parameter name="arr" type="array"/><parameter name="i" type="int"/></parameters></function><function name="dojo.collections.Stack.forEach" instance="dojo.collections.Stack"><summary>functional iterator, following the mozilla spec.</summary><parameters><parameter name="fn" type="function"/><parameter name="scope" optional="true" type="object"/></parameters><chains><chain type="call">fn</chain></chains></function><function name="dojo.collections.Stack.getIterator" instance="dojo.collections.Stack"><returns type="dojo.collections.Iterator"/><summary>get an iterator for this collection</summary></function><function name="dojo.collections.Stack.peek" instance="dojo.collections.Stack"><returns type="object"/><summary>Return the next item without altering the stack itself.</summary></function><function name="dojo.collections.Stack.pop" instance="dojo.collections.Stack"><returns type="object"/><summary>pop and return the next item on the stack</summary></function><function name="dojo.collections.Stack.push" instance="dojo.collections.Stack"><summary>Push object o onto the stack</summary><parameters><parameter name="o" type="object"/></parameters></function><function name="dojo.collections.Stack.toArray" instance="dojo.collections.Stack"><returns type="array"/><summary>create and return an array based on the internal collection</summary></function></resource><resource location="dojo.collections.Store"><requires><environment type="common"><require>dojo.lang.common</require></environment></requires><function name="dojo.collections.Store"><returns type="mixed"/><summary>Data Store with accessor methods.</summary><parameters><parameter name="jsonArray" optional="true" type="array"/></parameters><chains><chain type="call">fn</chain></chains><variables><variable scope="instance" name="keyField"/><variable scope="instance" name="get"/><variable scope="instance" name="getByKey"/><variable scope="instance" name="getByIndex"/><variable scope="instance" name="getData"/><variable scope="instance" name="getDataByKey"/><variable scope="instance" name="getDataByIndex"/><variable scope="instance" name="update"/><variable scope="instance" name="forEach"/><variable scope="instance" name="forEachData"/><variable scope="instance" name="setData"/><variable scope="instance" name="clearData"/><variable scope="instance" name="addData"/><variable scope="instance" name="addDataRange"/><variable scope="instance" name="removeData"/><variable scope="instance" name="removeDataByKey"/><variable scope="instance" name="removeDataByIndex"/><variable scope="prototype" name="getField"/><variable scope="prototype" name="getFromHtml"/><variable scope="prototype" name="onSetData"/><variable scope="prototype" name="onClearData"/><variable scope="prototype" name="onAddData"/><variable scope="prototype" name="onAddDataRange"/><variable scope="prototype" name="onRemoveData"/><variable scope="prototype" name="onUpdateField"/></variables></function><function name="dojo.collections.Store.get" instance="dojo.collections.Store"><returns type="array"/><summary>Get the internal data array, should not be used.</summary></function><function name="dojo.collections.Store.getByKey" instance="dojo.collections.Store"><returns type="mixed"/><summary>Find the internal data object by key.</summary><parameters><parameter name="key" type="string"/></parameters></function><function name="dojo.collections.Store.getByIndex" instance="dojo.collections.Store"><returns type="object"/><summary>Get the internal data object by index.</summary><parameters><parameter name="idx" type="number"/></parameters></function><function name="dojo.collections.Store.getData" instance="dojo.collections.Store"><returns type="array"/><summary>Get an array of source objects.</summary></function><function name="dojo.collections.Store.getDataByKey" instance="dojo.collections.Store"><returns type="mixed"/><summary>Get the source object by key.</summary><parameters><parameter name="key" type="string"/></parameters></function><function name="dojo.collections.Store.getDataByIndex" instance="dojo.collections.Store"><returns type="object"/><summary>Get the source object at index idx.</summary><parameters><parameter name="idx" type="number"/></parameters></function><function name="dojo.collections.Store.update" instance="dojo.collections.Store"><parameters><parameter name="obj" type="Object"/><parameter name="fieldPath" type="string"/><parameter name="val" type="Object"/></parameters></function><function name="dojo.collections.Store.forEach" instance="dojo.collections.Store"><summary>Functional iteration directly on the internal data array.</summary><parameters><parameter name="fn" type="function"/></parameters><chains><chain type="call">fn</chain></chains></function><function name="dojo.collections.Store.forEachData" instance="dojo.collections.Store"><summary>Functional iteration on source objects in internal data array.</summary><parameters><parameter name="fn" type="function"/></parameters><chains><chain type="call">fn</chain></chains></function><function name="dojo.collections.Store.setData" instance="dojo.collections.Store"><summary>Set up the internal data.</summary><parameters><parameter name="arr" type="array"/></parameters></function><function name="dojo.collections.Store.clearData" instance="dojo.collections.Store"><summary>Clears the internal data array.</summary></function><function name="dojo.collections.Store.addData" instance="dojo.collections.Store"><summary>Add an object with optional key to the internal data array.</summary><parameters><parameter name="obj" type="obj"/><parameter name="key" optional="true" type="string"/></parameters></function><function name="dojo.collections.Store.addDataRange" instance="dojo.collections.Store"><summary>Add a range of objects to the internal data array.</summary><parameters><parameter name="arr" type="array"/></parameters></function><function name="dojo.collections.Store.removeData" instance="dojo.collections.Store"><summary>remove the passed object from the internal data array.</summary><parameters><parameter name="obj" type="obj"/></parameters></function><function name="dojo.collections.Store.removeDataByKey" instance="dojo.collections.Store"><summary>remove the object at key from the internal data array.</summary><parameters><parameter name="key" type="string"/></parameters></function><function name="dojo.collections.Store.removeDataByIndex" instance="dojo.collections.Store"><summary>remove the object at idx from the internal data array.</summary><parameters><parameter name="idx" type="number"/></parameters></function></resource><resource location="dojo.collections._"><requires><environment type="common"><require>dojo.collections.Collections</require><require>dojo.collections.SortedList</require><require>dojo.collections.Dictionary</require><require>dojo.collections.Queue</require><require>dojo.collections.ArrayList</require><require>dojo.collections.Stack</require><require>dojo.collections.Set</require></environment></requires></resource><resource location="dojo.crypto.Blowfish"><requires><environment type="common"><require>dojo.crypto</require></environment></requires><function name="dojo.crypto.Blowfish" initialized="true"><returns type="mixed"/><summary>Object for doing Blowfish encryption/decryption.</summary><variables><variable scope="instance" name="encrypt"/><variable scope="instance" name="decrypt"/></variables></function><function name="dojo.crypto.Blowfish.getIV" instance="dojo.crypto.Blowfish"><returns type="mixed">the initialization vector in the output format specified by outputType</returns><parameters><parameter name="outputType" optional="true" type="dojo.crypto.outputTypes"/></parameters></function><function name="dojo.crypto.Blowfish.setIV" instance="dojo.crypto.Blowfish"><summary>sets the initialization vector to data (as interpreted as inputType)</summary><parameters><parameter name="data" type="string"/><parameter name="inputType" optional="true" type="dojo.crypto.outputTypes"/></parameters></function><function name="dojo.crypto.Blowfish.encrypt" instance="dojo.crypto.Blowfish"><returns type="mixed"/><summary>encrypts plaintext using key; allows user to specify output type and cipher mode via keyword object "ao"</summary><parameters><parameter name="plaintext" type="string"/><parameter name="key" type="string"/><parameter name="ao" optional="true" type="object"/></parameters></function><function name="dojo.crypto.Blowfish.decrypt" instance="dojo.crypto.Blowfish"><returns type="string"/><summary>decrypts ciphertext using key; allows specification of how ciphertext is encoded via ao.</summary><parameters><parameter name="ciphertext" type="string"/><parameter name="key" type="string"/><parameter name="ao" optional="true" type="object"/></parameters></function></resource><resource location="dojo.crypto.MD5"><requires><environment type="common"><require>dojo.crypto</require></environment></requires><function name="dojo.crypto.MD5" initialized="true"><returns type="string"/><summary>object for creating digests using the MD5 algorithm</summary></function><function name="dojo.crypto.MD5.compute" instance="dojo.crypto.MD5"><returns type="string"/><summary>computes the digest of data, and returns the result as a string of type outputType</summary><parameters><parameter name="data" type="string"/><parameter name="outputType" type="dojo.crypto.outputTypes"/></parameters></function><function name="dojo.crypto.MD5.getHMAC" instance="dojo.crypto.MD5"><returns type="string"/><summary>computes a digest of data using key, and returns the result as a string of outputType</summary><parameters><parameter name="data" type="string"/><parameter name="key" type="string"/><parameter name="outputType" type="dojo.crypto.outputTypes"/></parameters></function></resource><resource location="dojo.crypto.Rijndael"><requires><environment type="common"><require>dojo.crypto</require><require>dojo.experimental</require></environment></requires><function name="dojo.crypto.Rijndael" initialized="true"/><function name="dojo.crypto.Rijndael.encrypt" instance="dojo.crypto.Rijndael"><parameters><parameter name="plaintext"/><parameter name="key"/></parameters></function><function name="dojo.crypto.Rijndael.decrypt" instance="dojo.crypto.Rijndael"><parameters><parameter name="ciphertext"/><parameter name="key"/></parameters></function></resource><resource location="dojo.crypto.SHA1"><requires><environment type="common"><require>dojo.crypto</require><require>dojo.experimental</require></environment></requires><function name="dojo.crypto.SHA1" initialized="true"/><function name="dojo.crypto.SHA1.compute" instance="dojo.crypto.SHA1"><parameters><parameter name="data"/><parameter name="outputType"/></parameters></function><function name="dojo.crypto.SHA1.getHMAC" instance="dojo.crypto.SHA1"><parameters><parameter name="data"/><parameter name="key"/><parameter name="outputType"/></parameters></function></resource><resource location="dojo.crypto.SHA256"><requires><environment type="common"><require>dojo.crypto</require><require>dojo.experimental</require></environment></requires><function name="dojo.crypto.SHA256" initialized="true"/><function name="dojo.crypto.SHA256.compute" instance="dojo.crypto.SHA256"><parameters><parameter name="s"/></parameters></function></resource><resource location="dojo.crypto._"><requires><environment type="common"><require>dojo.crypto</require><require>dojo.crypto.MD5</require></environment></requires></resource><resource location="dojo.crypto"><object name="dojo.crypto.cipherModes"><summary>Enumeration for various cipher modes.</summary><variables><variable name="ECB"/><variable name="CBC"/><variable name="PCBC"/><variable name="CFB"/><variable name="OFB"/><variable name="CTR"/></variables></object><object name="dojo.crypto.outputTypes"><summary>Enumeration for input and output encodings.</summary><variables><variable name="Base64"/><variable name="Hex"/><variable name="String"/><variable name="Raw"/></variables></object></resource><resource location="dojo.data.CsvStore"><requires><environment type="common"><require>dojo.data.core.RemoteStore</require><require>dojo.lang.assert</require></environment></requires><function name="dojo.data.CsvStore"><chains><chain type="call">dojo.data.core.RemoteStore</chain><chain type="prototype">dojo.data.core.RemoteStore</chain></chains></function></resource><resource location="dojo.data.OpmlStore"><requires><environment type="common"><require>dojo.data.core.Read</require><require>dojo.data.core.Result</require><require>dojo.lang.assert</require><require>dojo.json</require><require>dojo.experimental</require></environment></requires><function name="dojo.data.OpmlStore"><chains><chain type="call">dojo.data.core.Read</chain><chain type="prototype">dojo.data.core.Read</chain></chains></function></resource><resource location="dojo.data.RdfStore"><requires><environment type="common"><require>dojo.lang.declare</require><require>dojo.data.core.RemoteStore</require><require>dojo.experimental</require></environment></requires><function name="dojo.data.RdfStore"><chains><chain type="call">dojo.data.core.RemoteStore</chain><chain type="prototype">dojo.data.core.RemoteStore</chain></chains></function><function name="dojo.data.RhizomeStore"><chains><chain type="call">dojo.data.RdfStore</chain><chain type="prototype">dojo.data.RdfStore</chain></chains></function><function name="dojo.data.RdfDatatypeSerializer"><parameters><parameter name="type" type="JavaScript type"/><parameter name="convertFunc" type="function"/><parameter name="uri" type="RDF datatype URI"/></parameters><chains><chain type="call">this._converter</chain></chains><variables><variable scope="instance" name="type"/><variable scope="instance" name="_converter"/><variable scope="instance" name="uri"/><variable scope="instance" name="serialize"/></variables></function><function name="dojo.data.RdfDatatypeSerializer.serialize" instance="dojo.data.RdfDatatypeSerializer"><parameters><parameter name="value"/></parameters><chains><chain type="call">this._converter</chain></chains></function></resource><resource location="dojo.data.YahooStore"><requires><environment type="common"><require>dojo.data.core.RemoteStore</require><require>dojo.lang.declare</require><require>dojo.io.ScriptSrcIO</require></environment></requires><function name="dojo.data.YahooStore"><chains><chain type="call">dojo.data.core.RemoteStore</chain><chain type="prototype">dojo.data.core.RemoteStore</chain></chains></function></resource><resource location="dojo.data.core.Read"><requires><environment type="common"><require>dojo.data.core.Result</require><require>dojo.lang.declare</require><require>dojo.experimental</require></environment></requires></resource><resource location="dojo.data.core.RemoteStore"><requires><environment type="common"><require>dojo.data.core.Read</require><require>dojo.data.core.Write</require><require>dojo.data.core.Result</require><require>dojo.experimental</require><require>dojo.Deferred</require><require>dojo.lang.declare</require><require>dojo.json</require><require>dojo.io.*</require></environment></requires><function name="bindfunc"><parameters><parameter name="type"/><parameter name="data"/><parameter name="evt"/></parameters></function><function name="result.canceller"><parameters><parameter name="deferred"/></parameters></function></resource><resource location="dojo.data.core.Result"><requires><environment type="common"><require>dojo.lang.declare</require><require>dojo.experimental</require></environment></requires></resource><resource location="dojo.data.core.Write"><requires><environment type="common"><require>dojo.data.core.Read</require><require>dojo.lang.declare</require><require>dojo.experimental</require></environment></requires><function name="dojo.data.core.Write"><chains><chain type="call">dojo.data.core.Read</chain><chain type="prototype">dojo.data.core.Read</chain></chains></function></resource><resource location="dojo.data.old.Attribute"><requires><environment type="common"><require>dojo.data.old.Item</require><require>dojo.lang.assert</require></environment></requires><function name="dojo.data.old.Attribute"><parameters><parameter name="dataProvider" type="dojo.data.old.provider.Base"/><parameter name="attributeId" type="string"/></parameters><chains><chain type="call">dojo.data.old.Item</chain><chain type="prototype">dojo.data.old.Item</chain></chains><variables><variable scope="instance" name="_attributeId"/></variables></function><function name="dojo.data.old.Attribute.toString" prototype="dojo.data.old.Attribute"><returns type="string"/></function><function name="dojo.data.old.Attribute.getAttributeId" prototype="dojo.data.old.Attribute"><returns type="string"/></function><function name="dojo.data.old.Attribute.getType" prototype="dojo.data.old.Attribute"><returns type="dojo.data.old.Type or null"/></function><function name="dojo.data.old.Attribute.setType" prototype="dojo.data.old.Attribute"><parameters><parameter name="type" type="dojo.data.old.Type or null"/></parameters></function></resource><resource location="dojo.data.old.Item"><requires><environment type="common"><require>dojo.data.old.Observable</require><require>dojo.data.old.Value</require><require>dojo.lang.common</require><require>dojo.lang.assert</require></environment></requires><function name="dojo.data.old.Item"><parameters><parameter name="dataProvider" type="dojo.data.old.provider.Base"/></parameters><chains><chain type="call">dojo.data.old.Observable</chain><chain type="prototype">dojo.data.old.Observable</chain></chains><variables><variable scope="instance" name="_dataProvider"/><variable scope="instance" name="_dictionaryOfAttributeValues"/></variables></function><function name="dojo.data.old.Item.compare" prototype="dojo.data.old.Item"><returns type="0, 1, or -1"/><parameters><parameter name="otherItem" type="dojo.data.old.Item"/></parameters></function><function name="dojo.data.old.Item.toString" prototype="dojo.data.old.Item"><returns type="string"/></function><function name="dojo.data.old.Item.isEqual" prototype="dojo.data.old.Item"><returns type="boolean"/><parameters><parameter name="otherItem" type="dojo.data.old.Item"/></parameters></function><function name="dojo.data.old.Item.getName" prototype="dojo.data.old.Item"/><function name="dojo.data.old.Item.get" prototype="dojo.data.old.Item"><returns type="mixed"/><parameters><parameter name="attributeId" type="string or dojo.data.old.Attribute"/></parameters></function><function name="dojo.data.old.Item.getValue" prototype="dojo.data.old.Item"><returns type="mixed"/><parameters><parameter name="attributeId" type="string or dojo.data.old.Attribute"/></parameters></function><function name="dojo.data.old.Item.getValues" prototype="dojo.data.old.Item"><returns type="mixed"/><parameters><parameter name="attributeId" type="string or dojo.data.old.Attribute"/></parameters></function><function name="dojo.data.old.Item.load" prototype="dojo.data.old.Item"><parameters><parameter name="attributeId" type="string or dojo.data.old.Attribute"/><parameter name="value" type="anything"/></parameters></function><function name="dojo.data.old.Item.set" prototype="dojo.data.old.Item"><parameters><parameter name="attributeId" type="string or dojo.data.old.Attribute"/><parameter name="value" type="anything"/></parameters></function><function name="dojo.data.old.Item.setValue" prototype="dojo.data.old.Item"><parameters><parameter name="attributeId" type="string or dojo.data.old.Attribute"/><parameter name="value" type="dojo.data.old.Value"/></parameters></function><function name="dojo.data.old.Item.addValue" prototype="dojo.data.old.Item"><parameters><parameter name="attributeId" type="string or dojo.data.old.Attribute"/><parameter name="value" type="anything"/></parameters></function><function name="dojo.data.old.Item.setValues" prototype="dojo.data.old.Item"><parameters><parameter name="attributeId" type="string or dojo.data.old.Attribute"/><parameter name="arrayOfValues" type="Array"/></parameters></function><function name="dojo.data.old.Item.getAttributes" prototype="dojo.data.old.Item"><returns type="Array"/></function><function name="dojo.data.old.Item.hasAttribute" prototype="dojo.data.old.Item"><returns type="boolean"/><parameters><parameter name="attributeId" type="string or dojo.data.old.Attribute"/></parameters></function><function name="dojo.data.old.Item.hasAttributeValue" prototype="dojo.data.old.Item"><returns type="boolean"/><parameters><parameter name="attributeId" type="string or dojo.data.old.Attribute"/><parameter name="value" type="anything"/></parameters></function></resource><resource location="dojo.data.old.Kind"><requires><environment type="common"><require>dojo.data.old.Item</require></environment></requires><function name="dojo.data.old.Kind"><parameters><parameter name="dataProvider" type="dojo.data.old.provider.Base"/></parameters><chains><chain type="call">dojo.data.old.Item</chain><chain type="prototype">dojo.data.old.Item</chain></chains></function></resource><resource location="dojo.data.old.Observable"><requires><environment type="common"><require>dojo.lang.common</require><require>dojo.lang.assert</require></environment></requires><function name="dojo.data.old.Observable"><variables><variable scope="instance" name="_arrayOfObservers"/></variables></function><function name="dojo.data.old.Observable.addObserver" prototype="dojo.data.old.Observable"><parameters><parameter name="observer" type="object"/></parameters></function><function name="dojo.data.old.Observable.removeObserver" prototype="dojo.data.old.Observable"><parameters><parameter name="observer" type="object"/></parameters></function><function name="dojo.data.old.Observable.getObservers" prototype="dojo.data.old.Observable"><returns type="Array or undefined"/></function></resource><resource location="dojo.data.old.ResultSet"><requires><environment type="common"><require>dojo.lang.assert</require><require>dojo.collections.Collections</require></environment></requires><function name="dojo.data.old.ResultSet"><parameters><parameter name="dataProvider" type="dojo.data.old.provider.Base"/><parameter name="arrayOfItems" type="Array"/></parameters><chains><chain type="call">dojo.data.old.Observable</chain><chain type="prototype">dojo.data.old.Observable</chain></chains><variables><variable scope="instance" name="_dataProvider"/><variable scope="instance" name="_arrayOfItems"/></variables></function><function name="dojo.data.old.ResultSet.toString" prototype="dojo.data.old.ResultSet"><returns type="string"/></function><function name="dojo.data.old.ResultSet.toArray" prototype="dojo.data.old.ResultSet"><returns type="Array"/></function><function name="dojo.data.old.ResultSet.getIterator" prototype="dojo.data.old.ResultSet"/><function name="dojo.data.old.ResultSet.getLength" prototype="dojo.data.old.ResultSet"><returns type="integer"/></function><function name="dojo.data.old.ResultSet.getItemAt" prototype="dojo.data.old.ResultSet"><parameters><parameter name="index" type="numeric"/></parameters></function><function name="dojo.data.old.ResultSet.indexOf" prototype="dojo.data.old.ResultSet"><returns type="integer"/><parameters><parameter name="item" type="dojo.data.old.Item"/></parameters></function><function name="dojo.data.old.ResultSet.contains" prototype="dojo.data.old.ResultSet"><returns type="boolean"/><parameters><parameter name="item" type="dojo.data.old.Item"/></parameters></function><function name="dojo.data.old.ResultSet.getDataProvider" prototype="dojo.data.old.ResultSet"><returns type="dojo.data.old.provider.Base"/></function></resource><resource location="dojo.data.old.Type"><requires><environment type="common"><require>dojo.data.old.Item</require></environment></requires><function name="dojo.data.old.Type"><parameters><parameter name="dataProvider" type="dojo.data.old.provider.Base"/></parameters><chains><chain type="call">dojo.data.old.Item</chain><chain type="prototype">dojo.data.old.Item</chain></chains></function></resource><resource location="dojo.data.old.Value"><requires><environment type="common"><require>dojo.lang.assert</require></environment></requires><function name="dojo.data.old.Value"><parameters><parameter name="value" type="anything"/></parameters><variables><variable scope="instance" name="_value"/><variable scope="instance" name="_type"/></variables></function><function name="dojo.data.old.Value.toString" prototype="dojo.data.old.Value"><returns type="string"/></function><function name="dojo.data.old.Value.getValue" prototype="dojo.data.old.Value"><returns type="anything"/></function><function name="dojo.data.old.Value.getType" prototype="dojo.data.old.Value"><returns type="dojo.data.old.Type"/></function><function name="dojo.data.old.Value.compare" prototype="dojo.data.old.Value"/><function name="dojo.data.old.Value.isEqual" prototype="dojo.data.old.Value"/></resource><resource location="dojo.data.old._"><requires><environment type="common"><require>dojo.data.old.Item</require><require>dojo.data.old.ResultSet</require><require>dojo.data.old.provider.FlatFile</require><require>dojo.experimental</require></environment></requires></resource><resource location="dojo.data.old.format.Csv"><requires><environment type="common"><require>dojo.lang.assert</require></environment></requires><function name="dojo.data.old.format.Csv" initialized="true"><returns type="mixed"/><variables><variable scope="instance" name="getArrayStructureFromCsvFileContents"/><variable scope="instance" name="loadDataProviderFromFileContents"/><variable scope="instance" name="getCsvStringFromResultSet"/></variables></function><function name="dojo.data.old.format.Csv.getArrayStructureFromCsvFileContents" instance="dojo.data.old.format.Csv"><returns type="Array"/><parameters><parameter name="csvFileContents" type="string"/></parameters></function><function name="dojo.data.old.format.Csv.loadDataProviderFromFileContents" instance="dojo.data.old.format.Csv"><parameters><parameter name="dataProvider" type="dojo.data.old.provider.Base"/><parameter name="csvFileContents" type="string"/></parameters></function><function name="dojo.data.old.format.Csv.getCsvStringFromResultSet" instance="dojo.data.old.format.Csv"><returns type="String"/><parameters><parameter name="resultSet" type="dojo.data.old.ResultSet"/></parameters></function></resource><resource location="dojo.data.old.format.Json"><requires><environment type="common"><require>dojo.lang.assert</require></environment></requires><function name="dojo.data.old.format.Json" initialized="true"><returns type="String"/><variables><variable scope="instance" name="loadDataProviderFromFileContents"/><variable scope="instance" name="loadDataProviderFromArrayOfJsonData"/><variable scope="instance" name="getJsonStringFromResultSet"/></variables></function><function name="dojo.data.old.format.Json.loadDataProviderFromFileContents" instance="dojo.data.old.format.Json"><parameters><parameter name="dataProvider" type="dojo.data.old.provider.Base"/><parameter name="jsonFileContents" type="string"/></parameters></function><function name="dojo.data.old.format.Json.loadDataProviderFromArrayOfJsonData" instance="dojo.data.old.format.Json"><parameters><parameter name="dataProvider" type="dojo.data.old.provider.Base"/><parameter name="arrayOfJsonData" type="Array"/></parameters></function><function name="dojo.data.old.format.Json.getJsonStringFromResultSet" instance="dojo.data.old.format.Json"><returns type="String"/><parameters><parameter name="resultSet" type="dojo.data.old.ResultSet"/></parameters></function></resource><resource location="dojo.data.old.provider.Base"><requires><environment type="common"><require>dojo.lang.assert</require></environment></requires><function name="dojo.data.old.provider.Base"><variables><variable scope="instance" name="_countOfNestedTransactions"/><variable scope="instance" name="_changesInCurrentTransaction"/></variables></function><function name="dojo.data.old.provider.Base.beginTransaction" prototype="dojo.data.old.provider.Base"/><function name="dojo.data.old.provider.Base.endTransaction" prototype="dojo.data.old.provider.Base"/><function name="dojo.data.old.provider.Base.getNewItemToLoad" prototype="dojo.data.old.provider.Base"><returns type="dojo.data.old.Item"/></function><function name="dojo.data.old.provider.Base.newItem" prototype="dojo.data.old.provider.Base"><returns type="dojo.data.old.Item"/><parameters><parameter name="itemName" type="string"/></parameters></function><function name="dojo.data.old.provider.Base.newAttribute" prototype="dojo.data.old.provider.Base"><returns type="dojo.data.old.Attribute"/><parameters><parameter name="attributeId" type="string"/></parameters></function><function name="dojo.data.old.provider.Base.getAttribute" prototype="dojo.data.old.provider.Base"><returns type="dojo.data.old.Attribute"/><parameters><parameter name="attributeId" type="string"/></parameters></function><function name="dojo.data.old.provider.Base.getAttributes" prototype="dojo.data.old.provider.Base"><returns type="Array"/></function><function name="dojo.data.old.provider.Base.fetchArray" prototype="dojo.data.old.provider.Base"><returns type="Array"/></function><function name="dojo.data.old.provider.Base.fetchResultSet" prototype="dojo.data.old.provider.Base"><returns type="dojo.data.old.ResultSet"/></function><function name="dojo.data.old.provider.Base.noteChange" prototype="dojo.data.old.provider.Base"><parameters><parameter name="item" type="dojo.data.old.Item"/><parameter name="attribute" type="string or dojo.data.old.Attribute"/><parameter name="value" type="anything"/></parameters></function><function name="dojo.data.old.provider.Base.addItemObserver" prototype="dojo.data.old.provider.Base"><parameters><parameter name="item" type="dojo.data.old.Item"/><parameter name="observer" type="object"/></parameters></function><function name="dojo.data.old.provider.Base.removeItemObserver" prototype="dojo.data.old.provider.Base"><parameters><parameter name="item" type="dojo.data.old.Item"/><parameter name="observer" type="object"/></parameters></function><function name="dojo.data.old.provider.Base._newItem" prototype="dojo.data.old.provider.Base"><returns type="dojo.data.old.Item"/></function><function name="dojo.data.old.provider.Base._newAttribute" prototype="dojo.data.old.provider.Base"><returns type="dojo.data.old.Attribute"/><parameters><parameter name="attributeId" type="String"/></parameters></function><function name="dojo.data.old.provider.Base._saveChanges" prototype="dojo.data.old.provider.Base"><returns type="Array"/></function><function name="dojo.data.old.provider.Base._notifyObserversOfChanges" prototype="dojo.data.old.provider.Base"><parameters><parameter name="arrayOfChanges" type="Array"/></parameters></function><function name="dojo.data.old.provider.Base._getResultSets" prototype="dojo.data.old.provider.Base"><returns type="Array"/></function></resource><resource location="dojo.data.old.provider.Delicious"><requires><environment type="common"><require>dojo.data.old.provider.FlatFile</require><require>dojo.data.old.format.Json</require></environment></requires><function name="dojo.data.old.provider.Delicious"><chains><chain type="call">dojo.data.old.provider.FlatFile</chain><chain type="prototype">dojo.data.old.provider.FlatFile</chain></chains></function></resource><resource location="dojo.data.old.provider.FlatFile"><requires><environment type="common"><require>dojo.data.old.provider.Base</require><require>dojo.data.old.Item</require><require>dojo.data.old.Attribute</require><require>dojo.data.old.ResultSet</require><require>dojo.data.old.format.Json</require><require>dojo.data.old.format.Csv</require><require>dojo.lang.assert</require></environment></requires><function name="dojo.data.old.provider.FlatFile"><parameters><parameter name="keywordParameters" type="keywords"/></parameters><chains><chain type="call">dojo.data.old.provider.Base</chain><chain type="prototype">dojo.data.old.provider.Base</chain></chains><variables><variable scope="instance" name="_arrayOfItems"/><variable scope="instance" name="_resultSet"/><variable scope="instance" name="_dictionaryOfAttributes"/><variable scope="instance" name="_ourCapabilities"/></variables></function><function name="dojo.data.old.provider.FlatFile.getProviderCapabilities" prototype="dojo.data.old.provider.FlatFile"><parameters><parameter name="keyword" type="string"/></parameters></function><function name="dojo.data.old.provider.FlatFile.registerAttribute" prototype="dojo.data.old.provider.FlatFile"><returns type="dojo.data.old.Attribute"/><parameters><parameter name="attributeId" type="string or dojo.data.old.Attribute"/></parameters></function><function name="dojo.data.old.provider.FlatFile.getAttribute" prototype="dojo.data.old.provider.FlatFile"><returns type="dojo.data.old.Attribute or null"/><parameters><parameter name="attributeId" type="string or dojo.data.old.Attribute"/></parameters></function><function name="dojo.data.old.provider.FlatFile.getAttributes" prototype="dojo.data.old.provider.FlatFile"><returns type="Array"/></function><function name="dojo.data.old.provider.FlatFile.fetchArray" prototype="dojo.data.old.provider.FlatFile"><returns type="Array"/><parameters><parameter name="query"/></parameters></function><function name="dojo.data.old.provider.FlatFile.fetchResultSet" prototype="dojo.data.old.provider.FlatFile"><returns type="dojo.data.old.ResultSet"/><parameters><parameter name="query"/></parameters></function><function name="dojo.data.old.provider.FlatFile._newItem" prototype="dojo.data.old.provider.FlatFile"><returns type="dojo.data.old.Item"/></function><function name="dojo.data.old.provider.FlatFile._newAttribute" prototype="dojo.data.old.provider.FlatFile"><returns type="dojo.data.old.Attribute"/><parameters><parameter name="attributeId" type="String"/></parameters></function><function name="dojo.data.old.provider.Base._getResultSets" prototype="dojo.data.old.provider.Base"><returns type="Array"/></function></resource><resource location="dojo.data.old.provider.JotSpot"><requires><environment type="common"><require>dojo.data.old.provider.Base</require></environment></requires><function name="dojo.data.old.provider.JotSpot"><chains><chain type="prototype">dojo.data.old.provider.Base</chain></chains></function></resource><resource location="dojo.data.old.provider.MySql"><requires><environment type="common"><require>dojo.data.old.provider.Base</require></environment></requires><function name="dojo.data.old.provider.MySql"><chains><chain type="prototype">dojo.data.old.provider.Base</chain></chains></function></resource><resource location="dojo.date.common"><function name="dojo.date.setDayOfYear"><returns type="Date"/><summary>sets dateObject according to day of the year (1..366)</summary><parameters><parameter name="dateObject" type="Date"/><parameter name="dayOfYear" type="Number"/></parameters></function><function name="dojo.date.getDayOfYear"><summary>gets the day of the year as represented by dateObject</summary><parameters><parameter name="dateObject" type="Date"/></parameters></function><function name="dojo.date.setWeekOfYear"><parameters><parameter name="dateObject" type="Date"/><parameter name="week" type="Number"/><parameter name="firstDay" type="Number"/></parameters></function><function name="dojo.date.getWeekOfYear"><parameters><parameter name="dateObject" type="Date"/><parameter name="firstDay" type="Number"/></parameters></function><function name="dojo.date.setIsoWeekOfYear"><summary>unimplemented</summary><parameters><parameter name="dateObject" type="Date"/><parameter name="week" type="Number"/><parameter name="firstDay" type="Number"/></parameters></function><function name="dojo.date.getIsoWeekOfYear"><summary>unimplemented</summary><parameters><parameter name="dateObject" type="Date"/><parameter name="firstDay" type="Number"/></parameters></function><function name="dojo.date.getDaysInMonth"><returns type="Number"/><summary>returns the number of days in the month used by dateObject</summary><parameters><parameter name="dateObject" type="Date"/></parameters></function><function name="dojo.date.isLeapYear"><returns type="Boolean"/><summary>Determines if the year of the dateObject is a leap year</summary><parameters><parameter name="dateObject" type="Date"/></parameters><description>Leap years are years with an additional day YYYY-02-29, where the year number is a multiple of four with the following exception: If a year is a multiple of 100, then it is only a leap year if it is also a multiple of 400. For example, 1900 was not a leap year, but 2000 is one.</description></function><function name="dojo.date.getTimezoneName"><returns type="mixed"/><summary>Get the user's time zone as provided by the browser</summary><parameters><parameter name="dateObject" type="needed">because the timezone may vary with time (daylight savings)</parameter></parameters><description>Try to get time zone info from toString or toLocaleString method of the Date object -- UTC offset is not a time zone. See http: // www.twinsun.com/tz/tz-link.htm Note: results may be inconsistent across browsers.</description></function><function name="dojo.date.getOrdinal"><returns type="String"/><summary>returns the appropriate suffix (English only) for the day of the month, e.g. 'st' for 1, 'nd' for 2, etc.)</summary><parameters><parameter name="dateObject"/></parameters></function><function name="dojo.date.compare"><returns type="int"/><summary>Compare two date objects by date, time, or both. Returns 0 if equal, positive if a &gt; b, else negative.</summary><parameters><parameter name="dateA" type="Date"/><parameter name="dateB" type="Date"/><parameter name="options" type="dojo.date.compareTypes"/></parameters></function><function name="dojo.date.add"><returns type="Date"/><summary>Add to a Date in intervals of different size, from milliseconds to years</summary><parameters><parameter name="dt" type="A">Javascript Date object to start with</parameter><parameter name="interv" type="A">constant representing the interval, e.g. YEAR, MONTH, DAY. See dojo.date.dateParts.</parameter><parameter name="incr" type="How">much to add to the date</parameter></parameters></function><function name="dojo.date.diff"><returns type="mixed"/><summary>Get the difference in a specific unit of time (e.g., number of months, weeks, days, etc.) between two dates.</summary><parameters><parameter name="dtA" type="A">Javascript Date object</parameter><parameter name="dtB" type="A">Javascript Date object</parameter><parameter name="interv" type="A">constant representing the interval, e.g. YEAR, MONTH, DAY. See dojo.date.dateParts.</parameter></parameters></function><object name="dojo.date.compareTypes"><summary>bitmask for comparison operations.</summary><variables><variable name="DATE"/><variable name="TIME"/></variables></object><object name="dojo.date.dateParts"><summary>constants for use in dojo.date.add</summary><variables><variable name="YEAR"/><variable name="MONTH"/><variable name="DAY"/><variable name="HOUR"/><variable name="MINUTE"/><variable name="SECOND"/><variable name="MILLISECOND"/><variable name="QUARTER"/><variable name="WEEK"/><variable name="WEEKDAY"/></variables></object></resource><resource location="dojo.date.format"><requires><environment type="common"><require>dojo.date.common</require><require>dojo.date.supplemental</require><require>dojo.lang.array</require><require>dojo.lang.common</require><require>dojo.lang.func</require><require>dojo.string.common</require><require>dojo.i18n.common</require></environment></requires><function name="dojo.date.format"><returns type="String"/><summary>Format a Date object as a String, using locale-specific settings.</summary><parameters><parameter name="dateObject" type="the">date and/or time to be formatted. If a time only is formatted, the values in the year, month, and day fields are irrelevant. The opposite is true when formatting only dates.</parameter><parameter name="options" type="object">{selector: string, formatLength: string, datePattern: string, timePattern: string, locale: string} selector- choice of timeOnly,dateOnly (default: date and time) formatLength- choice of long, short, medium or full (plus any custom additions). Defaults to 'full' datePattern,timePattern- override pattern with this string am,pm- override strings for am/pm in times locale- override the locale used to determine formatting rules</parameter></parameters><description>Create a string from a Date object using a known localized pattern. By default, this method formats both date and time from dateObject. Formatting patterns are chosen appropriate to the locale. Different formatting lengths may be chosen, with "full" used by default. Custom patterns may be used or registered with translations using the addCustomBundle method. Formatting patterns are implemented using the syntax described at http: // www.unicode.org/reports/tr35/tr35-4.html#Date_Format_Patterns</description></function><function name="dojo.date.parse"><returns type="Date"/><summary>Convert a properly formatted string to a primitive Date object, using locale-specific settings.</summary><parameters><parameter name="value" type="A">string representation of a date</parameter><parameter name="options" type="object">{selector: string, formatLength: string, datePattern: string, timePattern: string, locale: string, strict: boolean} selector- choice of timeOnly, dateOnly, dateTime (default: dateOnly) formatLength- choice of long, short, medium or full (plus any custom additions). Defaults to 'full' datePattern,timePattern- override pattern with this string am,pm- override strings for am/pm in times locale- override the locale used to determine formatting rules strict- strict parsing, off by default</parameter></parameters><description>Create a Date object from a string using a known localized pattern. By default, this method parses looking for both date and time in the string. Formatting patterns are chosen appropriate to the locale. Different formatting lengths may be chosen, with "full" used by default. Custom patterns may be used or registered with translations using the addCustomBundle method. Formatting patterns are implemented using the syntax described at http: // www.unicode.org/reports/tr35/#Date_Format_Patterns</description></function><function name="_processPattern"><parameters><parameter name="pattern"/><parameter name="applyPattern"/><parameter name="applyLiteral"/><parameter name="applyAll"/></parameters></function><function name="_buildDateTimeRE"><parameters><parameter name="groups"/><parameter name="info"/><parameter name="options"/><parameter name="pattern"/></parameters></function><function name="dojo.date.strftime"><returns type="String"/><summary>Formats the date object using the specifications of the POSIX strftime function</summary><parameters><parameter name="dateObject" type="Date"/><parameter name="format" type="String"/><parameter name="locale" optional="true" type="String"/></parameters><description>see &lt;http: // www.opengroup.org/onlinepubs/007908799/xsh/strftime.html&gt;</description></function><function name="dojo.date.addCustomFormats"><summary>Add a reference to a bundle containing localized custom formats to be used by date/time formatting and parsing routines.</summary><parameters><parameter name="packageName" type="String"/><parameter name="bundleName" type="String"/></parameters><description>The user may add custom localized formats where the bundle has properties following the same naming convention used by dojo for the CLDR data: dateFormat-xxxx / timeFormat-xxxx The pattern string should match the format used by the CLDR. See dojo.date.format for details. The resources must be loaded by dojo.requireLocalization() prior to use</description></function><function name="dojo.date._getGregorianBundle"><returns type="Object"/><parameters><parameter name="locale" type="String"/></parameters></function><function name="dojo.date.getNames"><returns type="Array"/><summary>Used to get localized strings for day or month names.</summary><parameters><parameter name="item" type="months">|| 'days'</parameter><parameter name="type" type="wide">|| 'narrow' || 'abbr' (e.g. "Monday", "Mon", or "M" respectively, in English)</parameter><parameter name="use" type="standAlone">|| 'format' (default)</parameter><parameter name="locale" type="override">locale used to find the names</parameter></parameters></function><function name="dojo.date.getDayName"><returns type="String"/><summary>gets the full localized day of the week corresponding to the date object</summary><parameters><parameter name="dateObject" type="Date"/><parameter name="locale" optional="true" type="String"/></parameters></function><function name="dojo.date.getDayShortName"><returns type="String"/><summary>gets the abbreviated localized day of the week corresponding to the date object</summary><parameters><parameter name="dateObject" type="Date"/><parameter name="locale" optional="true" type="String"/></parameters></function><function name="dojo.date.getMonthName"><returns type="String"/><summary>gets the full localized month name corresponding to the date object</summary><parameters><parameter name="dateObject" type="Date"/><parameter name="locale" optional="true" type="String"/></parameters></function><function name="dojo.date.getMonthShortName"><returns type="String"/><summary>gets the abbreviated localized month name corresponding to the date object</summary><parameters><parameter name="dateObject" type="Date"/><parameter name="locale" optional="true" type="String"/></parameters></function><function name="dojo.date.toRelativeString"><returns type="String"/><summary>Returns an description in English of the date relative to the current date. Note: this is not localized yet. English only.</summary><parameters><parameter name="dateObject" type="Date"/></parameters><description>Example returns: - "1 minute ago" - "4 minutes ago" - "Yesterday" - "2 days ago"</description></function><function name="dojo.date.toSql"><returns type="String"/><summary>Convert a Date to a SQL string</summary><parameters><parameter name="dateObject" type="Date"/><parameter name="noTime" type="whether">to ignore the time portion of the Date. Defaults to false.</parameter></parameters></function><function name="dojo.date.fromSql"><returns type="Date"/><summary>Convert a SQL date string to a JavaScript Date object</summary><parameters><parameter name="sqlDate" type="String"/></parameters></function></resource><resource location="dojo.date.serialize"><requires><environment type="common"><require>dojo.string.common</require></environment></requires><function name="dojo.date.setIso8601"><returns type="Date or null"/><summary>sets a Date object based on an ISO 8601 formatted string (uses date and time)</summary><parameters><parameter name="dateObject" type="Date"/><parameter name="formattedString" type="String"/></parameters></function><function name="dojo.date.fromIso8601"><summary>returns a Date object based on an ISO 8601 formatted string (uses date and time)</summary><parameters><parameter name="formattedString" type="String"/></parameters></function><function name="dojo.date.setIso8601Date"><returns type="mixed"/><summary>sets a Date object based on an ISO 8601 formatted string (date only)</summary><parameters><parameter name="dateObject" type="String"/><parameter name="formattedString" type="String"/></parameters></function><function name="dojo.date.fromIso8601Date"><summary>returns a Date object based on an ISO 8601 formatted string (date only)</summary><parameters><parameter name="formattedString" type="String"/></parameters></function><function name="dojo.date.setIso8601Time"><returns type="mixed"/><summary>sets a Date object based on an ISO 8601 formatted string (time only)</summary><parameters><parameter name="dateObject" type="Date"/><parameter name="formattedString" type="String"/></parameters></function><function name="dojo.date.fromIso8601Time"><summary>returns a Date object based on an ISO 8601 formatted string (date only)</summary><parameters><parameter name="formattedString" type="String"/></parameters></function><function name="dojo.date.toRfc3339"><returns type="String"/><summary>Format a JavaScript Date object as a string according to RFC 3339</summary><parameters><parameter name="dateObject" type="A">JavaScript date, or the current date and time, by default</parameter><parameter name="selector" type="dateOnly">or "timeOnly" to format selected portions of the Date object. Date and time will be formatted by default.</parameter></parameters></function><function name="dojo.date.fromRfc3339"><returns type="Date or null"/><summary>Create a JavaScript Date object from a string formatted according to RFC 3339</summary><parameters><parameter name="rfcDate" type="A">string such as 2005-06-30T08:05:00-07:00 "any" is also supported in place of a time.</parameter></parameters></function></resource><resource location="dojo.date.supplemental"><function name="dojo.date.getFirstDayOfWeek"><returns type="Number"/><summary>Returns a zero-based index for first day of the week</summary><parameters><parameter name="locale" optional="true" type="String"/></parameters><description>Returns a zero-based index for first day of the week, as used by the local (Gregorian) calendar. e.g. Sunday (returns 0), or Monday (returns 1)</description></function><function name="dojo.date.getWeekend"><returns type="Object {start,end}"/><summary>Returns a hash containing the start and end days of the weekend</summary><parameters><parameter name="locale" optional="true" type="String"/></parameters><description>Returns a hash containing the start and end days of the weekend according to local custom using locale, or by default in the user's locale. e.g. {start:6, end:0}</description></function><function name="dojo.date.isWeekend"><returns type="Boolean"/><summary>Determines if the date falls on a weekend, according to local custom.</summary><parameters><parameter name="dateObj" optional="true" type="Date"/><parameter name="locale" optional="true" type="String"/></parameters></function></resource><resource location="dojo.debug.Firebug"><function name="consoleLog"><chains><chain type="call">console.log</chain></chains></function><function name="dojo.debugShallow"><parameters><parameter name="obj"/></parameters></function></resource><resource location="dojo.debug.console"><requires><environment type="common"><require>dojo.logging.ConsoleLogger</require></environment></requires><function name="dojo.hostenv.println"/><function name="dojo.debugShallow"><summary>Write first-level properties of obj to the console.</summary><parameters><parameter name="obj" type="Object">or Array to debug</parameter><parameter name="showMethods" type="Pass">false to skip outputing methods of object, any other value will output them.</parameter><parameter name="sort" type="Pass">false to skip sorting properties, any other value will sort.</parameter></parameters></function></resource><resource location="dojo.debug"><function name="dojo.debug"><summary>Produce a line of debug output. Does nothing unless djConfig.isDebug is true. Accepts any nubmer of args, joined with ' ' to produce a single line of debugging output. Caller should not supply a trailing "\n".</summary></function><function name="dojo.debugShallow"><summary>outputs a "name: value" style listing of all enumerable properties in obj. Does nothing if djConfig.isDebug == false.</summary><parameters><parameter name="obj" type="the">object to be enumerated</parameter></parameters></function><function name="dojo.debugDeep"><summary>provides an "object explorer" view of the passed obj in a popup window.</summary><parameters><parameter name="obj" type="the">object to be examined</parameter></parameters></function></resource><resource location="dojo.dnd.DragAndDrop"><requires><environment type="common"><require>dojo.lang.common</require><require>dojo.lang.func</require><require>dojo.lang.declare</require></environment></requires><function name="dojo.dnd.DragEvent"><variables><variable scope="instance" name="dragSource"/><variable scope="instance" name="dragObject"/><variable scope="instance" name="target"/><variable scope="instance" name="eventStatus"/></variables></function></resource><resource location="dojo.dnd.HtmlDragAndDrop"><requires><environment type="common"><require>dojo.dnd.HtmlDragManager</require><require>dojo.dnd.DragAndDrop</require><require>dojo.html.*</require><require>dojo.html.display</require><require>dojo.html.util</require><require>dojo.html.selection</require><require>dojo.html.iframe</require><require>dojo.lang.extras</require><require>dojo.lfx.*</require><require>dojo.event.*</require></environment></requires><function name="dojo.dnd.HtmlDragSource"><chains><chain type="call">dojo.dnd.DragSource</chain><chain type="prototype">dojo.dnd.DragSource</chain></chains></function><function name="dojo.dnd.HtmlDragObject"><chains><chain type="call">dojo.dnd.DragObject</chain><chain type="prototype">dojo.dnd.DragObject</chain></chains></function><function name="dojo.dnd.HtmlDropTarget"><chains><chain type="call">dojo.dnd.DropTarget</chain><chain type="prototype">dojo.dnd.DropTarget</chain></chains></function></resource><resource location="dojo.dnd.HtmlDragCopy"><requires><environment type="common"><require>dojo.dnd.*</require></environment></requires><function name="dojo.dnd.HtmlDragCopySource"><parameters><parameter name="node"/><parameter name="type"/><parameter name="copyOnce"/></parameters><chains><chain type="call">dojo.dnd.HtmlDragSource</chain><chain type="prototype">dojo.dnd.HtmlDragSource</chain></chains><variables><variable scope="instance" name="copyOnce"/><variable scope="instance" name="makeCopy"/></variables></function><function name="dojo.dnd.HtmlDragCopySource.onDragStart" prototype="dojo.dnd.HtmlDragCopySource"/><function name="dojo.dnd.HtmlDragCopySource.onSelected" prototype="dojo.dnd.HtmlDragCopySource"/><function name="dojo.dnd.HtmlDragCopyObject"><parameters><parameter name="dragObject"/><parameter name="type"/><parameter name="source"/></parameters><chains><chain type="call">dojo.dnd.HtmlDragObject</chain><chain type="prototype">dojo.dnd.HtmlDragObject</chain></chains><variables><variable scope="instance" name="sourceNode"/><variable scope="instance" name="domNode"/><variable scope="instance" name="copySource.dragObject"/><variable scope="instance" name="copySource.makeCopy"/><variable scope="instance" name="copySource"/></variables></function><function name="dojo.dnd.HtmlDragCopyObject.onDragStart" prototype="dojo.dnd.HtmlDragCopyObject"><parameters><parameter name="e"/></parameters><chains><chain type="call">dojo.dnd.HtmlDragCopyObject.superclass.onDragStart</chain></chains></function><function name="dojo.dnd.HtmlDragCopyObject.onDragEnd" prototype="dojo.dnd.HtmlDragCopyObject"><parameters><parameter name="e"/></parameters><chains><chain type="call">dojo.dnd.HtmlDragCopyObject.superclass.onDragEnd</chain></chains></function></resource><resource location="dojo.dnd.HtmlDragManager"><requires><environment type="common"><require>dojo.dnd.DragAndDrop</require><require>dojo.event.*</require><require>dojo.lang.array</require><require>dojo.html.common</require><require>dojo.html.layout</require></environment></requires><function name="dojo.dnd.HtmlDragManager"><chains><chain type="call">dojo.dnd.DragManager</chain><chain type="prototype">dojo.dnd.DragManager</chain></chains></function></resource><resource location="dojo.dnd.HtmlDragMove"><requires><environment type="common"><require>dojo.dnd.*</require></environment></requires><function name="dojo.dnd.HtmlDragMoveSource"><chains><chain type="call">dojo.dnd.HtmlDragSource</chain><chain type="prototype">dojo.dnd.HtmlDragSource</chain></chains></function><function name="dojo.dnd.HtmlDragMoveObject"><chains><chain type="call">dojo.dnd.HtmlDragObject</chain><chain type="prototype">dojo.dnd.HtmlDragObject</chain></chains></function></resource><resource location="dojo.dnd.Sortable"><requires><environment type="common"><require>dojo.dnd.*</require></environment></requires><function name="dojo.dnd.Sortable"/><function name="dojo.dnd.Sortable.ondragstart" prototype="dojo.dnd.Sortable"><parameters><parameter name="e"/></parameters></function></resource><resource location="dojo.dnd.TreeDragAndDrop"><requires><environment type="common"><require>dojo.dnd.HtmlDragAndDrop</require><require>dojo.lang.func</require><require>dojo.lang.array</require><require>dojo.lang.extras</require><require>dojo.html.layout</require></environment></requires><function name="dojo.dnd.TreeDragSource"><parameters><parameter name="node"/><parameter name="syncController"/><parameter name="type"/><parameter name="treeNode"/></parameters><chains><chain type="call">dojo.dnd.HtmlDragSource</chain><chain type="prototype">dojo.dnd.HtmlDragSource</chain></chains><variables><variable scope="instance" name="controller"/><variable scope="instance" name="treeNode"/><variable scope="instance" name="savedSelectedNode"/></variables></function><function name="dojo.dnd.TreeDropTarget"><parameters><parameter name="domNode"/><parameter name="controller"/><parameter name="type"/><parameter name="treeNode"/></parameters><chains><chain type="call">dojo.dnd.HtmlDropTarget</chain><chain type="prototype">dojo.dnd.HtmlDropTarget</chain></chains><variables><variable scope="instance" name="treeNode"/><variable scope="instance" name="controller"/><variable scope="instance" name="position"/><variable scope="instance" name="treeNode.labelNode.style.borderTop"/><variable scope="instance" name="treeNode.labelNode.style.borderBottom"/><variable scope="instance" name="autoExpandTimer"/><variable scope="instance" name="treeNode.parent"/><variable scope="prototype" name="autoExpandDelay"/><variable scope="prototype" name="autoExpandTimer"/><variable scope="prototype" name="position"/><variable scope="prototype" name="indicatorStyle"/></variables></function><function name="dojo.dnd.TreeDNDController"><parameters><parameter name="treeController"/></parameters><variables><variable scope="instance" name="treeController"/><variable scope="instance" name="dragSources"/><variable scope="instance" name="dropTargets"/></variables></function><function name="dojo.dnd.TreeDragSource.onDragStart" prototype="dojo.dnd.TreeDragSource"><chains><chain type="call">dojo.dnd.HtmlDragSource.prototype.onDragStart</chain><chain type="call">dojo.dnd.HtmlDragObject.prototype.onDragStart</chain><chain type="call">dojo.dnd.HtmlDragObject.prototype.onDragEnd</chain></chains></function><function name="dojo.dnd.TreeDragSource.onDragEnd" prototype="dojo.dnd.TreeDragSource"><parameters><parameter name="e"/></parameters><chains><chain type="call">dojo.dnd.HtmlDragSource.prototype.onDragEnd</chain></chains></function><function name="dojo.dnd.TreeDropTarget.showIndicator" prototype="dojo.dnd.TreeDropTarget"><parameters><parameter name="position"/></parameters></function><function name="dojo.dnd.TreeDropTarget.hideIndicator" prototype="dojo.dnd.TreeDropTarget"/><function name="dojo.dnd.TreeDropTarget.onDragOver" prototype="dojo.dnd.TreeDropTarget"><parameters><parameter name="e"/></parameters><chains><chain type="call">dojo.dnd.HtmlDropTarget.prototype.onDragOver</chain></chains></function><function name="dojo.dnd.TreeDropTarget.accepts" prototype="dojo.dnd.TreeDropTarget"><parameters><parameter name="dragObjects"/></parameters><chains><chain type="call">dojo.dnd.HtmlDropTarget.prototype.accepts</chain></chains></function><function name="dojo.dnd.TreeDropTarget.setAutoExpandTimer" prototype="dojo.dnd.TreeDropTarget"/><function name="dojo.dnd.TreeDropTarget.getDNDMode" prototype="dojo.dnd.TreeDropTarget"/><function name="dojo.dnd.TreeDropTarget.getAcceptPosition" prototype="dojo.dnd.TreeDropTarget"><parameters><parameter name="e"/><parameter name="sourceTreeNode"/></parameters></function><function name="dojo.dnd.TreeDropTarget.onDragOut" prototype="dojo.dnd.TreeDropTarget"><parameters><parameter name="e"/></parameters></function><function name="dojo.dnd.TreeDropTarget.clearAutoExpandTimer" prototype="dojo.dnd.TreeDropTarget"/><function name="dojo.dnd.TreeDropTarget.onDragMove" prototype="dojo.dnd.TreeDropTarget"><parameters><parameter name="e"/><parameter name="dragObjects"/></parameters></function><function name="dojo.dnd.TreeDropTarget.isAdjacentNode" prototype="dojo.dnd.TreeDropTarget"><parameters><parameter name="sourceNode"/><parameter name="position"/></parameters></function><function name="dojo.dnd.TreeDropTarget.getPosition" prototype="dojo.dnd.TreeDropTarget"><parameters><parameter name="e"/><parameter name="DNDMode"/></parameters></function><function name="dojo.dnd.TreeDropTarget.getTargetParentIndex" prototype="dojo.dnd.TreeDropTarget"><parameters><parameter name="sourceTreeNode"/><parameter name="position"/></parameters></function><function name="dojo.dnd.TreeDropTarget.onDrop" prototype="dojo.dnd.TreeDropTarget"><parameters><parameter name="e"/></parameters></function><function name="dojo.dnd.TreeDNDController.listenTree" prototype="dojo.dnd.TreeDNDController"><parameters><parameter name="tree"/></parameters></function><function name="dojo.dnd.TreeDNDController.unlistenTree" prototype="dojo.dnd.TreeDNDController"><parameters><parameter name="tree"/></parameters></function><function name="dojo.dnd.TreeDNDController.onTreeDestroy" prototype="dojo.dnd.TreeDNDController"><parameters><parameter name="message"/></parameters></function><function name="dojo.dnd.TreeDNDController.onCreateDOMNode" prototype="dojo.dnd.TreeDNDController"><parameters><parameter name="message"/></parameters></function><function name="dojo.dnd.TreeDNDController.onAddChild" prototype="dojo.dnd.TreeDNDController"><parameters><parameter name="message"/></parameters></function><function name="dojo.dnd.TreeDNDController.onMoveFrom" prototype="dojo.dnd.TreeDNDController"><parameters><parameter name="message"/></parameters></function><function name="dojo.dnd.TreeDNDController.onMoveTo" prototype="dojo.dnd.TreeDNDController"><parameters><parameter name="message"/></parameters></function><function name="dojo.dnd.TreeDNDController.registerDNDNode" prototype="dojo.dnd.TreeDNDController"><parameters><parameter name="node"/></parameters></function><function name="dojo.dnd.TreeDNDController.unregisterDNDNode" prototype="dojo.dnd.TreeDNDController"><parameters><parameter name="node"/></parameters></function></resource><resource location="dojo.dnd.TreeDragAndDropV3"><requires><environment type="common"><require>dojo.dnd.HtmlDragAndDrop</require><require>dojo.lang.func</require><require>dojo.lang.array</require><require>dojo.lang.extras</require><require>dojo.Deferred</require><require>dojo.html.layout</require></environment></requires><function name="dojo.dnd.TreeDragSourceV3"><parameters><parameter name="node"/><parameter name="syncController"/><parameter name="type"/><parameter name="treeNode"/></parameters><chains><chain type="call">dojo.dnd.HtmlDragSource</chain><chain type="prototype">dojo.dnd.HtmlDragSource</chain></chains><variables><variable scope="instance" name="controller"/><variable scope="instance" name="treeNode"/></variables></function><function name="dojo.dnd.TreeDropTargetV3"><parameters><parameter name="domNode"/><parameter name="controller"/><parameter name="type"/><parameter name="treeNode"/></parameters><chains><chain type="call">dojo.dnd.HtmlDropTarget</chain><chain type="prototype">dojo.dnd.HtmlDropTarget</chain></chains><variables><variable scope="instance" name="treeNode"/><variable scope="instance" name="controller"/><variable scope="instance" name="position"/><variable scope="instance" name="treeNode.contentNode.style.borderBottom"/><variable scope="instance" name="treeNode.contentNode.style.borderTop"/><variable scope="instance" name="treeNode.contentNode.style.border"/><variable scope="instance" name="treeNode.contentNode.style.width"/><variable scope="instance" name="autoExpandTimer"/><variable scope="instance" name="cachedNodeY"/><variable scope="instance" name="cachedNodeHeight"/><variable scope="instance" name="treeNode.parent"/><variable scope="prototype" name="autoExpandDelay"/><variable scope="prototype" name="autoExpandTimer"/><variable scope="prototype" name="position"/><variable scope="prototype" name="indicatorStyle"/></variables></function><function name="dojo.dnd.TreeDropTargetV3.showIndicator" prototype="dojo.dnd.TreeDropTargetV3"><parameters><parameter name="position"/></parameters></function><function name="dojo.dnd.TreeDropTargetV3.hideIndicator" prototype="dojo.dnd.TreeDropTargetV3"/><function name="dojo.dnd.TreeDropTargetV3.onDragOver" prototype="dojo.dnd.TreeDropTargetV3"><parameters><parameter name="e"/></parameters><chains><chain type="call">dojo.dnd.HtmlDropTarget.prototype.onDragOver</chain></chains></function><function name="dojo.dnd.TreeDropTargetV3.accepts" prototype="dojo.dnd.TreeDropTargetV3"><parameters><parameter name="dragObjects"/></parameters><chains><chain type="call">dojo.dnd.HtmlDropTarget.prototype.accepts</chain></chains></function><function name="dojo.dnd.TreeDropTargetV3.setAutoExpandTimer" prototype="dojo.dnd.TreeDropTargetV3"/><function name="dojo.dnd.TreeDropTargetV3.getAcceptPosition" prototype="dojo.dnd.TreeDropTargetV3"><parameters><parameter name="e"/><parameter name="dragObjects"/></parameters></function><function name="dojo.dnd.TreeDropTargetV3.onDropEnd" prototype="dojo.dnd.TreeDropTargetV3"><parameters><parameter name="e"/></parameters></function><function name="dojo.dnd.TreeDropTargetV3.onDragOut" prototype="dojo.dnd.TreeDropTargetV3"><parameters><parameter name="e"/></parameters></function><function name="dojo.dnd.TreeDropTargetV3.clearAutoExpandTimer" prototype="dojo.dnd.TreeDropTargetV3"/><function name="dojo.dnd.TreeDropTargetV3.onDragMove" prototype="dojo.dnd.TreeDropTargetV3"><parameters><parameter name="e"/><parameter name="dragObjects"/></parameters></function><function name="dojo.dnd.TreeDropTargetV3.isAdjacentNode" prototype="dojo.dnd.TreeDropTargetV3"><parameters><parameter name="sourceNode"/><parameter name="position"/></parameters></function><function name="dojo.dnd.TreeDropTargetV3.cacheNodeCoords" prototype="dojo.dnd.TreeDropTargetV3"/><function name="dojo.dnd.TreeDropTargetV3.getPosition" prototype="dojo.dnd.TreeDropTargetV3"><parameters><parameter name="e"/><parameter name="DndMode"/></parameters></function><function name="dojo.dnd.TreeDropTargetV3.getTargetParentIndex" prototype="dojo.dnd.TreeDropTargetV3"><parameters><parameter name="source"/><parameter name="position"/></parameters></function><function name="dojo.dnd.TreeDropTargetV3.onDrop" prototype="dojo.dnd.TreeDropTargetV3"><parameters><parameter name="e"/></parameters></function><function name="dojo.dnd.TreeDropTargetV3.getDropHandler" prototype="dojo.dnd.TreeDropTargetV3"><parameters><parameter name="e"/><parameter name="source"/><parameter name="targetParent"/><parameter name="targetIndex"/></parameters></function><function name="dojo.dnd.TreeDropTargetV3.handleDropError" prototype="dojo.dnd.TreeDropTargetV3"><parameters><parameter name="source"/><parameter name="parent"/><parameter name="index"/><parameter name="result"/></parameters></function></resource><resource location="dojo.dnd._"><requires><environment type="common"><require>dojo.dnd.DragAndDrop</require></environment></requires><requires><environment type="browser"><require>dojo.dnd.HtmlDragAndDrop</require></environment></requires><requires><environment type="dashboard"><require>dojo.dnd.HtmlDragAndDrop</require></environment></requires></resource><resource location="dojo.docs"><requires><environment type="common"><require>dojo.io.*</require><require>dojo.event.topic</require><require>dojo.rpc.JotService</require><require>dojo.dom</require><require>dojo.uri.Uri</require><require>dojo.Deferred</require><require>dojo.DeferredList</require></environment></requires><function name="dojo.docs" initialized="true"><variables><variable name="_count"/><variable name="_callbacks"/><variable name="_cache"/><variable scope="instance" name="_url"/><variable scope="instance" name="_rpc"/><variable scope="instance" name="_rpc.serviceUrl"/></variables></function><function name="dojo.docs.require"><parameters><parameter name="require" type="String"/><parameter name="sync" type="bool"/></parameters></function><function name="dojo.docs.getFunctionNames"><returns type="dojo.Deferred"/></function><function name="dojo.docs.unFormat"><parameters><parameter name="string" type="String"/></parameters></function><function name="dojo.docs.getMeta"><summary>Gets information about a function in regards to its meta data</summary><parameters><parameter name="pkg" type="String"/><parameter name="name" type="String"/><parameter name="callback" type="Function"/><parameter name="id" optional="true" type="String"/></parameters></function><function name="dojo.docs._withPkg"><parameters><parameter name="type" type="String"/><parameter name="data" type="Object"/><parameter name="evt" type="Object"/><parameter name="input" type="Object"/><parameter name="newType" type="String"/></parameters></function><function name="dojo.docs._gotMeta"><parameters><parameter name="type" type="String"/><parameter name="data" type="Object"/><parameter name="evt" type="Object"/></parameters></function><function name="dojo.docs.getSrc"><summary>Gets src file (created by the doc parser)</summary><parameters><parameter name="name" type="String"/><parameter name="callback" type="Function"/><parameter name="id" optional="true" type="String"/></parameters></function><function name="dojo.docs.getDoc"><summary>Gets external documentation stored on Jot for a given function</summary><parameters><parameter name="name" type="String"/><parameter name="callback" type="Function"/><parameter name="id" optional="true" type="String"/></parameters></function><function name="dojo.docs._gotDoc"><parameters><parameter name="type" type="String"/><parameter name="data" type="Array"/><parameter name="evt" type="Object"/><parameter name="input" type="Object"/></parameters></function><function name="dojo.docs.getPkgDoc"><summary>Gets external documentation stored on Jot for a given package</summary><parameters><parameter name="name" type="String"/><parameter name="callback" type="Function"/></parameters></function><function name="dojo.docs.getPkgInfo"><summary>Gets a combination of the metadata and external documentation for a given package</summary><parameters><parameter name="name" type="String"/><parameter name="callback" type="Function"/></parameters></function><function name="dojo.docs._getPkgInfo"><parameters><parameter name="type" type="String"/><parameter name="data" type="Object"/><parameter name="evt" type="Object"/></parameters></function><function name="dojo.docs.getInfo"><parameters><parameter name="name" type="String"/><parameter name="callback" type="Function"/></parameters></function><function name="dojo.docs._getInfo"><parameters><parameter name="type" type="String"/><parameter name="data" type="String"/><parameter name="evt" type="Object"/><parameter name="input" type="Object"/></parameters></function><function name="dojo.docs._getMainText"><summary>Grabs the innerHTML from a Jot Rech Text node</summary><parameters><parameter name="text" type="String"/></parameters></function><function name="dojo.docs.getPackageMeta"><parameters><parameter name="input" type="Object"/></parameters></function><function name="dojo.docs.getFunctionMeta"><parameters><parameter name="input" type="Object"/></parameters></function><function name="dojo.docs.getFunctionDocumentation"><parameters><parameter name="input" type="Object"/></parameters></function><function name="dojo.docs._onDocSearch"><parameters><parameter name="input" type="Object"/></parameters></function><function name="dojo.docs._onDocSearchFn"><parameters><parameter name="type" type="String"/><parameter name="data" type="Array"/><parameter name="evt" type="Object"/></parameters></function><function name="dojo.docs._onPkgResults"><parameters><parameter name="type" type="String"/><parameter name="data" type="Object"/><parameter name="evt" type="Object"/><parameter name="input" type="Object"/></parameters></function><function name="dojo.docs._onDocResults"><parameters><parameter name="type" type="String"/><parameter name="data" type="Object"/><parameter name="evt" type="Object"/><parameter name="input" type="Object"/></parameters></function><function name="dojo.docs._printFunctionResults"><parameters><parameter name="results"/></parameters></function><function name="dojo.docs._printPkgResult"><parameters><parameter name="results"/></parameters></function><function name="dojo.docs._onDocSelectFunction"><summary>Get doc, meta, and src</summary><parameters><parameter name="input" type="Object"/></parameters></function><function name="dojo.docs._onDocSelectPackage"><parameters><parameter name="input" type="Object"/></parameters></function><function name="dojo.docs._onDocSelectResults"><parameters><parameter name="type" type="String"/><parameter name="data" type="Object"/><parameter name="evt" type="Object"/><parameter name="input" type="Object"/></parameters></function><function name="dojo.docs._printFunctionDetail"><summary>Call this function to send the /docs/function/detail topic event</summary><parameters><parameter name="results"/></parameters></function><function name="dojo.docs.selectFunction"><summary>The combined information</summary><parameters><parameter name="name" type="String"/><parameter name="id" optional="true" type="String"/></parameters></function><function name="dojo.docs.savePackage"><parameters><parameter name="callbackObject" type="Object"/><parameter name="callback" type="String"/><parameter name="parameters" type="Object"/></parameters></function><function name="dojo.docs._pkgRpc"><parameters><parameter name="data"/></parameters></function><function name="dojo.docs._savedPkgRpc"><parameters><parameter name="type"/></parameters></function><function name="dojo.docs.functionPackages"><summary>Gets the package associated with a function and stores it in the .pkg value of input</summary><parameters><parameter name="name" type="String"/><parameter name="callback" type="Function"/><parameter name="input" type="Object"/></parameters></function><function name="dojo.docs._functionPackages"><parameters><parameter name="type" type="String"/><parameter name="data" type="Array"/><parameter name="evt" type="Object"/></parameters></function><function name="dojo.docs.setUserName"><parameters><parameter name="name" type="String"/></parameters></function><function name="dojo.docs.setPassword"><parameters><parameter name="password" type="String"/></parameters></function><function name="dojo.docs._logIn"/><function name="dojo.docs.logInSuccess"/><function name="dojo.docs.logInFailure"/><function name="dojo.docs._set"><parameters><parameter name="base" type="Object"/><parameter name="keys" type="String..."/><parameter name="value" type="String"/></parameters></function><function name="dojo.docs._getCache"><parameters><parameter name="keys" type="String..."/></parameters></function></resource><resource location="dojo.dom"><function name="dojo.dom.isNode"><returns type="boolean"/><summary>checks to see if wh is actually a node.</summary><parameters><parameter name="wh" type="object"/></parameters></function><function name="dojo.dom.getUniqueId"><returns type="string">a unique string for use with any DOM element</returns></function><function name="dojo.dom.firstElement" is="dojo.dom.getFirstChildElement"/><function name="dojo.dom.getFirstChildElement"><returns type="Element">the first child element matching tagName</returns><parameters><parameter name="parentNode" type="Element"/><parameter name="tagName" optional="true" type="string"/></parameters></function><function name="dojo.dom.lastElement" is="dojo.dom.getLastChildElement"/><function name="dojo.dom.getLastChildElement"><returns type="Element">the last child element matching tagName</returns><parameters><parameter name="parentNode" type="Element"/><parameter name="tagName" optional="true" type="string"/></parameters></function><function name="dojo.dom.nextElement" is="dojo.dom.getNextSiblingElement"/><function name="dojo.dom.getNextSiblingElement"><returns type="Element">the next sibling element matching tagName</returns><parameters><parameter name="node" type="Node"/><parameter name="tagName" optional="true" type="string"/></parameters></function><function name="dojo.dom.prevElement" is="dojo.dom.getPreviousSiblingElement"/><function name="dojo.dom.getPreviousSiblingElement"><returns type="Element">the previous sibling element matching tagName</returns><parameters><parameter name="node" type="Node"/><parameter name="tagName" optional="true" type="string"/></parameters></function><function name="dojo.dom.moveChildren"><returns type="number"/><summary>Moves children from srcNode to destNode and returns the count of children moved; will trim off text nodes if trim == true</summary><parameters><parameter name="srcNode" type="Element"/><parameter name="destNode" type="Element"/><parameter name="trim" optional="true" type="boolean"/></parameters></function><function name="dojo.dom.copyChildren"><returns type="number"/><summary>Copies children from srcNde to destNode and returns the count of children copied; will trim off text nodes if trim == true</summary><parameters><parameter name="srcNode" type="Element"/><parameter name="destNode" type="Element"/><parameter name="trim" optional="true" type="boolean"/></parameters></function><function name="dojo.dom.replaceChildren"><summary>Removes all children of node and appends newChild. All the existing children will be destroyed. FIXME: what if newChild is an array-like object?</summary><parameters><parameter name="node" type="Element"/><parameter name="newChild" type="Node"/></parameters></function><function name="dojo.dom.removeChildren"><returns type="int"/><summary>removes all children from node and returns the count of children removed. The children nodes are not destroyed. Be sure to call destroyNode on them after they are not used anymore.</summary><parameters><parameter name="node" type="Element"/></parameters></function><function name="dojo.dom.replaceNode"><returns type="Node"/><summary>replaces node with newNode and returns a reference to the removed node. To prevent IE memory leak, call destroyNode on the returned node when it is no longer needed.</summary><parameters><parameter name="node" type="Element"/><parameter name="newNode" type="Element"/></parameters></function><function name="dojo.dom.destroyNode"><summary>destroy a node (it can not be used any more). For IE, this is the right function to call to prevent memory leaks. While for other browsers, this is identical to dojo.dom.removeNode</summary><parameters><parameter name="node" type="Node"/></parameters></function><function name="dojo.dom.removeNode"><returns type="Node"/><summary>if node has a parent, removes node from parent and returns a reference to the removed child. To prevent IE memory leak, call destroyNode on the returned node when it is no longer needed.</summary><parameters><parameter name="node" type="the">node to remove from its parent.</parameter></parameters></function><function name="dojo.dom.getAncestors"><returns type="mixed">all ancestors matching optional filterFunction; will return only the first if returnFirstHit</returns><parameters><parameter name="node" type="Node"/><parameter name="filterFunction" optional="true" type="function"/><parameter name="returnFirstHit" optional="true" type="boolean"/></parameters></function><function name="dojo.dom.getAncestorsByTag"><returns type="Node || array">all ancestors matching tag (as tagName), will only return first one if returnFirstHit</returns><parameters><parameter name="node" type="Node"/><parameter name="tag" type="String"/><parameter name="returnFirstHit" optional="true" type="boolean"/></parameters></function><function name="dojo.dom.getFirstAncestorByTag"><returns type="Node"/><summary>Returns first ancestor of node with tag tagName</summary><parameters><parameter name="node" type="Node"/><parameter name="tag" type="string"/></parameters></function><function name="dojo.dom.isDescendantOf"><returns type="boolean"/><summary>Returns boolean if node is a descendant of ancestor</summary><parameters><parameter name="node" type="Node"/><parameter name="ancestor" type="Node"/><parameter name="guaranteeDescendant" type="allows">us to be a "true" isDescendantOf function</parameter></parameters></function><function name="dojo.dom.innerXML"><returns type="string"/><summary>Implementation of MS's innerXML function.</summary><parameters><parameter name="node" type="Node"/></parameters></function><function name="dojo.dom.createDocument"><returns type="DOMDocument"/><summary>cross-browser implementation of creating an XML document object.</summary></function><function name="dojo.dom.createDocumentFromText"><returns type="DOMDocument"/><summary>attempts to create a Document object based on optional mime-type, using str as the contents of the document</summary><parameters><parameter name="str" type="string"/><parameter name="mimetype" optional="true" type="string"/></parameters></function><function name="dojo.dom.prependChild"><returns type="boolean"/><summary>prepends node to parent's children nodes</summary><parameters><parameter name="node" type="Element"/><parameter name="parent" type="Element"/></parameters></function><function name="dojo.dom.insertBefore"><returns type="boolean"/><summary>Try to insert node before ref</summary><parameters><parameter name="node" type="Node"/><parameter name="ref" type="Node"/><parameter name="force" optional="true" type="boolean"/></parameters></function><function name="dojo.dom.insertAfter"><returns type="boolean"/><summary>Try to insert node after ref</summary><parameters><parameter name="node" type="Node"/><parameter name="ref" type="Node"/><parameter name="force" optional="true" type="boolean"/></parameters></function><function name="dojo.dom.insertAtPosition"><returns type="boolean"/><summary>attempt to insert node in relation to ref based on position</summary><parameters><parameter name="node" type="Node"/><parameter name="ref" type="Node"/><parameter name="position" type="string"/></parameters></function><function name="dojo.dom.insertAtIndex"><returns type="boolean"/><summary>insert node into child nodes nodelist of containingNode at</summary><parameters><parameter name="node" type="Node"/><parameter name="containingNode" type="Element"/><parameter name="insertionIndex" type="insertionIndex">should be between 0 and the number of the childNodes in containingNode. insertionIndex specifys after how many childNodes in containingNode the node shall be inserted. If 0 is given, node will be appended to</parameter></parameters></function><function name="dojo.dom.textContent"><returns type="string"/><summary>implementation of the DOM Level 3 attribute; scan node for text</summary><parameters><parameter name="node" type="Node"/><parameter name="text" type="string"/></parameters></function><function name="dojo.dom.hasParent"><returns type="boolean">whether or not node is a child of another node.</returns><parameters><parameter name="node" type="Node"/></parameters></function><function name="dojo.dom.isTag"><returns type="string"/><summary>determines if node has any of the provided tag names and returns the tag name that matches, empty string otherwise.</summary><parameters><parameter name="node" type="Node ..."/></parameters></function><function name="dojo.dom.setAttributeNS"><summary>implementation of DOM2 setAttributeNS that works cross browser.</summary><parameters><parameter name="elem" type="Element"/><parameter name="namespaceURI" type="string"/><parameter name="attrName" type="string"/><parameter name="attrValue" type="string"/></parameters></function><object name="dojo.dom.xmlns"><summary>aliases for various common XML namespaces</summary><variables><variable name="dt"/><variable name="dcq"/></variables></object></resource><resource location="dojo.event._"><requires><environment type="common"><require>dojo.event.common</require><require>dojo.event.topic</require></environment></requires><requires><environment type="browser"><require>dojo.event.browser</require></environment></requires><requires><environment type="dashboard"><require>dojo.event.browser</require></environment></requires></resource><resource location="dojo.event.browser"><requires><environment type="common"><require>dojo.event.common</require></environment></requires><function name="dojo._ie_clobber" initialized="true"><variables><variable scope="instance" name="clobberNodes"/><variable scope="instance" name="clobber"/></variables></function><function name="dojo._ie_clobber.clobber" instance="dojo._ie_clobber"><parameters><parameter name="nodeRef"/></parameters></function><function name="dojo.event.browser" initialized="true"><returns type="mixed"/><chains><chain type="call">listener</chain></chains><variables><variable scope="instance" name="normalizedEventName"/><variable scope="instance" name="clean"/><variable scope="instance" name="addClobberNode"/><variable scope="instance" name="addClobberNodeAttrs"/><variable scope="instance" name="removeListener"/><variable scope="instance" name="addListener"/><variable scope="instance" name="isEvent"/><variable scope="instance" name="currentEvent"/><variable scope="instance" name="callListener"/><variable scope="instance" name="_stopPropagation"/><variable scope="instance" name="_preventDefault"/><variable scope="instance" name="keys"/><variable scope="instance" name="revKeys"/><variable scope="instance" name="fixEvent"/><variable scope="instance" name="stopEvent"/></variables></function><function name="dojo.event.browser.normalizedEventName" instance="dojo.event.browser"><parameters><parameter name="eventName" type="String"/></parameters></function><function name="dojo.event.browser.clean" instance="dojo.event.browser"><summary>removes native event handlers so that destruction of the node will not leak memory. On most browsers this is a no-op, but it's critical for manual node removal on IE.</summary><parameters><parameter name="node" type="A">DOM node. All of it's children will also be cleaned.</parameter></parameters></function><function name="dojo.event.browser.addClobberNode" instance="dojo.event.browser"><summary>register the passed node to support event stripping</summary><parameters><parameter name="node" type="A">DOM node</parameter></parameters></function><function name="dojo.event.browser.addClobberNodeAttrs" instance="dojo.event.browser"><summary>register the passed node to support event stripping</summary><parameters><parameter name="node" type="A">DOM node to stip properties from later</parameter><parameter name="props" type="A">list of propeties to strip from the node</parameter></parameters></function><function name="dojo.event.browser.removeListener" instance="dojo.event.browser"><summary>clobbers the listener from the node</summary><parameters><parameter name="node" type="DOM">node to attach the event to</parameter><parameter name="evtName" type="the">name of the handler to remove the function from</parameter><parameter name="fp" type="the">function to register</parameter><parameter name="capture" type="Optional.">should this listener prevent propigation?</parameter></parameters></function><function name="dojo.event.browser.addListener" instance="dojo.event.browser"><returns type="FIXME: log and/or bail?"/><summary>adds a listener to the node</summary><parameters><parameter name="node" type="DOM">node to attach the event to</parameter><parameter name="evtName" type="the">name of the handler to add the listener to can be either of the form "onclick" or "click"</parameter><parameter name="fp" type="the">function to register</parameter><parameter name="capture" type="Optional.">Should this listener prevent propigation?</parameter><parameter name="dontFix" type="Optional.">Should we avoid registering a new closure around the listener to enable fixEvent for dispatch of the registered function?</parameter></parameters></function><function name="dojo.event.browser.isEvent" instance="dojo.event.browser"><returns type="Boolean"/><summary>Tries to determine whether or not the object is a DOM event.</summary><parameters><parameter name="obj" type="Object"/></parameters></function><function name="dojo.event.browser.callListener" instance="dojo.event.browser"><summary>calls the specified listener in the context of the passed node with the current DOM event object as the only parameter</summary><parameters><parameter name="listener" type="the">function to call</parameter><parameter name="curTarget" type="the">Node to call the function in the scope of</parameter></parameters><chains><chain type="call">listener</chain></chains></function><function name="dojo.event.browser._stopPropagation" instance="dojo.event.browser"/><function name="dojo.event.browser._preventDefault" instance="dojo.event.browser"/><function name="dojo.event.browser.fixEvent" instance="dojo.event.browser"><returns type="Event"/><summary>normalizes properties on the event object including event bubbling methods, keystroke normalization, and x/y positions</summary><parameters><parameter name="evt" type="the">native event object</parameter><parameter name="sender" type="the">node to treat as "currentTarget"</parameter></parameters></function><function name="dojo.event.browser.stopEvent" instance="dojo.event.browser"><summary>prevents propigation and clobbers the default action of the passed event</summary><parameters><parameter name="evt" type="Optional">for IE. The native event object.</parameter></parameters></function></resource><resource location="dojo.event.common"><requires><environment type="common"><require>dojo.lang.array</require><require>dojo.lang.extras</require><require>dojo.lang.func</require></environment></requires><function name="dojo.event" initialized="true"><returns type="mixed"/><chains><chain type="call">dojo.event.connect</chain><chain type="call">this.connect</chain></chains><variables><variable scope="instance" name="_canTimeout"/><variable scope="instance" name="connect"/><variable scope="instance" name="log"/><variable scope="instance" name="connectBefore"/><variable scope="instance" name="connectAround"/><variable scope="instance" name="connectOnce"/><variable scope="instance" name="_kwConnectImpl"/><variable scope="instance" name="kwConnect"/><variable scope="instance" name="disconnect"/><variable scope="instance" name="kwDisconnect"/></variables></function><function name="dojo.event.connect" instance="dojo.event"><returns type="a MethodJoinPoint object"/><summary>dojo.event.connect is the glue that holds most Dojo-based applications together. Most combinations of arguments are supported, with the connect() method attempting to disambiguate the implied types of positional parameters. The following will all work: dojo.event.connect("globalFunctionName1", "globalFunctionName2"); dojo.event.connect(functionReference1, functionReference2); dojo.event.connect("globalFunctionName1", functionReference2); dojo.event.connect(functionReference1, "globalFunctionName2"); dojo.event.connect(scope1, "functionName1", "globalFunctionName2"); dojo.event.connect("globalFunctionName1", scope2, "functionName2"); dojo.event.connect(scope1, "functionName1", scope2, "functionName2"); dojo.event.connect("after", scope1, "functionName1", scope2, "functionName2"); dojo.event.connect("before", scope1, "functionName1", scope2, "functionName2"); dojo.event.connect("around", scope1, "functionName1", scope2, "functionName2", aroundFunctionReference); dojo.event.connect("around", scope1, "functionName1", scope2, "functionName2", scope3, "aroundFunctionName"); dojo.event.connect("before-around", scope1, "functionName1", scope2, "functionName2", aroundFunctionReference); dojo.event.connect("after-around", scope1, "functionName1", scope2, "functionName2", aroundFunctionReference); dojo.event.connect("after-around", scope1, "functionName1", scope2, "functionName2", scope3, "aroundFunctionName"); dojo.event.connect("around", scope1, "functionName1", scope2, "functionName2", scope3, "aroundFunctionName", true, 30); dojo.event.connect("around", scope1, "functionName1", scope2, "functionName2", scope3, "aroundFunctionName", null, null, 10); adviceType: Optional. String. One of "before", "after", "around", "before-around", or "after-around". FIXME srcObj: the scope in which to locate/execute the named srcFunc. Along with srcFunc, this creates a way to dereference the function to call. So if the function in question is "foo.bar", the srcObj/srcFunc pair would be foo and "bar", where "bar" is a string and foo is an object reference. srcFunc: the name of the function to connect to. When it is executed, the listener being registered with this call will be called. The adviceType defines the call order between the source and the target functions. adviceObj: the scope in which to locate/execute the named adviceFunc. adviceFunc: the name of the function being conected to srcObj.srcFunc aroundObj: the scope in which to locate/execute the named aroundFunc. aroundFunc: the name of, or a reference to, the function that will be used to mediate the advice call. Around advice requires a special unary function that will be passed a "MethodInvocation" object. These objects have several important properties, namely: - args a mutable array of arguments to be passed into the wrapped function - proceed a function that "continues" the invocation. The result of this function is the return of the wrapped function. You can then manipulate this return before passing it back out (or take further action based on it). once: boolean that determines whether or not this connect() will create a new connection if an identical connect() has already been made. Defaults to "false". delay: an optional delay (in ms), as an integer, for dispatch of a listener after the source has been fired. rate: an optional rate throttling parameter (integer, in ms). When specified, this particular connection will not fire more than once in the interval specified by the rate adviceMsg: boolean. Should the listener have all the parameters passed in as a single argument?</summary><chains><chain type="call">dojo.event.connect</chain></chains></function><function name="dojo.event.log" instance="dojo.event"><summary>a function that will wrap and log all calls to the specified</summary><parameters><parameter name="a1" type="if">a2 is passed, this should be an object. If not, it can be a function or function name.</parameter><parameter name="a2" type="a">function name</parameter></parameters></function><function name="dojo.event.connectBefore" instance="dojo.event"><returns type="a MethodJoinPoint object"/><summary>takes the same parameters as dojo.event.connect(), except that the advice type will always be "before"</summary><chains><chain type="call">this.connect</chain></chains></function><function name="dojo.event.connectAround" instance="dojo.event"><returns type="a MethodJoinPoint object"/><summary>takes the same parameters as dojo.event.connect(), except that the advice type will always be "around"</summary><chains><chain type="call">this.connect</chain></chains></function><function name="dojo.event.connectOnce" instance="dojo.event"><returns type="a MethodJoinPoint object"/><summary>takes the same parameters as dojo.event.connect(), except that the "once" flag will always be set to "true"</summary></function><function name="dojo.event._kwConnectImpl" instance="dojo.event"><parameters><parameter name="kwArgs"/><parameter name="disconnect"/></parameters></function><function name="dojo.event.kwConnect" instance="dojo.event"><returns type="a MethodJoinPoint object"/><summary>A version of dojo.event.connect() that takes a map of named parameters instead of the positional parameters that dojo.event.connect() uses. For many advanced connection types, this can be a much more readable (and potentially faster) alternative.</summary><parameters><parameter name="kwArgs" type="An">object that can have the following properties: - adviceType - srcObj - srcFunc - adviceObj - adviceFunc - aroundObj - aroundFunc - once - delay - rate - adviceMsg As with connect, only srcFunc and adviceFunc are generally required</parameter></parameters></function><function name="dojo.event.disconnect" instance="dojo.event"><returns type="mixed"/><summary>Takes the same parameters as dojo.event.connect() but destroys an existing connection instead of building a new one. For multiple identical connections, multiple disconnect() calls will unroll one each time it's called.</summary></function><function name="dojo.event.kwDisconnect" instance="dojo.event"><summary>Takes the same parameters as dojo.event.kwConnect() but destroys an existing connection instead of building a new one.</summary><parameters><parameter name="kwArgs"/></parameters></function><function name="dojo.event.MethodInvocation"><summary>a class the models the call into a function. This is used under the covers for all method invocations on both ends of a connect()-wrapped function dispatch. This allows us to "pickle" calls, such as in the case of around advice.</summary><parameters><parameter name="join_point" type="a">dojo.event.MethodJoinPoint object that represents a connection</parameter><parameter name="obj" type="the">scope the call will execute in</parameter><parameter name="args" type="Array"/></parameters><variables><variable scope="instance" name="jp_"/><variable scope="instance" name="object"/><variable scope="instance" name="args" type="an">array of parameters that will get passed to the callee</variable><variable scope="instance" name="around_index"/></variables></function><function name="dojo.event.MethodInvocation.proceed" prototype="dojo.event.MethodInvocation"><summary>proceed with the method call that's represented by this invocation object</summary></function><function name="dojo.event.MethodJoinPoint"><parameters><parameter name="obj" type="Object"/><parameter name="funcName" type="String"/></parameters><variables><variable scope="instance" name="object"/><variable scope="instance" name="methodname"/><variable scope="instance" name="methodfunc"/><variable scope="instance" name="squelch"/><variable scope="instance" name="before"/><variable scope="instance" name="after"/><variable scope="instance" name="around"/><variable scope="prototype" name="disconnect"/></variables></function><function name="dojo.event.MethodJoinPoint.getForMethod"><returns type="dojo.event.MethodJoinPoint"/><summary>"static" class function for returning a MethodJoinPoint from a scoped function. If one doesn't exist, one is created.</summary><parameters><parameter name="obj" type="the">scope to search for the function in</parameter><parameter name="funcName" type="the">name of the function to return a MethodJoinPoint for</parameter></parameters><chains><chain type="call">joinpoint.run</chain></chains></function><function name="dojo.event.MethodJoinPoint.unintercept" prototype="dojo.event.MethodJoinPoint"><summary>destroy the connection to all listeners that may have been registered on this joinpoint</summary></function><function name="dojo.event.MethodJoinPoint.run" prototype="dojo.event.MethodJoinPoint"><summary>execute the connection represented by this join point. The arguments passed to run() will be passed to the function and its listeners.</summary><chains><chain type="call">unrollAdvice</chain></chains></function><function name="dojo.event.MethodJoinPoint.getArr" prototype="dojo.event.MethodJoinPoint"><returns type="Array"/><summary>return a list of listeners of the past "kind"</summary><parameters><parameter name="kind" type="can">be one of: "before", "after", "around", "before-around", or "after-around"</parameter></parameters></function><function name="dojo.event.MethodJoinPoint.kwAddAdvice" prototype="dojo.event.MethodJoinPoint"><summary>adds advice to the joinpoint with arguments in a map</summary><parameters><parameter name="args" type="An">object that can have the following properties: - adviceType - adviceObj - adviceFunc - aroundObj - aroundFunc - once - delay - rate - adviceMsg</parameter></parameters></function><function name="dojo.event.MethodJoinPoint.addAdvice" prototype="dojo.event.MethodJoinPoint"><summary>add advice to this joinpoint using positional parameters</summary><parameters><parameter name="thisAdviceObj" type="the">scope in which to locate/execute the named adviceFunc. thisAdviceFunc: the name of the function being conected</parameter><parameter name="thisAdvice"/><parameter name="thisAroundObj" type="the">scope in which to locate/execute the named aroundFunc. thisAroundFunc: the name of the function that will be used to mediate the advice call.</parameter><parameter name="thisAround"/><parameter name="adviceType" type="Optional.">String. One of "before", "after", "around", "before-around", or "after-around". FIXME</parameter><parameter name="precedence"/><parameter name="once" type="in">the interval specified by the rate adviceMsg: boolean. Should the listener have all the parameters passed in as a single argument?</parameter><parameter name="delay" type="an">optional delay (in ms), as an integer, for dispatch of a listener after the source has been fired.</parameter><parameter name="rate" type="an">optional rate throttling parameter (integer, in ms). When specified, this particular connection will not fire more than</parameter><parameter name="asMessage"/></parameters></function><function name="dojo.event.MethodJoinPoint.hasAdvice" prototype="dojo.event.MethodJoinPoint"><returns type="Integer">the array index of the first existing connection betweened the passed advice and this joinpoint. Will be -1 if none exists.</returns><parameters><parameter name="thisAdviceObj" type="the">scope in which to locate/execute the named adviceFunc. thisAdviceFunc: the name of the function being conected</parameter><parameter name="thisAdvice"/><parameter name="adviceType" type="if">not passed</parameter><parameter name="arr" type="Optional.">The list of advices to search. Will be found via</parameter></parameters></function><function name="dojo.event.MethodJoinPoint.removeAdvice" prototype="dojo.event.MethodJoinPoint"><parameters><parameter name="thisAdviceObj" type="the">scope in which to locate/execute the named adviceFunc. thisAdviceFunc: the name of the function being conected</parameter><parameter name="thisAdvice"/><parameter name="adviceType" type="Optional.">String. One of "before", "after", "around", "before-around", or "after-around". FIXME</parameter><parameter name="once" type="Optional.">Should this only remove the first occurance of the connection?</parameter></parameters></function></resource><resource location="dojo.event.topic"><requires><environment type="common"><require>dojo.event.common</require></environment></requires><function name="dojo.event.topic" initialized="true"><returns type="a dojo.event.topic.TopicImpl object"/><chains><chain type="call">topic.sendMessage</chain></chains><variables><variable scope="instance" name="topics"/><variable scope="instance" name="getTopic"/><variable scope="instance" name="registerPublisher"/><variable scope="instance" name="subscribe"/><variable scope="instance" name="unsubscribe"/><variable scope="instance" name="destroy"/><variable scope="instance" name="publishApply"/><variable scope="instance" name="publish"/></variables></function><function name="dojo.event.topic.getTopic" instance="dojo.event.topic"><returns type="a dojo.event.topic.TopicImpl object">a topic implementation object of type dojo.event.topic.TopicImpl</returns><parameters><parameter name="topic" type="a">unique, opaque string that names the topic</parameter></parameters></function><function name="dojo.event.topic.registerPublisher" instance="dojo.event.topic"><summary>registers a function as a publisher on a topic. Subsequent calls to the function will cause a publish event on the topic with the arguments passed to the function passed to registered listeners.</summary><parameters><parameter name="topic" type="a">unique, opaque string that names the topic</parameter><parameter name="obj" type="the">scope to locate the function in</parameter><parameter name="funcName" type="the">name of the function to register</parameter></parameters></function><function name="dojo.event.topic.subscribe" instance="dojo.event.topic"><summary>susbscribes the function to the topic. Subsequent events dispached to the topic will create a function call for the</summary><parameters><parameter name="topic" type="a">unique, opaque string that names the topic</parameter><parameter name="obj" type="the">scope to locate the function in</parameter><parameter name="funcName" type="the">name of the function to being registered as a listener</parameter></parameters></function><function name="dojo.event.topic.unsubscribe" instance="dojo.event.topic"><summary>unsubscribes the obj.funcName() from the topic</summary><parameters><parameter name="topic" type="a">unique, opaque string that names the topic</parameter><parameter name="obj" type="the">scope to locate the function in</parameter><parameter name="funcName" type="the">name of the function to being unregistered as a listener</parameter></parameters></function><function name="dojo.event.topic.destroy" instance="dojo.event.topic"><summary>destroys the topic and unregisters all listeners</summary><parameters><parameter name="topic" type="a">unique, opaque string that names the topic</parameter></parameters></function><function name="dojo.event.topic.publishApply" instance="dojo.event.topic"><summary>dispatches an event to the topic using the args array as the source for the call arguments to each listener. This is similar to JavaScript's built-in Function.apply()</summary><parameters><parameter name="topic" type="a">unique, opaque string that names the topic</parameter><parameter name="args" type="the">arguments to be passed into listeners of the topic</parameter></parameters><chains><chain type="call">topic.sendMessage</chain></chains></function><function name="dojo.event.topic.publish" instance="dojo.event.topic"><summary>manually "publish" to the passed topic</summary><parameters><parameter name="topic" type="a">unique, opaque string that names the topic</parameter><parameter name="message" type="can">be an array of parameters (similar to publishApply), or will be treated as one of many arguments to be passed along in a "flat" unrolling</parameter></parameters><chains><chain type="call">topic.sendMessage</chain></chains></function><function name="dojo.event.topic.TopicImpl"><returns type="dojo.event.MethodJoinPoint"/><summary>a class to represent topics</summary><parameters><parameter name="topicName"/></parameters><variables><variable scope="instance" name="topicName"/><variable scope="instance" name="subscribe"/><variable scope="instance" name="unsubscribe"/><variable scope="instance" name="_getJoinPoint"/><variable scope="instance" name="setSquelch"/><variable scope="instance" name="destroy"/><variable scope="instance" name="registerPublisher"/><variable scope="instance" name="sendMessage"/></variables></function><function name="dojo.event.topic.TopicImpl.subscribe" instance="dojo.event.topic.TopicImpl"><returns type="dojo.event.MethodJoinPoint"/><summary>use dojo.event.connect() to attach the passed listener to the topic represented by this object</summary><parameters><parameter name="listenerObject" type="if">a string and listenerMethod is ommitted, this is treated as the name of a function in the global namespace. If</parameter><parameter name="listenerMethod" type="Optional.">The function to register.</parameter></parameters></function><function name="dojo.event.topic.TopicImpl.unsubscribe" instance="dojo.event.topic.TopicImpl"><returns type="dojo.event.MethodJoinPoint"/><summary>use dojo.event.disconnect() to attach the passed listener to the topic represented by this object</summary><parameters><parameter name="listenerObject" type="if">a string and listenerMethod is ommitted, this is treated as the name of a function in the global namespace. If</parameter><parameter name="listenerMethod" type="Optional.">The function to unregister.</parameter></parameters></function><function name="dojo.event.topic.TopicImpl._getJoinPoint" instance="dojo.event.topic.TopicImpl"/><function name="dojo.event.topic.TopicImpl.setSquelch" instance="dojo.event.topic.TopicImpl"><summary>determine whether or not exceptions in the calling of a listener in the chain should stop execution of the chain.</summary><parameters><parameter name="shouldSquelch" type="Boolean"/></parameters></function><function name="dojo.event.topic.TopicImpl.destroy" instance="dojo.event.topic.TopicImpl"><summary>disconnects all listeners from this topic</summary></function><function name="dojo.event.topic.TopicImpl.registerPublisher" instance="dojo.event.topic.TopicImpl"><summary>registers the passed function as a publisher on this topic. Each time the function is called, an event will be published on this topic.</summary><parameters><parameter name="publisherObject" type="if">a string and listenerMethod is ommitted, this is treated as the name of a function in the global namespace. If listenerMethod is provided, this is the scope to find the function in.</parameter><parameter name="publisherMethod" type="Optional.">The function to register.</parameter></parameters></function><function name="dojo.event.topic.TopicImpl.sendMessage" instance="dojo.event.topic.TopicImpl"><summary>a stub to be called when a message is sent to the topic.</summary><parameters><parameter name="message"/></parameters></function></resource><resource location="dojo.event"><requires><environment type="common"><require>dojo.event.*</require></environment></requires></resource><resource location="dojo.experimental"><function name="dojo.experimental"><summary>Marks code as experimental.</summary><parameters><parameter name="moduleName" type="The">name of a module, or the name of a module file or a specific function</parameter><parameter name="extra" type="some">additional message for the user examples: dojo.experimental("dojo.data.Result"); dojo.experimental("dojo.weather.toKelvin()", "PENDING approval from NOAA");</parameter></parameters><description>This can be used to mark a function, file, or module as experimental. Experimental code is not ready to be used, and the APIs are subject to change without notice. Experimental code may be completed deleted without going through the normal deprecation process.</description></function></resource><resource location="dojo.flash"><requires><environment type="common"><require>dojo.string.*</require><require>dojo.uri.*</require><require>dojo.html.common</require></environment></requires><function name="dojo.flash"><summary>The goal of dojo.flash is to make it easy to extend Flash's capabilities into an AJAX/DHTML environment.</summary><description>The goal of dojo.flash is to make it easy to extend Flash's capabilities into an AJAX/DHTML environment. Robust, performant, reliable JavaScript/Flash communication is harder than most realize when they delve into the topic, especially if you want it to work on Internet Explorer, Firefox, and Safari, and to be able to push around hundreds of K of information quickly. Dojo.flash makes it possible to support these platforms; you have to jump through a few hoops to get its capabilites, but if you are a library writer who wants to bring Flash's storage or streaming sockets ability into DHTML, for example, then dojo.flash is perfect for you. Dojo.flash provides an easy object for interacting with the Flash plugin. This object provides methods to determine the current version of the Flash plugin (dojo.flash.info); execute Flash instance methods independent of the Flash version being used (dojo.flash.comm); write out the necessary markup to dynamically insert a Flash object into the page (dojo.flash.Embed; and do dynamic installation and upgrading of the current Flash plugin in use (dojo.flash.Install). To use dojo.flash, you must first wait until Flash is finished loading and initializing before you attempt communication or interaction. To know when Flash is finished use dojo.event.connect: dojo.event.connect(dojo.flash, "loaded", myInstance, "myCallback"); Then, while the page is still loading provide the file name and the major version of Flash that will be used for Flash/JavaScript communication (see "Flash Communication" below for information on the different kinds of Flash/JavaScript communication supported and how they depend on the version of Flash installed): dojo.flash.setSwf({flash6: "src/storage/storage_flash6.swf", flash8: "src/storage/storage_flash8.swf"}); This will cause dojo.flash to pick the best way of communicating between Flash and JavaScript based on the platform. If no SWF files are specified, then Flash is not initialized. Your Flash must use DojoExternalInterface to expose Flash methods and to call JavaScript; see "Flash Communication" below for details. setSwf can take an optional 'visible' attribute to control whether the Flash object is visible or not on the page; the default is visible: dojo.flash.setSwf({flash6: "src/storage/storage_flash6.swf", flash8: "src/storage/storage_flash8.swf", visible: false}); Once finished, you can query Flash version information: dojo.flash.info.version Or can communicate with Flash methods that were exposed: var results = dojo.flash.comm.sayHello("Some Message"); Only string values are currently supported for both arguments and for return results. Everything will be cast to a string on both the JavaScript and Flash sides. ------------------- Flash Communication ------------------- dojo.flash allows Flash/JavaScript communication in a way that can pass large amounts of data back and forth reliably and very fast. The dojo.flash framework encapsulates the specific way in which this communication occurs, presenting a common interface to JavaScript irrespective of the underlying Flash version. There are currently three major ways to do Flash/JavaScript communication in the Flash community: 1) Flash 6+ - Uses Flash methods, such as SetVariable and TCallLabel, and the fscommand handler to do communication. Strengths: Very fast, mature, and can send extremely large amounts of data; can do synchronous method calls. Problems: Does not work on Safari; works on Firefox/Mac OS X only if Flash 8 plugin is installed; cryptic to work with. 2) Flash 8+ - Uses ExternalInterface, which provides a way for Flash methods to register themselves for callbacks from JavaScript, and a way for Flash to call JavaScript. Strengths: Works on Safari; elegant to work with; can do synchronous method calls. Problems: Extremely buggy (fails if there are new lines in the data, for example); performance degrades drastically in O(n^2) time as data grows; locks up the browser while it is communicating; does not work in Internet Explorer if Flash object is dynamically added to page with document.writeln, DOM methods, or innerHTML. 3) Flash 6+ - Uses two seperate Flash applets, one that we create over and over, passing input data into it using the PARAM tag, which then uses a Flash LocalConnection to pass the data to the main Flash applet; communication back to Flash is accomplished using a getURL call with a javascript protocol handler, such as "javascript:myMethod()". Strengths: the most cross browser, cross platform pre-Flash 8 method of Flash communication known; works on Safari. Problems: Timing issues; clunky and complicated; slow; can only send very small amounts of data (several K); all method calls are asynchronous. dojo.flash.comm uses only the first two methods. This framework was created primarily for dojo.storage, which needs to pass very large amounts of data synchronously and reliably across the Flash/JavaScript boundary. We use the first method, the Flash 6 method, on all platforms that support it, while using the Flash 8 ExternalInterface method only on Safari with some special code to help correct ExternalInterface's bugs. Since dojo.flash needs to have two versions of the Flash file it wants to generate, a Flash 6 and a Flash 8 version to gain true cross-browser compatibility, several tools are provided to ease development on the Flash side. In your Flash file, if you want to expose Flash methods that can be called, use the DojoExternalInterface class to register methods. This class is an exact API clone of the standard ExternalInterface class, but can work in Flash 6+ browsers. Under the covers it uses the best mechanism to do communication: class HelloWorld{ function HelloWorld(){ // Initialize the DojoExternalInterface class DojoExternalInterface.initialize(); // Expose your methods DojoExternalInterface.addCallback("sayHello", this, this.sayHello); // Tell JavaScript that you are ready to have method calls DojoExternalInterface.loaded(); // Call some JavaScript var resultsReady = function(results){ trace("Received the following results from JavaScript: " + results); } DojoExternalInterface.call("someJavaScriptMethod", resultsReady, someParameter); } function sayHello(){ ... } static main(){ ... } } DojoExternalInterface adds two new functions to the ExternalInterface API: initialize() and loaded(). initialize() must be called before any addCallback() or call() methods are run, and loaded() must be called after you are finished adding your callbacks. Calling loaded() will fire the dojo.flash.loaded() event, so that JavaScript can know that Flash has finished loading and adding its callbacks, and can begin to interact with the Flash file. To generate your SWF files, use the ant task "buildFlash". You must have the open source Motion Twin ActionScript compiler (mtasc) installed and in your path to use the "buildFlash" ant task; download and install mtasc from http: // www.mtasc.org/. buildFlash usage: ant buildFlash -Ddojo.flash.file=../tests/flash/HelloWorld.as where "dojo.flash.file" is the relative path to your Flash ActionScript file. This will generate two SWF files, one ending in _flash6.swf and the other ending in _flash8.swf in the same directory as your ActionScript method: HelloWorld_flash6.swf HelloWorld_flash8.swf Initialize dojo.flash with the filename and Flash communication version to use during page load; see the documentation for dojo.flash for details: dojo.flash.setSwf({flash6: "tests/flash/HelloWorld_flash6.swf", flash8: "tests/flash/HelloWorld_flash8.swf"}); Now, your Flash methods can be called from JavaScript as if they are native Flash methods, mirrored exactly on the JavaScript side: dojo.flash.comm.sayHello(); Only Strings are supported being passed back and forth currently. JavaScript to Flash communication is synchronous; i.e., results are returned directly from the method call: var results = dojo.flash.comm.sayHello(); Flash to JavaScript communication is asynchronous due to limitations in the underlying technologies; you must use a results callback to handle results returned by JavaScript in your Flash AS files: var resultsReady = function(results){ trace("Received the following results from JavaScript: " + results); } DojoExternalInterface.call("someJavaScriptMethod", resultsReady); ------------------- Notes ------------------- If you have both Flash 6 and Flash 8 versions of your file: dojo.flash.setSwf({flash6: "tests/flash/HelloWorld_flash6.swf", flash8: "tests/flash/HelloWorld_flash8.swf"}); but want to force the browser to use a certain version of Flash for all platforms (for testing, for example), use the djConfig variable 'forceFlashComm' with the version number to force: var djConfig = { forceFlashComm: 6 }; Two values are currently supported, 6 and 8, for the two styles of communication described above. Just because you force dojo.flash to use a particular communication style is no guarantee that it will work; for example, Flash 8 communication doesn't work in Internet Explorer due to bugs in Flash, and Flash 6 communication does not work in Safari. It is best to let dojo.flash determine the best communication mechanism, and to use the value above only for debugging the dojo.flash framework itself. Also note that dojo.flash can currently only work with one Flash object on the page; it and the API do not yet support multiple Flash objects on the same page. We use some special tricks to get decent, linear performance out of Flash 8's ExternalInterface on Safari; see the blog post http: // codinginparadise.org/weblog/2006/02/how-to-speed-up-flash-8s.html for details. Your code can detect whether the Flash player is installing or having its version revved in two ways. First, if dojo.flash detects that Flash installation needs to occur, it sets dojo.flash.info.installing to true. Second, you can detect if installation is necessary with the following callback: dojo.event.connect(dojo.flash, "installing", myInstance, "myCallback"); You can use this callback to delay further actions that might need Flash; when installation is finished the full page will be refreshed and the user will be placed back on your page with Flash installed. Two utility methods exist if you want to add loading and installing listeners without creating dependencies on dojo.event; these are 'addLoadingListener' and 'addInstallingListener'. ------------------- Todo/Known Issues ------------------- There are several tasks I was not able to do, or did not need to fix to get dojo.storage out: * When using Flash 8 communication, Flash method calls to JavaScript are not working properly; serialization might also be broken for certain invalid characters when it is Flash invoking JavaScript methods. The Flash side needs to have more sophisticated serialization/ deserialization mechanisms like JavaScript currently has. The test_flash2.html unit tests should also be updated to have much more sophisticated Flash to JavaScript unit tests, including large amounts of data. * On Internet Explorer, after doing a basic install, the page is not refreshed or does not detect that Flash is now available. The way to fix this is to create a custom small Flash file that is pointed to during installation; when it is finished loading, it does a callback that says that Flash installation is complete on IE, and we can proceed to initialize the dojo.flash subsystem. Author- Brad Neuberg, bkn3@columbia.edu</description></function><function name="dojo.flash.Info"><summary>A class that helps us determine whether Flash is available.</summary><description>A class that helps us determine whether Flash is available, it's major and minor versions, and what Flash version features should be used for Flash/JavaScript communication. Parts of this code are adapted from the automatic Flash plugin detection code autogenerated by the Macromedia Flash 8 authoring environment. An instance of this class can be accessed on dojo.flash.info after the page is finished loading. This constructor must be called before the page is finished loading. Visual basic helper required to detect Flash Player ActiveX control version information on Internet Explorer</description></function><function name="dojo.flash.Embed"><summary>A class that is used to write out the Flash object into the page.</summary><parameters><parameter name="visible"/></parameters><variables><variable scope="instance" name="_visible"/></variables></function><function name="dojo.flash.Communicator"><summary>A class that is used to communicate between Flash and JavaScript in a way that can pass large amounts of data back and forth reliably, very fast, and with synchronous method calls.</summary><description>A class that is used to communicate between Flash and JavaScript in a way that can pass large amounts of data back and forth reliably, very fast, and with synchronous method calls. This class encapsulates the specific way in which this communication occurs, presenting a common interface to JavaScript irrespective of the underlying Flash version.</description></function><function name="callFunc"/><function name="wrapperCall"/><function name="dojo.flash.Install"><summary>Helps install Flash plugin if needed.</summary><description>Figures out the best way to automatically install the Flash plugin for this browser and platform. Also determines if installation or revving of the current plugin is needed on this platform.</description></function><function name="dojo.flash.setSwf"><summary>Sets the SWF files and versions we are using.</summary><parameters><parameter name="fileInfo" type="Object">An object that contains two attributes, 'flash6' and 'flash8', each of which contains the path to our Flash 6 and Flash 8 versions of the file we want to script. Example- var swfloc6 = dojo.uri.dojoUri("Storage_version6.swf").toString(); var swfloc8 = dojo.uri.dojoUri("Storage_version8.swf").toString(); dojo.flash.setSwf({flash6: swfloc6, flash8: swfloc8, visible: false});</parameter></parameters><variables><variable scope="instance" name="flash6_version"/><variable scope="instance" name="flash8_version"/><variable scope="instance" name="_visible"/></variables></function><function name="dojo.flash.useFlash6"><summary>Boolean Returns whether we are using Flash 6 for communication on this platform.</summary><variables><variable scope="instance" name="flash6_version"/></variables></function><function name="dojo.flash.useFlash8"><summary>Boolean Returns whether we are using Flash 8 for communication on this platform.</summary><variables><variable scope="instance" name="flash8_version"/></variables></function><function name="dojo.flash.addLoadedListener"><summary>Adds a listener to know when Flash is finished loading. Useful if you don't want a dependency on dojo.event.</summary><parameters><parameter name="listener" type="Function">A function that will be called when Flash is done loading.</parameter></parameters></function><function name="dojo.flash.addInstallingListener"><summary>Adds a listener to know if Flash is being installed. Useful if you don't want a dependency on dojo.event.</summary><parameters><parameter name="listener" type="Function">A function that will be called if Flash is being installed</parameter></parameters></function><function name="dojo.flash.loaded"><summary>Called back when the Flash subsystem is finished loading.</summary><description>A callback when the Flash subsystem is finished loading and can be worked with. To be notified when Flash is finished loading, connect your callback to this method using the following: dojo.event.connect(dojo.flash, "loaded", myInstance, "myCallback"); dojo.debug("dojo.flash.loaded");</description></function><function name="dojo.flash.installing"><summary>Called if Flash is being installed.</summary><description>A callback to know if Flash is currently being installed or having its version revved. To be notified if Flash is installing, connect your callback to this method using the following: dojo.event.connect(dojo.flash, "installing", myInstance, "myCallback"); dojo.debug("installing");</description></function><function name="dojo.flash._initialize"/><function name="dojo.flash.Info.prototype.isVersionOrAbove"><summary>Boolean Asserts that this environment has the given major, minor, and revision numbers for the Flash player.</summary><parameters><parameter name="reqMajorVer" type="int"/><parameter name="reqMinorVer" type="int"/><parameter name="reqVer" type="int"/></parameters><description>Asserts that this environment has the given major, minor, and revision numbers for the Flash player. Example- To test for Flash Player 7r14: dojo.flash.info.isVersionOrAbove(7, 0, 14)</description></function><function name="dojo.flash.Info.prototype._detectVersion"><variables><variable scope="instance" name="capable"/><variable scope="instance" name="versionMajor"/><variable scope="instance" name="versionMinor"/><variable scope="instance" name="versionRevision"/><variable scope="instance" name="version"/></variables></function><function name="dojo.flash.Info.prototype._JSFlashInfo"><parameters><parameter name="testVersion"/></parameters></function><function name="dojo.flash.Info.prototype._detectCommunicationVersion"><variables><variable scope="instance" name="capable"/><variable scope="instance" name="commVersion"/></variables></function><function name="dojo.flash.Embed.prototype.protocol"/><function name="dojo.flash.Embed.prototype.write"><summary>Writes the Flash into the page.</summary><parameters><parameter name="flashVer" type="String">The Flash version to write.</parameter><parameter name="doExpressInstall" type="Boolean">Whether to write out Express Install information. Optional value; defaults to false. dojo.debug("write");</parameter></parameters><variables><variable scope="instance" name="_visible"/></variables><description>This must be called before the page is finished loading.</description></function><function name="dojo.flash.Embed.prototype.get"><summary>Object Gets the Flash object DOM node. return (dojo.render.html.ie) ? window[this.id] : document[this.id]; more robust way to get Flash object; version above can break communication on IE sometimes</summary></function><function name="dojo.flash.Embed.prototype.setVisible"><summary>Sets the visibility of this Flash object.</summary><parameters><parameter name="visible" type="Boolean"/></parameters></function><function name="dojo.flash.Embed.prototype.center"><summary>Centers the flash applet on the page.</summary></function><function name="dojo.flash.Communicator.prototype._writeFlash6"/><function name="dojo.flash.Communicator.prototype._writeFlash8"/><function name="dojo.flash.Communicator.prototype._handleFSCommand"><parameters><parameter name="command"/><parameter name="args"/></parameters></function><function name="dojo.flash.Communicator.prototype._fscommandAddCallback"><parameters><parameter name="command"/><parameter name="args"/></parameters></function><function name="dojo.flash.Communicator.prototype._fscommandCall"><parameters><parameter name="command"/><parameter name="args"/></parameters><chains><chain type="call">runMe</chain></chains></function><function name="dojo.flash.Communicator.prototype._fscommandReady"/><function name="dojo.flash.Communicator.prototype._call"><parameters><parameter name="args"/></parameters></function><function name="dojo.flash.Communicator.prototype._addExternalInterfaceCallback"><parameters><parameter name="methodName"/></parameters></function><function name="dojo.flash.Communicator.prototype._encodeData"><parameters><parameter name="data"/></parameters></function><function name="dojo.flash.Communicator.prototype._decodeData"><parameters><parameter name="data"/></parameters></function><function name="dojo.flash.Communicator.prototype._chunkArgumentData"><parameters><parameter name="value"/><parameter name="argIndex"/></parameters></function><function name="dojo.flash.Communicator.prototype._chunkReturnData"/><function name="dojo.flash.Communicator.prototype._execFlash"><parameters><parameter name="methodName"/><parameter name="methodArgs"/></parameters></function><function name="dojo.flash.Install.prototype.needed"><summary>Boolean Determines if installation or revving of the current plugin is needed. do we even have flash?</summary></function><function name="dojo.flash.Install.prototype.install"><summary>Performs installation or revving of the Flash plugin. dojo.debug("install"); indicate that we are installing</summary></function><function name="dojo.flash.Install.prototype._onInstallStatus"><parameters><parameter name="msg"/></parameters></function><object name="dojo.flash"><variables><variable name="flash6_version"/><variable name="flash8_version"/><variable name="ready"/><variable name="_visible"/><variable name="_loadedListeners"/><variable name="_installingListeners"/></variables></object><object name="dojo.flash.Info.prototype"><variables><variable name="version" type="to">interact with the Flash ActiveX control. Detects the mechanisms that should be used for Flash/JavaScript communication, setting 'commVersion' to either 6 or 8. If the value is 6, we use Flash Plugin 6+ features, such as GetVariable, TCallLabel, and fscommand, to do Flash/JavaScript communication; if the value is 8, we use the ExternalInterface API for communication.</variable><variable name="versionMajor" type="versionMinor">versionRevision: String The major, minor, and revisions of the plugin. For example, if the plugin is 8r22, then the major version is 8, the minor version is 0, and the revision is 22.</variable><variable name="versionMinor"/><variable name="versionRevision"/><variable name="capable" type="Boolean">Whether this platform has Flash already installed.</variable><variable name="commVersion" type="int">The major version number for how our Flash and JavaScript communicate. This can currently be the following values: 6 - We use a combination of the Flash plugin methods, such as SetVariable and TCallLabel, along with fscommands, to do communication. 8 - We use the ExternalInterface API. -1 - For some reason neither method is supported, and no communication is possible.</variable><variable name="installing" type="Boolean">Set if we are in the middle of a Flash installation session. JavaScript helper required to detect Flash Player PlugIn version information. Internet Explorer uses a corresponding Visual Basic</variable></variables></object><object name="dojo.flash.Embed.prototype"><variables><variable name="width" type="int">The width of this Flash applet. The default is the minimal width necessary to show the Flash settings dialog. Current value is 215 pixels.</variable><variable name="height" type="int">The height of this Flash applet. The default is the minimal height necessary to show the Flash settings dialog. Current value is 138 pixels.</variable><variable name="id" type="String">The id of the Flash object. Current value is 'flashObject'. Controls whether this is a visible Flash applet or not.</variable><variable name="_visible"/></variables></object></resource><resource location="dojo.gfx.Colorspace"><requires><environment type="common"><require>dojo.lang.common</require><require>dojo.math.matrix</require></environment></requires><function name="dojo.gfx.Colorspace"><summary>An object for dealing with colorspace conversions.</summary><variables><variable scope="instance" name="whitePoint"/><variable scope="instance" name="stdObserver"/><variable scope="instance" name="chromaticAdaptationAlg"/><variable scope="instance" name="RGBWorkingSpace"/><variable scope="instance" name="useApproxCIELabMapping"/><variable scope="instance" name="chainMaps"/></variables></function><function name="dojo.gfx.Colorspace.convert" prototype="dojo.gfx.Colorspace"><parameters><parameter name="col"/><parameter name="model_from"/><parameter name="model_to"/></parameters></function><function name="dojo.gfx.Colorspace.munge" prototype="dojo.gfx.Colorspace"><parameters><parameter name="keys"/><parameter name="args"/></parameters></function><function name="dojo.gfx.Colorspace.getWhitePoint" prototype="dojo.gfx.Colorspace"/><function name="dojo.gfx.Colorspace.getPrimaries" prototype="dojo.gfx.Colorspace"/><function name="dojo.gfx.Colorspace.epsilon" prototype="dojo.gfx.Colorspace"/><function name="dojo.gfx.Colorspace.kappa" prototype="dojo.gfx.Colorspace"/><function name="dojo.gfx.Colorspace.XYZ_to_xyY" prototype="dojo.gfx.Colorspace"/><function name="dojo.gfx.Colorspace.xyY_to_XYZ" prototype="dojo.gfx.Colorspace"/><function name="dojo.gfx.Colorspace.RGB_to_XYZ" prototype="dojo.gfx.Colorspace"/><function name="dojo.gfx.Colorspace.XYZ_to_RGB" prototype="dojo.gfx.Colorspace"/><function name="dojo.gfx.Colorspace.XYZ_to_Lab" prototype="dojo.gfx.Colorspace"/><function name="dojo.gfx.Colorspace.Lab_to_XYZ" prototype="dojo.gfx.Colorspace"/><function name="dojo.gfx.Colorspace.Lab_to_LCHab" prototype="dojo.gfx.Colorspace"/><function name="dojo.gfx.Colorspace.LCHab_to_Lab" prototype="dojo.gfx.Colorspace"/><function name="dojo.gfx.Colorspace.chromaticAdaptation" prototype="dojo.gfx.Colorspace"><parameters><parameter name="col"/><parameter name="src_w"/><parameter name="dst_w"/></parameters></function><function name="dojo.gfx.Colorspace.getRGB_XYZ_Matrix" prototype="dojo.gfx.Colorspace"/><function name="dojo.gfx.Colorspace.getXYZ_RGB_Matrix" prototype="dojo.gfx.Colorspace"/><function name="dojo.gfx.Colorspace.XYZ_to_Luv" prototype="dojo.gfx.Colorspace"/><function name="dojo.gfx.Colorspace.Luv_to_XYZ" prototype="dojo.gfx.Colorspace"/><function name="dojo.gfx.Colorspace.Luv_to_LCHuv" prototype="dojo.gfx.Colorspace"/><function name="dojo.gfx.Colorspace.LCHuv_to_Luv" prototype="dojo.gfx.Colorspace"/><function name="dojo.gfx.Colorspace.colorTemp_to_whitePoint"><parameters><parameter name="T"/></parameters></function><function name="dojo.gfx.Colorspace.RGB_to_CMY" prototype="dojo.gfx.Colorspace"/><function name="dojo.gfx.Colorspace.CMY_to_RGB" prototype="dojo.gfx.Colorspace"/><function name="dojo.gfx.Colorspace.RGB_to_CMYK" prototype="dojo.gfx.Colorspace"/><function name="dojo.gfx.Colorspace.CMYK_to_RGB" prototype="dojo.gfx.Colorspace"/><function name="dojo.gfx.Colorspace.CMY_to_CMYK" prototype="dojo.gfx.Colorspace"/><function name="dojo.gfx.Colorspace.CMYK_to_CMY" prototype="dojo.gfx.Colorspace"/><function name="dojo.gfx.Colorspace.RGB_to_HSV" prototype="dojo.gfx.Colorspace"/><function name="dojo.gfx.Colorspace.HSV_to_RGB" prototype="dojo.gfx.Colorspace"/><function name="dojo.gfx.Colorspace.RGB_to_HSL" prototype="dojo.gfx.Colorspace"/><function name="dojo.gfx.Colorspace.HSL_to_RGB" prototype="dojo.gfx.Colorspace"/></resource><resource location="dojo.gfx._"><requires><environment type="common"><require>dojo.gfx.color</require><require>dojo.gfx.matrix</require><require>dojo.gfx.common</require></environment></requires></resource><resource location="dojo.gfx.color.hsl"><requires><environment type="common"><require>dojo.lang.array</require></environment></requires><function name="dojo.gfx.color.rgb2hsl"><parameters><parameter name="r"/><parameter name="g"/><parameter name="b"/></parameters></function><function name="dojo.gfx.color.hsl2rgb"><parameters><parameter name="h"/><parameter name="s"/><parameter name="l"/></parameters></function><function name="dojo.gfx.color.hsl2hex"><parameters><parameter name="h"/><parameter name="s"/><parameter name="l"/></parameters></function><function name="dojo.gfx.color.hex2hsl"><parameters><parameter name="hex"/></parameters></function><function name="dojo.gfx.color.Color.toHsl" prototype="dojo.gfx.color.Color"/></resource><resource location="dojo.gfx.color.hsv"><requires><environment type="common"><require>dojo.lang.array</require><require>dojo.math</require></environment></requires><function name="dojo.gfx.color.rgb2hsv"><summary>converts an RGB value set to HSV, ranges depending on optional options object. patch for options by Matthew Eernisse</summary><parameters><parameter name="r" type="int || Array"/><parameter name="g" type="int"/><parameter name="b" type="int"/><parameter name="options" optional="true" type="Object"/></parameters></function><function name="dojo.gfx.color.hsv2rgb"><summary>converts an HSV value set to RGB, ranges depending on optional options object. patch for options by Matthew Eernisse</summary><parameters><parameter name="h" type="int || Array"/><parameter name="s" type="int"/><parameter name="v" type="int"/><parameter name="options" optional="true" type="Object"/></parameters></function><function name="dojo.gfx.color.Color.toHsv" prototype="dojo.gfx.color.Color"/></resource><resource location="dojo.gfx.color"><requires><environment type="common"><require>dojo.lang.common</require><require>dojo.lang.array</require></environment></requires><function name="dojo.gfx.color.Color"><parameters><parameter name="r"/><parameter name="g"/><parameter name="b"/><parameter name="a"/></parameters><variables><variable scope="instance" name="r"/><variable scope="instance" name="g"/><variable scope="instance" name="b"/><variable scope="instance" name="a"/></variables></function><function name="dojo.gfx.color.Color.fromArray"><parameters><parameter name="arr"/></parameters></function><function name="dojo.gfx.color.blend"><summary>blend colors a and b (both as RGB array or hex strings) with weight from -1 to +1, 0 being a 50/50 blend</summary><parameters><parameter name="a"/><parameter name="b"/><parameter name="weight"/></parameters></function><function name="dojo.gfx.color.blendHex"><parameters><parameter name="a"/><parameter name="b"/><parameter name="weight"/></parameters></function><function name="dojo.gfx.color.extractRGB"><parameters><parameter name="color"/></parameters></function><function name="dojo.gfx.color.hex2rgb"><parameters><parameter name="hex"/></parameters></function><function name="dojo.gfx.color.rgb2hex"><parameters><parameter name="r"/><parameter name="g"/><parameter name="b"/></parameters></function><function name="dojo.gfx.color.Color.toRgb"><parameters><parameter name="includeAlpha"/></parameters></function><function name="dojo.gfx.color.Color.toRgba"/><function name="dojo.gfx.color.Color.toHex"/><function name="dojo.gfx.color.Color.toCss"/><function name="dojo.gfx.color.Color.toString"><returns type="decent default?"/></function><function name="dojo.gfx.color.Color.blend"><parameters><parameter name="color"/><parameter name="weight"/></parameters></function><object name="dojo.gfx.color.named"><variables><variable name="white"/><variable name="black"/><variable name="red"/><variable name="green"/><variable name="lime"/><variable name="blue"/><variable name="navy"/><variable name="gray"/><variable name="silver"/></variables></object></resource><resource location="dojo.gfx.common"><requires><environment type="common"><require>dojo.gfx.color</require><require>dojo.lang.declare</require><require>dojo.lang.extras</require><require>dojo.dom</require></environment></requires><function name="dojo.gfx"><variables><variable name="defaultPath"/><variable name="defaultPolyline"/><variable name="defaultRect"/><variable name="defaultEllipse"/><variable name="defaultCircle"/><variable name="defaultLine"/><variable name="defaultImage"/><variable name="defaultStroke"/><variable name="defaultLinearGradient"/><variable name="defaultRadialGradient"/><variable name="defaultPattern"/><variable name="pathRegExp"/></variables></function><function name="dojo.gfx.normalizeColor"><returns type="dojo.gfx.color.Color"/><summary>converts any legal color representation to normalized dojo.gfx.color.Color object</summary><parameters><parameter name="color" type="Color"/></parameters></function><function name="dojo.gfx.normalizeParameters"><returns type="Object"/><summary>updates an existing object with properties from an "update" object</summary><parameters><parameter name="existed" type="Object">the "target" object to be updated</parameter><parameter name="update" type="Object">the "update" object, whose properties will be used to update the existed object</parameter></parameters></function><function name="dojo.gfx.makeParameters"><returns type="Object"/><summary>copies the original object, and all copied properties from the "update" object</summary><parameters><parameter name="defaults" type="Object">the object to be cloned before updating</parameter><parameter name="update" type="Object">the object, which properties are to be cloned during updating</parameter></parameters></function><function name="dojo.gfx.formatNumber"><returns type="String"/><summary>converts a number to a string using a fixed notation</summary><parameters><parameter name="x" type="Number">number to be converted</parameter><parameter name="addSpace" optional="true" type="Boolean">if it is true, add a space before a positive number</parameter></parameters></function></resource><resource location="dojo.gfx.matrix"><requires><environment type="common"><require>dojo.lang.common</require><require>dojo.math.*</require></environment></requires><function name="dojo.gfx.matrix.Matrix2D"><summary>a 2D matrix object</summary><parameters><parameter name="arg" type="Object">a 2D matrix-like object, or an array of such objects</parameter></parameters><variables><variable scope="prototype" name="xx"/><variable scope="prototype" name="xy"/><variable scope="prototype" name="yx"/><variable scope="prototype" name="yy"/><variable scope="prototype" name="dx"/><variable scope="prototype" name="dy"/></variables><description>Normalizes a 2D matrix-like object. If arrays is passed, all objects of the array are normalized and multiplied sequentially.</description></function><function name="dojo.gfx.matrix"><variables><variable name="identity"/><variable name="flipX"/><variable name="flipY"/><variable name="flipXY"/></variables></function><function name="dojo.gfx.matrix.translate"><returns type="dojo.gfx.matrix.Matrix2D"/><summary>forms a translation matrix</summary><parameters><parameter name="a" type="Number">an x coordinate value</parameter><parameter name="b" type="Number">a y coordinate value</parameter></parameters><description>The resulting matrix is used to translate (move) points by specified offsets.</description></function><function name="dojo.gfx.matrix.scale"><returns type="dojo.gfx.matrix.Matrix2D"/><summary>forms a scaling matrix</summary><parameters><parameter name="a" type="Number">a scaling factor used for the x coordinate</parameter><parameter name="b" type="Number">a scaling factor used for the y coordinate</parameter></parameters><description>The resulting matrix is used to scale (magnify) points by specified offsets.</description></function><function name="dojo.gfx.matrix.rotate"><returns type="dojo.gfx.matrix.Matrix2D"/><summary>forms a rotating matrix</summary><parameters><parameter name="angle" type="Number">an angle of rotation in radians (&gt;0 for CCW)</parameter></parameters><description>The resulting matrix is used to rotate points around the origin of coordinates (0, 0) by specified angle.</description></function><function name="dojo.gfx.matrix.rotateg"><returns type="dojo.gfx.matrix.Matrix2D"/><summary>forms a rotating matrix</summary><parameters><parameter name="degree" type="Number">an angle of rotation in degrees (&gt;0 for CCW)</parameter></parameters><description>The resulting matrix is used to rotate points around the origin of coordinates (0, 0) by specified degree. See dojo.gfx.matrix.rotate() for comparison.</description></function><function name="dojo.gfx.matrix.skewX"><returns type="dojo.gfx.matrix.Matrix2D"/><summary>forms an x skewing matrix</summary><parameters><parameter name="angle" type="Number">an skewing angle in radians</parameter></parameters><description>The resulting matrix is used to skew points in the x dimension around the origin of coordinates (0, 0) by specified angle.</description></function><function name="dojo.gfx.matrix.skewXg"><returns type="dojo.gfx.matrix.Matrix2D"/><summary>forms an x skewing matrix</summary><parameters><parameter name="degree" type="Number">an skewing angle in degrees</parameter></parameters><description>The resulting matrix is used to skew points in the x dimension around the origin of coordinates (0, 0) by specified degree. See dojo.gfx.matrix.skewX() for comparison.</description></function><function name="dojo.gfx.matrix.skewY"><returns type="dojo.gfx.matrix.Matrix2D"/><summary>forms a y skewing matrix</summary><parameters><parameter name="angle" type="Number">an skewing angle in radians</parameter></parameters><description>The resulting matrix is used to skew points in the y dimension around the origin of coordinates (0, 0) by specified angle.</description></function><function name="dojo.gfx.matrix.skewYg"><returns type="dojo.gfx.matrix.Matrix2D"/><summary>forms a y skewing matrix</summary><parameters><parameter name="degree" type="Number">an skewing angle in degrees</parameter></parameters><description>The resulting matrix is used to skew points in the y dimension around the origin of coordinates (0, 0) by specified degree. See dojo.gfx.matrix.skewY() for comparison.</description></function><function name="dojo.gfx.matrix.normalize"><returns type="dojo.gfx.matrix.Matrix2D"/><summary>converts an object to a matrix, if necessary</summary><parameters><parameter name="matrix" type="Object">an object, which is converted to a matrix, if necessary</parameter></parameters><description>Converts any 2D matrix-like object or an array of such objects to a valid dojo.gfx.matrix.Matrix2D object.</description></function><function name="dojo.gfx.matrix.clone"><returns type="dojo.gfx.matrix.Matrix2D"/><summary>creates a copy of a 2D matrix</summary><parameters><parameter name="matrix" type="dojo.gfx.matrix.Matrix2D">a 2D matrix-like object to be cloned</parameter></parameters></function><function name="dojo.gfx.matrix.invert"><returns type="dojo.gfx.matrix.Matrix2D"/><summary>inverts a 2D matrix</summary><parameters><parameter name="matrix" type="dojo.gfx.matrix.Matrix2D">a 2D matrix-like object to be inverted</parameter></parameters></function><function name="dojo.gfx.matrix._multiplyPoint"><returns type="dojo.gfx.Point"/><summary>applies a matrix to a point matrix: dojo.gfx.matrix.Matrix2D: a 2D matrix object to be applied</summary><parameters><parameter name="m"/><parameter name="x" type="Number">an x coordinate of a point</parameter><parameter name="y" type="Number">a y coordinate of a point</parameter></parameters></function><function name="dojo.gfx.matrix.multiplyPoint"><returns type="dojo.gfx.Point"/><summary>applies a matrix to a point</summary><parameters><parameter name="matrix" type="dojo.gfx.matrix.Matrix2D">a 2D matrix object to be applied</parameter><parameter name="a" type="Number">an x coordinate of a point</parameter><parameter name="b" type="Number">a y coordinate of a point</parameter></parameters></function><function name="dojo.gfx.matrix.multiply"><returns type="dojo.gfx.matrix.Matrix2D"/><summary>combines matrices by multiplying them sequentially in the given order</summary><parameters><parameter name="matrix" type="dojo.gfx.matrix.Matrix2D...">a 2D matrix-like object, all subsequent arguments are matrix-like objects too</parameter></parameters></function><function name="dojo.gfx.matrix._sandwich"><returns type="dojo.gfx.matrix.Matrix2D"/><summary>applies a matrix at a centrtal point</summary><parameters><parameter name="m" type="dojo.gfx.matrix.Matrix2D">a 2D matrix-like object, which is applied at a central point</parameter><parameter name="x" type="Number">an x component of the central point</parameter><parameter name="y" type="Number">a y component of the central point</parameter></parameters></function><function name="dojo.gfx.matrix.scaleAt"><returns type="dojo.gfx.matrix.Matrix2D"/><summary>scales a picture using a specified point as a center of scaling</summary><parameters><parameter name="a" type="Number">a scaling factor used for the x coordinate</parameter><parameter name="b" type="Number">a scaling factor used for the y coordinate</parameter><parameter name="c" type="Number">an x component of a central point</parameter><parameter name="d" type="Number">a y component of a central point accepts several signatures: 1) uniform scale factor, Point 2) uniform scale factor, x, y 3) x scale, y scale, Point 4) x scale, y scale, x, y</parameter></parameters><description>Compare with dojo.gfx.matrix.scale().</description></function><function name="dojo.gfx.matrix.rotateAt"><returns type="dojo.gfx.matrix.Matrix2D"/><summary>rotates a picture using a specified point as a center of rotation</summary><parameters><parameter name="angle" type="Number">an angle of rotation in radians (&gt;0 for CCW)</parameter><parameter name="a" type="Number">an x component of a central point</parameter><parameter name="b" type="Number">a y component of a central point accepts several signatures: 1) rotation angle in radians, Point 2) rotation angle in radians, x, y</parameter></parameters><description>Compare with dojo.gfx.matrix.rotate().</description></function><function name="dojo.gfx.matrix.rotategAt"><returns type="dojo.gfx.matrix.Matrix2D"/><summary>rotates a picture using a specified point as a center of rotation</summary><parameters><parameter name="degree" type="Number">an angle of rotation in degrees (&gt;0 for CCW)</parameter><parameter name="a" type="Number">an x component of a central point</parameter><parameter name="b" type="Number">a y component of a central point accepts several signatures: 1) rotation angle in degrees, Point 2) rotation angle in degrees, x, y</parameter></parameters><description>Compare with dojo.gfx.matrix.rotateg().</description></function><function name="dojo.gfx.matrix.skewXAt"><returns type="dojo.gfx.matrix.Matrix2D"/><summary>skews a picture along the x axis using a specified point as a center of skewing</summary><parameters><parameter name="angle" type="Number">an skewing angle in radians</parameter><parameter name="a" type="Number">an x component of a central point</parameter><parameter name="b" type="Number">a y component of a central point accepts several signatures: 1) skew angle in radians, Point 2) skew angle in radians, x, y</parameter></parameters><description>Compare with dojo.gfx.matrix.skewX().</description></function><function name="dojo.gfx.matrix.skewXgAt"><returns type="dojo.gfx.matrix.Matrix2D"/><summary>skews a picture along the x axis using a specified point as a center of skewing</summary><parameters><parameter name="degree" type="Number">an skewing angle in degrees</parameter><parameter name="a" type="Number">an x component of a central point</parameter><parameter name="b" type="Number">a y component of a central point accepts several signatures: 1) skew angle in degrees, Point 2) skew angle in degrees, x, y</parameter></parameters><description>Compare with dojo.gfx.matrix.skewXg().</description></function><function name="dojo.gfx.matrix.skewYAt"><returns type="dojo.gfx.matrix.Matrix2D"/><summary>skews a picture along the y axis using a specified point as a center of skewing</summary><parameters><parameter name="angle" type="Number">an skewing angle in radians</parameter><parameter name="a" type="Number">an x component of a central point</parameter><parameter name="b" type="Number">a y component of a central point accepts several signatures: 1) skew angle in radians, Point 2) skew angle in radians, x, y</parameter></parameters><description>Compare with dojo.gfx.matrix.skewY().</description></function><function name="dojo.gfx.matrix.skewYgAt"><returns type="dojo.gfx.matrix.Matrix2D"/><summary>skews a picture along the y axis using a specified point as a center of skewing</summary><parameters><parameter name="degree" type="Number">an skewing angle in degrees</parameter><parameter name="a" type="Number">an x component of a central point</parameter><parameter name="b" type="Number">a y component of a central point accepts several signatures: 1) skew angle in degrees, Point 2) skew angle in degrees, x, y</parameter></parameters><description>Compare with dojo.gfx.matrix.skewYg().</description></function></resource><resource location="dojo.gfx.path"><requires><environment type="common"><require>dojo.math</require><require>dojo.gfx.shape</require></environment></requires><function name="dojo.gfx.path.Path"><chains><chain type="call">dojo.gfx.Shape</chain><chain type="prototype">dojo.gfx.Shape</chain></chains></function></resource><resource location="dojo.gfx.shape"><requires><environment type="common"><require>dojo.lang.declare</require><require>dojo.gfx.common</require></environment></requires><function name="dojo.gfx.shape.VirtualGroup"><chains><chain type="call">dojo.gfx.Shape</chain><chain type="prototype">dojo.gfx.Shape</chain></chains></function><function name="dojo.gfx.shape.Rect"><chains><chain type="call">dojo.gfx.Shape</chain><chain type="prototype">dojo.gfx.Shape</chain></chains></function><function name="dojo.gfx.shape.Ellipse"><chains><chain type="call">dojo.gfx.Shape</chain><chain type="prototype">dojo.gfx.Shape</chain></chains></function><function name="dojo.gfx.shape.Circle"><chains><chain type="call">dojo.gfx.Shape</chain><chain type="prototype">dojo.gfx.Shape</chain></chains></function><function name="dojo.gfx.shape.Line"><chains><chain type="call">dojo.gfx.Shape</chain><chain type="prototype">dojo.gfx.Shape</chain></chains></function><function name="dojo.gfx.shape.Polyline"><chains><chain type="call">dojo.gfx.Shape</chain><chain type="prototype">dojo.gfx.Shape</chain></chains></function><function name="dojo.gfx.shape.Image"><chains><chain type="call">dojo.gfx.Shape</chain><chain type="prototype">dojo.gfx.Shape</chain></chains></function></resource><resource location="dojo.gfx.svg"><requires><environment type="common"><require>dojo.lang.declare</require><require>dojo.svg</require><require>dojo.gfx.color</require><require>dojo.gfx.common</require><require>dojo.gfx.shape</require><require>dojo.gfx.path</require><require>dojo.experimental</require></environment></requires><function name="dojo.gfx.Group"><chains><chain type="call">dojo.gfx.Shape</chain><chain type="prototype">dojo.gfx.Shape</chain></chains></function><function name="dojo.gfx.Rect"><chains><chain type="call">dojo.gfx.shape.Rect</chain><chain type="prototype">dojo.gfx.shape.Rect</chain></chains></function><function name="dojo.gfx.Polyline"><chains><chain type="call">dojo.gfx.shape.Polyline</chain><chain type="prototype">dojo.gfx.shape.Polyline</chain></chains></function><function name="dojo.gfx.Image"><chains><chain type="call">dojo.gfx.shape.Image</chain><chain type="prototype">dojo.gfx.shape.Image</chain></chains></function><function name="dojo.gfx.Path"><chains><chain type="call">dojo.gfx.path.Path</chain><chain type="prototype">dojo.gfx.path.Path</chain></chains></function><function name="dojo.gfx.svg.getRef"><returns type="Node"/><summary>returns a DOM Node specified by the fill argument or null</summary><parameters><parameter name="fill" type="String">an SVG fill</parameter></parameters></function><function name="dojo.gfx.attachNode"><returns type="dojo.gfx.Shape"/><summary>creates a shape from a Node</summary><parameters><parameter name="node" type="Node">an SVG node</parameter></parameters></function><function name="dojo.gfx.createSurface"><returns type="dojo.gfx.Surface"/><summary>creates a surface (SVG)</summary><parameters><parameter name="parentNode" type="Node">a parent node</parameter><parameter name="width" type="String">width of surface, e.g., "100px"</parameter><parameter name="height" type="String">height of surface, e.g., "100px"</parameter></parameters></function><function name="dojo.gfx.attachSurface"><returns type="dojo.gfx.Surface"/><summary>creates a surface from a Node</summary><parameters><parameter name="node" type="Node">an SVG node</parameter></parameters></function><function name="dojo.gfx.svg.Defines"><variables><variable scope="instance" name="rawNode"/></variables></function><function name="dojo.gfx.Shape.setFill" prototype="dojo.gfx.Shape"><returns type="self"/><summary>sets a fill object (SVG)</summary><parameters><parameter name="fill" type="Object">a fill object (see dojo.gfx.defaultLinearGradient, dojo.gfx.defaultRadialGradient, dojo.gfx.defaultPattern, or dojo.gfx.color.Color)</parameter></parameters></function><function name="dojo.gfx.Shape"><variables><variable scope="instance" name="fillStyle"/><variable scope="instance" name="strokeStyle"/><variable scope="instance" name="strokeStyle.color"/><variable scope="instance" name="rawNode"/><variable scope="instance" name="shape"/><variable scope="instance" name="matrix"/></variables></function><function name="dojo.gfx.Shape.setStroke" prototype="dojo.gfx.Shape"><returns type="self"/><summary>sets a stroke object (SVG)</summary><parameters><parameter name="stroke" type="Object">a stroke object (see dojo.gfx.defaultStroke)</parameter></parameters></function><function name="dojo.gfx.Shape._setFillObject" prototype="dojo.gfx.Shape"><parameters><parameter name="f"/><parameter name="nodeType"/></parameters></function><function name="dojo.gfx.Shape._applyTransform" prototype="dojo.gfx.Shape"/><function name="dojo.gfx.Shape.setRawNode" prototype="dojo.gfx.Shape"><summary>assigns and clears the underlying node that will represent this shape. Once set, transforms, gradients, etc, can be applied. (no fill &amp; stroke by default)</summary><parameters><parameter name="rawNode"/></parameters></function><function name="dojo.gfx.Shape.moveToFront" prototype="dojo.gfx.Shape"><returns type="self"/><summary>moves a shape to front of its parent's list of shapes (SVG)</summary></function><function name="dojo.gfx.Shape.moveToBack" prototype="dojo.gfx.Shape"><returns type="self"/><summary>moves a shape to back of its parent's list of shapes (SVG)</summary></function><function name="dojo.gfx.Shape.setShape" prototype="dojo.gfx.Shape"><returns type="self"/><summary>sets a shape object (SVG)</summary><parameters><parameter name="newShape" type="Object">a shape object (see dojo.gfx.defaultPath, dojo.gfx.defaultPolyline, dojo.gfx.defaultRect, dojo.gfx.defaultEllipse, dojo.gfx.defaultCircle, dojo.gfx.defaultLine, or dojo.gfx.defaultImage)</parameter></parameters></function><function name="dojo.gfx.Shape.attachFill" prototype="dojo.gfx.Shape"><returns type="Object"/><summary>deduces a fill style from a Node.</summary><parameters><parameter name="rawNode" type="Node">an SVG node</parameter></parameters></function><function name="dojo.gfx.Shape._getGradient" prototype="dojo.gfx.Shape"><parameters><parameter name="defaultGradient"/><parameter name="gradient"/></parameters></function><function name="dojo.gfx.Shape.attachStroke" prototype="dojo.gfx.Shape"><returns type="Object"/><summary>deduces a stroke style from a Node.</summary><parameters><parameter name="rawNode" type="Node">an SVG node</parameter></parameters></function><function name="dojo.gfx.Shape.attachTransform" prototype="dojo.gfx.Shape"><returns type="dojo.gfx.matrix.Matrix"/><summary>deduces a transformation matrix from a Node.</summary><parameters><parameter name="rawNode" type="Node">an SVG node</parameter></parameters></function><function name="dojo.gfx.Shape.attachShape" prototype="dojo.gfx.Shape"><returns type="dojo.gfx.Shape"/><summary>builds a shape from a Node.</summary><parameters><parameter name="rawNode" type="Node">an SVG node</parameter></parameters></function><function name="dojo.gfx.Shape.attach" prototype="dojo.gfx.Shape"><summary>reconstructs all shape parameters from a Node.</summary><parameters><parameter name="rawNode"/></parameters></function><function name="dojo.gfx.Surface.setDimensions" prototype="dojo.gfx.Surface"><returns type="self"/><summary>sets the width and height of the rawNode</summary><parameters><parameter name="width" type="String">width of surface, e.g., "100px"</parameter><parameter name="height" type="String">height of surface, e.g., "100px"</parameter></parameters></function><function name="dojo.gfx.Surface.getDimensions" prototype="dojo.gfx.Surface"><returns type="Object"/><summary>returns an object with properties "width" and "height"</summary></function><function name="dojo.gfx.svg.Defines.setRawNode" prototype="dojo.gfx.svg.Defines"><parameters><parameter name="rawNode"/></parameters></function><function name="dojo.gfx._creators.createPath"><returns type="dojo.gfx.Path"/><summary>creates an SVG path shape</summary><parameters><parameter name="path" type="Object">a path object (see dojo.gfx.defaultPath)</parameter></parameters></function><function name="dojo.gfx._creators.createRect"><returns type="dojo.gfx.Rect"/><summary>creates an SVG rectangle shape</summary><parameters><parameter name="rect" type="Object">a path object (see dojo.gfx.defaultRect)</parameter></parameters></function><function name="dojo.gfx._creators.createCircle"><returns type="dojo.gfx.Circle"/><summary>creates an SVG circle shape</summary><parameters><parameter name="circle" type="Object">a circle object (see dojo.gfx.defaultCircle)</parameter></parameters></function><function name="dojo.gfx._creators.createEllipse"><returns type="dojo.gfx.Ellipse"/><summary>creates an SVG ellipse shape</summary><parameters><parameter name="ellipse" type="Object">an ellipse object (see dojo.gfx.defaultEllipse)</parameter></parameters></function><function name="dojo.gfx._creators.createLine"><returns type="dojo.gfx.Line"/><summary>creates an SVG line shape</summary><parameters><parameter name="line" type="Object">a line object (see dojo.gfx.defaultLine)</parameter></parameters></function><function name="dojo.gfx._creators.createPolyline"><returns type="dojo.gfx.Polyline"/><summary>creates an SVG polyline/polygon shape</summary><parameters><parameter name="points" type="Object">a points object (see dojo.gfx.defaultPolyline) or an Array of points</parameter></parameters></function><function name="dojo.gfx._creators.createImage"><returns type="dojo.gfx.Image"/><summary>creates an SVG image shape</summary><parameters><parameter name="image" type="Object">an image object (see dojo.gfx.defaultImage)</parameter></parameters></function><function name="dojo.gfx._creators.createGroup"><returns type="dojo.gfx.Group"/><summary>creates an SVG group shape</summary></function><function name="dojo.gfx._creators.createObject"><returns type="dojo.gfx.Shape"/><summary>creates an instance of the passed shapeType class</summary><parameters><parameter name="shapeType" type="Function">a class constructor to create an instance of</parameter><parameter name="rawShape" type="Object">properties to be passed in to the classes "setShape" method</parameter></parameters></function><function name="dojo.gfx._creators.add"><returns type="self"/><summary>adds a shape to a group/surface</summary><parameters><parameter name="shape" type="dojo.gfx.Shape">an SVG shape object</parameter></parameters></function><function name="dojo.gfx._creators.remove"><returns type="self"/><summary>remove a shape from a group/surface</summary><parameters><parameter name="shape" type="dojo.gfx.Shape">an SVG shape object</parameter><parameter name="silently" optional="true" type="Boolean">if true, regenerate a picture</parameter></parameters><variables><variable scope="instance" name="rawNode"/></variables></function><object name="dojo.gfx._creators"><summary>SVG shape creators group control</summary></object></resource><resource location="dojo.gfx.vml"><requires><environment type="common"><require>dojo.dom</require><require>dojo.math</require><require>dojo.lang.declare</require><require>dojo.lang.extras</require><require>dojo.string.*</require><require>dojo.html.metrics</require><require>dojo.gfx.color</require><require>dojo.gfx.common</require><require>dojo.gfx.shape</require><require>dojo.gfx.path</require><require>dojo.experimental</require></environment></requires><function name="dojo.gfx.Group"><chains><chain type="call">dojo.gfx.shape.VirtualGroup</chain><chain type="prototype">dojo.gfx.shape.VirtualGroup</chain></chains></function><function name="dojo.gfx.Rect"><chains><chain type="call">dojo.gfx.shape.Rect</chain><chain type="prototype">dojo.gfx.shape.Rect</chain></chains></function><function name="dojo.gfx.Ellipse"><chains><chain type="call">dojo.gfx.shape.Ellipse</chain><chain type="prototype">dojo.gfx.shape.Ellipse</chain></chains></function><function name="dojo.gfx.Circle"><chains><chain type="call">dojo.gfx.shape.Circle</chain><chain type="prototype">dojo.gfx.shape.Circle</chain></chains></function><function name="dojo.gfx.Line"><parameters><parameter name="rawNode"/></parameters><chains><chain type="call">dojo.gfx.shape.Line</chain><chain type="prototype">dojo.gfx.shape.Line</chain></chains><variables><variable scope="instance" name="shape"/><variable scope="instance" name="bbox"/><variable scope="instance" name="rawNode.path.v"/></variables></function><function name="dojo.gfx.Line.attachShape" prototype="dojo.gfx.Line"><returns type="dojo.gfx.shape.Line"/><summary>builds a line shape from a Node.</summary><parameters><parameter name="rawNode" type="Node">an VML node</parameter></parameters></function><function name="dojo.gfx.Line.setShape" prototype="dojo.gfx.Line"><returns type="self"/><summary>sets a line shape object (VML)</summary><parameters><parameter name="newShape" type="Object">a line shape object</parameter></parameters></function><function name="dojo.gfx.Polyline"><parameters><parameter name="rawNode"/></parameters><chains><chain type="call">dojo.gfx.shape.Polyline</chain><chain type="prototype">dojo.gfx.shape.Polyline</chain></chains><variables><variable scope="instance" name="shape"/><variable scope="instance" name="bbox"/><variable scope="instance" name="rawNode.path.v"/></variables></function><function name="dojo.gfx.Polyline.attachShape" prototype="dojo.gfx.Polyline"><returns type="dojo.gfx.shape.Polyline"/><summary>builds a polyline/polygon shape from a Node.</summary><parameters><parameter name="rawNode" type="Node">an VML node</parameter></parameters></function><function name="dojo.gfx.Polyline.setShape" prototype="dojo.gfx.Polyline"><returns type="self"/><summary>sets a polyline/polygon shape object (SVG)</summary><parameters><parameter name="points" type="Object">a polyline/polygon shape object</parameter><parameter name="closed" optional="true" type="Boolean">if true, close the polyline explicitely</parameter></parameters></function><function name="dojo.gfx.Image"><chains><chain type="call">dojo.gfx.shape.Image</chain><chain type="prototype">dojo.gfx.shape.Image</chain></chains></function><function name="dojo.gfx.Path"><parameters><parameter name="rawNode"/></parameters><chains><chain type="call">dojo.gfx.path.Path</chain><chain type="prototype">dojo.gfx.path.Path</chain></chains><variables><variable name="_PI4"/><variable name="_curvePI4"/><variable scope="instance" name="vmlPath"/><variable scope="instance" name="rawNode.path.v"/><variable scope="instance" name="lastControl"/><variable scope="instance" name="lastControl.type"/><variable scope="instance" name="lastControl.x"/><variable scope="instance" name="lastControl.y"/><variable scope="prototype" name="_PI4"/><variable scope="prototype" name="_curvePI4"/></variables></function><function name="dojo.gfx.Path._updateWithSegment" prototype="dojo.gfx.Path"><summary>updates the bounding box of path with new segment</summary><parameters><parameter name="segment" type="Object">a segment</parameter></parameters><chains><chain type="call">dojo.gfx.Path.superclass._updateWithSegment</chain></chains></function><function name="dojo.gfx.Path.attachShape" prototype="dojo.gfx.Path"><returns type="dojo.gfx.path.Path"/><summary>builds a path shape from a Node.</summary><parameters><parameter name="rawNode" type="Node">an VML node</parameter></parameters></function><function name="dojo.gfx.Path.setShape" prototype="dojo.gfx.Path"><summary>forms a path using a shape (VML)</summary><parameters><parameter name="newShape" type="Object">an VML path string or a path object (see dojo.gfx.defaultPath)</parameter></parameters><chains><chain type="call">dojo.gfx.Path.superclass.setShape</chain></chains></function><function name="dojo.gfx.Path._addArgs" prototype="dojo.gfx.Path"><parameters><parameter name="path"/><parameter name="args"/><parameter name="from"/><parameter name="upto"/></parameters></function><function name="dojo.gfx.Path._addArgsAdjusted" prototype="dojo.gfx.Path"><parameters><parameter name="path"/><parameter name="last"/><parameter name="args"/><parameter name="from"/><parameter name="upto"/></parameters></function><function name="dojo.gfx.Path._moveToA" prototype="dojo.gfx.Path"><parameters><parameter name="segment"/></parameters></function><function name="dojo.gfx.Path._moveToR" prototype="dojo.gfx.Path"><parameters><parameter name="segment"/><parameter name="last"/></parameters></function><function name="dojo.gfx.Path._lineToA" prototype="dojo.gfx.Path"><parameters><parameter name="segment"/></parameters></function><function name="dojo.gfx.Path._lineToR" prototype="dojo.gfx.Path"><parameters><parameter name="segment"/></parameters></function><function name="dojo.gfx.Path._hLineToA" prototype="dojo.gfx.Path"><parameters><parameter name="segment"/><parameter name="last"/></parameters></function><function name="dojo.gfx.Path._hLineToR" prototype="dojo.gfx.Path"><parameters><parameter name="segment"/></parameters></function><function name="dojo.gfx.Path._vLineToA" prototype="dojo.gfx.Path"><parameters><parameter name="segment"/><parameter name="last"/></parameters></function><function name="dojo.gfx.Path._vLineToR" prototype="dojo.gfx.Path"><parameters><parameter name="segment"/></parameters></function><function name="dojo.gfx.Path._curveToA" prototype="dojo.gfx.Path"><parameters><parameter name="segment"/></parameters></function><function name="dojo.gfx.Path._curveToR" prototype="dojo.gfx.Path"><parameters><parameter name="segment"/><parameter name="last"/></parameters></function><function name="dojo.gfx.Path._smoothCurveToA" prototype="dojo.gfx.Path"><parameters><parameter name="segment"/><parameter name="last"/></parameters></function><function name="dojo.gfx.Path._smoothCurveToR" prototype="dojo.gfx.Path"><parameters><parameter name="segment"/><parameter name="last"/></parameters></function><function name="dojo.gfx.Path._qCurveToA" prototype="dojo.gfx.Path"><parameters><parameter name="segment"/></parameters></function><function name="dojo.gfx.Path._qCurveToR" prototype="dojo.gfx.Path"><parameters><parameter name="segment"/><parameter name="last"/></parameters></function><function name="dojo.gfx.Path._qSmoothCurveToA" prototype="dojo.gfx.Path"><parameters><parameter name="segment"/><parameter name="last"/></parameters></function><function name="dojo.gfx.Path._qSmoothCurveToR" prototype="dojo.gfx.Path"><parameters><parameter name="segment"/><parameter name="last"/></parameters></function><function name="dojo.gfx.Path._calcArcTo" prototype="dojo.gfx.Path"><parameters><parameter name="path"/><parameter name="last"/><parameter name="rx"/><parameter name="ry"/><parameter name="xRotg"/><parameter name="large"/><parameter name="cw"/><parameter name="x"/><parameter name="y"/></parameters></function><function name="dojo.gfx.Path._arcTo" prototype="dojo.gfx.Path"><parameters><parameter name="segment"/><parameter name="last"/></parameters></function><function name="dojo.gfx.Path._closePath" prototype="dojo.gfx.Path"/><function name="dojo.gfx.vml._parseFloat"><returns type="Number"/><summary>a helper function to parse VML-specific floating-point values</summary><parameters><parameter name="str" type="String">a representation of a floating-point number</parameter></parameters></function><function name="dojo.gfx.vml.px_in_pt"><returns type="Number"/><summary>returns a number of pixels per point</summary></function><function name="dojo.gfx.vml.pt2px"><returns type="Number"/><summary>converts points to pixels</summary><parameters><parameter name="len" type="Number">a value in points</parameter></parameters></function><function name="dojo.gfx.vml.px2pt"><returns type="Number"/><summary>converts pixels to points</summary><parameters><parameter name="len" type="Number">a value in pixels</parameter></parameters></function><function name="dojo.gfx.vml.normalizedLength"><returns type="Number"/><summary>converts any length value to points</summary><parameters><parameter name="len" type="String">a length, e.g., "12pc"</parameter></parameters></function><function name="dojo.gfx.path._calcArc"><parameters><parameter name="alpha"/></parameters></function><function name="dojo.gfx.attachNode"><returns type="dojo.gfx.Shape"/><summary>creates a shape from a Node</summary><parameters><parameter name="node" type="Node">an VML node</parameter></parameters></function><function name="dojo.gfx.createSurface"><returns type="dojo.gfx.Surface"/><summary>creates a surface (VML)</summary><parameters><parameter name="parentNode" type="Node">a parent node</parameter><parameter name="width" type="String">width of surface, e.g., "100px"</parameter><parameter name="height" type="String">height of surface, e.g., "100px"</parameter></parameters></function><function name="dojo.gfx.attachSurface"><returns type="dojo.gfx.Surface"/><summary>creates a surface from a Node</summary><parameters><parameter name="node" type="Node">an VML node</parameter></parameters></function><function name="dojo.gfx.Shape.setFill" prototype="dojo.gfx.Shape"><returns type="self"/><summary>sets a fill object (VML)</summary><parameters><parameter name="fill" type="Object">a fill object (see dojo.gfx.defaultLinearGradient, dojo.gfx.defaultRadialGradient, dojo.gfx.defaultPattern, or dojo.gfx.color.Color)</parameter></parameters></function><function name="dojo.gfx.Shape"><variables><variable scope="instance" name="fillStyle"/><variable scope="instance" name="rawNode.filled"/><variable scope="instance" name="rawNode.fill.opacity"/><variable scope="instance" name="rawNode.fillcolor"/><variable scope="instance" name="strokeStyle"/><variable scope="instance" name="rawNode.stroked"/><variable scope="instance" name="strokeStyle.color"/><variable scope="instance" name="rawNode.strokecolor"/><variable scope="instance" name="rawNode.strokeweight"/><variable scope="instance" name="rawNode.stroke.opacity"/><variable scope="instance" name="rawNode.stroke.endcap"/><variable scope="instance" name="rawNode.stroke.joinstyle"/><variable scope="instance" name="rawNode.stroke.miterlimit"/><variable scope="instance" name="rawNode"/><variable scope="instance" name="shape"/><variable scope="instance" name="matrix"/><variable scope="prototype" name="_capMap"/><variable scope="prototype" name="_capMapReversed"/></variables></function><function name="dojo.gfx.Shape.setStroke" prototype="dojo.gfx.Shape"><returns type="self"/><summary>sets a stroke object (VML)</summary><parameters><parameter name="stroke" type="Object">a stroke object (see dojo.gfx.defaultStroke)</parameter></parameters></function><function name="dojo.gfx.Shape._translate" prototype="dojo.gfx.Shape"><parameters><parameter name="dict"/><parameter name="value"/></parameters></function><function name="dojo.gfx.Shape._applyTransform" prototype="dojo.gfx.Shape"/><function name="dojo.gfx.Shape.setRawNode" prototype="dojo.gfx.Shape"><summary>assigns and clears the underlying node that will represent this shape. Once set, transforms, gradients, etc, can be applied. (no fill &amp; stroke by default)</summary><parameters><parameter name="rawNode"/></parameters></function><function name="dojo.gfx.Shape.attachFill" prototype="dojo.gfx.Shape"><returns type="Object"/><summary>deduces a fill style from a Node.</summary><parameters><parameter name="rawNode" type="Node">an VML node</parameter></parameters></function><function name="dojo.gfx.Shape.attachStroke" prototype="dojo.gfx.Shape"><returns type="Object"/><summary>deduces a stroke style from a Node.</summary><parameters><parameter name="rawNode" type="Node">an VML node</parameter></parameters></function><function name="dojo.gfx.Shape.attachTransform" prototype="dojo.gfx.Shape"><returns type="dojo.gfx.matrix.Matrix"/><summary>deduces a transformation matrix from a Node.</summary><parameters><parameter name="rawNode" type="Node">an VML node</parameter></parameters></function><function name="dojo.gfx.Shape.attach" prototype="dojo.gfx.Shape"><summary>reconstructs all shape parameters from a Node.</summary><parameters><parameter name="rawNode"/></parameters></function><function name="dojo.gfx.Surface.setDimensions" prototype="dojo.gfx.Surface"><returns type="self"/><summary>sets the width and height of the rawNode</summary><parameters><parameter name="width" type="String">width of surface, e.g., "100px"</parameter><parameter name="height" type="String">height of surface, e.g., "100px"</parameter></parameters></function><function name="dojo.gfx.Surface"><variables><variable scope="instance" name="rawNode.style.width"/><variable scope="instance" name="rawNode.style.height"/><variable scope="instance" name="rawNode.coordsize"/><variable scope="instance" name="rawNode"/></variables></function><function name="dojo.gfx.Surface.getDimensions" prototype="dojo.gfx.Surface"><returns type="Object"/><summary>returns an object with properties "width" and "height"</summary></function><function name="dojo.gfx.Surface.add" prototype="dojo.gfx.Surface"><returns type="self"/><summary>adds a shape to a group/surface</summary><parameters><parameter name="shape" type="dojo.gfx.Shape">an VMLshape object</parameter></parameters></function><function name="dojo.gfx.Surface.remove" prototype="dojo.gfx.Surface"><returns type="self"/><summary>remove a shape from a group/surface</summary><parameters><parameter name="shape" type="dojo.gfx.Shape">an VML shape object</parameter><parameter name="silently" optional="true" type="Boolean">if true, regenerate a picture</parameter></parameters></function><function name="zIndex.moveToFront"><summary>moves a shape to front of its parent's list of shapes (VML)</summary></function><function name="zIndex.moveToBack"><summary>moves a shape to back of its parent's list of shapes (VML)</summary></function><function name="dojo.gfx._creators.createPath"><returns type="dojo.gfx.Path"/><summary>creates an SVG path shape</summary><parameters><parameter name="path" type="Object">a path object (see dojo.gfx.defaultPath)</parameter></parameters></function><function name="dojo.gfx._creators.createRect"><returns type="dojo.gfx.Rect"/><summary>creates an VML rectangle shape</summary><parameters><parameter name="rect" type="Object">a path object (see dojo.gfx.defaultRect)</parameter></parameters></function><function name="dojo.gfx._creators.createCircle"><returns type="dojo.gfx.Circle"/><summary>creates an VML circle shape</summary><parameters><parameter name="circle" type="Object">a circle object (see dojo.gfx.defaultCircle)</parameter></parameters></function><function name="dojo.gfx._creators.createEllipse"><returns type="dojo.gfx.Ellipse"/><summary>creates an VML ellipse shape</summary><parameters><parameter name="ellipse" type="Object">an ellipse object (see dojo.gfx.defaultEllipse)</parameter></parameters></function><function name="dojo.gfx._creators.createLine"><returns type="dojo.gfx.Line"/><summary>creates an VML line shape</summary><parameters><parameter name="line" type="Object">a line object (see dojo.gfx.defaultLine)</parameter></parameters></function><function name="dojo.gfx._creators.createPolyline"><returns type="dojo.gfx.Polyline"/><summary>creates an VML polyline/polygon shape</summary><parameters><parameter name="points" type="Object">a points object (see dojo.gfx.defaultPolyline) or an Array of points</parameter></parameters></function><function name="dojo.gfx._creators.createImage"><returns type="dojo.gfx.Image"/><summary>creates an VML image shape</summary><parameters><parameter name="image" type="Object">an image object (see dojo.gfx.defaultImage)</parameter></parameters></function><function name="dojo.gfx._creators.createGroup"><returns type="dojo.gfx.Group"/><summary>creates an VML group shape</summary></function><function name="dojo.gfx._creators.createObject"><returns type="dojo.gfx.Shape"/><summary>creates an instance of the passed shapeType class</summary><parameters><parameter name="shapeType" type="Function">a class constructor to create an instance of</parameter><parameter name="rawShape" type="Object">properties to be passed in to the classes "setShape" method</parameter><parameter name="overrideSize"/></parameters></function><function name="dojo.gfx._creators._overrideSize"><parameters><parameter name="node"/></parameters></function><object name="dojo.gfx.Path._pathVmlToSvgMap"><variables><variable name="m"/><variable name="l"/><variable name="t"/><variable name="r"/><variable name="c"/><variable name="v"/><variable name="qb"/><variable name="x"/><variable name="e"/></variables></object><object name="dojo.gfx.Path.renderers"><variables><variable name="M"/><variable name="m"/><variable name="L"/><variable name="l"/><variable name="H"/><variable name="h"/><variable name="V"/><variable name="v"/><variable name="C"/><variable name="c"/><variable name="S"/><variable name="s"/><variable name="Q"/><variable name="q"/><variable name="T"/><variable name="t"/><variable name="A"/><variable name="a"/><variable name="Z"/><variable name="z"/></variables></object><object name="dojo.gfx._creators"><summary>VML shape creators</summary></object></resource><resource location="dojo.graphics.Colorspace"><requires><environment type="common"><require>dojo.gfx.Colorspace</require></environment></requires></resource><resource location="dojo.graphics.color.hsl"><requires><environment type="common"><require>dojo.gfx.color.hsl</require></environment></requires><function name="dojo.graphics.color.rgb2hsl"><parameters><parameter name="r"/><parameter name="g"/><parameter name="b"/></parameters></function><function name="dojo.graphics.color.hsl2rgb"><parameters><parameter name="h"/><parameter name="s"/><parameter name="l"/></parameters></function><function name="dojo.graphics.color.hsl2hex"><parameters><parameter name="h"/><parameter name="s"/><parameter name="l"/></parameters></function><function name="dojo.graphics.color.hex2hsl"><parameters><parameter name="hex"/></parameters></function></resource><resource location="dojo.graphics.color.hsv"><requires><environment type="common"><require>dojo.gfx.color.hsv</require></environment></requires><function name="dojo.graphics.color.rgb2hsv"><parameters><parameter name="r"/><parameter name="g"/><parameter name="b"/></parameters></function><function name="dojo.graphics.color.hsv2rgb"><parameters><parameter name="h"/><parameter name="s"/><parameter name="v"/></parameters></function></resource><resource location="dojo.graphics.color"><requires><environment type="common"><require>dojo.gfx.color</require></environment></requires><function name="dojo.graphics.color.blend"><parameters><parameter name="a"/><parameter name="b"/><parameter name="weight"/></parameters></function><function name="dojo.graphics.color.blendHex"><parameters><parameter name="a"/><parameter name="b"/><parameter name="weight"/></parameters></function><function name="dojo.graphics.color.extractRGB"><parameters><parameter name="color"/></parameters></function><function name="dojo.graphics.color.hex2rgb"><parameters><parameter name="hex"/></parameters></function><function name="dojo.graphics.color.rgb2hex"><parameters><parameter name="r"/><parameter name="g"/><parameter name="b"/></parameters></function></resource><resource location="dojo.hostenv_adobesvg"><function name="dojo.hostenv.println"><parameters><parameter name="s"/></parameters></function><function name="dojo.debug"/><function name="dojo.hostenv.nameAnonFunc"><parameters><parameter name="anonFuncPtr"/><parameter name="namespaceObj"/></parameters></function><function name="dojo.hostenv.modulesLoaded"><variables><variable scope="instance" name="loadUriStack.length"/><variable scope="instance" name="modulesLoadedFired"/></variables></function><function name="dojo.hostenv.getNewAnonFunc"/><function name="dojo.hostenv.displayStack"/><function name="dojo.hostenv.unwindUriStack"/><function name="dojo.hostenv.loadUri"><parameters><parameter name="uri"/><parameter name="cb"/></parameters></function><function name="dojo.hostenv.loadModule"><parameters><parameter name="modulename"/><parameter name="exact_only"/><parameter name="omit_module_check"/></parameters></function><function name="dojo.hostenv.unWindGetTextStack"/><function name="dojo.hostenv.getText"><parameters><parameter name="uri"/><parameter name="async_cb"/><parameter name="fail_ok"/></parameters></function><function name="dojo.hostenv.postText"><parameters><parameter name="uri"/><parameter name="async_cb"/><parameter name="text"/><parameter name="fail_ok"/><parameter name="mime_type"/><parameter name="encoding"/></parameters></function><function name="dj_last_script_src"/></resource><resource location="dojo.hostenv_browser"><function name="dojo.hostenv.getXmlhttpObject"><returns type="XMLHTTPRequest instance"/><summary>does the work of portably generating a new XMLHTTPRequest object.</summary></function><function name="dojo.hostenv.getText"><returns type="String"/><summary>Read the contents of the specified uri and return those contents.</summary><parameters><parameter name="uri" type="A">relative or absolute uri. If absolute, it still must be in the same "domain" as we are.</parameter><parameter name="async_cb" type="If">not specified, load synchronously. If specified, load asynchronously, and use async_cb as the progress handler which takes the xmlhttp object as its argument. If async_cb, this function returns null.</parameter><parameter name="fail_ok" type="Default">false. If fail_ok and !async_cb and loading fails, return null instead of throwing.</parameter></parameters><chains><chain type="call">http.onreadystatechange</chain></chains><variables><variable scope="instance" name="_blockAsync"/></variables></function><function name="dojo.hostenv.println"><summary>prints the provided line to whatever logging container is available. If the page isn't loaded yet, the line may be added to a buffer for printing later.</summary><parameters><parameter name="line" type="String"/></parameters></function><function name="dj_addNodeEvtHdlr"><summary>non-destructively adds the specified function to the node's</summary><parameters><parameter name="node" type="the">DomNode to add the handler to</parameter><parameter name="evtName" type="should">be in the form "click" for "onclick" handlers</parameter><parameter name="fp" type="Function"/></parameters><chains><chain type="call">fp</chain><chain type="call">oldHandler</chain></chains></function><function name="dj_load_init"><parameters><parameter name="e"/></parameters></function><function name="dojo.hostenv.makeWidgets"/><function name="dojo.hostenv.writeIncludes"/><function name="dojo.doc"><summary>return the document object associated with the dojo.global()</summary></function><function name="dojo.body"><summary>return the body object associated with dojo.doc() Note: document.body is not defined for a strict xhtml document</summary></function><function name="dojo.byId"><returns type="DomNode"/><summary>similar to other library's "$" function, takes a string representing a DOM id or a DomNode and returns the corresponding DomNode. If a Node is passed, this function is a no-op. Returns a single DOM node or null, working around several browser-specific bugs to do so.</summary><parameters><parameter name="id" type="DOM">id or DOM Node</parameter><parameter name="doc" type="optional">defaults to the current value of dj_currentDocument. Can be used to retreive node references from other documents.</parameter></parameters></function><function name="dojo.setContext"><summary>changes the behavior of many core Dojo functions that deal with namespace and DOM lookup, changing them to work in a new global context. The varibles dj_currentContext and dj_currentDocument are modified as a result of calling this function.</summary><parameters><parameter name="globalObject" type="Object"/><parameter name="globalDocument" type="DocumentElement"/></parameters></function><function name="dojo._fireCallback"><parameters><parameter name="callback"/><parameter name="context"/><parameter name="cbArguments"/></parameters><chains><chain type="call">callback</chain></chains></function><function name="dojo.withGlobal"><summary>Call callback with globalObject as dojo.global() and globalObject.document as dojo.doc(). If provided, globalObject will be executed in the context of object thisObject</summary><parameters><parameter name="globalObject" type="Object"/><parameter name="callback" type="Function"/><parameter name="thisObject" optional="true" type="Object"/><parameter name="cbArguments" optional="true" type="Array"/></parameters><description>When callback() returns or throws an error, the dojo.global() and dojo.doc() will be restored to its previous state.</description></function><function name="dojo.withDoc"><summary>Call callback with documentObject as dojo.doc(). If provided, callback will be executed in the context of object thisObject</summary><parameters><parameter name="documentObject" type="Object"/><parameter name="callback" type="Function"/><parameter name="thisObject" optional="true" type="Object"/><parameter name="cbArguments" optional="true" type="Array"/></parameters><description>When callback() returns or throws an error, the dojo.doc() will be restored to its previous state.</description></function></resource><resource location="dojo.hostenv_dashboard"><function name="dojo.hostenv.println"><returns type="null"/><summary>Prints a message to the OS X console</summary><parameters><parameter name="message" type="String"/></parameters></function><function name="dojo.hostenv.getXmlhttpObject"><returns type="XMLHttpRequest"/><summary>Returns the appropriate transfer object for the call type</summary><parameters><parameter name="kwArgs" type="Object"/></parameters></function><function name="dojo.hostenv.CurlRequest"><summary>Emulates the XMLHttpRequest Object</summary><variables><variable scope="instance" name="onreadystatechange"/><variable scope="instance" name="readyState"/><variable scope="instance" name="responseText"/><variable scope="instance" name="responseXML"/><variable scope="instance" name="status"/><variable scope="instance" name="statusText"/><variable scope="instance" name="_method"/><variable scope="instance" name="_url"/><variable scope="instance" name="_async"/><variable scope="instance" name="_referrer"/><variable scope="instance" name="_headers"/><variable scope="instance" name="_save"/><variable scope="instance" name="_responseHeader"/><variable scope="instance" name="_responseHeaders"/><variable scope="instance" name="_fileName"/><variable scope="instance" name="_username"/><variable scope="instance" name="_password"/></variables></function><function name="dojo.hostenv.CurlRequest.open" prototype="dojo.hostenv.CurlRequest"><parameters><parameter name="method" type="String"/><parameter name="url" type="URL"/><parameter name="async" optional="true" type="Boolean"/><parameter name="username" optional="true" type="String"/><parameter name="password" optional="true" type="String"/></parameters></function><function name="dojo.hostenv.CurlRequest.setRequestHeader" prototype="dojo.hostenv.CurlRequest"><parameters><parameter name="label" type="String"/><parameter name="value" type="String"/></parameters></function><function name="dojo.hostenv.CurlRequest.getAllResponseHeaders" prototype="dojo.hostenv.CurlRequest"><returns type="String"/></function><function name="dojo.hostenv.CurlRequest.getResponseHeader" prototype="dojo.hostenv.CurlRequest"><returns type="String"/><parameters><parameter name="headerLabel" type="String"/></parameters></function><function name="dojo.hostenv.CurlRequest.send" prototype="dojo.hostenv.CurlRequest"><parameters><parameter name="content" type="String"/></parameters><chains><chain type="call">this.onreadystatechange</chain></chains></function><function name="dojo.hostenv.CurlRequest._formatCall"><parameters><parameter name="query"/><parameter name="url"/></parameters></function><function name="dojo.hostenv.exit"/></resource><resource location="dojo.hostenv_jsc"><function name="dojo.hostenv.getText"><parameters><parameter name="uri"/></parameters></function><function name="dojo.hostenv.loadUri"><parameters><parameter name="uri"/></parameters></function><function name="dojo.hostenv.println"><parameters><parameter name="s"/></parameters></function><function name="dojo.hostenv.getLibraryScriptUri"/></resource><resource location="dojo.hostenv_rhino"><function name="dojo.hostenv.println"><parameters><parameter name="line"/></parameters></function><function name="dojo.hostenv.getVersion"/><function name="dojo.byId"><returns type="assume it's a node"/><parameters><parameter name="id"/><parameter name="doc"/></parameters></function><function name="dojo.hostenv.loadUri"><parameters><parameter name="uri"/><parameter name="cb"/></parameters></function><function name="dojo.hostenv.exit"><parameters><parameter name="exitcode"/></parameters></function><function name="dj_rhino_current_script_via_java"><parameters><parameter name="depth"/></parameters></function><function name="readText"><parameters><parameter name="path"/><parameter name="encoding"/></parameters></function><function name="readUri"><parameters><parameter name="uri"/><parameter name="encoding"/></parameters></function><function name="dj_readInputStream"><parameters><parameter name="is"/><parameter name="encoding"/></parameters></function><function name="dojo.doc"><summary>return the document object associated with the dojo.global()</summary></function><function name="dojo.body"/><function name="setTimeout"><summary>provides timed callbacks using Java threads</summary><parameters><parameter name="func"/><parameter name="delay"/></parameters><variables><variable scope="instance" name="hasSlept"/></variables></function></resource><resource location="dojo.hostenv_spidermonkey"><function name="dojo.hostenv.exit"><parameters><parameter name="exitcode"/></parameters></function><function name="dojo.hostenv.getVersion"/><function name="dj_spidermonkey_current_file"><parameters><parameter name="depth"/></parameters></function><function name="dojo.hostenv.loadUri"><parameters><parameter name="uri"/></parameters></function></resource><resource location="dojo.hostenv_svg"><function name="dojo.debug"/><function name="dojo.hostenv.println"><parameters><parameter name="s"/></parameters></function><function name="dojo.hostenv.setModulePrefix"><parameters><parameter name="module"/><parameter name="prefix"/></parameters></function><function name="dojo.hostenv.getModulePrefix"><parameters><parameter name="module"/></parameters></function><function name="dojo.hostenv.getText"><parameters><parameter name="uri"/><parameter name="cb"/><parameter name="data"/></parameters></function><function name="dojo.hostenv.getLibaryScriptUri"/><function name="dojo.hostenv.loadUri"><parameters><parameter name="uri"/></parameters></function><function name="dojo.hostenv.loadUriAndCheck"><parameters><parameter name="uri"/><parameter name="module"/></parameters></function><function name="dojo.hostenv.loadModule"><parameters><parameter name="moduleName"/></parameters></function><function name="dojo.hostenv.startPackage"><parameters><parameter name="moduleName"/></parameters></function><function name="window.XMLSerialzer"><variables><variable scope="instance" name="serializeToString"/></variables></function><function name="window.XMLSerialzer.serializeToString" instance="window.XMLSerialzer"><parameters><parameter name="node"/></parameters></function><function name="window.DOMParser"><variables><variable scope="instance" name="parseFromString"/></variables></function><function name="window.DOMParser.parseFromString" instance="window.DOMParser"><parameters><parameter name="s"/></parameters></function><function name="window.XMLHttpRequest"><variables><variable scope="instance" name="responseText"/><variable scope="instance" name="responseXML"/><variable scope="instance" name="status"/><variable scope="instance" name="statusText"/><variable scope="instance" name="onload"/><variable scope="instance" name="readyState"/><variable scope="instance" name="onreadystatechange"/><variable scope="instance" name="responseBody"/><variable scope="instance" name="responseStream"/><variable scope="instance" name="abort"/><variable scope="instance" name="getAllResponseHeaders"/><variable scope="instance" name="getResponseHeader"/><variable scope="instance" name="setRequestHeader"/><variable scope="instance" name="open"/><variable scope="instance" name="send"/></variables></function><function name="window.XMLHttpRequest.onload" instance="window.XMLHttpRequest"/><function name="window.XMLHttpRequest.onreadystatechange" instance="window.XMLHttpRequest"/><function name="window.XMLHttpRequest.abort" instance="window.XMLHttpRequest"/><function name="window.XMLHttpRequest.getAllResponseHeaders" instance="window.XMLHttpRequest"/><function name="window.XMLHttpRequest.getResponseHeader" instance="window.XMLHttpRequest"><parameters><parameter name="n"/></parameters></function><function name="window.XMLHttpRequest.setRequestHeader" instance="window.XMLHttpRequest"><parameters><parameter name="nm"/><parameter name="val"/></parameters></function><function name="window.XMLHttpRequest.open" instance="window.XMLHttpRequest"><parameters><parameter name="meth"/><parameter name="url"/><parameter name="async"/></parameters></function><function name="window.XMLHttpRequest.send" instance="window.XMLHttpRequest"><parameters><parameter name="data"/></parameters></function></resource><resource location="dojo.hostenv_wsh"><function name="dojo.hostenv.getCurrentScriptUri"/><function name="dojo.hostenv.getText"><parameters><parameter name="fpath"/></parameters></function><function name="dojo.hostenv.exit"><parameters><parameter name="exitcode"/></parameters></function></resource><resource location="dojo.html._"><requires><environment type="common"><require>dojo.html.common</require><require>dojo.html.style</require></environment></requires></resource><resource location="dojo.html.color"><requires><environment type="common"><require>dojo.html.style</require><require>dojo.gfx.color</require><require>dojo.lang.common</require></environment></requires><function name="dojo.html.getBackgroundColor"><returns type="array">the background color of the passed node as a 32-bit color (RGBA)</returns><parameters><parameter name="node" type="HTMLElement"/></parameters></function></resource><resource location="dojo.html.common"><requires><environment type="common"><require>dojo.lang.common</require><require>dojo.dom</require></environment></requires><function name="dojo.html.body"/><function name="dojo.html.getEventTarget"><returns type="HTMLElement"/><summary>Returns the target of an event</summary><parameters><parameter name="evt" type="DOMEvent"/></parameters></function><function name="dojo.html.getViewport"><returns type="object"/><summary>Returns the dimensions of the viewable area of a browser window</summary></function><function name="dojo.html.getScroll"><summary>Returns the scroll position of the document</summary></function><function name="dojo.html.getParentByType"><returns type="HTMLElement"/><summary>Returns the first ancestor of node with tagName type.</summary><parameters><parameter name="node" type="HTMLElement"/><parameter name="type" type="string"/></parameters></function><function name="dojo.html.getAttribute"><returns type="string"/><summary>Returns the value of attribute attr from node.</summary><parameters><parameter name="node" type="HTMLElement"/><parameter name="attr" type="string"/></parameters></function><function name="dojo.html.hasAttribute"><returns type="boolean"/><summary>Determines whether or not the specified node carries a value for the attribute in question.</summary><parameters><parameter name="node" type="HTMLElement"/><parameter name="attr" type="string"/></parameters></function><function name="dojo.html.getCursorPosition"><returns type="object"/><summary>Returns the mouse position relative to the document (not the viewport). For example, if you have a document that is 10000px tall, but your browser window is only 100px tall, if you scroll to the bottom of the document and call this function it will return {x: 0, y: 10000} NOTE: for events delivered via dojo.event.connect() and/or dojoAttachEvent (for widgets), you can just access evt.pageX and evt.pageY, rather than calling this function.</summary><parameters><parameter name="e" type="DOMEvent"/></parameters></function><function name="dojo.html.isTag"><returns type="string"/><summary>Like dojo.dom.isTag, except case-insensitive</summary><parameters><parameter name="node" type="HTMLElement"/></parameters></function><function name="dojo.html.createExternalElement"><returns type="HTMLElement"/><summary>Creates an element in the HTML document, here for ActiveX activation workaround.</summary><parameters><parameter name="doc" type="HTMLDocument"/><parameter name="tag" type="string"/></parameters></function><function name="dojo.html._callDeprecated"><parameters><parameter name="inFunc"/><parameter name="replFunc"/><parameter name="args"/><parameter name="argName"/><parameter name="retValue"/></parameters></function><function name="dojo.html.getViewportWidth"/><function name="dojo.html.getViewportHeight"/><function name="dojo.html.getViewportSize"/><function name="dojo.html.getScrollTop"/><function name="dojo.html.getScrollLeft"/><function name="dojo.html.getScrollOffset"/></resource><resource location="dojo.html.display"><requires><environment type="common"><require>dojo.html.style</require></environment></requires><function name="dojo.html._toggle"><parameters><parameter name="node"/><parameter name="tester"/><parameter name="setter"/></parameters></function><function name="dojo.html.show"><summary>Show the passed element by reverting display property set by dojo.html.hide</summary><parameters><parameter name="node" type="HTMLElement"/></parameters></function><function name="dojo.html.hide"><summary>Hide the passed element by setting display:none</summary><parameters><parameter name="node" type="HTMLElement"/></parameters></function><function name="dojo.html.setShowing"><summary>Calls show() if showing is true, hide() otherwise</summary><parameters><parameter name="node" type="HTMLElement"/><parameter name="showing" optional="true" type="boolean"/></parameters></function><function name="dojo.html.isShowing"><returns type="boolean"/><summary>Returns whether the element is displayed or not. FIXME: returns true if node is bad, isHidden would be easier to make correct</summary><parameters><parameter name="node" type="HTMLElement"/></parameters></function><function name="dojo.html.toggleShowing"><returns type="boolean"/><summary>Call setShowing() on node with the complement of isShowing(), then return the new value of isShowing()</summary><parameters><parameter name="node" type="HTMLElement"/></parameters></function><function name="dojo.html.suggestDisplayByTagName"><returns type="string"/><summary>Suggest a value for the display property that will show 'node' based on it's tag</summary><parameters><parameter name="node" type="HTMLElement"/></parameters></function><function name="dojo.html.setDisplay"><summary>Sets the value of style.display to value of 'display' parameter if it is a string. Otherwise, if 'display' is false, set style.display to 'none'. Finally, set 'display' to a suggested display value based on the node's tag</summary><parameters><parameter name="node" type="HTMLElement"/><parameter name="display" type="string"/></parameters></function><function name="dojo.html.isDisplayed"><returns type="boolean"/><summary>Is true if the the computed display style for node is not 'none' FIXME: returns true if node is bad, isNotDisplayed would be easier to make correct</summary><parameters><parameter name="node" type="HTMLElement"/></parameters></function><function name="dojo.html.toggleDisplay"><returns type="boolean"/><summary>Call setDisplay() on node with the complement of isDisplayed(), then return the new value of isDisplayed()</summary><parameters><parameter name="node" type="HTMLElement"/></parameters></function><function name="dojo.html.setVisibility"><summary>Sets the value of style.visibility to value of 'visibility' parameter if it is a string. Otherwise, if 'visibility' is false, set style.visibility to 'hidden'. Finally, set style.visibility to 'visible'.</summary><parameters><parameter name="node" type="HTMLElement"/><parameter name="visibility" type="string"/></parameters></function><function name="dojo.html.isVisible"><returns type="boolean"/><summary>Returns true if the the computed visibility style for node is not 'hidden' FIXME: returns true if node is bad, isInvisible would be easier to make correct</summary><parameters><parameter name="node" type="HTMLElement"/></parameters></function><function name="dojo.html.toggleVisibility"><returns type="boolean"/><summary>Call setVisibility() on node with the complement of isVisible(), then return the new value of isVisible()</summary><parameters><parameter name="node"/></parameters></function><function name="dojo.html.setOpacity"><summary>Sets the opacity of node in a cross-browser way. float between 0.0 (transparent) and 1.0 (opaque)</summary><parameters><parameter name="node" type="HTMLElement"/><parameter name="opacity" type="float"/><parameter name="dontFixOpacity" optional="true" type="boolean"/></parameters></function><function name="dojo.html.clearOpacity"><summary>Clears any opacity setting on the passed element.</summary><parameters><parameter name="node" type="HTMLElement"/></parameters></function><function name="dojo.html.getOpacity"><returns type="float"/><summary>Returns the opacity of the passed element</summary><parameters><parameter name="node" type="HTMLElement"/></parameters></function><object name="dojo.html.displayMap"><variables><variable name="tr"/><variable name="td"/><variable name="th"/><variable name="img"/><variable name="span"/><variable name="input"/><variable name="button"/></variables></object></resource><resource location="dojo.html.iframe"><requires><environment type="common"><require>dojo.html.util</require></environment></requires><function name="dojo.html.iframeContentWindow"><returns type="Window">the window reference of the passed iframe</returns><parameters><parameter name="iframe_el" type="HTMLIFrameElement"/></parameters></function><function name="dojo.html.iframeContentDocument"><returns type="HTMLDocument">a reference to the document object inside iframe_el</returns><parameters><parameter name="iframe_el" type="HTMLIFrameElement"/></parameters></function><function name="dojo.html.BackgroundIframe"><summary>For IE z-index schenanigans Two possible uses: 1. new dojo.html.BackgroundIframe(node) Makes a background iframe as a child of node, that fills area (and position) of node 2. new dojo.html.BackgroundIframe() Attaches frame to dojo.body(). User must call size() to set size.</summary><parameters><parameter name="node" type="HTMLElement"/></parameters><variables><variable scope="instance" name="iframe"/><variable scope="instance" name="iframe.tabIndex"/><variable scope="instance" name="domNode"/><variable scope="instance" name="iframe.style.display"/><variable scope="instance" name="iframe.style.width"/><variable scope="instance" name="iframe.style.height"/><variable scope="instance" name="iframe.style.zIndex"/><variable scope="prototype" name="iframe"/></variables></function><function name="dojo.html.BackgroundIframe.onResized" prototype="dojo.html.BackgroundIframe"><summary>Resize event handler. TODO: this function shouldn't be necessary but setting width=height=100% doesn't work!</summary></function><function name="dojo.html.BackgroundIframe.size" prototype="dojo.html.BackgroundIframe"><summary>Call this function if the iframe is connected to dojo.body() rather than the node being shadowed</summary><parameters><parameter name="node" type="HTMLElement"/></parameters></function><function name="dojo.html.BackgroundIframe.setZIndex" prototype="dojo.html.BackgroundIframe"><summary>Sets the z-index of the background iframe.</summary><parameters><parameter name="node" type="HTMLElement"/></parameters></function><function name="dojo.html.BackgroundIframe.show" prototype="dojo.html.BackgroundIframe"><summary>show the iframe</summary></function><function name="dojo.html.BackgroundIframe.hide" prototype="dojo.html.BackgroundIframe"><summary>hide the iframe</summary></function><function name="dojo.html.BackgroundIframe.remove" prototype="dojo.html.BackgroundIframe"><summary>remove the iframe</summary></function></resource><resource location="dojo.html.layout"><requires><environment type="common"><require>dojo.html.common</require><require>dojo.html.style</require><require>dojo.html.display</require></environment></requires><function name="dojo.html.sumAncestorProperties"><returns type="mixed"/><summary>Returns the sum of the passed property on all ancestors of node.</summary><parameters><parameter name="node" type="HTMLElement"/><parameter name="prop" type="string"/></parameters></function><function name="dojo.html.setStyleAttributes"><summary>allows a dev to pass a string similar to what you'd pass in style="", and apply it to a node.</summary><parameters><parameter name="node" type="HTMLElement"/><parameter name="attributes" type="string"/></parameters></function><function name="dojo.html.getAbsolutePosition" is="dojo.html.abs"/><function name="dojo.html.abs"><returns type="mixed"/><summary>Gets the absolute position of the passed element based on the document itself.</summary><parameters><parameter name="node" type="HTMLElement"/><parameter name="includeScroll" optional="true" type="boolean"/><parameter name="boxType" optional="true" type="string"/></parameters></function><function name="dojo.html.isPositionAbsolute"><returns type="boolean"/><summary>Returns true if the element is absolutely positioned.</summary><parameters><parameter name="node" type="HTMLElement"/></parameters></function><function name="dojo.html._sumPixelValues"><parameters><parameter name="node" type="HTMLElement"/><parameter name="selectors"/><parameter name="autoIsZero"/></parameters></function><function name="dojo.html.getMargin"><summary>Returns the width and height of the passed node's margin</summary><parameters><parameter name="node" type="HTMLElement"/></parameters></function><function name="dojo.html.getBorder"><summary>Returns the width and height of the passed node's border</summary><parameters><parameter name="node" type="HTMLElement"/></parameters></function><function name="dojo.html.getBorderExtent"><returns type="integer">the width of the requested border</returns><parameters><parameter name="node" type="HTMLElement"/><parameter name="side" type="string"/></parameters></function><function name="dojo.html.getMarginExtent"><returns type="integer">the width of the requested margin</returns><parameters><parameter name="node" type="HTMLElement"/><parameter name="side" type="string"/></parameters></function><function name="dojo.html.getPaddingExtent"><returns type="integer"/><summary>Returns the width of the requested padding</summary><parameters><parameter name="node" type="HTMLElement"/><parameter name="side" type="string"/></parameters></function><function name="dojo.html.getPadding"><summary>Returns the width and height of the passed node's padding</summary><parameters><parameter name="node" type="HTMLElement"/></parameters></function><function name="dojo.html.getPadBorder"><returns type="object"/><summary>Returns the width and height of the passed node's padding and border</summary><parameters><parameter name="node" type="HTMLElement"/></parameters></function><function name="dojo.html.getBoxSizing"><returns type="string"/><summary>Returns which box model the passed element is working with</summary><parameters><parameter name="node" type="HTMLElement"/></parameters></function><function name="dojo.html.isBorderBox"><returns type="boolean">whether the passed element is using border box sizing or not.</returns><parameters><parameter name="node" type="HTMLElement"/></parameters></function><function name="dojo.html.getBorderBox"><returns type="object"/><summary>Returns the dimensions of the passed element based on border-box sizing.</summary><parameters><parameter name="node" type="HTMLElement"/></parameters></function><function name="dojo.html.getPaddingBox"><summary>Returns the dimensions of the padding box (see http: // www.w3.org/TR/CSS21/box.html)</summary><parameters><parameter name="node" type="HTMLElement"/></parameters></function><function name="dojo.html.getContentBox"><summary>Returns the dimensions of the content box (see http: // www.w3.org/TR/CSS21/box.html)</summary><parameters><parameter name="node" type="HTMLElement"/></parameters></function><function name="dojo.html.setContentBox"><returns type="object"/><summary>Sets the dimensions of the passed node according to content sizing.</summary><parameters><parameter name="node" type="HTMLElement"/><parameter name="args" type="object"/></parameters></function><function name="dojo.html.getMarginBox"><returns type="object">the dimensions of the passed node including any margins.</returns><parameters><parameter name="node" type="HTMLElement"/></parameters></function><function name="dojo.html.setMarginBox"><returns type="object"/><summary>Sets the dimensions of the passed node using margin box calcs.</summary><parameters><parameter name="node" type="HTMLElement"/><parameter name="args" type="object"/></parameters></function><function name="dojo.html.getElementBox"><returns type="object"/><summary>return dimesions of a node based on the passed box model type.</summary><parameters><parameter name="node" type="HTMLElement"/><parameter name="type" type="string"/></parameters></function><function name="dojo.html.toCoordinateObject" is="dojo.html.toCoordinateArray"/><function name="dojo.html.toCoordinateArray"><returns type="object"/><summary>Converts an array of coordinates into an object of named arguments.</summary><parameters><parameter name="coords" type="array"/><parameter name="includeScroll" optional="true" type="boolean"/><parameter name="boxtype" optional="true" type="string"/></parameters></function><function name="dojo.html.setMarginBoxWidth" is="dojo.html.setOuterWidth"/><function name="dojo.html.setOuterWidth"><parameters><parameter name="node"/><parameter name="width"/></parameters></function><function name="dojo.html.setMarginBoxHeight" is="dojo.html.setOuterHeight"/><function name="dojo.html.setOuterHeight"/><function name="dojo.html.getMarginBoxWidth" is="dojo.html.getOuterWidth"/><function name="dojo.html.getOuterWidth"/><function name="dojo.html.getMarginBoxHeight" is="dojo.html.getOuterHeight"/><function name="dojo.html.getOuterHeight"/><function name="dojo.html.getTotalOffset"><parameters><parameter name="node"/><parameter name="type"/><parameter name="includeScroll"/></parameters></function><function name="dojo.html.getAbsoluteX"><parameters><parameter name="node"/><parameter name="includeScroll"/></parameters></function><function name="dojo.html.getAbsoluteY"><parameters><parameter name="node"/><parameter name="includeScroll"/></parameters></function><function name="dojo.html.totalOffsetLeft"><parameters><parameter name="node"/><parameter name="includeScroll"/></parameters></function><function name="dojo.html.totalOffsetTop"><parameters><parameter name="node"/><parameter name="includeScroll"/></parameters></function><function name="dojo.html.getMarginWidth"><parameters><parameter name="node"/></parameters></function><function name="dojo.html.getMarginHeight"><parameters><parameter name="node"/></parameters></function><function name="dojo.html.getBorderWidth"><parameters><parameter name="node"/></parameters></function><function name="dojo.html.getBorderHeight"><parameters><parameter name="node"/></parameters></function><function name="dojo.html.getPaddingWidth"><parameters><parameter name="node"/></parameters></function><function name="dojo.html.getPaddingHeight"><parameters><parameter name="node"/></parameters></function><function name="dojo.html.getPadBorderWidth"><parameters><parameter name="node"/></parameters></function><function name="dojo.html.getPadBorderHeight"><parameters><parameter name="node"/></parameters></function><function name="dojo.html.getBorderBoxWidth" is="dojo.html.getInnerWidth"/><function name="dojo.html.getInnerWidth"/><function name="dojo.html.getBorderBoxHeight" is="dojo.html.getInnerHeight"/><function name="dojo.html.getInnerHeight"/><function name="dojo.html.getContentBoxWidth" is="dojo.html.getContentWidth"/><function name="dojo.html.getContentWidth"/><function name="dojo.html.getContentBoxHeight" is="dojo.html.getContentHeight"/><function name="dojo.html.getContentHeight"/><function name="dojo.html.setContentBoxWidth" is="dojo.html.setContentWidth"/><function name="dojo.html.setContentWidth"><parameters><parameter name="node"/><parameter name="width"/></parameters></function><function name="dojo.html.setContentBoxHeight" is="dojo.html.setContentHeight"/><function name="dojo.html.setContentHeight"><parameters><parameter name="node"/><parameter name="height"/></parameters></function><object name="dojo.html.boxSizing"><variables><variable name="MARGIN_BOX"/><variable name="BORDER_BOX"/><variable name="PADDING_BOX"/><variable name="CONTENT_BOX"/></variables></object></resource><resource location="dojo.html.metrics"><requires><environment type="common"><require>dojo.html.layout</require></environment></requires><function name="dojo.html.getScrollbar"><returns type="object">the width of a scrollbar. set up the test nodes.</returns></function><function name="dojo.html.getFontMeasurements"><returns type="object"/><summary>Returns an object that has pixel equivilents of standard font size values.</summary></function><function name="dojo.html.getCachedFontMeasurements"><parameters><parameter name="recalculate"/></parameters></function><function name="dojo.html.measureFragment"><returns type="object"/><summary>get the dimensions of passed node if it were populated with passed html.</summary><parameters><parameter name="node" type="HTMLElement"/><parameter name="html" type="string"/><parameter name="boxType" optional="true" type="string"/></parameters></function><function name="dojo.html.getFittedFragment"><summary>Given html, return the fragment that will fit on one line of passed node.</summary><parameters><parameter name="node" type="HTMLElement"/><parameter name="html" type="string"/></parameters></function><function name="dojo.html.fitToElement"><returns type="string"/><summary>will fit as much html as possible into node, and return the unused portion, with tag corrections.</summary><parameters><parameter name="node" type="HTMLElement"/><parameter name="html" type="string"/></parameters></function></resource><resource location="dojo.html.selection"><requires><environment type="common"><require>dojo.html.common</require><require>dojo.dom</require><require>dojo.lang.common</require></environment></requires><function name="dojo.html.clearSelection"><summary>deselect the current selection to make it empty</summary></function><function name="dojo.html.disableSelection"><summary>disable selection on a node</summary><parameters><parameter name="element" type="DomNode"/></parameters></function><function name="dojo.html.enableSelection"><summary>enable selection on a node</summary><parameters><parameter name="element" type="DomNode"/></parameters></function><function name="dojo.html.selectElement"><parameters><parameter name="element" type="DomNode"/></parameters></function><function name="dojo.html.selectInputText"><summary>select all the text in an input element</summary><parameters><parameter name="element" type="DomNode"/></parameters></function><function name="dojo.html.isSelectionCollapsed"/><function name="dojo.html.selection.getType"><summary>Get the selection type (like document.select.type in IE).</summary></function><function name="dojo.html.selection.isCollapsed"><summary>return whether the current selection is empty</summary></function><function name="dojo.html.selection.getSelectedElement"><summary>Retrieves the selected element (if any), just in the case that a single element (object like and image or a table) is selected.</summary></function><function name="dojo.html.selection.getParentElement"><summary>Get the parent element of the current selection</summary></function><function name="dojo.html.selection.getSelectedText"><summary>Return the text (no html tags) included in the current selection or null if no text is selected</summary></function><function name="dojo.html.selection.getSelectedHtml"><summary>Return the html of the current selection or null if unavailable</summary></function><function name="dojo.html.selection.hasAncestorElement"><summary>Check whether current selection has a parent element which is of type tagName (or one of the other specified tagName)</summary><parameters><parameter name="tagName" type="String ..."/></parameters><chains><chain type="call">dojo.html.selection.getAncestorElement</chain></chains></function><function name="dojo.html.selection.getAncestorElement"><summary>Return the parent element of the current selection which is of type tagName (or one of the other specified tagName)</summary><parameters><parameter name="tagName" type="String ..."/></parameters></function><function name="dojo.html.selection.isTag"><parameters><parameter name="node" type="DomNode"/><parameter name="tags" type="Array"/></parameters></function><function name="dojo.html.selection.selectElement"><summary>clear previous selection and select element (including all its children)</summary><parameters><parameter name="element" type="DomNode"/></parameters></function><function name="dojo.html.selection.selectElementChildren"><summary>clear previous selection and select the content of the node (excluding the node itself)</summary><parameters><parameter name="element" type="DomNode"/></parameters></function><function name="dojo.html.selection.getBookmark"><summary>Retrieves a bookmark that can be used with moveToBookmark to return to the same range</summary></function><function name="dojo.html.selection.moveToBookmark"><summary>Moves current selection to a bookmark</summary><parameters><parameter name="bookmark" type="this">should be a returned object from dojo.html.selection.getBookmark()</parameter></parameters></function><function name="dojo.html.selection.collapse"><summary>clear current selection</summary><parameters><parameter name="beginning" type="Boolean"/></parameters></function><function name="dojo.html.selection.remove"><summary>delete current selection</summary></function></resource><resource location="dojo.html.shadow"><requires><environment type="common"><require>dojo.lfx.shadow</require></environment></requires></resource><resource location="dojo.html.style"><requires><environment type="common"><require>dojo.html.common</require><require>dojo.uri.Uri</require></environment></requires><function name="dojo.html.getClass"><returns type="string"/><summary>Returns the string value of the list of CSS classes currently assigned directly to the node in question. Returns an empty string if no class attribute is found;</summary><parameters><parameter name="node" type="HTMLElement"/></parameters></function><function name="dojo.html.getClasses"><returns type="array"/><summary>Returns an array of CSS classes currently assigned directly to the node in question. Returns an empty array if no classes are found;</summary><parameters><parameter name="node" type="HTMLElement"/></parameters></function><function name="dojo.html.hasClass"><returns type="boolean"/><summary>Returns whether or not the specified classname is a portion of the class list currently applied to the node. Does not cover cascaded styles, only classes directly applied to the node.</summary><parameters><parameter name="node" type="HTMLElement"/><parameter name="classname" type="string"/></parameters></function><function name="dojo.html.prependClass"><returns type="boolean"/><summary>Adds the specified class to the beginning of the class list on the passed node. This gives the specified class the highest precidence when style cascading is calculated for the node. Returns true or false; indicating success or failure of the operation, respectively.</summary><parameters><parameter name="node" type="HTMLElement"/><parameter name="classStr" type="string"/></parameters></function><function name="dojo.html.addClass"><returns type="boolean"/><summary>Adds the specified class to the end of the class list on the passed &amp;node;. Returns &amp;true; or &amp;false; indicating success or failure.</summary><parameters><parameter name="node" type="HTMLElement"/><parameter name="classStr" type="string"/></parameters></function><function name="dojo.html.setClass"><summary>Clobbers the existing list of classes for the node, replacing it with the list given in the 2nd argument. Returns true or false indicating success or failure.</summary><parameters><parameter name="node" type="HTMLElement"/><parameter name="classStr" type="string"/></parameters></function><function name="dojo.html.removeClass"><returns type="boolean"/><summary>Removes the className from the node;. Returns true or false indicating success or failure.</summary><parameters><parameter name="node" type="HTMLElement"/><parameter name="classStr" type="string"/><parameter name="allowPartialMatches" optional="true" type="boolean"/></parameters></function><function name="dojo.html.replaceClass"><summary>Replaces 'oldClass' and adds 'newClass' to node</summary><parameters><parameter name="node" type="HTMLElement"/><parameter name="newClass" type="string"/><parameter name="oldClass" type="string"/></parameters></function><function name="dojo.html.getElementsByClass"><returns type="NodeList"/><summary>Returns an array of nodes for the given classStr, children of a</summary><parameters><parameter name="classStr" type="string"/><parameter name="parent" type="and">optionally of a certain nodeType FIXME: temporarily set to false because of several dojo tickets related to the xpath version not working consistently in firefox.</parameter><parameter name="nodeType" optional="true" type="string"/><parameter name="classMatchType" optional="true" type="integer"/><parameter name="useNonXpath" optional="true" type="boolean"/></parameters></function><function name="dojo.html.toCamelCase"><returns type="string"/><summary>Translates a CSS selector string to a camel-cased one.</summary><parameters><parameter name="selector" type="string"/></parameters></function><function name="dojo.html.toSelectorCase"><returns type="string"/><summary>Translates a camel cased string to a selector cased one.</summary><parameters><parameter name="selector" type="string"/></parameters></function><function name="dojo.html.getComputedStyle"><returns type="integer"/><summary>Returns the computed style of cssSelector on node.</summary><parameters><parameter name="node" type="HTMLElement"/><parameter name="cssSelector" type="string"/><parameter name="inValue" optional="true" type="integer"/></parameters></function><function name="dojo.html.getStyleProperty"><returns type="string"/><summary>Returns the value of the passed style</summary><parameters><parameter name="node" type="HTMLElement"/><parameter name="cssSelector" type="string"/></parameters></function><function name="dojo.html.getStyle"><returns type="string || integer"/><summary>Returns the computed value of the passed style</summary><parameters><parameter name="node" type="HTMLElement"/><parameter name="cssSelector" type="string"/></parameters></function><function name="dojo.html.setStyle"><summary>Set the value of passed style on node</summary><parameters><parameter name="node" type="HTMLElement"/><parameter name="cssSelector" type="string"/><parameter name="value" type="string"/></parameters></function><function name="dojo.html.setStyleText"><summary>Try to set the entire cssText property of the passed target; equiv of setting style attribute.</summary><parameters><parameter name="target" type="HTMLElement"/><parameter name="text" type="string"/></parameters></function><function name="dojo.html.copyStyle"><summary>work around for opera which doesn't have cssText, and for IE which fails on setAttribute</summary><parameters><parameter name="target" type="HTMLElement"/><parameter name="source" type="HTMLElement"/></parameters></function><function name="dojo.html.getUnitValue"><returns type="object"/><summary>Get the value of passed selector, with the specific units used</summary><parameters><parameter name="node" type="HTMLElement"/><parameter name="cssSelector" type="string"/><parameter name="autoIsZero" optional="true" type="boolean"/></parameters></function><function name="dojo.html.getPixelValue"><returns type="integer"/><summary>Get the value of passed selector in pixels.</summary><parameters><parameter name="node" type="HTMLElement"/><parameter name="cssSelector" type="string"/><parameter name="autoIsZero" optional="true" type="boolean"/></parameters></function><function name="dojo.html.setPositivePixelValue"><returns type="boolean"/><summary>Attempt to set the value of selector on node as a positive pixel value.</summary><parameters><parameter name="node" type="HTMLElement"/><parameter name="selector" type="string"/><parameter name="value" type="integer"/></parameters></function><function name="dojo.html.insertCssRule"><returns type="integer"/><summary>Attempt to insert declaration as selector on the internal stylesheet; if index try to set it there.</summary><parameters><parameter name="selector" type="string"/><parameter name="declaration" type="string"/><parameter name="index" optional="true" type="integer"/></parameters></function><function name="dojo.html.removeCssRule"><returns type="boolean"/><summary>Attempt to remove the rule at index.</summary><parameters><parameter name="index" optional="true" type="integer"/></parameters></function><function name="dojo.html.insertCssFile"><returns type="HTMLStyleElement"/><summary>calls css by XmlHTTP and inserts it into DOM as &lt;style [widgetType="widgetType"]&gt; *downloaded cssText*&lt;/style&gt;</summary><parameters><parameter name="URI" type="string"/><parameter name="doc" optional="true" type="HTMLDocument"/><parameter name="checkDuplicates" optional="true" type="boolean"/><parameter name="fail_ok" type="boolean"/></parameters></function><function name="dojo.html.insertCssText"><returns type="HTMLStyleElement"/><summary>Attempt to insert CSS rules into the document through inserting a style element DomNode Style = insertCssText(String ".dojoMenu {color: green;}"[, DomDoc document, dojo.uri.Uri Url ])</summary><parameters><parameter name="cssStr" type="string"/><parameter name="doc" optional="true" type="HTMLDocument"/><parameter name="URI" optional="true" type="string"/></parameters></function><function name="dojo.html.fixPathsInCssText"><returns type="string"/><summary>usage: cssText comes from dojoroot/src/widget/templates/Foobar.css it has .dojoFoo { background-image: url(images/bar.png);} then uri should point to dojoroot/src/widget/templates/</summary><parameters><parameter name="cssStr" type="string"/><parameter name="URI" type="string"/></parameters></function><function name="dojo.html.setActiveStyleSheet"><summary>Activate style sheet with specified title.</summary><parameters><parameter name="title" type="string"/></parameters></function><function name="dojo.html.getActiveStyleSheet"><returns type="string"/><summary>return the title of the currently active stylesheet</summary></function><function name="dojo.html.getPreferredStyleSheet"><returns type="string"/><summary>Return the preferred stylesheet title (i.e. link without alt attribute)</summary></function><function name="dojo.html.applyBrowserClass"><summary>Applies pre-set class names based on browser &amp; version to the passed node. Modified version of Morris' CSS hack.</summary><parameters><parameter name="node" type="HTMLElement"/></parameters></function><object name="dojo.html.getUnitValue.bad"><variables><variable name="value"/><variable name="units"/></variables></object></resource><resource location="dojo.html.util"><requires><environment type="common"><require>dojo.html.layout</require></environment></requires><function name="dojo.html.getElementWindow"><returns type="Window"/><summary>Get the window object where the element is placed in.</summary><parameters><parameter name="element" type="HTMLElement"/></parameters></function><function name="dojo.html.getDocumentWindow"><returns type="Window"/><summary>Get window object associated with document doc</summary><parameters><parameter name="doc"/></parameters></function><function name="dojo.html.gravity"><returns type="integer"/><summary>Calculates the mouse's direction of gravity relative to the centre of the given node. &lt;p&gt; If you wanted to insert a node into a DOM tree based on the mouse position you might use the following code: &lt;pre&gt; if (gravity(node, e) &amp; gravity.NORTH) { [insert before]; } else { [insert after]; } &lt;/pre&gt; @param node The node @param e The event containing the mouse coordinates @return The directions, NORTH or SOUTH and EAST or WEST. These are properties of the function.</summary><parameters><parameter name="node" type="HTMLElement"/><parameter name="e" type="DOMEvent"/></parameters></function><function name="dojo.html.overElement"><summary>Returns whether the mouse is over the passed element. Element must be display:block (ie, not a &lt;span&gt;)</summary><parameters><parameter name="element" type="HTMLElement"/><parameter name="e" type="DOMEvent"/></parameters></function><function name="dojo.html.renderedTextContent"><returns type="string"/><summary>Attempts to return the text as it would be rendered, with the line breaks sorted out nicely. Unfinished.</summary><parameters><parameter name="node" type="HTMLElement"/></parameters></function><function name="dojo.html.createNodesFromText"><returns type="array"/><summary>Attempts to create a set of nodes based on the structure of the passed text.</summary><parameters><parameter name="txt" type="string"/><parameter name="trim" optional="true" type="boolean"/></parameters></function><function name="dojo.html.placeOnScreen"><returns type="mixed"/><summary>Keeps 'node' in the visible area of the screen while trying to place closest to desiredX, desiredY. The input coordinates are expected to be the desired screen position, not accounting for scrolling. If you already accounted for scrolling, set 'hasScroll' to true. Set padding to either a number or array for [paddingX, paddingY] to put some buffer around the element you want to position. Set which corner(s) you want to bind to, such as placeOnScreen(node, desiredX, desiredY, padding, hasScroll, "TR") placeOnScreen(node, [desiredX, desiredY], padding, hasScroll, ["TR", "BL"]) The desiredX/desiredY will be treated as the topleft(TL)/topright(TR) or BottomLeft(BL)/BottomRight(BR) corner of the node. Each corner is tested and if a perfect match is found, it will be used. Otherwise, it goes through all of the specified corners, and choose the most appropriate one. By default, corner = ['TL']. If tryOnly is set to true, the node will not be moved to the place. NOTE: node is assumed to be absolutely or relatively positioned. Alternate call sig: placeOnScreen(node, [x, y], padding, hasScroll) Examples: placeOnScreen(node, 100, 200) placeOnScreen("myId", [800, 623], 5) placeOnScreen(node, 234, 3284, [2, 5], true)</summary><parameters><parameter name="node" type="HTMLElement"/><parameter name="desiredX" type="integer"/><parameter name="desiredY" type="integer"/><parameter name="padding" type="integer"/><parameter name="hasScroll" optional="true" type="boolean"/><parameter name="corners" optional="true" type="string"/><parameter name="tryOnly" optional="true" type="boolean"/></parameters></function><function name="dojo.html.placeOnScreenPoint"><parameters><parameter name="node"/><parameter name="desiredX"/><parameter name="desiredY"/><parameter name="padding"/><parameter name="hasScroll"/></parameters></function><function name="dojo.html.placeOnScreenAroundElement"><returns type="object"/><summary>Like placeOnScreen, except it accepts aroundNode instead of x,y and attempts to place node around it. aroundType (see dojo.html.boxSizing in html/layout.js) determines which box of the</summary><parameters><parameter name="node" type="HTMLElement"/><parameter name="aroundNode" type="should">be used to calculate the outer box.</parameter><parameter name="padding" type="integer"/><parameter name="aroundType" optional="true" type="string"/><parameter name="aroundCorners" type="TL'">'BL', 'BL': 'TL'}</parameter><parameter name="tryOnly" optional="true" type="boolean"/></parameters></function><function name="dojo.html.scrollIntoView"><summary>Scroll the passed node into view, if it is not.</summary><parameters><parameter name="node" type="HTMLElement"/></parameters></function></resource><resource location="dojo.html"><requires><environment type="common"><require>dojo.html.*</require></environment></requires></resource><resource location="dojo.i18n.common"><function name="dojo.i18n.getLocalization"><returns type="Object"/><summary>Returns an Object containing the localization for a given resource bundle in a package, matching the specified locale.</summary><parameters><parameter name="packageName" type="package">which is associated with this resource</parameter><parameter name="bundleName" type="the">base filename of the resource bundle (without the ".js" suffix)</parameter><parameter name="locale" type="the">variant to load (optional). By default, the locale defined by the host environment: dojo.locale</parameter></parameters><description>Returns a hash containing name/value pairs in its prototypesuch that values can be easily overridden. Throws an exception if the bundle is not found. Bundle must have already been loaded by dojo.requireLocalization() or by a build optimization step.</description></function><function name="dojo.i18n.isLTR"><returns type="Boolean"/><summary>Is the language read left-to-right? Most exceptions are for middle eastern languages.</summary><parameters><parameter name="locale" type="a">string representing the locale. By default, the locale defined by the host environment: dojo.locale</parameter></parameters></function></resource><resource location="dojo.i18n.currency.common"><requires><environment type="common"><require>dojo.experimental</require><require>dojo.regexp</require><require>dojo.i18n.common</require><require>dojo.i18n.number</require><require>dojo.lang.common</require></environment></requires><function name="dojo.i18n.currency.format"><parameters><parameter name="value"/><parameter name="iso"/><parameter name="flags" type="optional"/><parameter name="locale" type="optional"/></parameters></function><function name="dojo.i18n.currency.parse"><parameters><parameter name="value"/><parameter name="iso"/><parameter name="locale"/><parameter name="flags" type="optional"/></parameters></function><function name="dojo.i18n.currency.isCurrency"><parameters><parameter name="value"/><parameter name="iso"/><parameter name="locale" type="optional"/><parameter name="flags"/></parameters></function><function name="dojo.i18n.currency._mapToLocalizedFormatData"><parameters><parameter name="table"/><parameter name="iso"/><parameter name="locale" type="optional"/></parameters></function></resource><resource location="dojo.i18n.currency"><requires><environment type="common"><require>dojo.experimental</require><require>dojo.regexp</require><require>dojo.i18n.common</require><require>dojo.i18n.number</require><require>dojo.lang.common</require></environment></requires><function name="dojo.i18n.currency.format"><parameters><parameter name="value"/><parameter name="iso"/><parameter name="flags" type="optional"/><parameter name="locale" type="optional"/></parameters></function><function name="dojo.i18n.currency.parse"><parameters><parameter name="value"/><parameter name="iso"/><parameter name="locale"/><parameter name="flags" type="optional"/></parameters></function><function name="dojo.i18n.currency.isCurrency"><parameters><parameter name="value"/><parameter name="iso"/><parameter name="locale" type="optional"/><parameter name="flags"/></parameters></function><function name="dojo.i18n.currency._mapToLocalizedFormatData"><parameters><parameter name="table"/><parameter name="iso"/><parameter name="locale" type="optional"/></parameters></function></resource><resource location="dojo.i18n.number"><requires><environment type="common"><require>dojo.experimental</require><require>dojo.regexp</require><require>dojo.i18n.common</require><require>dojo.lang.common</require></environment></requires><function name="dojo.i18n.number.format"><parameters><parameter name="value"/><parameter name="flags" type="optional"/><parameter name="locale" type="optional"/></parameters></function><function name="dojo.i18n.number.parse"><parameters><parameter name="value"/><parameter name="locale" type="optional"/><parameter name="flags" type="optional"/></parameters></function><function name="dojo.i18n.number.isInteger"><parameters><parameter name="value"/><parameter name="locale" type="optional"/><parameter name="flags" type="optional"/></parameters></function><function name="dojo.i18n.number.isReal"><parameters><parameter name="value"/><parameter name="locale" type="optional"/><parameter name="flags" type="optional"/></parameters></function><function name="dojo.i18n.number._mapToLocalizedFormatData"><parameters><parameter name="table"/><parameter name="locale"/></parameters></function></resource><resource location="dojo.iCalendar"><requires><environment type="common"><require>dojo.cal.iCalendar</require></environment></requires></resource><resource location="dojo.io.BrowserIO"><requires><environment type="common"><require>dojo.io.common</require><require>dojo.lang.array</require><require>dojo.lang.func</require><require>dojo.string.extras</require><require>dojo.dom</require><require>dojo.undo.browser</require></environment></requires><function name="dojo.io.checkChildrenForFile"><returns type="boolean"/><summary>Checks any child nodes of node for an input type="file" element.</summary><parameters><parameter name="node" type="DOMNode"/></parameters></function><function name="dojo.io.formHasFile"><returns type="boolean"/><summary>Just calls dojo.io.checkChildrenForFile().</summary><parameters><parameter name="formNode" type="DOMNode"/></parameters></function><function name="dojo.io.updateNode"><summary>Updates a DOMnode with the result of a dojo.io.bind() call.</summary><parameters><parameter name="node" type="DOMNode"></parameter><parameter name="urlOrArgs" type="String">or Object Either a String that has an URL, or an object containing dojo.io.bind() arguments.</parameter></parameters></function><function name="dojo.io.formFilter"><summary>Returns true if the node is an input element that is enabled, has a name, and whose type is one of the following values: ["file", "submit", "image", "reset", "button"]</summary><parameters><parameter name="node" type="DOMNode"/></parameters></function><function name="dojo.io.encodeForm"><returns type="String"/><summary>Converts the names and values of form elements into an URL-encoded string (name=value&amp;name=value...).</summary><parameters><parameter name="formNode" type="DOMNode"></parameter><parameter name="encoding" optional="true" type="String">The encoding to use for the values. Specify a string that starts with "utf" (for instance, "utf8"), to use encodeURIComponent() as the encoding function. Otherwise, dojo.string.encodeAscii will be used.</parameter><parameter name="formFilter" optional="true" type="Function">A function used to filter out form elements. The element node will be passed to the formFilter function, and a boolean result is expected (true indicating indicating that the element should have its name/value included in the output). If no formFilter is specified, then dojo.io.formFilter() will be used.</parameter></parameters></function><function name="dojo.io.FormBind"><summary>constructor for a dojo.io.FormBind object. See the Dojo Book for some information on usage: http: // manual.dojotoolkit.org/WikiHome/DojoDotBook/Book23</summary><parameters><parameter name="args" type="can">either be the DOMNode for a form element, or an object containing dojo.io.bind() arguments, one of which should be formNode with the value of a form element DOMNode.</parameter></parameters><variables><variable scope="instance" name="bindArgs"/><variable scope="instance" name="form"/><variable scope="instance" name="clickedButton"/><variable scope="prototype" name="form"/><variable scope="prototype" name="bindArgs"/><variable scope="prototype" name="clickedButton"/></variables></function><function name="dojo.io.XMLHTTPTransport" initialized="true"><summary>The object that implements the dojo.io.bind transport for XMLHttpRequest.</summary><variables><variable scope="instance" name="useCache"/><variable scope="instance" name="preventCache"/><variable scope="instance" name="clearCache"/><variable scope="instance" name="inFlight"/><variable scope="instance" name="inFlightTimer"/><variable scope="instance" name="startWatchingInFlight"/><variable scope="instance" name="watchInFlight"/><variable scope="instance" name="inFlight.length"/><variable scope="instance" name="canHandle"/><variable scope="instance" name="multipartBoundary"/><variable scope="instance" name="bind"/></variables></function><function name="dojo.io.XMLHTTPTransport.clearCache" instance="dojo.io.XMLHTTPTransport"/><function name="dojo.io.XMLHTTPTransport.startWatchingInFlight" instance="dojo.io.XMLHTTPTransport"><summary>internal method used to trigger a timer to watch all inflight XMLHttpRequests.</summary></function><function name="dojo.io.XMLHTTPTransport.watchInFlight" instance="dojo.io.XMLHTTPTransport"><summary>internal method that checks each inflight XMLHttpRequest to see if it has completed or if the timeout situation applies.</summary></function><function name="dojo.io.XMLHTTPTransport.canHandle" instance="dojo.io.XMLHTTPTransport"><summary>Tells dojo.io.bind() if this is a good transport to use for the particular type of request. This type of transport cannot handle forms that have an input type="file" element.</summary><parameters><parameter name="kwArgs" type="dojo.io.Request"/></parameters></function><function name="dojo.io.XMLHTTPTransport.bind" instance="dojo.io.XMLHTTPTransport"><summary>function that sends the request to the server.</summary><parameters><parameter name="kwArgs" type="dojo.io.Request"/></parameters></function><function name="dojo.io.FormBind.init" prototype="dojo.io.FormBind"><summary>Internal function called by the dojo.io.FormBind() constructor do not call this method directly.</summary><parameters><parameter name="args" type="DOMNode or Object"/></parameters></function><function name="dojo.io.FormBind.onSubmit" prototype="dojo.io.FormBind"><returns type="boolean"/><summary>Function used to verify that the form is OK to submit. Override this function if you want specific form validation done.</summary><parameters><parameter name="form" type="DOMNode"/></parameters></function><function name="dojo.io.FormBind.submit" prototype="dojo.io.FormBind"><summary>internal function that is connected as a listener to the form's onsubmit event.</summary><parameters><parameter name="e" type="Event"/></parameters></function><function name="dojo.io.FormBind.click" prototype="dojo.io.FormBind"><summary>internal method that is connected as a listener to the form's elements whose click event can submit a form.</summary><parameters><parameter name="e" type="Event"/></parameters></function><function name="dojo.io.FormBind.formFilter" prototype="dojo.io.FormBind"><returns type="boolean"/><summary>internal function used to know which form element values to include in the dojo.io.bind() request.</summary><parameters><parameter name="node" type="DOMNode"/></parameters></function><function name="dojo.io.FormBind.connect" prototype="dojo.io.FormBind"><summary>internal function used to connect event listeners to form elements that trigger events. Used in case dojo.event is not loaded.</summary><parameters><parameter name="srcObj" type="Object"/><parameter name="srcFcn" type="Function"/><parameter name="targetFcn" type="Function"/></parameters></function></resource><resource location="dojo.io.IframeIO"><requires><environment type="common"><require>dojo.io.BrowserIO</require><require>dojo.uri.*</require></environment></requires><function name="dojo.io.createIFrame"><summary>Creates a hidden iframe in the page. Used mostly for data transports.</summary><parameters><parameter name="fname" type="String">The name of the iframe. Used for the name attribute on the iframe.</parameter><parameter name="onloadstr" type="String">A string of Javascript that will be executed when the content in the iframe loads.</parameter><parameter name="uri" type="String">The value of the src attribute on the iframe element. If a value is not given, then iframe_history.html will be used.</parameter></parameters></function><function name="dojo.io.IframeTransport" initialized="true"><summary>The object that implements the dojo.io.bind transport that uses an iframe to communicate to the server.</summary><variables><variable scope="instance" name="currentRequest"/><variable scope="instance" name="requestQueue"/><variable scope="instance" name="iframeName"/><variable scope="instance" name="fireNextRequest"/><variable scope="instance" name="requestQueue.length"/><variable scope="instance" name="canHandle"/><variable scope="instance" name="bind"/><variable scope="instance" name="setUpIframe"/><variable scope="instance" name="iframe"/><variable scope="instance" name="iframeOnload"/><variable scope="instance" name="_callError"/></variables></function><function name="dojo.io.IframeTransport.fireNextRequest" instance="dojo.io.IframeTransport"><summary>Internal method used to fire the next request in the bind queue.</summary></function><function name="dojo.io.IframeTransport.canHandle" instance="dojo.io.IframeTransport"><summary>Tells dojo.io.bind() if this is a good transport to use for the particular type of request.</summary><parameters><parameter name="kwArgs" type="dojo.io.Request"/></parameters><description>This type of transport cannot handle text/xml or application/xml return types, is limited to GET or POST requests, and cannot do synchronous binds.</description></function><function name="dojo.io.IframeTransport.bind" instance="dojo.io.IframeTransport"><summary>function that sends the request to the server.</summary><parameters><parameter name="kwArgs" type="dojo.io.Request"/></parameters></function><function name="dojo.io.IframeTransport.setUpIframe" instance="dojo.io.IframeTransport"/><function name="dojo.io.IframeTransport.iframeOnload" instance="dojo.io.IframeTransport"><parameters><parameter name="errorObject" type="Object"/></parameters></function><function name="dojo.io.IframeTransport._callError" instance="dojo.io.IframeTransport"><parameters><parameter name="req" type="Object"/><parameter name="message" type="String"/></parameters></function></resource><resource location="dojo.io.RepubsubIO"><requires><environment type="common"><require>dojo.event.*</require><require>dojo.io.BrowserIO</require></environment></requires><function name="dojo.io.repubsubTranport" initialized="true"><variables><variable scope="instance" name="canHandle"/><variable scope="instance" name="bind"/></variables></function><function name="dojo.io.repubsubTranport.canHandle" instance="dojo.io.repubsubTranport"><summary>Tells dojo.io.bind() if this is a good transport to use for the particular type of request. This is a legacy transport and should not be used unless you are dealing with repubsub. Consider a comet transport instead.</summary><parameters><parameter name="kwArgs" type="dojo.io.Request"/></parameters></function><function name="dojo.io.repubsubTranport.bind" instance="dojo.io.repubsubTranport"><summary>This is a legacy transport and should not be used unless you are dealing with repubsub. Consider a comet transport instead.</summary><parameters><parameter name="kwArgs" type="dojo.io.Request"/></parameters></function><function name="dojo.io.repubsub" initialized="true"><returns type="mixed"/><chains><chain type="call">this.subscribe</chain></chains><variables><variable scope="instance" name="initDoc"/><variable scope="instance" name="isInitialized"/><variable scope="instance" name="subscriptionBacklog"/><variable scope="instance" name="debug"/><variable scope="instance" name="rcvNodeName"/><variable scope="instance" name="sndNodeName"/><variable scope="instance" name="rcvNode"/><variable scope="instance" name="sndNode"/><variable scope="instance" name="canRcv"/><variable scope="instance" name="canSnd"/><variable scope="instance" name="canLog"/><variable scope="instance" name="sndTimer"/><variable scope="instance" name="windowRef"/><variable scope="instance" name="backlog"/><variable scope="instance" name="tunnelInitCount"/><variable scope="instance" name="tunnelFrameKey"/><variable scope="instance" name="serverBaseURL"/><variable scope="instance" name="logBacklog"/><variable scope="instance" name="getRandStr"/><variable scope="instance" name="userid"/><variable scope="instance" name="tunnelID"/><variable scope="instance" name="attachPathList"/><variable scope="instance" name="topics"/><variable scope="instance" name="parseGetStr"/><variable scope="instance" name="tunnelURI"/><variable scope="instance" name="tunnelCloseCallback"/><variable scope="instance" name="receiveEventFromTunnel"/><variable scope="instance" name="widenDomain"/><variable scope="instance" name="parseCookie"/><variable scope="instance" name="setCookie"/><variable scope="instance" name="log"/><variable scope="instance" name="writeLog"/><variable scope="instance" name="init"/><variable scope="instance" name="clobber"/><variable scope="instance" name="openTunnel"/><variable scope="instance" name="rcvNodeReady"/><variable scope="instance" name="sndNodeReady"/><variable scope="instance" name="statusListener"/><variable scope="instance" name="dispatch"/><variable scope="instance" name="subscribe"/><variable scope="instance" name="sendTopicSubToServer"/><variable scope="instance" name="unSubscribe"/><variable scope="instance" name="publish"/><variable scope="instance" name="enqueueEventStr"/><variable scope="instance" name="dequeueEvent"/></variables></function><function name="dojo.io.repubsub.getRandStr" instance="dojo.io.repubsub"/><function name="dojo.io.repubsub.parseGetStr" instance="dojo.io.repubsub"/><function name="dojo.io.repubsub.tunnelCloseCallback" instance="dojo.io.repubsub"/><function name="dojo.io.repubsub.receiveEventFromTunnel" instance="dojo.io.repubsub"><parameters><parameter name="evt"/><parameter name="srcWindow"/></parameters></function><function name="dojo.io.repubsub.widenDomain" instance="dojo.io.repubsub"><returns type="mixed"/><parameters><parameter name="domainStr"/></parameters></function><function name="dojo.io.repubsub.parseCookie" instance="dojo.io.repubsub"/><function name="dojo.io.repubsub.setCookie" instance="dojo.io.repubsub"><parameters><parameter name="keypairs"/><parameter name="clobber"/></parameters></function><function name="dojo.io.repubsub.log" instance="dojo.io.repubsub"><returns type="we of course only care if we're in debug mode"/><parameters><parameter name="str"/><parameter name="lvl"/></parameters></function><function name="dojo.io.repubsub.writeLog" instance="dojo.io.repubsub"><parameters><parameter name="str"/><parameter name="lvl"/></parameters></function><function name="dojo.io.repubsub.init" instance="dojo.io.repubsub"><chains><chain type="call">this.subscribe</chain></chains></function><function name="dojo.io.repubsub.clobber" instance="dojo.io.repubsub"/><function name="dojo.io.repubsub.openTunnel" instance="dojo.io.repubsub"/><function name="dojo.io.repubsub.rcvNodeReady" instance="dojo.io.repubsub"/><function name="dojo.io.repubsub.sndNodeReady" instance="dojo.io.repubsub"/><function name="dojo.io.repubsub.statusListener" instance="dojo.io.repubsub"><parameters><parameter name="evt"/></parameters></function><function name="dojo.io.repubsub.dispatch" instance="dojo.io.repubsub"><parameters><parameter name="evt"/></parameters></function><function name="dojo.io.repubsub.subscribe" instance="dojo.io.repubsub"><parameters><parameter name="topic" type="kn_from in the old terminilogy"/><parameter name="toObj"/><parameter name="toFunc"/><parameter name="dontTellServer"/></parameters></function><function name="dojo.io.repubsub.sendTopicSubToServer" instance="dojo.io.repubsub"><parameters><parameter name="topic"/><parameter name="str"/></parameters></function><function name="dojo.io.repubsub.unSubscribe" instance="dojo.io.repubsub"><parameters><parameter name="topic"/><parameter name="toObj"/><parameter name="toFunc"/></parameters></function><function name="dojo.io.repubsub.publish" instance="dojo.io.repubsub"><parameters><parameter name="topic"/><parameter name="event"/></parameters></function><function name="dojo.io.repubsub.enqueueEventStr" instance="dojo.io.repubsub"><parameters><parameter name="evtStr"/></parameters></function><function name="dojo.io.repubsub.dequeueEvent" instance="dojo.io.repubsub"><parameters><parameter name="force"/></parameters></function><function name="dojo.io.repubsubEvent"><parameters><parameter name="to"/><parameter name="from"/><parameter name="method"/><parameter name="id"/><parameter name="routeURI"/><parameter name="payload"/><parameter name="dispname"/><parameter name="uid"/></parameters><variables><variable scope="instance" name="to"/><variable scope="instance" name="from"/><variable scope="instance" name="method"/><variable scope="instance" name="id"/><variable scope="instance" name="uri"/><variable scope="instance" name="displayname"/><variable scope="instance" name="userid"/><variable scope="instance" name="payload"/><variable scope="instance" name="flushChars"/><variable scope="instance" name="initFromProperties"/><variable scope="instance" name="toGetString"/></variables></function><function name="dojo.io.repubsubEvent.initFromProperties" instance="dojo.io.repubsubEvent"><parameters><parameter name="evt"/></parameters></function><function name="dojo.io.repubsubEvent.toGetString" instance="dojo.io.repubsubEvent"><parameters><parameter name="noQmark"/></parameters></function></resource><resource location="dojo.io.RhinoIO"><requires><environment type="common"><require>dojo.io.common</require><require>dojo.lang.func</require><require>dojo.lang.array</require><require>dojo.string.extras</require></environment></requires><function name="dojo.io.RhinoHTTPTransport" initialized="true"><variables><variable scope="instance" name="canHandle"/><variable scope="instance" name="bind"/></variables></function><function name="dojo.io.RhinoHTTPTransport.canHandle" instance="dojo.io.RhinoHTTPTransport"><summary>Tells dojo.io.bind() if this is a good transport to use for the particular type of request. This type of transport can only be used inside the Rhino JavaScript engine.</summary><parameters><parameter name="req" type="dojo.io.Request"/></parameters></function><function name="dojo.io.RhinoHTTPTransport.bind" instance="dojo.io.RhinoHTTPTransport"><summary>function that sends the request to the server.</summary><parameters><parameter name="req"/></parameters></function></resource><resource location="dojo.io.ScriptSrcIO"><requires><environment type="common"><require>dojo.io.BrowserIO</require><require>dojo.undo.browser</require></environment></requires><function name="dojo.io.ScriptSrcTransport" initialized="true"><variables><variable scope="instance" name="preventCache"/><variable scope="instance" name="maxUrlLength"/><variable scope="instance" name="inFlightTimer"/><variable scope="instance" name="DsrStatusCodes"/><variable scope="instance" name="startWatchingInFlight"/><variable scope="instance" name="watchInFlight"/><variable scope="instance" name="canHandle"/><variable scope="instance" name="removeScripts"/><variable scope="instance" name="bind"/><variable scope="instance" name="_counter"/><variable scope="instance" name="_state"/><variable scope="instance" name="_extraPaddingLength"/><variable scope="instance" name="_buildUrl"/><variable scope="instance" name="_attach"/><variable scope="instance" name="_multiAttach"/><variable scope="instance" name="_finish"/></variables></function><function name="dojo.io.ScriptSrcTransport.startWatchingInFlight" instance="dojo.io.ScriptSrcTransport"><summary>Internal method to start the process of watching for in-flight requests.</summary></function><function name="dojo.io.ScriptSrcTransport.watchInFlight" instance="dojo.io.ScriptSrcTransport"><summary>Internal method to watch for in-flight requests.</summary></function><function name="dojo.io.ScriptSrcTransport.canHandle" instance="dojo.io.ScriptSrcTransport"><summary>Tells dojo.io.bind() if this is a good transport to use for the particular type of request. This type of transport can only handle responses that are JavaScript or JSON that is passed to a JavaScript callback. It can only do asynchronous binds, is limited to GET HTTP method requests, and cannot handle formNodes. However, it has the advantage of being able to do cross-domain requests.</summary><parameters><parameter name="kwArgs" type="dojo.io.Request"/></parameters></function><function name="dojo.io.ScriptSrcTransport.removeScripts" instance="dojo.io.ScriptSrcTransport"><summary>Removes any script tags from the DOM that may have been added by ScriptSrcTransport.</summary><description>Be careful though, by removing them from the script, you may invalidate some script objects that were defined by the js file that was pulled in as the src of the script tag. Test carefully if you decide to call this method. In MSIE 6 (and probably 5.x), if you remove the script element while part of the response script is still executing, the browser might crash.</description></function><function name="dojo.io.ScriptSrcTransport.bind" instance="dojo.io.ScriptSrcTransport"><summary>function that sends the request to the server.</summary><parameters><parameter name="kwArgs" type="dojo.io.Request"/></parameters><description>of supported kwArgs properties and usage: http: // manual.dojotoolkit.org/WikiHome/DojoDotBook/Book25</description></function><function name="dojo.io.ScriptSrcTransport._buildUrl" instance="dojo.io.ScriptSrcTransport"><parameters><parameter name="url"/><parameter name="nameValueArray"/></parameters></function><function name="dojo.io.ScriptSrcTransport._attach" instance="dojo.io.ScriptSrcTransport"><parameters><parameter name="id"/><parameter name="url"/></parameters></function><function name="dojo.io.ScriptSrcTransport._multiAttach" instance="dojo.io.ScriptSrcTransport"><parameters><parameter name="state"/><parameter name="part"/></parameters></function><function name="dojo.io.ScriptSrcTransport._finish" instance="dojo.io.ScriptSrcTransport"><parameters><parameter name="state"/><parameter name="callback"/><parameter name="event"/></parameters></function><function name="window.onscriptload"><parameters><parameter name="event"/></parameters></function></resource><resource location="dojo.io.XhrIframeProxy"><requires><environment type="common"><require>dojo.experimental</require><require>dojo.io.IframeIO</require><require>dojo.dom</require><require>dojo.uri.Uri</require></environment></requires><function name="dojo.io.XhrIframeFacade"><summary>XMLHttpRequest facade object used by dojo.io.XhrIframeProxy.</summary><parameters><parameter name="ifpServerUrl"/></parameters><variables><variable scope="instance" name="_requestHeaders"/><variable scope="instance" name="_allResponseHeaders"/><variable scope="instance" name="_responseHeaders"/><variable scope="instance" name="_method"/><variable scope="instance" name="_uri"/><variable scope="instance" name="_bodyData"/><variable scope="instance" name="responseText"/><variable scope="instance" name="responseXML"/><variable scope="instance" name="status"/><variable scope="instance" name="statusText"/><variable scope="instance" name="readyState"/><variable scope="instance" name="_ifpServerUrl"/><variable scope="instance" name="_stateId"/></variables><description>Do not use this object directly. See the Dojo Book page on XMLHttpRequest IFrame Proxying: http: // manual.dojotoolkit.org/WikiHome/DojoDotBook/Book75</description></function><function name="dojo.io.XhrIframeFacade.open" prototype="dojo.io.XhrIframeFacade"><parameters><parameter name="method" type="String"/><parameter name="uri" type="String"/></parameters></function><function name="dojo.io.XhrIframeFacade.setRequestHeader" prototype="dojo.io.XhrIframeFacade"><parameters><parameter name="header" type="String"/><parameter name="value" type="String"/></parameters></function><function name="dojo.io.XhrIframeFacade.send" prototype="dojo.io.XhrIframeFacade"><parameters><parameter name="stringData" type="String"/></parameters></function><function name="dojo.io.XhrIframeFacade.abort" prototype="dojo.io.XhrIframeFacade"/><function name="dojo.io.XhrIframeFacade.getAllResponseHeaders" prototype="dojo.io.XhrIframeFacade"><returns type="String"/></function><function name="dojo.io.XhrIframeFacade.getResponseHeader" prototype="dojo.io.XhrIframeFacade"><returns type="String"/><parameters><parameter name="header" type="String"/></parameters></function><function name="dojo.io.XhrIframeFacade._setResponseHeaders" prototype="dojo.io.XhrIframeFacade"><parameters><parameter name="allHeaders" type="String"/></parameters></function><function name="dojo.io.XhrIframeProxy.needFrameRecursion"/><function name="dojo.io.XhrIframeProxy.send"><parameters><parameter name="facade"/></parameters></function><function name="dojo.io.XhrIframeProxy.receive"><parameters><parameter name="stateId" type="String"/><parameter name="urlEncodedData" type="should">have the following params: Decode response data.</parameter></parameters></function><function name="dojo.io.XhrIframeProxy.clientFrameLoaded"><parameters><parameter name="stateId" type="String"/></parameters></function><function name="dojo.io.XhrIframeProxy.destroyState"><parameters><parameter name="stateId" type="String"/></parameters></function><function name="dojo.io.XhrIframeProxy.createFacade"><chains><chain type="call">dojo.io.XhrIframeProxy.oldGetXmlhttpObject</chain></chains></function><object name="dojo.io.XhrIframeProxy"><summary>Object that implements the iframe handling for XMLHttpRequest IFrame Proxying.</summary><variables><variable name="xipClientUrl"/><variable name="_stateIdCounter"/></variables><description>Do not use this object directly. See the Dojo Book page on XMLHttpRequest IFrame Proxying: http: // manual.dojotoolkit.org/WikiHome/DojoDotBook/Book75 Usage of XHR IFrame Proxying does not work from local disk in Safari.</description></object></resource><resource location="dojo.io._"><requires><environment type="common"><require>dojo.io.common</require></environment></requires><requires><environment type="rhino"><require>dojo.io.RhinoIO</require></environment></requires><requires><environment type="browser"><require>dojo.io.BrowserIO</require><require>dojo.io.cookie</require></environment></requires><requires><environment type="dashboard"><require>dojo.io.BrowserIO</require><require>dojo.io.cookie</require></environment></requires></resource><resource location="dojo.io.cometd"><requires><environment type="common"><require>dojo.io.common</require><require>dojo.AdapterRegistry</require><require>dojo.json</require><require>dojo.io.BrowserIO</require><require>dojo.io.IframeIO</require><require>dojo.io.ScriptSrcIO</require><require>dojo.io.cookie</require><require>dojo.event.*</require><require>dojo.lang.common</require><require>dojo.lang.func</require></environment></requires><function name="cometd" initialized="true"><returns type="return: boolean"/><variables><variable scope="instance" name="initialized"/><variable scope="instance" name="connected"/><variable scope="instance" name="connectionTypes"/><variable scope="instance" name="version"/><variable scope="instance" name="minimumVersion"/><variable scope="instance" name="clientId"/><variable scope="instance" name="_isXD"/><variable scope="instance" name="handshakeReturn"/><variable scope="instance" name="currentTransport"/><variable scope="instance" name="url"/><variable scope="instance" name="lastMessage"/><variable scope="instance" name="globalTopicChannels"/><variable scope="instance" name="backlog"/><variable scope="instance" name="tunnelInit"/><variable scope="instance" name="tunnelCollapse"/><variable scope="instance" name="init"/><variable scope="instance" name="finishInit"/><variable scope="instance" name="currentTransport.version"/><variable scope="instance" name="_getRandStr"/><variable scope="instance" name="deliver"/><variable scope="instance" name="_deliver"/><variable scope="instance" name="disconnect"/><variable scope="instance" name="publish"/><variable scope="instance" name="subscribe"/><variable scope="instance" name="subscribed"/><variable scope="instance" name="unsubscribe"/><variable scope="instance" name="unsubscribed"/></variables></function><function name="cometd.tunnelInit" instance="cometd"><parameters><parameter name="childLocation"/><parameter name="childDomain"/></parameters></function><function name="cometd.tunnelCollapse" instance="cometd"/><function name="cometd.init" instance="cometd"><parameters><parameter name="props"/><parameter name="root"/><parameter name="bargs"/></parameters></function><function name="cometd.finishInit" instance="cometd"><parameters><parameter name="type"/><parameter name="data"/><parameter name="evt"/><parameter name="request"/></parameters></function><function name="cometd._getRandStr" instance="cometd"/><function name="cometd.deliver" instance="cometd"><parameters><parameter name="messages"/></parameters></function><function name="cometd._deliver" instance="cometd"><parameters><parameter name="message"/></parameters></function><function name="cometd.disconnect" instance="cometd"/><function name="cometd.publish" instance="cometd"><summary>publishes the passed message to the cometd server for delivery on the specified topic</summary><parameters><parameter name="channel" type="the">destination channel for the message</parameter><parameter name="data" type="a">JSON object containing the message "payload"</parameter><parameter name="properties" type="Optional.">Other meta-data to be mixed into the top-level of the message</parameter></parameters></function><function name="cometd.subscribe" instance="cometd"><summary>return: boolean inform the server of this client's interest in channel</summary><parameters><parameter name="channel" type="name">of the cometd channel to subscribe to</parameter><parameter name="useLocalTopics" type="Determines">if up a local event topic subscription to the passed function using the channel name that was passed is constructed, or if the topic name will be prefixed with some other identifier for local message distribution. Setting this to "true" is a good way to hook up server-sent message delivery to pre-existing local topics.</parameter><parameter name="objOrFunc" type="an">object scope for funcName or the name or reference to a function to be called when messages are delivered to the</parameter><parameter name="funcName" type="the">second half of the objOrFunc/funcName pair for identifying a callback function to notifiy upon channel message delivery</parameter></parameters></function><function name="cometd.subscribed" instance="cometd"><parameters><parameter name="channel" type="string"/><parameter name="message" type="obj"/></parameters></function><function name="cometd.unsubscribe" instance="cometd"><summary>return: boolean inform the server of this client's disinterest in channel</summary><parameters><parameter name="channel" type="name">of the cometd channel to subscribe to</parameter><parameter name="useLocalTopics" type="Determines">if up a local event topic subscription to the passed function using the channel name that was passed is destroyed, or if the topic name will be prefixed with some other identifier for stopping message distribution.</parameter><parameter name="objOrFunc" type="an">object scope for funcName or the name or reference to a function to be called when messages are delivered to the</parameter><parameter name="funcName" type="the">second half of the objOrFunc/funcName pair for identifying</parameter></parameters></function><function name="cometd.unsubscribed" instance="cometd"><parameters><parameter name="channel" type="string"/><parameter name="message" type="obj"/></parameters></function><function name="cometd.iframeTransport" initialized="true"><returns type="mixed"/><variables><variable scope="instance" name="connected"/><variable scope="instance" name="connectionId"/><variable scope="instance" name="rcvNode"/><variable scope="instance" name="rcvNodeName"/><variable scope="instance" name="phonyForm"/><variable scope="instance" name="authToken"/><variable scope="instance" name="lastTimestamp"/><variable scope="instance" name="lastId"/><variable scope="instance" name="backlog"/><variable scope="instance" name="check"/><variable scope="instance" name="tunnelInit"/><variable scope="instance" name="tunnelCollapse"/><variable scope="instance" name="deliver"/><variable scope="instance" name="widenDomain"/><variable scope="instance" name="postToIframe"/><variable scope="instance" name="phonyForm.style.display"/><variable scope="instance" name="phonyForm.enctype"/><variable scope="instance" name="phonyForm.method"/><variable scope="instance" name="phonyForm.action"/><variable scope="instance" name="phonyForm.target"/><variable scope="instance" name="processBacklog"/><variable scope="instance" name="sendMessage"/><variable scope="instance" name="startup"/><variable scope="instance" name="rcvNode.parentWindow.dojo"/></variables></function><function name="cometd.iframeTransport.check" instance="cometd.iframeTransport"><parameters><parameter name="types"/><parameter name="version"/><parameter name="xdomain"/></parameters></function><function name="cometd.iframeTransport.tunnelInit" instance="cometd.iframeTransport"/><function name="cometd.iframeTransport.tunnelCollapse" instance="cometd.iframeTransport"/><function name="cometd.iframeTransport.deliver" instance="cometd.iframeTransport"><parameters><parameter name="message"/></parameters></function><function name="cometd.iframeTransport.widenDomain" instance="cometd.iframeTransport"><returns type="mixed"/><parameters><parameter name="domainStr"/></parameters></function><function name="cometd.iframeTransport.postToIframe" instance="cometd.iframeTransport"><parameters><parameter name="content"/><parameter name="url"/></parameters></function><function name="cometd.iframeTransport.processBacklog" instance="cometd.iframeTransport"/><function name="cometd.iframeTransport.sendMessage" instance="cometd.iframeTransport"><parameters><parameter name="message"/><parameter name="bypassBacklog"/></parameters></function><function name="cometd.iframeTransport.startup" instance="cometd.iframeTransport"><parameters><parameter name="handshakeData"/></parameters></function><function name="cometd.mimeReplaceTransport" initialized="true"><variables><variable scope="instance" name="connected"/><variable scope="instance" name="connectionId"/><variable scope="instance" name="xhr"/><variable scope="instance" name="authToken"/><variable scope="instance" name="lastTimestamp"/><variable scope="instance" name="lastId"/><variable scope="instance" name="backlog"/><variable scope="instance" name="check"/><variable scope="instance" name="tunnelInit"/><variable scope="instance" name="tunnelCollapse"/><variable scope="instance" name="deliver"/><variable scope="instance" name="handleOnLoad"/><variable scope="instance" name="openTunnelWith"/><variable scope="instance" name="xhr.multipart"/><variable scope="instance" name="xhr.onreadystatechange"/><variable scope="instance" name="xhr.onload"/><variable scope="instance" name="processBacklog"/><variable scope="instance" name="sendMessage"/><variable scope="instance" name="startup"/></variables></function><function name="cometd.mimeReplaceTransport.check" instance="cometd.mimeReplaceTransport"><parameters><parameter name="types"/><parameter name="version"/><parameter name="xdomain"/></parameters></function><function name="cometd.mimeReplaceTransport.tunnelInit" instance="cometd.mimeReplaceTransport"/><function name="cometd.mimeReplaceTransport.tunnelCollapse" instance="cometd.mimeReplaceTransport"/><function name="cometd.mimeReplaceTransport.handleOnLoad" instance="cometd.mimeReplaceTransport"><parameters><parameter name="resp"/></parameters></function><function name="cometd.mimeReplaceTransport.openTunnelWith" instance="cometd.mimeReplaceTransport"><parameters><parameter name="content"/><parameter name="url"/></parameters></function><function name="cometd.mimeReplaceTransport.processBacklog" instance="cometd.mimeReplaceTransport"/><function name="cometd.mimeReplaceTransport.sendMessage" instance="cometd.mimeReplaceTransport"><parameters><parameter name="message"/><parameter name="bypassBacklog"/></parameters></function><function name="cometd.mimeReplaceTransport.startup" instance="cometd.mimeReplaceTransport"><parameters><parameter name="handshakeData"/></parameters></function><function name="cometd.longPollTransport" initialized="true"><variables><variable scope="instance" name="connected"/><variable scope="instance" name="connectionId"/><variable scope="instance" name="authToken"/><variable scope="instance" name="lastTimestamp"/><variable scope="instance" name="lastId"/><variable scope="instance" name="backlog"/><variable scope="instance" name="check"/><variable scope="instance" name="tunnelInit"/><variable scope="instance" name="tunnelCollapse"/><variable scope="instance" name="deliver"/><variable scope="instance" name="openTunnelWith"/><variable scope="instance" name="processBacklog"/><variable scope="instance" name="sendMessage"/><variable scope="instance" name="startup"/></variables></function><function name="cometd.longPollTransport.check" instance="cometd.longPollTransport"><parameters><parameter name="types"/><parameter name="version"/><parameter name="xdomain"/></parameters></function><function name="cometd.longPollTransport.tunnelInit" instance="cometd.longPollTransport"/><function name="cometd.longPollTransport.tunnelCollapse" instance="cometd.longPollTransport"/><function name="cometd.longPollTransport.openTunnelWith" instance="cometd.longPollTransport"><parameters><parameter name="content"/><parameter name="url"/></parameters></function><function name="cometd.longPollTransport.processBacklog" instance="cometd.longPollTransport"/><function name="cometd.longPollTransport.sendMessage" instance="cometd.longPollTransport"><parameters><parameter name="message"/><parameter name="bypassBacklog"/></parameters></function><function name="cometd.longPollTransport.startup" instance="cometd.longPollTransport"><parameters><parameter name="handshakeData"/></parameters></function><function name="cometd.callbackPollTransport" initialized="true"><variables><variable scope="instance" name="connected"/><variable scope="instance" name="connectionId"/><variable scope="instance" name="authToken"/><variable scope="instance" name="lastTimestamp"/><variable scope="instance" name="lastId"/><variable scope="instance" name="backlog"/><variable scope="instance" name="check"/><variable scope="instance" name="tunnelInit"/><variable scope="instance" name="tunnelCollapse"/><variable scope="instance" name="deliver"/><variable scope="instance" name="openTunnelWith"/><variable scope="instance" name="processBacklog"/><variable scope="instance" name="sendMessage"/><variable scope="instance" name="startup"/></variables></function><function name="cometd.callbackPollTransport.check" instance="cometd.callbackPollTransport"><parameters><parameter name="types"/><parameter name="version"/><parameter name="xdomain"/></parameters></function><function name="cometd.callbackPollTransport.tunnelInit" instance="cometd.callbackPollTransport"/><function name="cometd.callbackPollTransport.tunnelCollapse" instance="cometd.callbackPollTransport"/><function name="cometd.callbackPollTransport.openTunnelWith" instance="cometd.callbackPollTransport"><parameters><parameter name="content"/><parameter name="url"/></parameters></function><function name="cometd.callbackPollTransport.processBacklog" instance="cometd.callbackPollTransport"/><function name="cometd.callbackPollTransport.sendMessage" instance="cometd.callbackPollTransport"><parameters><parameter name="message"/><parameter name="bypassBacklog"/></parameters></function><function name="cometd.callbackPollTransport.startup" instance="cometd.callbackPollTransport"><parameters><parameter name="handshakeData"/></parameters></function></resource><resource location="dojo.io.common"><requires><environment type="common"><require>dojo.string</require><require>dojo.lang.extras</require></environment></requires><function name="dojo.io.Request"><summary>Constructs a Request object that is used by dojo.io.bind().</summary><parameters><parameter name="url" type="String"/><parameter name="mimetype" type="String"/><parameter name="transport" type="String"/><parameter name="changeUrl" type="String or Boolean"/></parameters><variables><variable scope="instance" name="url"/><variable scope="instance" name="mimetype"/><variable scope="instance" name="transport"/><variable scope="instance" name="changeUrl"/><variable scope="prototype" name="url"/><variable scope="prototype" name="mimetype"/><variable scope="prototype" name="method"/><variable scope="prototype" name="content"/><variable scope="prototype" name="transport"/><variable scope="prototype" name="changeUrl"/><variable scope="prototype" name="formNode"/><variable scope="prototype" name="sync"/><variable scope="prototype" name="bindSuccess"/><variable scope="prototype" name="useCache"/><variable scope="prototype" name="preventCache"/><variable scope="prototype" name="timeoutSeconds"/></variables><description>dojo.io.bind() will create one of these for you if you call dojo.io.bind() with an plain object containing the bind parameters. This method can either take the arguments specified, or an Object containing all of the parameters that you want to use to create the dojo.io.Request (similar to how dojo.io.bind() is called. The named parameters to this constructor represent the minimum set of parameters need</description></function><function name="dojo.io.Error"><summary>Constructs an object representing a bind error.</summary><parameters><parameter name="msg" type="String"/><parameter name="type" type="String"/><parameter name="num" type="Number"/></parameters><variables><variable scope="instance" name="message"/><variable scope="instance" name="type"/><variable scope="instance" name="number"/></variables></function><function name="dojo.io.transports.addTransport"><summary>Used to register transports that can support bind calls.</summary><parameters><parameter name="name" type="String"/></parameters></function><function name="dojo.io.bind"><returns type="dojo.io.Request"/><summary>Binding interface for IO. Loading different IO transports, like dojo.io.BrowserIO or dojo.io.IframeIO, will register with bind to handle particular types of bind calls.</summary><parameters><parameter name="request" type="Object">Object containing bind arguments. This object is converted to a dojo.io.Request object, and that request object is the return value for this method.</parameter></parameters></function><function name="dojo.io.sendBindError"><summary>Used internally by dojo.io.bind() to return/raise a bind error.</summary><parameters><parameter name="request" type="Object"/><parameter name="message" type="String"/></parameters></function><function name="dojo.io.queueBind"><returns type="dojo.io.Request"/><summary>queueBind will use dojo.io.bind() but guarantee that only one bind call is handled at a time.</summary><parameters><parameter name="request" type="Object">Same sort of request object as used for dojo.io.bind().</parameter></parameters><chains><chain type="call">oldLoad</chain><chain type="call">oldErr</chain></chains><description>If queueBind is called while a bind call is in process, it will queue up the other calls to bind and call them in order as bind calls complete.</description></function><function name="dojo.io._dispatchNextQueueBind"><summary>Private method used by dojo.io.queueBind().</summary></function><function name="dojo.io.argsFromMap"><returns type="String"/><summary>Converts name/values pairs in the map object to an URL-encoded string with format of name1=value1&amp;name2=value2...</summary><parameters><parameter name="map" type="Object">Object that has the contains the names and values.</parameter><parameter name="encoding" optional="true" type="String">String to specify how to encode the name and value. If the encoding string contains "utf" (case-insensitive), then encodeURIComponent is used. Otherwise dojo.string.encodeAscii is used.</parameter><parameter name="last" optional="true" type="String">The last parameter in the list. Helps with final string formatting?</parameter></parameters></function><function name="dojo.io.setIFrameSrc"><summary>Sets the URL that is loaded in an IFrame. The replace parameter indicates whether location.replace() should be used when changing the location of the iframe.</summary><parameters><parameter name="iframe" type="DOMNode"/><parameter name="src" type="String"/><parameter name="replace" type="Boolean"/></parameters></function><function name="dojo.io.Request.load" prototype="dojo.io.Request"><summary>Called on successful completion of a bind.</summary><parameters><parameter name="type" type="String">A string with value "load"</parameter><parameter name="data" type="Object">The object representing the result of the bind. The actual structure of the data object will depend on the mimetype that was given to bind in the bind arguments.</parameter><parameter name="transportImplementation" type="Object">The object that implements a particular transport. Structure is depedent on the transport. For XMLHTTPTransport (dojo.io.BrowserIO), it will be the XMLHttpRequest object from the browser.</parameter><parameter name="kwArgs" type="Object">Object that contains the request parameters that were given to the bind call. Useful for storing and retrieving state from when bind was called.</parameter></parameters></function><function name="dojo.io.Request.error" prototype="dojo.io.Request"><summary>Called when there is an error with a bind.</summary><parameters><parameter name="type" type="String">A string with value "error"</parameter><parameter name="error" type="Object">The error object. Should be a dojo.io.Error object, but not guaranteed.</parameter><parameter name="transportImplementation" type="Object">The object that implements a particular transport. Structure is depedent on the transport. For XMLHTTPTransport (dojo.io.BrowserIO), it will be the XMLHttpRequest object from the browser.</parameter><parameter name="kwArgs" type="Object">Object that contains the request parameters that were given to the bind call. Useful for storing and retrieving state from when bind was called.</parameter></parameters></function><function name="dojo.io.Request.timeout" prototype="dojo.io.Request"><summary>Called when there is an error with a bind. Only implemented in certain transports at this time.</summary><parameters><parameter name="type" type="String">A string with value "timeout"</parameter><parameter name="empty" type="Object">Should be null. Just a spacer argument so that load, error, timeout and handle have the same signatures.</parameter><parameter name="transportImplementation" type="Object">The object that implements a particular transport. Structure is depedent on the transport. For XMLHTTPTransport (dojo.io.BrowserIO), it will be the XMLHttpRequest object from the browser. May be null for the timeout case for some transports.</parameter><parameter name="kwArgs" type="Object">Object that contains the request parameters that were given to the bind call. Useful for storing and retrieving state from when bind was called.</parameter></parameters></function><function name="dojo.io.Request.handle" prototype="dojo.io.Request"><summary>The handle method can be defined instead of defining separate load, error and timeout callbacks.</summary><parameters><parameter name="type" type="String">A string with the type of callback: "load", "error", or "timeout".</parameter><parameter name="data" type="Object">See the above callbacks for what this parameter could be.</parameter><parameter name="transportImplementation" type="Object">The object that implements a particular transport. Structure is depedent on the transport. For XMLHTTPTransport (dojo.io.BrowserIO), it will be the XMLHttpRequest object from the browser.</parameter><parameter name="kwArgs" type="Object">Object that contains the request parameters that were given to the bind call. Useful for storing and retrieving state from when bind was called.</parameter></parameters></function><function name="dojo.io.Request.abort" prototype="dojo.io.Request"/><function name="dojo.io.Request.fromKwArgs" prototype="dojo.io.Request"><summary>Creates a dojo.io.Request from a simple object (kwArgs object).</summary><parameters><parameter name="kwArgs" type="Object"/></parameters></function></resource><resource location="dojo.io.cookie"><function name="dojo.io.cookie.setCookie"><summary>sets a cookie.</summary><parameters><parameter name="name" type="String"/><parameter name="value" type="String"/><parameter name="days" optional="true" type="Number"/><parameter name="path" optional="true" type="String"/><parameter name="domain" optional="true" type="String"/><parameter name="secure" optional="true" type="boolean"/></parameters></function><function name="dojo.io.cookie.getCookie"><returns type="String"/><summary>Gets a cookie with the given name.</summary><parameters><parameter name="name" type="String"/></parameters></function><function name="dojo.io.cookie.deleteCookie"><summary>Deletes a cookie with the given name.</summary><parameters><parameter name="name" type="String"/></parameters></function><function name="dojo.io.cookie.setObjectCookie"><summary>Takes an object, serializes it to a cookie value, and either sets a cookie with the serialized value.</summary><parameters><parameter name="name" type="String"/><parameter name="obj" type="Object"/><parameter name="days" optional="true" type="Number"/><parameter name="path" optional="true" type="String"/><parameter name="domain" optional="true" type="String"/><parameter name="secure" optional="true" type="boolean"/><parameter name="clearCurrent" optional="true" type="boolean"/></parameters><description>If clearCurrent is true, then any current cookie value for this object will be replaced with the the new serialized object value. If clearCurrent is false, then the existing cookie value will be modified with any changes from the new object value. Objects must be simple name/value pairs where the value is either a string or a number. Any other value will be ignored.</description></function><function name="dojo.io.cookie.getObjectCookie"><summary>Gets an object value for the given cookie name. The complement of dojo.io.cookie.setObjectCookie().</summary><parameters><parameter name="name" type="String"/></parameters></function><function name="dojo.io.cookie.isSupported"><returns type="boolean"/><summary>Tests the browser to see if cookies are enabled.</summary></function></resource><resource location="dojo.io"><requires><environment type="common"><require>dojo.io.*</require></environment></requires></resource><resource location="dojo.json"><requires><environment type="common"><require>dojo.lang.func</require><require>dojo.string.extras</require><require>dojo.AdapterRegistry</require></environment></requires><function name="dojo.json.register"><summary>Register a JSON serialization function. JSON serialization functions should take one argument and return an object suitable for JSON serialization: - string - number - boolean - undefined - object - null - Array-like (length property that is a number) - Objects with a "json" method will have this method called - Any other object will be used as {key:value, ...} pairs If override is given, it is used as the highest priority JSON serialization, otherwise it will be used as the lowest.</summary><parameters><parameter name="name" type="a">descriptive type for this serializer</parameter><parameter name="check" type="a">unary function that will be passed an object to determine whether or not wrap will be used to serialize the object</parameter><parameter name="wrap" type="the">serialization function</parameter><parameter name="override" type="optional">determines if the this serialization function will be given priority in the test order</parameter></parameters></function><function name="dojo.json.evalJson"><summary>evaluates the passed string-form of a JSON object</summary><parameters><parameter name="json" type="a">string literal of a JSON item, for instance: '{ "foo": [ "bar", 1, { "baz": "thud" } ] }' return: the result of the evaluation</parameter></parameters></function><function name="dojo.json.serialize"><summary>Create a JSON serialization of an object, note that this doesn't check for infinite recursion, so don't do that!</summary><parameters><parameter name="o" type="an">object to be serialized. Objects may define their own serialization via a special "__json__" or "json" function property. If a specialized serializer has been defined, it will be used as a fallback. return: a String representing the serialized version of the passed object</parameter></parameters></function><object name="dojo.json"><variables><variable name="jsonRegistry" type="AdapterRegistry">a registry of type-based serializers</variable></variables></object></resource><resource location="dojo.lang._"><requires><environment type="common"><require>dojo.lang.common</require><require>dojo.lang.assert</require><require>dojo.lang.array</require><require>dojo.lang.type</require><require>dojo.lang.func</require><require>dojo.lang.extras</require><require>dojo.lang.repr</require><require>dojo.lang.declare</require></environment></requires></resource><resource location="dojo.lang.array"><requires><environment type="common"><require>dojo.lang.common</require></environment></requires><function name="dojo.lang.has"><returns type="Boolean"/><summary>is there a property with the passed name in obj?</summary><parameters><parameter name="obj" type="Object"/><parameter name="name" type="String"/></parameters></function><function name="dojo.lang.isEmpty"><returns type="boolean"/><summary>can be used to determine if the passed object is "empty". In the case of array-like objects, the length, property is examined, but for other types of objects iteration is used to examine the iterable "surface area" to determine if any non-prototypal properties have been assigned. This iteration is prototype-extension safe.</summary><parameters><parameter name="obj" type="Object"/></parameters></function><function name="dojo.lang.map"><returns type="mixed">a new array constituded from the return values of passing each element of arr into unary_func. The obj parameter may be passed to enable the passed function to be called in that scope. In environments that support JavaScript 1.6, this function is a passthrough to the built-in map() function provided by Array instances. For details on this, see: http: // developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:map examples: dojo.lang.map([1, 2, 3, 4], function(item){ return item+1 }); // returns [2, 3, 4, 5]</returns><parameters><parameter name="arr" type="Array"/><parameter name="obj" type="Object|Function"/><parameter name="unary_func" optional="true" type="Function"/></parameters><chains><chain type="call">unary_func</chain></chains></function><function name="dojo.lang.reduce"><summary>similar to Python's builtin reduce() function. The result of the previous computation is passed as the first argument to</summary><parameters><parameter name="arr" type="Array"/><parameter name="initialValue"/><parameter name="obj" type="Object|Function"/><parameter name="binary_func" type="along">with the next value from arr. The result of this call is used along with the subsequent value from arr, and this continues until arr is exhausted. The return value is the last result. The "obj" and "initialValue" parameters may be safely omitted and the order of obj and binary_func may be reversed. The default order of the obj and binary_func argument will probably be reversed in a future release, and this call order is supported today. examples: dojo.lang.reduce([1, 2, 3, 4], function(last, next){ return last+next});</parameter></parameters><chains><chain type="call">binary_func</chain></chains></function><function name="dojo.lang.forEach"><summary>for every item in anArray, call callback with that item as its only parameter. Return values are ignored. This funciton corresponds (and wraps) the JavaScript 1.6 forEach method. For more details, see: http: // developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:forEach</summary><parameters><parameter name="anArray" type="Array"/><parameter name="callback" type="Function"/><parameter name="thisObject" optional="true" type="Object"/></parameters><chains><chain type="call">callback</chain></chains></function><function name="dojo.lang._everyOrSome"><returns type="Boolean"/><parameters><parameter name="every" type="Boolean"/><parameter name="arr" type="Array"/><parameter name="callback" type="Function"/><parameter name="thisObject" optional="true" type="Object"/></parameters><chains><chain type="call">callback</chain></chains></function><function name="dojo.lang.every"><returns type="Boolean"/><summary>determines whether or not every item in the array satisfies the condition implemented by callback. thisObject may be used to scope the call to callback. The function signature is derived from the JavaScript 1.6 Array.every() function. More information on this can be found here: http: // developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:every examples: dojo.lang.every([1, 2, 3, 4], function(item){ return item&gt;1; }); // returns false dojo.lang.every([1, 2, 3, 4], function(item){ return item&gt;0; }); // returns true</summary><parameters><parameter name="arr" type="Array"/><parameter name="callback" type="Function"/><parameter name="thisObject" optional="true" type="Object"/></parameters></function><function name="dojo.lang.some"><returns type="Boolean"/><summary>determines whether or not any item in the array satisfies the condition implemented by callback. thisObject may be used to scope the call to callback. The function signature is derived from the JavaScript 1.6 Array.some() function. More information on this can be found here: http: // developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:some examples: dojo.lang.some([1, 2, 3, 4], function(item){ return item&gt;1; }); // returns true dojo.lang.some([1, 2, 3, 4], function(item){ return item&lt;1; }); // returns false</summary><parameters><parameter name="arr" type="Array"/><parameter name="callback" type="Function"/><parameter name="thisObject" optional="true" type="Object"/></parameters></function><function name="dojo.lang.filter"><returns type="mixed">a new Array with those items from arr that match the condition implemented by callback.thisObject may be used to scope the call to callback. The function signature is derived from the JavaScript 1.6 Array.filter() function, although special accomidation is made in our implementation for strings. More information on the JS 1.6 API can be found here: http: // developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:filter examples: dojo.lang.some([1, 2, 3, 4], function(item){ return item&gt;1; }); // returns [2, 3, 4]</returns><parameters><parameter name="arr" type="Array"/><parameter name="callback" type="Function"/><parameter name="thisObject" optional="true" type="Object"/></parameters><chains><chain type="call">callback</chain></chains></function><function name="dojo.lang.unnest"><returns type="Array"/><summary>Creates a 1-D array out of all the arguments passed, unravelling any array-like objects in the process usage: unnest(1, 2, 3) ==&gt; [1, 2, 3] unnest(1, [2, [3], [[[4]]]]) ==&gt; [1, 2, 3, 4]</summary><chains><chain type="call">dojo.lang.unnest</chain></chains></function><function name="dojo.lang.toArray"><returns type="Array"/><summary>Converts an array-like object (i.e. arguments, DOMCollection) to an array. Returns a new Array object.</summary><parameters><parameter name="arrayLike" type="Object"/><parameter name="startOffset" type="Number"/></parameters></function></resource><resource location="dojo.lang.assert"><requires><environment type="common"><require>dojo.lang.common</require><require>dojo.lang.array</require><require>dojo.lang.type</require></environment></requires><function name="dojo.lang.assert"><parameters><parameter name="booleanValue" type="boolean"/><parameter name="message" optional="true" type="string"/></parameters></function><function name="dojo.lang.assertType"><summary>examples:</summary><parameters><parameter name="value" type="anything"/><parameter name="type" type="misc."/><parameter name="keywordParameters" optional="true" type="object"/></parameters></function><function name="dojo.lang.assertValidKeywords"><summary>examples:</summary><parameters><parameter name="object" type="object"/><parameter name="expectedProperties" type="array"/><parameter name="message" optional="true" type="string"/></parameters></function></resource><resource location="dojo.lang.common"><function name="dojo.lang.inherits"><summary>Set up inheritance between two classes.</summary><parameters><parameter name="subclass" type="Function"/><parameter name="superclass" type="Function"/></parameters></function><function name="dojo.lang._mixin"><returns type="Object"/><summary>Adds all properties and methods of props to obj. This addition is "prototype extension safe", so that instances of objects will not pass along prototype defaults.</summary><parameters><parameter name="obj" type="Object"/><parameter name="props" type="Object"/></parameters></function><function name="dojo.lang.mixin"><returns type="Object"/><summary>Adds all properties and methods of props to obj.</summary><parameters><parameter name="obj" type="Object"/><parameter name="props" type="Object..."/></parameters></function><function name="dojo.lang.extend"><returns type="Object"/><summary>Adds all properties and methods of props to constructor's prototype, making them available to all instances created with</summary><parameters><parameter name="constructor" type="Object"/><parameter name="props" type="Object..."/></parameters></function><function name="dojo.lang.find"><returns type="number"/><summary>Return the index of value in array, returning -1 if not found.</summary><parameters><parameter name="array" type="just">what you think</parameter><parameter name="value" type="the">value to locate</parameter><parameter name="identity" type="If">true, matches with identity comparison (===). If false, uses normal comparison (==).</parameter><parameter name="findLast" type="If">true, returns index of last instance of value. examples: find(array, value[, identity [findLast]]) // recommended find(value, array[, identity [findLast]]) // deprecated support both (array, value) and (value, array)</parameter></parameters></function><function name="dojo.lang.findLast"><returns type="number"/><summary>Return index of last occurance of value in array, returning -1 if not found. This is a shortcut for dojo.lang.find() with a true</summary><parameters><parameter name="array" type="Array"/><parameter name="value" type="for">its "findLast" parameter.</parameter><parameter name="identity" type="If">true, matches with identity comparison (===). If false, uses normal comparison (==).</parameter></parameters></function><function name="dojo.lang.inArray"><returns type="boolean"/><summary>Return true if value is present in array.</summary><parameters><parameter name="array" type="Array"/><parameter name="value" type="Object"/></parameters></function><function name="dojo.lang.isObject"><returns type="Boolean"/><summary>Return true if it is an Object, Array or Function.</summary><parameters><parameter name="it" type="anything"/></parameters></function><function name="dojo.lang.isArray"><returns type="Boolean"/><summary>Return true if it is an Array.</summary><parameters><parameter name="it" type="anything"/></parameters></function><function name="dojo.lang.isArrayLike"><returns type="mixed"/><summary>Return true if it can be used as an array (i.e. is an object with an integer length property).</summary><parameters><parameter name="it" type="anything"/></parameters></function><function name="dojo.lang.isFunction"><returns type="Boolean"/><parameters><parameter name="it" type="anything"/></parameters></function><function name="dojo.lang.isString"><summary>Return true if it is a String.</summary><parameters><parameter name="it" type="anything"/></parameters></function><function name="dojo.lang.isAlien"><returns type="Boolean"/><summary>Return true if it is not a built-in function. False if not.</summary><parameters><parameter name="it" type="anything"/></parameters></function><function name="dojo.lang.isBoolean"><returns type="Boolean"/><summary>Return true if it is a Boolean.</summary><parameters><parameter name="it" type="anything"/></parameters></function><function name="dojo.lang.isNumber"><returns type="Boolean"/><summary>Return true if it is a number.</summary><parameters><parameter name="it" type="anything"/></parameters><description>WARNING - In most cases, isNaN(it) is sufficient to determine whether or not something is a number or can be used as such. For example, a number or string can be used interchangably when accessing array items (array["1"] is the same as array[1]) and isNaN will return false for both values ("1" and 1). However, isNumber("1") will return false, which is generally not too useful. Also, isNumber(NaN) returns true, again, this isn't generally useful, but there are corner cases (like when you want to make sure that two things are really the same type of thing). That is really where isNumber "shines". Recommendation - Use isNaN(it) when possible</description></function><function name="dojo.lang.isUndefined"><returns type="Boolean"/><summary>Return true if it is not defined.</summary><parameters><parameter name="it" type="anything"/></parameters><description>WARNING - In some cases, isUndefined will not behave as you might expect. If you do isUndefined(foo) and there is no earlier reference to foo, an error will be thrown before isUndefined is called. It behaves correctly if you scope yor object first, i.e. isUndefined(foo.bar) where foo is an object and bar isn't a property of the object. Recommendation - Use typeof foo == "undefined" when possible</description></function></resource><resource location="dojo.lang.declare"><requires><environment type="common"><require>dojo.lang.common</require><require>dojo.lang.extras</require></environment></requires><function name="dojo.lang.declare"><returns type="Function"/><parameters><parameter name="className" type="String"/><parameter name="superclass" type="Function|Array"/><parameter name="init" optional="true" type="Function"/><parameter name="props" type="Object|Array"/></parameters><chains><chain type="call">dojo.lang.extend</chain></chains></function><function name="dojo.lang.declare._makeConstructor"><chains><chain type="call">self.initializer</chain></chains></function><function name="dojo.lang.declare._common._getPropContext"/><function name="dojo.lang.declare._common._contextMethod"><parameters><parameter name="ptype"/><parameter name="method"/><parameter name="args"/></parameters><variables><variable scope="instance" name="___proto"/></variables></function><function name="dojo.lang.declare._common._inherited"><summary>Searches backward thru prototype chain to find nearest ancestral instance of prop. Internal use only.</summary><parameters><parameter name="prop"/><parameter name="args"/></parameters></function><function name="dojo.lang.declare._common.inherited"><parameters><parameter name="prop"/><parameter name="args"/></parameters></function></resource><resource location="dojo.lang.extras"><requires><environment type="common"><require>dojo.lang.common</require></environment></requires><function name="dojo.lang.setTimeout"><returns type="int"/><summary>Sets a timeout in milliseconds to execute a function in a given context with optional arguments. usage: dojo.lang.setTimeout(Object context, function func, number delay[, arg1[, ...]]); dojo.lang.setTimeout(function func, number delay[, arg1[, ...]]);</summary><parameters><parameter name="func" type="Function"/><parameter name="delay" type="int , ..."/></parameters><chains><chain type="call">func</chain></chains></function><function name="dojo.lang.clearTimeout"><summary>clears timer by number from the execution queue</summary><parameters><parameter name="timer" type="int"/></parameters></function><function name="dojo.lang.getNameInObj"><returns type="mixed">the property name</returns><summary>looks for a value in the object ns with a value matching item and</summary><parameters><parameter name="ns" type="if">null, dj_global is used</parameter><parameter name="item" type="value">to return a name for</parameter></parameters></function><function name="dojo.lang.shallowCopy"><returns type="mixed"/><summary>copies object obj one level deep, or full depth if deep is true</summary><parameters><parameter name="obj" type="Object"/><parameter name="deep" optional="true" type="Boolean"/></parameters></function><function name="dojo.lang.firstValued"><returns type="mixed"/><summary>Return the first argument that isn't undefined</summary></function><function name="dojo.lang.getObjPathValue"><returns type="Object"/><summary>Gets a value from a reference specified as a string descriptor, (e.g. "A.B") in the given context.</summary><parameters><parameter name="objpath" type="String"/><parameter name="context" type="if">not specified, dj_global is used</parameter><parameter name="create" type="if">true, undefined objects in the path are created.</parameter></parameters></function><function name="dojo.lang.setObjPathValue"><summary>Sets a value on a reference specified as a string descriptor. (e.g. "A.B") in the given context. This is similar to straight assignment, except that the object structure in question can optionally be created if it does not exist.</summary><parameters><parameter name="objpath" type="String"/><parameter name="value" type="anything"/><parameter name="context" type="if">not specified, dj_global is used</parameter><parameter name="create" type="if">true, undefined objects in the path are created.</parameter></parameters></function></resource><resource location="dojo.lang.func"><requires><environment type="common"><require>dojo.lang.common</require></environment></requires><function name="dojo.lang.hitch"><returns type="Function"/><summary>Returns a function that will only ever execute in the a given scope (thisObject). This allows for easy use of object member functions in callbacks and other places in which the "this" keyword may otherwise not reference the expected scope. Note that the order of arguments may be reversed in a future version.</summary><parameters><parameter name="thisObject" type="to">be used as the basis for the binding usage: dojo.lang.hitch(foo, "bar")(); // runs foo.bar() in the scope of foo dojo.lang.hitch(foo, myFunction); // returns a function that runs myFunction in the scope of foo</parameter><parameter name="method" type="a">function to be "bound" to thisObject or the name of the method in</parameter></parameters><chains><chain type="call">fcn</chain></chains></function><function name="dojo.lang.nameAnonFunc"><returns type="String"/><summary>Creates a reference to anonFuncPtr in thisObj with a completely unique name. The new name is returned as a String. If</summary><parameters><parameter name="anonFuncPtr" type="Function"/><parameter name="thisObj" type="Object"/><parameter name="searchForNames" type="to">be false.</parameter></parameters></function><function name="dojo.lang.forward"><summary>Returns a function that forwards a method call to this.funcName(...). Unlike dojo.lang.hitch(), the "this" scope is not fixed on a single object. Ported from MochiKit.</summary><parameters><parameter name="funcName"/></parameters></function><function name="dojo.lang.curry"><returns type="check to see if we've been run"/><summary>similar to the curry() method found in many functional programming environments, this function returns an "argument accumulator" function, bound to a particular scope, and "primed" with a variable number of arguments. The curry method is unique in that it returns a function that may return other "partial" function which can be called repeatedly. New functions are returned until the arity of the original function is reached, at which point the underlying function (func) is called in the scope thisObj with all of the accumulated arguments (plus any extras) in positional order. examples: assuming a function defined like this: var foo = { bar: function(arg1, arg2, arg3){ dojo.debug.apply(dojo, arguments); } }; dojo.lang.curry() can be used most simply in this way: tmp = dojo.lang.curry(foo, foo.bar, "arg one", "thinger"); tmp("blah", "this is superfluous"); // debugs: "arg one thinger blah this is superfluous" tmp("blah"); // debugs: "arg one thinger blah" tmp(); // returns a function exactly like tmp that expects one argument other intermittent functions could be created until the 3 positional arguments are filled: tmp = dojo.lang.curry(foo, foo.bar, "arg one"); tmp2 = tmp("arg two"); tmp2("blah blah"); // debugs: "arg one arg two blah blah" tmp2("oy"); // debugs: "arg one arg two oy" curry() can also be used to call the function if enough arguments are passed in the initial invocation: dojo.lang.curry(foo, foo.bar, "one", "two", "three", "four"); // debugs: "one two three four" dojo.lang.curry(foo, foo.bar, "one", "two", "three"); // debugs: "one two three"</summary><parameters><parameter name="thisObj"/><parameter name="func" type="args ..."/></parameters><chains><chain type="call">func</chain></chains></function><function name="dojo.lang.curryArguments"><summary>similar to dojo.lang.curry(), except that a list of arguments to start the curry with may be provided as an array instead of as positional arguments. An offset may be specified from the 0 index to skip some elements in args.</summary><parameters><parameter name="thisObj" type="Object"/><parameter name="func" type="Function"/><parameter name="args" type="Array"/><parameter name="offset" type="Integer, optional"/></parameters><chains><chain type="call">dojo.lang.curry</chain></chains></function><function name="dojo.lang.tryThese"><summary>executes each function argument in turn, returning the return value from the first one which does not throw an exception in execution. Any number of functions may be passed.</summary></function><function name="dojo.lang.delayThese"><summary>executes a series of functions contained in farr, but spaces out calls to each function by the millisecond delay provided. If cb is provided, it will be called directly after each item in farr is called and if onend is passed, it will be called when all items have completed executing.</summary><parameters><parameter name="farr" type="Array"/><parameter name="cb" type="Function, optional"/><parameter name="delay" type="Integer"/><parameter name="onend" type="Function, optional"/></parameters></function></resource><resource location="dojo.lang.repr"><requires><environment type="common"><require>dojo.lang.common</require><require>dojo.AdapterRegistry</require><require>dojo.string.extras</require></environment></requires><function name="dojo.lang.registerRepr"><summary>Register a repr function. repr functions should take one argument and return a string representation of it suitable for developers, primarily used when debugging. If override is given, it is used as the highest priority repr, otherwise it will be used as the lowest.</summary><parameters><parameter name="name" type="String"/><parameter name="check" type="Function"/><parameter name="wrap" type="Function"/><parameter name="override" optional="true" type="Boolean"/></parameters></function><function name="dojo.lang.repr"><returns type="String"/><summary>Return a "programmer representation" for an object</summary><parameters><parameter name="obj" type="Object"/></parameters><description>returns a string representation of an object suitable for developers, primarily used when debugging</description></function><function name="dojo.lang.reprArrayLike"><returns type="String"/><summary>Maps each element of arr to dojo.lang.repr and provides output in an array-like format</summary><parameters><parameter name="arr" type="Array"/></parameters><description>returns an array-like string representation of the provided array suitable for developers, primarily used when debugging</description></function></resource><resource location="dojo.lang.timing.Streamer"><requires><environment type="common"><require>dojo.lang.timing.Timer</require></environment></requires><function name="dojo.lang.timing.Streamer"><summary>Streamer will take an input function that pushes N datapoints into a queue, and will pass the next point in that queue out to an</summary><parameters><parameter name="input" type="the">function executed when the internal queue reaches minimumSize</parameter><parameter name="output" type="the">function executed on internal tick</parameter><parameter name="interval" type="int"/><parameter name="minimum" type="the">minimum number of elements in the internal queue.</parameter><parameter name="initialData" type="array"/></parameters><variables><variable scope="instance" name="interval" type="the">interval in ms at which the output function is fired.</variable><variable scope="instance" name="minimumSize"/><variable scope="instance" name="inputFunction"/><variable scope="instance" name="outputFunction"/><variable scope="instance" name="setInterval"/><variable scope="instance" name="onTick"/><variable scope="instance" name="start"/><variable scope="instance" name="onStart"/><variable scope="instance" name="stop"/><variable scope="instance" name="onStop"/></variables></function><function name="dojo.lang.timing.Streamer.setInterval" instance="dojo.lang.timing.Streamer"><summary>sets the interval in milliseconds of the internal timer</summary><parameters><parameter name="ms" type="int"/></parameters></function><function name="dojo.lang.timing.Streamer.onTick" instance="dojo.lang.timing.Streamer"><parameters><parameter name="obj" type="dojo.lang.timing.Streamer"/></parameters></function><function name="dojo.lang.timing.Streamer.start" instance="dojo.lang.timing.Streamer"><summary>starts the Streamer</summary></function><function name="dojo.lang.timing.Streamer.onStart" instance="dojo.lang.timing.Streamer"/><function name="dojo.lang.timing.Streamer.stop" instance="dojo.lang.timing.Streamer"><summary>stops the Streamer</summary></function><function name="dojo.lang.timing.Streamer.onStop" instance="dojo.lang.timing.Streamer"/></resource><resource location="dojo.lang.timing.Timer"><requires><environment type="common"><require>dojo.lang.func</require></environment></requires><function name="dojo.lang.timing.Timer"><summary>Timer object executes an "onTick()" method repeatedly at a specified interval. repeatedly at a given interval.</summary><parameters><parameter name="interval" type="int"/></parameters><variables><variable scope="instance" name="timer"/><variable scope="instance" name="isRunning"/><variable scope="instance" name="interval" type="Interval">between function calls, in milliseconds.</variable><variable scope="instance" name="onStart"/><variable scope="instance" name="onStop"/></variables></function></resource><resource location="dojo.lang.type"><requires><environment type="common"><require>dojo.lang.common</require></environment></requires><function name="dojo.lang.whatAmI"><parameters><parameter name="value"/></parameters></function><function name="dojo.lang.getType"><returns type="string"/><summary>Attempts to determine what type value is.</summary><parameters><parameter name="value" type="Any">literal value or object instance.</parameter></parameters></function><function name="dojo.lang.isNumeric"><summary>Returns true if value can be interpreted as a number</summary><parameters><parameter name="value" type="Any">literal value or object instance. examples: dojo.lang.isNumeric(3); // returns true dojo.lang.isNumeric("3"); // returns true dojo.lang.isNumeric(new Number(3)); // returns true dojo.lang.isNumeric(new String("3")); // returns true dojo.lang.isNumeric(3/0); // returns false dojo.lang.isNumeric("foo"); // returns false dojo.lang.isNumeric(new Number("foo")); // returns false dojo.lang.isNumeric(false); // returns false dojo.lang.isNumeric(true); // returns false</parameter></parameters></function><function name="dojo.lang.isBuiltIn"><summary>Returns true if value is of a type provided by core JavaScript</summary><parameters><parameter name="value" type="Any">literal value or object instance.</parameter></parameters><description>Returns true for any literal, and for any object that is an instance of a built-in type like String, Number, Boolean, Array, Function, or Error.</description></function><function name="dojo.lang.isPureObject"><summary>Returns true for any value where the value of value.constructor == Object</summary><parameters><parameter name="value" type="Any">literal value or object instance. examples: dojo.lang.isPureObject(new Object()); // returns true dojo.lang.isPureObject({a: 1, b: 2}); // returns true dojo.lang.isPureObject(new Date()); // returns false dojo.lang.isPureObject([11, 2, 3]); // returns false</parameter></parameters><description>Returns true for any literal, and for any object that is an instance of a built-in type like String, Number, Boolean, Array, Function, or Error.</description></function><function name="dojo.lang.isOfType"><returns type="boolean"/><summary>examples:</summary><parameters><parameter name="value" type="anything"/><parameter name="type" type="function"/><parameter name="keywordParameters" optional="true" type="object"/></parameters></function><function name="dojo.lang.getObject"><returns type="Object"/><summary>Will return an object, if it exists, based on the name in the passed string.</summary><parameters><parameter name="str" type="String"/></parameters></function><function name="dojo.lang.doesObjectExist"><returns type="boolean"/><summary>Check to see if object [str] exists, based on the passed string.</summary><parameters><parameter name="str" type="String"/></parameters></function></resource><resource location="dojo.lang"><requires><environment type="common"><require>dojo.lang.common</require></environment></requires></resource><resource location="dojo.lfx.Animation"><requires><environment type="common"><require>dojo.lang.func</require></environment></requires><function name="dojo.lfx.Line"><returns type="mixed"/><summary>dojo.lfx.Line is the object used to generate values from a start value to an end value</summary><parameters><parameter name="start" type="int"/><parameter name="end" type="int"/></parameters><variables><variable scope="instance" name="start"/><variable scope="instance" name="end"/><variable scope="instance" name="getValue"/></variables></function><function name="dojo.lfx.Line.getValue" instance="dojo.lfx.Line"><returns type="Decimal"/><summary>returns the point on the line</summary><parameters><parameter name="n" type="a">floating point number greater than 0 and less than 1</parameter></parameters></function><function name="dojo.lfx.easeDefault"><summary>Returns the point for point n on a sin wave.</summary><parameters><parameter name="n" optional="true" type="Decimal"/></parameters></function><function name="dojo.lfx.easeIn"><summary>returns the point on an easing curve</summary><parameters><parameter name="n" type="a">floating point number greater than 0 and less than 1</parameter></parameters></function><function name="dojo.lfx.easeOut"><summary>returns the point on the line</summary><parameters><parameter name="n" type="a">floating point number greater than 0 and less than 1</parameter></parameters></function><function name="dojo.lfx.easeInOut"><summary>returns the point on the line</summary><parameters><parameter name="n" type="a">floating point number greater than 0 and less than 1</parameter></parameters></function><function name="dojo.lfx.IAnimation"><summary>dojo.lfx.IAnimation is an interface that implements commonly used functions of animation objects</summary><variables><variable scope="instance" name="repeatCount"/><variable scope="prototype" name="curve"/><variable scope="prototype" name="duration"/><variable scope="prototype" name="easing"/><variable scope="prototype" name="repeatCount"/><variable scope="prototype" name="rate"/><variable scope="prototype" name="handler"/><variable scope="prototype" name="beforeBegin"/><variable scope="prototype" name="onBegin"/><variable scope="prototype" name="onAnimate"/><variable scope="prototype" name="onEnd"/><variable scope="prototype" name="onPlay"/><variable scope="prototype" name="onPause"/><variable scope="prototype" name="onStop"/><variable scope="prototype" name="play"/><variable scope="prototype" name="pause"/><variable scope="prototype" name="stop"/><variable scope="prototype" name="_active"/><variable scope="prototype" name="_paused"/></variables></function><function name="dojo.lfx.Animation"><summary>a generic animation object that fires callbacks into it's handlers object at various states</summary><parameters><parameter name="handlers" type="handler">Function?, onstart: Function?, onstop: Function?, onanimate: Function? }</parameter><parameter name="duration" type="int"/><parameter name="curve" type="dojo.lfx.Line"/><parameter name="easing" type="function"/><parameter name="repeatCount" type="int"/><parameter name="rate" type="int"/></parameters><chains><chain type="call">dojo.lfx.IAnimation</chain><chain type="prototype">dojo.lfx.IAnimation</chain></chains><variables><variable scope="instance" name="curve"/><variable scope="instance" name="duration"/><variable scope="instance" name="repeatCount"/><variable scope="instance" name="rate"/><variable scope="instance" name="easing"/><variable scope="instance" name="_active"/><variable scope="instance" name="_paused"/><variable scope="instance" name="_percent"/><variable scope="instance" name="_startTime"/><variable scope="instance" name="_endTime"/><variable scope="instance" name="_startRepeatCount"/><variable scope="instance" name="_timer"/><variable scope="prototype" name="_startTime"/><variable scope="prototype" name="_endTime"/><variable scope="prototype" name="_timer"/><variable scope="prototype" name="_percent"/><variable scope="prototype" name="_startRepeatCount"/></variables></function><function name="dojo.lfx.Combine"><summary>An animation object to play animations passed to it at the same time.</summary><parameters><parameter name="animations" type="dojo.lfx.IAnimation..."/></parameters><chains><chain type="call">dojo.lfx.IAnimation</chain><chain type="prototype">dojo.lfx.IAnimation</chain></chains><variables><variable scope="instance" name="_anims"/><variable scope="instance" name="_animsEnded"/><variable scope="prototype" name="_animsEnded"/></variables></function><function name="dojo.lfx.Chain"><summary>An animation object to play animations passed to it one after another.</summary><parameters><parameter name="animations" type="dojo.lfx.IAnimation..."/></parameters><chains><chain type="call">dojo.lfx.IAnimation</chain><chain type="prototype">dojo.lfx.IAnimation</chain></chains><variables><variable scope="instance" name="_anims"/><variable scope="instance" name="_currAnim"/><variable scope="instance" name="_anims.length"/><variable scope="prototype" name="_currAnim"/></variables></function><function name="dojo.lfx.combine"><returns type="dojo.lfx.Combine"/><summary>Convenience function. Returns a dojo.lfx.Combine created using the animations passed in.</summary><parameters><parameter name="animations" type="dojo.lfx.IAnimation..."/></parameters></function><function name="dojo.lfx.chain"><returns type="dojo.lfx.Combine"/><summary>Convenience function. Returns a dojo.lfx.Chain created using the animations passed in.</summary><parameters><parameter name="animations" type="dojo.lfx.IAnimation..."/></parameters></function><function name="dojo.lfx.IAnimation.connect" prototype="dojo.lfx.IAnimation"><returns type="dojo.lfx.IAnimation"/><summary>Convenience function. Quickly connect to an event of this object and save the old functions connected to it.</summary><parameters><parameter name="evt" type="The">name of the event to connect to.</parameter><parameter name="scope" type="the">scope in which to run newFunc.</parameter><parameter name="newFunc" type="the">function to run when evt is fired.</parameter></parameters><chains><chain type="call">oldFunc</chain><chain type="call">newFunc</chain></chains></function><function name="dojo.lfx.IAnimation.fire" prototype="dojo.lfx.IAnimation"><returns type="dojo.lfx.IAnimation"/><summary>Convenience function. Fire event "evt" and pass it the arguments specified in "args".</summary><parameters><parameter name="evt" type="The">event to fire.</parameter><parameter name="args" type="The">arguments to pass to the event.</parameter></parameters></function><function name="dojo.lfx.IAnimation.repeat" prototype="dojo.lfx.IAnimation"><returns type="dojo.lfx.IAnimation"/><summary>Set the repeat count of this object.</summary><parameters><parameter name="count" type="How">many times to repeat the animation.</parameter></parameters></function><function name="dojo.lfx.Animation.play" prototype="dojo.lfx.Animation"><returns type="dojo.lfx.Animation"/><summary>Start the animation.</summary><parameters><parameter name="delay" type="How">many milliseconds to delay before starting.</parameter><parameter name="gotoStart" type="If">true, starts the animation from the beginning; otherwise, starts it from its current position.</parameter></parameters></function><function name="dojo.lfx.Animation.pause" prototype="dojo.lfx.Animation"><returns type="dojo.lfx.Animation"/><summary>Pauses a running animation.</summary></function><function name="dojo.lfx.Animation.gotoPercent" prototype="dojo.lfx.Animation"><returns type="dojo.lfx.Animation"/><summary>Sets the progress of the animation.</summary><parameters><parameter name="pct" type="A">percentage in decimal notation (between and including 0.0 and 1.0).</parameter><parameter name="andPlay" type="If">true, play the animation after setting the progress.</parameter></parameters></function><function name="dojo.lfx.Animation.stop" prototype="dojo.lfx.Animation"><returns type="dojo.lfx.Animation"/><summary>Stops a running animation.</summary><parameters><parameter name="gotoEnd" type="If">true, the animation will end.</parameter></parameters></function><function name="dojo.lfx.Animation.status" prototype="dojo.lfx.Animation"><returns type="String"/><summary>Returns a string representation of the status of the animation.</summary></function><function name="dojo.lfx.Animation._cycle" prototype="dojo.lfx.Animation"><returns type="dojo.lfx.Animation"/></function><function name="dojo.lfx.Combine.play" prototype="dojo.lfx.Combine"><returns type="dojo.lfx.Combine"/><summary>Start the animations.</summary><parameters><parameter name="delay" type="How">many milliseconds to delay before starting.</parameter><parameter name="gotoStart" type="If">true, starts the animations from the beginning; otherwise, starts them from their current position.</parameter></parameters></function><function name="dojo.lfx.Combine.pause" prototype="dojo.lfx.Combine"><returns type="dojo.lfx.Combine"/><summary>Pauses the running animations.</summary></function><function name="dojo.lfx.Combine.stop" prototype="dojo.lfx.Combine"><returns type="dojo.lfx.Combine"/><summary>Stops the running animations.</summary><parameters><parameter name="gotoEnd" type="If">true, the animations will end.</parameter></parameters></function><function name="dojo.lfx.Combine._onAnimsEnded" prototype="dojo.lfx.Combine"><returns type="dojo.lfx.Combine"/></function><function name="dojo.lfx.Combine._animsCall" prototype="dojo.lfx.Combine"><returns type="dojo.lfx.Combine"/><parameters><parameter name="funcName" type="String"/></parameters></function><function name="dojo.lfx.Chain.play" prototype="dojo.lfx.Chain"><returns type="dojo.lfx.Chain"/><summary>Start the animation sequence.</summary><parameters><parameter name="delay" type="How">many milliseconds to delay before starting.</parameter><parameter name="gotoStart" type="If">true, starts the sequence from the beginning; otherwise, starts it from its current position.</parameter></parameters></function><function name="dojo.lfx.Chain.pause" prototype="dojo.lfx.Chain"><returns type="dojo.lfx.Chain"/><summary>Pauses the running animation sequence.</summary></function><function name="dojo.lfx.Chain.playPause" prototype="dojo.lfx.Chain"><returns type="dojo.lfx.Chain"/><summary>If the animation sequence is playing, pause it; otherwise, play it.</summary></function><function name="dojo.lfx.Chain.stop" prototype="dojo.lfx.Chain"><returns type="dojo.lfx.IAnimation"/><summary>Stops the running animations.</summary></function><function name="dojo.lfx.Chain._playNext" prototype="dojo.lfx.Chain"><returns type="dojo.lfx.Chain"/></function></resource><resource location="dojo.lfx._"><requires><environment type="browser"><require>dojo.lfx.html</require></environment></requires><requires><environment type="dashboard"><require>dojo.lfx.html</require></environment></requires></resource><resource location="dojo.lfx.extras"><requires><environment type="common"><require>dojo.lfx.html</require><require>dojo.lfx.Animation</require></environment></requires><function name="dojo.lfx.html.fadeWipeIn"><returns type="dojo.lfx.Combine"/><summary>Returns an animation that will fade "nodes" from its current opacity to fully opaque while wiping it in.</summary><parameters><parameter name="nodes" type="An">array of DOMNodes or one DOMNode.</parameter><parameter name="duration" type="Duration">of the animation in milliseconds.</parameter><parameter name="easing" type="An">easing function.</parameter><parameter name="callback" type="Function">to run at the end of the animation.</parameter></parameters></function><function name="dojo.lfx.html.fadeWipeOut"><returns type="dojo.lfx.Combine"/><summary>Returns an animation that will fade "nodes" from its current opacity to fully transparent while wiping it out.</summary><parameters><parameter name="nodes" type="An">array of DOMNodes or one DOMNode.</parameter><parameter name="duration" type="Duration">of the animation in milliseconds.</parameter><parameter name="easing" type="An">easing function.</parameter><parameter name="callback" type="Function">to run at the end of the animation.</parameter></parameters></function><function name="dojo.lfx.html.scale"><returns type="dojo.lfx.Combine"/><summary>Returns an animation that will scale "nodes" by "percentage".</summary><parameters><parameter name="nodes" type="An">array of DOMNodes or one DOMNode.</parameter><parameter name="percentage" type="A">whole number representing the percentage to scale "nodes".</parameter><parameter name="scaleContent" type="If">true, will scale the contents of "nodes".</parameter><parameter name="fromCenter" type="If">true, will scale "nodes" from its center rather than the lower right corner.</parameter><parameter name="duration" type="Duration">of the animation in milliseconds.</parameter><parameter name="easing" type="An">easing function.</parameter><parameter name="callback" type="Function">to run at the end of the animation.</parameter></parameters></function></resource><resource location="dojo.lfx.html"><requires><environment type="common"><require>dojo.gfx.color</require><require>dojo.lfx.Animation</require><require>dojo.lang.array</require><require>dojo.html.display</require><require>dojo.html.color</require><require>dojo.html.layout</require></environment></requires><function name="dojo.lfx.html._byId"><parameters><parameter name="nodes"/></parameters></function><function name="dojo.lfx.html.propertyAnimation"><returns type="dojo.lfx.Animation"/><summary>Returns an animation that will transition the properties of "nodes" depending how they are defined in "propertyMap".</summary><parameters><parameter name="nodes" type="An">array of DOMNodes or one DOMNode.</parameter><parameter name="propertyMap" type="property">String, start: Decimal?, end: Decimal?, units: String? } An array of objects defining properties to change.</parameter><parameter name="duration" type="Duration">of the animation in milliseconds.</parameter><parameter name="easing" type="An">easing function.</parameter><parameter name="handlers" type="handler">Function?, onstart: Function?, onstop: Function?, onanimate: Function? }</parameter></parameters><variables><variable scope="instance" name="_properties"/><variable scope="instance" name="diffs"/><variable scope="instance" name="getValue"/></variables></function><function name="dojo.lfx.html.propertyAnimation.getValue" instance="dojo.lfx.html.propertyAnimation"><parameters><parameter name="n"/></parameters></function><function name="dojo.lfx.html._makeFadeable"><parameters><parameter name="nodes"/></parameters></function><function name="dojo.lfx.html.fade"><returns type="dojo.lfx.Animation"/><summary>Returns an animation that will fade the "nodes" from the start to end values passed.</summary><parameters><parameter name="nodes" type="An">array of DOMNodes or one DOMNode.</parameter><parameter name="values" type="start">Decimal?, end: Decimal? }</parameter><parameter name="duration" type="Duration">of the animation in milliseconds.</parameter><parameter name="easing" type="An">easing function.</parameter><parameter name="callback" type="Function">to run at the end of the animation.</parameter></parameters></function><function name="dojo.lfx.html.fadeIn"><returns type="dojo.lfx.Animation"/><summary>Returns an animation that will fade "nodes" from its current opacity to fully opaque.</summary><parameters><parameter name="nodes" type="An">array of DOMNodes or one DOMNode.</parameter><parameter name="duration" type="Duration">of the animation in milliseconds.</parameter><parameter name="easing" type="An">easing function.</parameter><parameter name="callback" type="Function">to run at the end of the animation.</parameter></parameters></function><function name="dojo.lfx.html.fadeOut"><returns type="dojo.lfx.Animation"/><summary>Returns an animation that will fade "nodes" from its current opacity to fully transparent.</summary><parameters><parameter name="nodes" type="An">array of DOMNodes or one DOMNode.</parameter><parameter name="duration" type="Duration">of the animation in milliseconds.</parameter><parameter name="easing" type="An">easing function.</parameter><parameter name="callback" type="Function">to run at the end of the animation.</parameter></parameters></function><function name="dojo.lfx.html.fadeShow"><returns type="dojo.lfx.Animation"/><summary>Returns an animation that will fade "nodes" from transparent to opaque and shows "nodes" at the end if it is hidden.</summary><parameters><parameter name="nodes" type="An">array of DOMNodes or one DOMNode.</parameter><parameter name="duration" type="Duration">of the animation in milliseconds.</parameter><parameter name="easing" type="An">easing function.</parameter><parameter name="callback" type="Function">to run at the end of the animation.</parameter></parameters></function><function name="dojo.lfx.html.fadeHide"><returns type="dojo.lfx.Animation"/><summary>Returns an animation that will fade "nodes" from its current opacity to opaque and hides "nodes" at the end.</summary><parameters><parameter name="nodes" type="An">array of DOMNodes or one DOMNode.</parameter><parameter name="duration" type="Duration">of the animation in milliseconds.</parameter><parameter name="easing" type="An">easing function.</parameter><parameter name="callback" type="Function">to run at the end of the animation.</parameter></parameters></function><function name="dojo.lfx.html.wipeIn"><returns type="dojo.lfx.Combine"/><summary>Returns an animation that will show and wipe in "nodes".</summary><parameters><parameter name="nodes" type="An">array of DOMNodes or one DOMNode.</parameter><parameter name="duration" type="Duration">of the animation in milliseconds.</parameter><parameter name="easing" type="An">easing function.</parameter><parameter name="callback" type="Function">to run at the end of the animation.</parameter></parameters></function><function name="dojo.lfx.html.wipeOut"><returns type="dojo.lfx.Combine"/><summary>Returns an animation that will wipe out and hide "nodes".</summary><parameters><parameter name="nodes" type="An">array of DOMNodes or one DOMNode.</parameter><parameter name="duration" type="Duration">of the animation in milliseconds.</parameter><parameter name="easing" type="An">easing function.</parameter><parameter name="callback" type="Function">to run at the end of the animation.</parameter></parameters></function><function name="dojo.lfx.html.slideTo"><returns type="dojo.lfx.Combine"/><summary>Returns an animation that will slide "nodes" from its current position to the position defined in "coords".</summary><parameters><parameter name="nodes" type="An">array of DOMNodes or one DOMNode.</parameter><parameter name="coords" type="top">Decimal?, left: Decimal? }</parameter><parameter name="duration" type="Duration">of the animation in milliseconds.</parameter><parameter name="easing" type="An">easing function.</parameter><parameter name="callback" type="Function">to run at the end of the animation.</parameter></parameters></function><function name="dojo.lfx.html.slideBy"><returns type="dojo.lfx.Combine"/><summary>Returns an animation that will slide "nodes" from its current position to its current position plus the numbers defined in "coords".</summary><parameters><parameter name="nodes" type="An">array of DOMNodes or one DOMNode.</parameter><parameter name="coords" type="top">Decimal?, left: Decimal? }</parameter><parameter name="duration" type="Duration">of the animation in milliseconds.</parameter><parameter name="easing" type="An">easing function.</parameter><parameter name="callback" type="Function">to run at the end of the animation.</parameter></parameters></function><function name="dojo.lfx.html.explode"><returns type="dojo.lfx.Animation"/><summary>Returns an animation that will</summary><parameters><parameter name="start" type="DOMNode"/><parameter name="endNode" type="DOMNode"/><parameter name="duration" type="Duration">of the animation in milliseconds.</parameter><parameter name="easing" type="An">easing function.</parameter><parameter name="callback" type="Function">to run at the end of the animation.</parameter></parameters></function><function name="dojo.lfx.html.implode"><returns type="dojo.lfx.Animation"/><summary>Returns an animation that will</summary><parameters><parameter name="startNode" type="DOMNode"/><parameter name="end" type="DOMNode"/><parameter name="duration" type="Duration">of the animation in milliseconds.</parameter><parameter name="easing" type="An">easing function.</parameter><parameter name="callback" type="Function">to run at the end of the animation.</parameter></parameters></function><function name="dojo.lfx.html.highlight"><returns type="dojo.lfx.Combine"/><summary>Returns an animation that will set the background color of "nodes" to startColor and transition it to "nodes" original color.</summary><parameters><parameter name="nodes" type="DOMNode[]"/><parameter name="startColor" type="Color">to transition from.</parameter><parameter name="duration" type="Duration">of the animation in milliseconds.</parameter><parameter name="easing" type="An">easing function.</parameter><parameter name="callback" type="Function">to run at the end of the animation.</parameter></parameters></function><function name="dojo.lfx.html.unhighlight"><returns type="dojo.lfx.Combine"/><summary>Returns an animation that will transition "nodes" background color from its current color to "endColor".</summary><parameters><parameter name="nodes" type="DOMNode[]"/><parameter name="endColor" type="Color">to transition to.</parameter><parameter name="duration" type="Duration">of the animation in milliseconds.</parameter><parameter name="easing" type="An">easing function.</parameter><parameter name="callback" type="Function">to run at the end of the animation.</parameter></parameters></function></resource><resource location="dojo.lfx.rounded"><requires><environment type="common"><require>dojo.lang.common</require><require>dojo.html.common</require><require>dojo.html.style</require><require>dojo.html.display</require><require>dojo.html.layout</require></environment></requires><function name="dojo.lfx.rounded"><returns type="don't bother."/><summary>Creates a set of rounded corners based on settings.</summary><parameters><parameter name="settings" type="object ..."/></parameters></function><function name="dojo.lfx.rounded.applyCorners"><summary>Rounds corners based on options to passed node.</summary><parameters><parameter name="options" type="object"/><parameter name="node" type="HTMLElement"/></parameters></function><object name="dojo.lfx.rounded._fns"><variables><variable name="blend"/><variable name="fraction"/><variable name="draw"/><variable name="getRGB"/></variables></object></resource><resource location="dojo.lfx.shadow"><requires><environment type="common"><require>dojo.lang.common</require><require>dojo.uri.Uri</require></environment></requires><function name="dojo.lfx.shadow"><summary>creates a shadow underneath node.</summary><parameters><parameter name="node" type="HTMLElement"/></parameters><variables><variable scope="instance" name="shadowPng"/><variable scope="instance" name="shadowThickness"/><variable scope="instance" name="shadowOffset"/></variables></function><function name="dojo.lfx.shadow.init"><summary>Initializes the shadow.</summary><parameters><parameter name="node" type="HTMLElement"/></parameters><variables><variable scope="instance" name="node"/><variable scope="instance" name="pieces"/></variables></function><function name="dojo.lfx.shadow._makePiece"><parameters><parameter name="name"/><parameter name="vertAttach"/><parameter name="vertCoord"/><parameter name="horzAttach"/><parameter name="horzCoord"/><parameter name="sizing"/></parameters></function><function name="dojo.lfx.shadow.size"><summary>Resizes the shadow based on width and height.</summary><parameters><parameter name="width" type="int"/><parameter name="height" type="int"/></parameters></function></resource><resource location="dojo.lfx.toggle"><requires><environment type="common"><require>dojo.lfx.*</require></environment></requires><function name="dojo.lfx.toggle.plain.show"><parameters><parameter name="node"/><parameter name="duration"/><parameter name="easing"/><parameter name="callback"/></parameters></function><function name="dojo.lfx.toggle.plain.hide"><parameters><parameter name="node"/><parameter name="duration"/><parameter name="easing"/><parameter name="callback"/></parameters></function><function name="dojo.lfx.toggle.fade.show"><parameters><parameter name="node"/><parameter name="duration"/><parameter name="easing"/><parameter name="callback"/></parameters></function><function name="dojo.lfx.toggle.fade.hide"><parameters><parameter name="node"/><parameter name="duration"/><parameter name="easing"/><parameter name="callback"/></parameters></function><function name="dojo.lfx.toggle.wipe.show"><parameters><parameter name="node"/><parameter name="duration"/><parameter name="easing"/><parameter name="callback"/></parameters></function><function name="dojo.lfx.toggle.wipe.hide"><parameters><parameter name="node"/><parameter name="duration"/><parameter name="easing"/><parameter name="callback"/></parameters></function><function name="dojo.lfx.toggle.explode.show"><parameters><parameter name="node"/><parameter name="duration"/><parameter name="easing"/><parameter name="callback"/><parameter name="explodeSrc"/></parameters></function><function name="dojo.lfx.toggle.explode.hide"><parameters><parameter name="node"/><parameter name="duration"/><parameter name="easing"/><parameter name="callback"/><parameter name="explodeSrc"/></parameters></function></resource><resource location="dojo.loader_xd"><function name="dojo.hostenv.resetXd"><summary>Internal xd loader function. Resets the xd state.</summary><variables><variable scope="instance" name="isXDomain"/><variable scope="instance" name="xdTimer"/><variable scope="instance" name="xdInFlight"/><variable scope="instance" name="xdOrderedReqs"/><variable scope="instance" name="xdDepMap"/><variable scope="instance" name="xdContents"/></variables></function><function name="dojo.hostenv.createXdPackage"><returns type="String"/><summary>Internal xd loader function. Creates an xd module source given an non-xd module contents.</summary><parameters><parameter name="contents" type="String"/></parameters></function><function name="dojo.hostenv.loadPath"><returns type="boolean"/><summary>Internal xd loader function. Overrides loadPath() from loader.js. xd loading requires slightly different behavior from loadPath().</summary><parameters><parameter name="relpath" type="String"/><parameter name="module" optional="true" type="String"/><parameter name="cb" optional="true" type="Function"/></parameters><variables><variable scope="instance" name="isXDomain"/></variables></function><function name="dojo.hostenv.loadUri"><returns type="boolean"/><summary>Internal xd loader function. Overrides loadUri() from loader.js. xd loading requires slightly different behavior from loadPath().</summary><parameters><parameter name="uri" type="String"/><parameter name="cb" optional="true" type="Function"/><parameter name="currentIsXDomain" type="boolean"/><parameter name="module" optional="true" type="String"/></parameters><variables><variable scope="instance" name="xdTimer"/><variable scope="instance" name="xdStartTime"/><variable scope="instance" name="headElement"/></variables><description>Wanted to override getText(), but it is used by the widget code in too many, synchronous ways right now.</description></function><function name="dojo.hostenv.packageLoaded"><summary>Internal xd loader function. Called by an xd module when it has been loaded via a script tag.</summary><parameters><parameter name="pkg" type="Object"/></parameters></function><function name="dojo.hostenv.xdLoadFlattenedBundle"><summary>Internal xd loader function. Used when loading a flattened localized bundle via a script tag.</summary><parameters><parameter name="moduleName" type="String"/><parameter name="bundleName" type="String"/><parameter name="locale" optional="true" type="String"/><parameter name="bundleData" type="Object"/></parameters></function><function name="dojo.xdRequireLocalization"><parameters><parameter name="m"/><parameter name="b"/><parameter name="locale"/><parameter name="fLocales"/></parameters></function><function name="dojo.hostenv.unpackXdDependency"><returns type="Object"/><summary>Internal xd loader function. Determines what to do with a dependency that was listed in an xd version of a module contents.</summary><parameters><parameter name="dep"/></parameters></function><function name="dojo.hostenv.xdWalkReqs"><summary>Internal xd loader function. Walks the requires and evaluates package contents in the right order.</summary></function><function name="dojo.hostenv.xdTraceReqs"><summary>Internal xd loader function. Trace the requires to chain the correct order of required modules.</summary><parameters><parameter name="reqs" type="Object"/><parameter name="reqChain" type="Array"/></parameters></function><function name="dojo.hostenv.xdEvalReqs"><summary>Internal xd loader function. Does a depth first, breadth second search and eval of required modules.</summary><parameters><parameter name="reqChain" type="Array"/></parameters></function><function name="dojo.hostenv.clearXdInterval"><summary>Internal xd loader function. Clears the interval timer used to check on the status of in-flight xd module resource requests.</summary><variables><variable scope="instance" name="xdTimer"/></variables></function><function name="dojo.hostenv.watchInFlightXDomain"><summary>Internal xd loader function. Monitors in-flight requests for xd module resources.</summary><variables><variable scope="instance" name="inFlightCount"/></variables></function><function name="dojo.hostenv.flattenRequireArray"><summary>Internal xd loader function. Flattens an array of arrays into a one-level deep array.</summary><parameters><parameter name="target" type="Array"/></parameters></function><function name="dojo.hostenv.callLoaded"><summary>Internal xd loader function. Overrides callLoaded() from loader.js</summary><variables><variable scope="instance" name="xdHasCalledPreload"/><variable scope="instance" name="registerNlsPrefix"/></variables><description>The method is overridden because xd loading needs to preload any flattened i18n bundles before dojo starts executing code, since xd loading cannot do it synchronously, as the i18n code normally expects.</description></function><function name="dojo.hostenv.callLoaded.registerNlsPrefix" instance="dojo.hostenv.callLoaded"/></resource><resource location="dojo.logging.ConsoleLogger"><requires><environment type="common"><require>dojo.logging.Logger</require></environment></requires><function name="dojo.logging.MemoryLogHandler"><variables><variable scope="prototype" name="debug"/><variable scope="prototype" name="info"/><variable scope="prototype" name="warn"/><variable scope="prototype" name="error"/><variable scope="prototype" name="critical"/><variable scope="prototype" name="emit"/><variable scope="prototype" name="debug"/><variable scope="prototype" name="info"/><variable scope="prototype" name="warn"/><variable scope="prototype" name="error"/><variable scope="prototype" name="critical"/></variables></function><function name="dojo.logging.Logger.exception" prototype="dojo.logging.Logger"><parameters><parameter name="msg"/><parameter name="e"/><parameter name="squelch"/></parameters></function></resource><resource location="dojo.logging.Logger"><requires><environment type="common"><require>dojo.lang.common</require><require>dojo.lang.declare</require></environment></requires><function name="dojo.logging.MemoryLogHandler"><chains><chain type="call">dojo.logging.LogHandler</chain><chain type="prototype">dojo.logging.LogHandler</chain></chains></function><function name="dojo.logging.Record"><summary>A simple data structure class that stores information for and about a logged event. Objects of this type are created automatically when an event is logged and are the internal format in which information about log events is kept.</summary><parameters><parameter name="logLevel" type="Integer">mapped via the dojo.logging.log.levels object from a string. This mapping also corresponds to an instance of dojo.logging.Logger</parameter><parameter name="message" type="String||Array"/></parameters><variables><variable scope="instance" name="level"/><variable scope="instance" name="message" type="The">contents of the message represented by this log record.</variable><variable scope="instance" name="msgArgs"/><variable scope="instance" name="time"/></variables></function><function name="dojo.logging.LogFilter"><returns type="pass all records"/><summary>An empty parent (abstract) class which concrete filters should inherit from. Filters should have only a single method, filter(), which processes a record and returns true or false to denote whether or not it should be handled by the next step in a filter chain.</summary><parameters><parameter name="loggerChain"/></parameters><variables><variable scope="instance" name="passChain"/><variable scope="instance" name="filter"/></variables></function><function name="dojo.logging.LogFilter.filter" instance="dojo.logging.LogFilter"><returns type="pass all records"/><parameters><parameter name="record"/></parameters></function><function name="dojo.logging.Logger"><variables><variable scope="instance" name="cutOffLevel"/><variable scope="instance" name="propagate"/><variable scope="instance" name="parent"/><variable scope="instance" name="data"/><variable scope="instance" name="filters"/><variable scope="instance" name="handlers"/><variable scope="prototype" name="debug"/><variable scope="prototype" name="warn"/><variable scope="prototype" name="err"/><variable scope="prototype" name="crit"/></variables></function><function name="dojo.logging.LogHandler"><parameters><parameter name="level"/></parameters><variables><variable scope="instance" name="cutOffLevel"/><variable scope="instance" name="formatter"/><variable scope="instance" name="data"/><variable scope="instance" name="filters"/><variable scope="prototype" name="setFormatter"/><variable scope="prototype" name="flush"/><variable scope="prototype" name="close"/><variable scope="prototype" name="handleError"/><variable scope="prototype" name="handle"/><variable scope="prototype" name="emit"/></variables></function><function name="dojo.logging.log.getLogger"><returns type="dojo.logging.Logger">a named dojo.logging.Logger instance. If one is not already available with that name in the global map, one is created and returne.</returns><parameters><parameter name="name" type="string"/></parameters></function><function name="dojo.logging.log.getLevelName"><returns type="string"/><summary>turns integer logging level into a human-friendly name</summary><parameters><parameter name="lvl" type="integer"/></parameters></function><function name="dojo.logging.log.getLevel"><returns type="integer"/><summary>name-&gt;integer conversion for log levels</summary><parameters><parameter name="name" type="string"/></parameters></function><function name="dojo.logging.Logger._argsToArr"><parameters><parameter name="args"/></parameters></function><function name="dojo.logging.Logger.setLevel"><summary>set the logging level for this logger.</summary><parameters><parameter name="lvl" type="the">logging level to set the cutoff for, as derived from the dojo.logging.log.levels object. Any messages below the specified level are dropped on the floor</parameter></parameters><variables><variable scope="instance" name="cutOffLevel"/></variables></function><function name="dojo.logging.Logger.isEnabledFor"><returns type="boolean"/><summary>will a message at the specified level be emitted?</summary><parameters><parameter name="lvl" type="Integer"/></parameters></function><function name="dojo.logging.Logger.getEffectiveLevel"><returns type="Integer"/><summary>gets the effective cutoff level, including that of any potential parent loggers in the chain.</summary><variables><variable scope="instance" name="cutOffLevel"/></variables></function><function name="dojo.logging.Logger.addFilter"><returns type="Integer"/><summary>registers a new LogFilter object. All records will be passed through this filter from now on.</summary><parameters><parameter name="flt" type="dojo.logging.LogFilter"/></parameters></function><function name="dojo.logging.Logger.removeFilterByIndex"><returns type="boolean"/><summary>removes the filter at the specified index from the filter chain. Returns whether or not removal was successful.</summary><parameters><parameter name="fltIndex" type="Integer"/></parameters></function><function name="dojo.logging.Logger.removeFilter"><summary>removes the passed LogFilter. Returns whether or not removal was successful.</summary><parameters><parameter name="fltRef" type="dojo.logging.LogFilter"/></parameters></function><function name="dojo.logging.Logger.removeAllFilters"><summary>clobbers all the registered filters.</summary><variables><variable scope="instance" name="filters"/></variables></function><function name="dojo.logging.Logger.filter"><returns type="boolean"/><summary>runs the passed Record through the chain of registered filters. Returns a boolean indicating whether or not the Record should be emitted.</summary><parameters><parameter name="rec" type="dojo.logging.Record"/></parameters></function><function name="dojo.logging.Logger.addHandler"><summary>adds as LogHandler to the chain</summary><parameters><parameter name="hdlr" type="dojo.logging.LogHandler"/></parameters></function><function name="dojo.logging.Logger.handle"><returns type="boolean"/><summary>if the Record survives filtering, pass it down to the registered handlers. Returns a boolean indicating whether or not the record was successfully handled. If the message is culled for some reason, returns false.</summary><parameters><parameter name="rec" type="dojo.logging.Record"/></parameters></function><function name="dojo.logging.Logger.log"><summary>log a message at the specified log level</summary><parameters><parameter name="lvl" type="integer"/><parameter name="msg" type="string"/></parameters></function><function name="dojo.logging.Logger.info"><summary>log the msg and any other arguments at the "info" logging level.</summary><parameters><parameter name="msg"/></parameters></function><function name="dojo.logging.Logger.warning"><summary>log the msg and any other arguments at the "warning" logging level.</summary><parameters><parameter name="msg"/></parameters></function><function name="dojo.logging.Logger.error"><summary>log the msg and any other arguments at the "error" logging level.</summary><parameters><parameter name="msg"/></parameters></function><function name="dojo.logging.Logger.critical"><summary>log the msg and any other arguments at the "critical" logging level.</summary><parameters><parameter name="msg"/></parameters></function><function name="dojo.logging.Logger.exception"><summary>logs the error and the message at the "exception" logging level. If squelch is true, also prevent bubbling of the exception.</summary><parameters><parameter name="msg" type="string"/><parameter name="e" type="Error"/><parameter name="squelch" type="boolean"/></parameters></function><function name="dojo.logging.Logger.logType"><summary>a more "user friendly" version of the log() function. Takes the named log level instead of the corresponding integer.</summary><parameters><parameter name="type" type="string"/><parameter name="args" type="array"/></parameters><chains><chain type="call">this.log</chain></chains></function></resource><resource location="dojo.logging._"><requires><environment type="rhino"><require>dojo.logging.RhinoLogger</require></environment></requires></resource><resource location="dojo.math.curves"><requires><environment type="common"><require>dojo.math</require></environment></requires><function name=".getValue"><returns type="array"/><summary>Returns the point at point N (in terms of percentage) on this curve.</summary><parameters><parameter name="n" type="float"/></parameters></function><function name=".add"><summary>Add a curve segment to this path</summary><parameters><parameter name="curve" type="dojo.math.curves.*"/><parameter name="weight" type="float"/></parameters></function><function name=".remove"><summary>Remove a curve segment from this path</summary><parameters><parameter name="curve" type="dojo.math.curves.*"/></parameters></function><function name=".removeAll"><summary>Remove all curve segments</summary></function><function name="computeRanges"/><function name="dojo.math.curves.Line"><returns type="mixed"/><summary>Creates a straight line object</summary><parameters><parameter name="start" type="array"/><parameter name="end" type="array"/></parameters><variables><variable scope="instance" name="start"/><variable scope="instance" name="end"/><variable scope="instance" name="dimensions"/><variable scope="instance" name="getValue"/></variables></function><function name="dojo.math.curves.Line.getValue" instance="dojo.math.curves.Line"><returns type="array"/><summary>Returns the point at point N (in terms of percentage) on this line.</summary><parameters><parameter name="n" type="float"/></parameters></function><object name="dojo.math.curves"><variables><variable name="Bezier"/></variables></object></resource><resource location="dojo.math.matrix"><function name="dojo.math.matrix.multiply"><parameters><parameter name="a"/><parameter name="b"/></parameters></function><function name="dojo.math.matrix.product"/><function name="dojo.math.matrix.sum"/><function name="dojo.math.matrix.inverse"><parameters><parameter name="a"/></parameters></function><function name="dojo.math.matrix.determinant"><parameters><parameter name="a"/></parameters></function><function name="dojo.math.matrix.upperTriangle"><parameters><parameter name="m"/></parameters></function><function name="dojo.math.matrix.create"><parameters><parameter name="a"/><parameter name="b"/><parameter name="value"/></parameters></function><function name="dojo.math.matrix.ones"><parameters><parameter name="a"/><parameter name="b"/></parameters></function><function name="dojo.math.matrix.zeros"><parameters><parameter name="a"/><parameter name="b"/></parameters></function><function name="dojo.math.matrix.identity"><parameters><parameter name="size"/><parameter name="scale"/></parameters></function><function name="dojo.math.matrix.adjoint"><parameters><parameter name="a"/></parameters></function><function name="dojo.math.matrix.transpose"><parameters><parameter name="a"/></parameters></function><function name="dojo.math.matrix.format"><parameters><parameter name="a"/><parameter name="decimal_points"/></parameters></function><function name="dojo.math.matrix.copy"><parameters><parameter name="a"/></parameters></function><function name="dojo.math.matrix.scale"><parameters><parameter name="k"/><parameter name="a"/></parameters></function></resource><resource location="dojo.math.points"><requires><environment type="common"><require>dojo.math</require></environment></requires><function name="dojo.math.points.translate"><returns type="array"/><summary>translate a by b, and return the result.</summary><parameters><parameter name="a" type="array"/><parameter name="b" type="array"/></parameters></function><function name="dojo.math.points.midpoint"><returns type="array"/><summary>Find the point midway between a and b</summary><parameters><parameter name="a" type="array"/><parameter name="b" type="array"/></parameters></function><function name="dojo.math.points.invert"><returns type="array"/><summary>invert the values in a and return it.</summary><parameters><parameter name="a" type="array"/></parameters></function><function name="dojo.math.points.distance"><returns type="float"/><summary>Calculate the distance between point a and point b</summary><parameters><parameter name="a" type="array"/><parameter name="b" type="array"/></parameters></function></resource><resource location="dojo.math"><function name="dojo.math.degToRad"><returns type="float"/><summary>Converts degrees to radians.</summary><parameters><parameter name="x" type="float"/></parameters></function><function name="dojo.math.radToDeg"><returns type="float"/><summary>Converts radians to degrees.</summary><parameters><parameter name="x" type="float"/></parameters></function><function name="dojo.math.factorial"><returns type="integer"/><summary>Returns n!</summary><parameters><parameter name="n" type="integer"/></parameters></function><function name="dojo.math.permutations"><returns type="float"/><summary>The number of ways of obtaining an ordered subset of k elements from a set of n elements</summary><parameters><parameter name="n" type="integer"/><parameter name="k" type="integer"/></parameters></function><function name="dojo.math.combinations"><returns type="float"/><summary>The number of ways of picking n unordered outcomes from r possibilities</summary><parameters><parameter name="n" type="integer"/><parameter name="r" type="integer"/></parameters></function><function name="dojo.math.bernstein"><returns type="float"/><summary>Calculates a weighted average based on the Bernstein theorem.</summary><parameters><parameter name="t" type="float"/><parameter name="n" type="float"/><parameter name="i" type="float"/></parameters></function><function name="dojo.math.gaussianRandom"><returns type="float"/><summary>Returns random numbers with a Gaussian distribution, with the mean set at 0 and the variance set at 1.</summary></function><function name="dojo.math.mean"><returns type="float"/><summary>Calculates the mean of an Array of numbers.</summary></function><function name="dojo.math.round"><returns type="float"/><summary>Extends Math.round by adding a second argument specifying the number of decimal places to round to. TODO: add support for significant figures</summary><parameters><parameter name="number" type="float"/><parameter name="places" type="integer"/></parameters></function><function name="dojo.math.sd" is="dojo.math.standardDeviation"/><function name="dojo.math.standardDeviation"><returns type="float"/><summary>Calculates the standard deviation of an Array of numbers</summary></function><function name="dojo.math.variance"><returns type="float"/><summary>Calculates the variance of an Array of numbers</summary></function><function name="dojo.math.range"><returns type="array"/><summary>implementation of Python's range()</summary><parameters><parameter name="a" type="integer"/><parameter name="b" type="integer"/><parameter name="step" type="integer"/></parameters></function></resource><resource location="dojo.namespaces.dojo"><requires><environment type="common"><require>dojo.ns</require></environment></requires><function name="dojo.addDojoNamespaceMapping"><summary>Add an entry to the mapping table for the dojo: namespace</summary><parameters><parameter name="shortName" type="the">name to be used as the widget's tag name in the dojo: namespace</parameter><parameter name="packageName" type="the">path to the Javascript module in dotted package notation</parameter></parameters></function><function name="dojoNamespaceResolver"><parameters><parameter name="name"/><parameter name="domain"/></parameters></function></resource><resource location="dojo.ns"><function name="dojo.ns.Ns"><summary>this object simply encapsulates namespace data</summary><parameters><parameter name="name" type="String"/><parameter name="module" type="String"/><parameter name="resolver" optional="true" type="Function"/></parameters><variables><variable scope="instance" name="name"/><variable scope="instance" name="module"/><variable scope="instance" name="resolver"/><variable scope="instance" name="_loaded"/><variable scope="instance" name="_failed"/></variables></function><function name="dojo.ns.Ns.resolve" prototype="dojo.ns.Ns"><returns type="Boolean"/><summary>map component with 'name' and 'domain' to a module via namespace resolver, if specified</summary><parameters><parameter name="name" type="String"/><parameter name="domain" type="String"/><parameter name="omitModuleCheck" optional="true" type="Boolean"/></parameters></function><function name="dojo.registerNamespace"><summary>maps a module name to a namespace for widgets, and optionally maps widget names to modules for auto-loading</summary><parameters><parameter name="name" type="String"/><parameter name="module" type="use">dojo.registerNamespace.</parameter><parameter name="resolver" optional="true" type="Function"/></parameters><chains><chain type="call">dojo.ns.register</chain></chains><description>An unregistered namespace is mapped to an eponymous module. For example, namespace acme is mapped to module acme, and widgets are assumed to belong to acme.widget. If you want to use a different widget</description></function><function name="dojo.registerNamespaceResolver"><summary>a resolver function maps widget names to modules, so the widget manager can auto-load needed widget implementations</summary><parameters><parameter name="name" type="will">always be lower-case. example: dojo.registerNamespaceResolver("acme", function(name){ return "acme.widget."+dojo.string.capitalize(name); } );</parameter><parameter name="resolver" type="Function"/></parameters><description>The resolver provides information to allow Dojo to load widget modules on demand. When a widget is created, a namespace resolver can tell Dojo what module to require to ensure that the widget implementation code is loaded.</description></function><function name="dojo.registerNamespaceManifest"><summary>convenience function to register a module path, a namespace, and optionally a resolver all at once.</summary><parameters><parameter name="module" type="String"/><parameter name="path" type="String"/><parameter name="name" type="String"/><parameter name="widgetModule" type="String"/><parameter name="resolver" optional="true" type="Function"/></parameters></function><function name="dojo.ns.register"><summary>creates and registers a dojo.ns.Ns object</summary><parameters><parameter name="name" type="String"/><parameter name="module" type="String"/><parameter name="resolver" optional="true" type="Function"/><parameter name="noOverride" optional="true" type="Boolean"/></parameters></function><function name="dojo.ns.allow"><returns type="Boolean"/><summary>Returns false if 'name' is filtered by configuration or has failed to load, true otherwise</summary><parameters><parameter name="name" type="String"/></parameters></function><function name="dojo.ns.get"><returns type="Ns"/><summary>Return Ns object registered to 'name', if any</summary><parameters><parameter name="name" type="String"/></parameters></function><function name="dojo.ns.require"><returns type="mixed"/><summary>Try to ensure that 'name' is registered, loading a namespace manifest if necessary</summary><parameters><parameter name="name" type="String"/></parameters></function><object name="dojo.ns"><summary>private object that implements widget namespace management</summary></object></resource><resource location="dojo.profile"><object name="dojo.profile"><variables><variable name="_pns"/><variable name="start"/><variable name="end"/><variable name="dump"/></variables></object></resource><resource location="dojo.regexp"><function name="dojo.regexp.tld"><returns type="String"/><summary>Builds a RE that matches a top-level domain</summary><parameters><parameter name="flags" type="allowInfra">Include infrastructure domains. Default is true.</parameter></parameters></function><function name="dojo.regexp.ipAddress"><returns type="String"/><summary>Builds a RE that matches an IP Address</summary><parameters><parameter name="flags" type="allowHybrid">IPv6 address written as six groups of four hexadecimal digits followed by the usual 4 dotted decimal digit notation of IPv4. x:x:x:x:x:x:d.d.d.d</parameter></parameters><description>Supports 5 formats for IPv4: dotted decimal, dotted hex, dotted octal, decimal and hexadecimal. Supports 2 formats for Ipv6.</description></function><function name="dojo.regexp.host"><returns type="String"/><summary>Builds a RE that matches a host</summary><parameters><parameter name="flags" type="in">regexp.tld can be applied.</parameter></parameters><description>A host is a domain name or an IP address, possibly followed by a port number.</description></function><function name="dojo.regexp.url"><returns type="&quot;; } return &quot;&quot;; }"/><summary>Builds a regular expression that matches a URL</summary><parameters><parameter name="flags" type="in">regexp.tld can be applied.</parameter></parameters></function><function name="dojo.regexp.emailAddress"><returns type="String"/><summary>Builds a regular expression that matches an email address</summary><parameters><parameter name="flags" type="in">regexp.tld can be applied.</parameter></parameters></function><function name="dojo.regexp.emailAddressList"><returns type="String"/><summary>Builds a regular expression that matches a list of email addresses.</summary><parameters><parameter name="flags" type="in">regexp.tld can be applied.</parameter></parameters></function><function name="dojo.regexp.integer"><returns type="String"/><summary>Builds a regular expression that matches an integer</summary><parameters><parameter name="flags" type="groupSize2">second grouping (for India)</parameter></parameters></function><function name="dojo.regexp.realNumber"><returns type="String"/><summary>Builds a regular expression to match a real number in exponential notation</summary><parameters><parameter name="flags" type="in">regexp.integer can be applied.</parameter></parameters></function><function name="dojo.regexp.currency"><returns type="String"/><summary>Builds a regular expression to match a monetary value</summary><parameters><parameter name="flags" type="in">regexp.realNumber can be applied except exponent, eSigned.</parameter></parameters></function><function name="dojo.regexp.us.state"><returns type="String"/><summary>A regular expression to match US state and territory abbreviations</summary><parameters><parameter name="flags" type="allowMilitary">Allow military 'states', e.g. Armed Forces Europe (AE). Default is true.</parameter></parameters></function><function name="dojo.regexp.time"><returns type="String"/><summary>Builds a regular expression to match any International format for time</summary><parameters><parameter name="flags" type="pmSymbol">The symbol used for PM. Default is "PM".</parameter></parameters><description>The RE can match one format or one of multiple formats. Format h 12 hour, no zero padding. hh 12 hour, has leading zero. H 24 hour, no zero padding. HH 24 hour, has leading zero. m minutes, no zero padding. mm minutes, has leading zero. s seconds, no zero padding. ss seconds, has leading zero. t am or pm, case insensitive. All other characters must appear literally in the expression. Example "h:m:s t" -&gt; 2:5:33 PM "HH:mm:ss" -&gt; 14:05:33</description></function><function name="dojo.regexp.numberFormat"><returns type="String"/><summary>Builds a regular expression to match any sort of number based format</summary><parameters><parameter name="flags" type="format">A string or an Array of strings for multiple formats.</parameter></parameters><description>Use this method for phone numbers, social security numbers, zip-codes, etc. The RE can match one format or one of multiple formats. Format # Stands for a digit, 0-9. ? Stands for an optional digit, 0-9 or nothing. All other characters must appear literally in the expression. Example "(###) ###-####" -&gt; (510) 542-9742 "(###) ###-#### x#???" -&gt; (510) 542-9742 x153 "###-##-####" -&gt; 506-82-1089 i.e. social security number "#####-####" -&gt; 98225-1649 i.e. zip code</description></function><function name="dojo.regexp.buildGroupRE"><returns type="String"/><summary>Builds a regular expression that groups subexpressions</summary><parameters><parameter name="a" type="A">single value or an array of values.</parameter><parameter name="re" type="A">function. Takes one parameter and converts it to a regular expression.</parameter></parameters><description>A utility function used by some of the RE generators. The subexpressions are constructed by the function, re, in the second parameter.</description></function></resource><resource location="dojo.rpc.Deferred"><requires><environment type="common"><require>dojo.Deferred</require></environment></requires></resource><resource location="dojo.rpc.JotService"><requires><environment type="common"><require>dojo.rpc.RpcService</require></environment></requires><function name="dojo.rpc.JotService"><chains><chain type="prototype">dojo.rpc.JsonService</chain></chains><variables><variable scope="instance" name="serviceUrl"/></variables></function><function name="dojo.rpc.JotService.bind" prototype="dojo.rpc.JotService"><summary>Jot bind method. Takes remote method, parameters, deferred, and a url, calls createRequest to make a Jot RPC envelope and passes that off with bind.</summary><parameters><parameter name="method"/><parameter name="parameters"/><parameter name="deferredRequestHandler"/><parameter name="url"/></parameters></function><function name="dojo.rpc.JotService.createRequest" prototype="dojo.rpc.JotService"><summary>create the json portion of the Jot request</summary><parameters><parameter name="method"/><parameter name="params"/></parameters></function></resource><resource location="dojo.rpc.JsonService"><requires><environment type="common"><require>dojo.rpc.RpcService</require><require>dojo.io.*</require><require>dojo.json</require><require>dojo.lang.common</require></environment></requires><function name="dojo.rpc.JsonService"><parameters><parameter name="args"/></parameters><chains><chain type="prototype">dojo.rpc.RpcService</chain></chains><variables><variable scope="instance" name="serviceUrl"/><variable scope="instance" name="strictArgChecks"/><variable scope="prototype" name="bustCache"/><variable scope="prototype" name="contentType"/><variable scope="prototype" name="lastSubmissionId"/></variables></function><function name="dojo.rpc.JsonService.callRemote"><summary>call an arbitrary remote method without requiring it to be predefined with SMD</summary><parameters><parameter name="method"/><parameter name="params"/></parameters></function><function name="dojo.rpc.JsonService.bind"><summary>JSON-RPC bind method. Takes remote method, parameters, deferred, and a url, calls createRequest to make a JSON-RPC envelope and passes that off with bind.</summary><parameters><parameter name="method"/><parameter name="parameters"/><parameter name="deferredRequestHandler"/><parameter name="url"/></parameters></function><function name="dojo.rpc.JsonService.createRequest"><summary>create a JSON-RPC envelope for the request</summary><parameters><parameter name="method"/><parameter name="params"/></parameters></function><function name="dojo.rpc.JsonService.parseResults"><summary>parse the result envelope and pass the results back to to the callback function</summary><parameters><parameter name="obj"/></parameters></function></resource><resource location="dojo.rpc.RpcService"><requires><environment type="common"><require>dojo.io.*</require><require>dojo.json</require><require>dojo.lang.func</require><require>dojo.Deferred</require></environment></requires><function name="dojo.rpc.RpcService"><summary>constructor for rpc base class</summary><parameters><parameter name="url"/></parameters><variables><variable scope="instance" name="serviceUrl"/><variable scope="prototype" name="strictArgChecks"/><variable scope="prototype" name="serviceUrl"/></variables></function><function name="dojo.rpc.RpcService.parseResults" prototype="dojo.rpc.RpcService"><summary>parse the results coming back from an rpc request. this base implementation, just returns the full object subclasses should parse and only return the actual results</summary><parameters><parameter name="obj"/></parameters></function><function name="dojo.rpc.RpcService.errorCallback" prototype="dojo.rpc.RpcService"><summary>create callback that calls the Deferres errback method</summary><parameters><parameter name="deferredRequestHandler" type="dojo.Deferred"/></parameters></function><function name="dojo.rpc.RpcService.resultCallback" prototype="dojo.rpc.RpcService"><summary>create callback that calls the Deferred's callback method</summary><parameters><parameter name="deferredRequestHandler" type="dojo.Deferred"/></parameters></function><function name="dojo.rpc.RpcService.generateMethod" prototype="dojo.rpc.RpcService"><summary>generate the local bind methods for the remote object</summary><parameters><parameter name="method" type="string"/><parameter name="parameters" type="array"/><parameter name="url" type="string"/></parameters></function><function name="dojo.rpc.RpcService.processSmd" prototype="dojo.rpc.RpcService"><summary>callback method for reciept of a smd object. Parse the smd and generate functions based on the description</summary><parameters><parameter name="object" type="json"/></parameters></function><function name="dojo.rpc.RpcService.connect" prototype="dojo.rpc.RpcService"><summary>connect to a remote url and retrieve a smd object</summary><parameters><parameter name="smdUrl" type="String"/></parameters></function></resource><resource location="dojo.rpc.YahooService"><requires><environment type="common"><require>dojo.rpc.RpcService</require><require>dojo.rpc.JsonService</require><require>dojo.json</require><require>dojo.uri.*</require><require>dojo.io.ScriptSrcIO</require></environment></requires><function name="dojo.rpc.YahooService"><parameters><parameter name="appId"/></parameters><chains><chain type="prototype">dojo.rpc.JsonService</chain></chains><variables><variable scope="instance" name="appId"/><variable scope="instance" name="strictArgChecks"/><variable scope="prototype" name="strictArgChecks"/></variables></function><function name="dojo.rpc.YahooService.bind" prototype="dojo.rpc.YahooService"><summary>Yahoo RPC bind method. Takes remote method, parameters, deferred, and a url and sends of a ScriptSrcIO request to connect to Yahoo services crossplatform</summary><parameters><parameter name="method"/><parameter name="parameters"/><parameter name="deferredRequestHandler"/><parameter name="url"/></parameters></function></resource><resource location="dojo.selection.Selection"><requires><environment type="common"><require>dojo.lang.array</require><require>dojo.lang.func</require><require>dojo.lang.common</require><require>dojo.math</require></environment></requires></resource><resource location="dojo.storage._"><requires><environment type="common"><require>dojo.storage</require></environment></requires><requires><environment type="browser"><require>dojo.storage.browser</require></environment></requires></resource><resource location="dojo.storage.browser"><requires><environment type="common"><require>dojo.storage</require><require>dojo.flash</require><require>dojo.json</require><require>dojo.uri.*</require></environment></requires><function name="dojo.storage.browser.FileStorageProvider"><summary>Storage provider that uses the native file system as a storage back end, across Internet Explorer, Firefox, Safari, and Opera.</summary><chains><chain type="prototype">dojo.storage</chain></chains><variables><variable scope="instance" name="initialized"/><variable scope="instance" name="_available"/><variable scope="instance" name="_statusHandler"/><variable scope="instance" name="_keyIndex"/><variable scope="prototype" name="namespace"/><variable scope="prototype" name="initialized"/><variable scope="prototype" name="_available"/><variable scope="prototype" name="_statusHandler"/><variable scope="prototype" name="_keyIndex"/></variables><description>This storage provider will autodetect if access to the native file system is available. This is only available if a page is loaded through a file: // or chrome: // URL. We support three different browsers for native file storage: * Firefox - Uses XPCOM * Internet Explorer - Uses ActiveX * Safari/Opera - Uses Java and LiveConnect This storage provider saves all files in the same directory as the HTML file it is invoked from. Each key is a separate file, with the file's contents being the value for that key and the filename being the key plus ".txt". A special file named __dojoAllKeys.txt is also created, which is a list of all the keys available. The technique to create this storage provider was learned by studying TiddlyWiki (http: // tiddlywiki.com). Thanks for figuring out how to do this Jeremy Ruston! TODO: Automagically create a directory named .dojo_storage in the user's home directory, cross-platform, and then create a subdirectory based off the HTML filename of this page, such as myapp.html/ to store all of our key files into. Saving the files into the same directry as the HTML file is dangerous and messy, and might not be allowed based on directory permissioning for some scenarios. Authors of this storage provider- Brad Neuberg, bkn3@columbia.edu</description></function><function name="dojo.storage.browser.WhatWGStorageProvider"><summary>Storage provider that uses WHAT Working Group features in Firefox 2 to achieve permanent storage.</summary><chains><chain type="prototype">dojo.storage</chain></chains><variables><variable scope="instance" name="_domain"/><variable scope="instance" name="initialized"/><variable scope="instance" name="_available"/><variable scope="instance" name="_statusHandler"/><variable scope="prototype" name="namespace"/><variable scope="prototype" name="initialized"/><variable scope="prototype" name="_domain"/><variable scope="prototype" name="_available"/><variable scope="prototype" name="_statusHandler"/></variables><description>The WHAT WG storage API is documented at http: // www.whatwg.org/specs/web-apps/current-work/#scs-client-side You can disable this storage provider with the following djConfig variable: var djConfig = { disableWhatWGStorage: true }; Authors of this storage provider- JB Boisseau, jb.boisseau@eutech-ssii.com Brad Neuberg, bkn3@columbia.edu</description></function><function name="dojo.storage.browser.FlashStorageProvider"><summary>Storage provider that uses features in Flash to achieve permanent storage</summary><chains><chain type="prototype">dojo.storage</chain></chains><variables><variable scope="instance" name="_available"/><variable scope="instance" name="_statusHandler"/><variable scope="instance" name="_initialized"/><variable scope="prototype" name="namespace"/><variable scope="prototype" name="initialized"/><variable scope="prototype" name="_available"/><variable scope="prototype" name="_statusHandler"/></variables><description>Authors of this storage provider- Brad Neuberg, bkn3@columbia.edu</description></function><function name="dojo.storage.browser.FileStorageProvider.initialize" prototype="dojo.storage.browser.FileStorageProvider"/><function name="dojo.storage.browser.FileStorageProvider.isAvailable" prototype="dojo.storage.browser.FileStorageProvider"/><function name="dojo.storage.browser.FileStorageProvider.put" prototype="dojo.storage.browser.FileStorageProvider"><parameters><parameter name="key"/><parameter name="value"/><parameter name="resultsHandler"/></parameters><chains><chain type="call">resultsHandler</chain><chain type="call">this._statusHandler</chain></chains></function><function name="dojo.storage.browser.FileStorageProvider.get" prototype="dojo.storage.browser.FileStorageProvider"><parameters><parameter name="key"/></parameters></function><function name="dojo.storage.browser.FileStorageProvider.getKeys" prototype="dojo.storage.browser.FileStorageProvider"/><function name="dojo.storage.browser.FileStorageProvider.hasKey" prototype="dojo.storage.browser.FileStorageProvider"><parameters><parameter name="key"/></parameters></function><function name="dojo.storage.browser.FileStorageProvider.clear" prototype="dojo.storage.browser.FileStorageProvider"/><function name="dojo.storage.browser.FileStorageProvider.remove" prototype="dojo.storage.browser.FileStorageProvider"><parameters><parameter name="key"/></parameters></function><function name="dojo.storage.browser.FileStorageProvider.isPermanent" prototype="dojo.storage.browser.FileStorageProvider"/><function name="dojo.storage.browser.FileStorageProvider.getMaximumSize" prototype="dojo.storage.browser.FileStorageProvider"/><function name="dojo.storage.browser.FileStorageProvider.hasSettingsUI" prototype="dojo.storage.browser.FileStorageProvider"/><function name="dojo.storage.browser.FileStorageProvider.showSettingsUI" prototype="dojo.storage.browser.FileStorageProvider"/><function name="dojo.storage.browser.FileStorageProvider.hideSettingsUI" prototype="dojo.storage.browser.FileStorageProvider"/><function name="dojo.storage.browser.FileStorageProvider.getType" prototype="dojo.storage.browser.FileStorageProvider"/><function name="dojo.storage.browser.FileStorageProvider._save" prototype="dojo.storage.browser.FileStorageProvider"><parameters><parameter name="key"/><parameter name="value"/><parameter name="updateKeyIndex"/></parameters></function><function name="dojo.storage.browser.FileStorageProvider._load" prototype="dojo.storage.browser.FileStorageProvider"><parameters><parameter name="key"/></parameters></function><function name="dojo.storage.browser.FileStorageProvider._updateKeyIndex" prototype="dojo.storage.browser.FileStorageProvider"><parameters><parameter name="key"/></parameters></function><function name="dojo.storage.browser.FileStorageProvider._loadKeyIndex" prototype="dojo.storage.browser.FileStorageProvider"/><function name="dojo.storage.browser.FileStorageProvider._saveFileXPCOM" prototype="dojo.storage.browser.FileStorageProvider"><parameters><parameter name="filename"/><parameter name="value"/></parameters></function><function name="dojo.storage.browser.FileStorageProvider._loadFileXPCOM" prototype="dojo.storage.browser.FileStorageProvider"><parameters><parameter name="filename"/></parameters></function><function name="dojo.storage.browser.FileStorageProvider._saveFileActiveX" prototype="dojo.storage.browser.FileStorageProvider"><parameters><parameter name="filename"/><parameter name="value"/></parameters></function><function name="dojo.storage.browser.FileStorageProvider._loadFileActiveX" prototype="dojo.storage.browser.FileStorageProvider"><parameters><parameter name="filename"/></parameters></function><function name="dojo.storage.browser.FileStorageProvider._saveFileJava" prototype="dojo.storage.browser.FileStorageProvider"><parameters><parameter name="filename"/><parameter name="value"/></parameters></function><function name="dojo.storage.browser.FileStorageProvider._loadFileJava" prototype="dojo.storage.browser.FileStorageProvider"><parameters><parameter name="filename"/></parameters></function><function name="dojo.storage.browser.FileStorageProvider._isAvailableActiveX" prototype="dojo.storage.browser.FileStorageProvider"/><function name="dojo.storage.browser.FileStorageProvider._isAvailableXPCOM" prototype="dojo.storage.browser.FileStorageProvider"/><function name="dojo.storage.browser.FileStorageProvider._isAvailableJava" prototype="dojo.storage.browser.FileStorageProvider"/><function name="dojo.storage.browser.FileStorageProvider._getPagePath" prototype="dojo.storage.browser.FileStorageProvider"/><function name="dojo.storage.browser.FileStorageProvider._removeXPCOM" prototype="dojo.storage.browser.FileStorageProvider"><parameters><parameter name="filename"/></parameters></function><function name="dojo.storage.browser.FileStorageProvider._removeActiveX" prototype="dojo.storage.browser.FileStorageProvider"><parameters><parameter name="filename"/></parameters></function><function name="dojo.storage.browser.FileStorageProvider._removeJava" prototype="dojo.storage.browser.FileStorageProvider"><parameters><parameter name="filename"/></parameters></function><function name="dojo.storage.browser.FileStorageProvider._writeApplet" prototype="dojo.storage.browser.FileStorageProvider"/><function name="dojo.storage.browser.WhatWGStorageProvider.initialize" prototype="dojo.storage.browser.WhatWGStorageProvider"/><function name="dojo.storage.browser.WhatWGStorageProvider.isAvailable" prototype="dojo.storage.browser.WhatWGStorageProvider"/><function name="dojo.storage.browser.WhatWGStorageProvider.put" prototype="dojo.storage.browser.WhatWGStorageProvider"><parameters><parameter name="key"/><parameter name="value"/><parameter name="resultsHandler"/></parameters><chains><chain type="call">resultsHandler</chain><chain type="call">this._statusHandler</chain></chains></function><function name="dojo.storage.browser.WhatWGStorageProvider.get" prototype="dojo.storage.browser.WhatWGStorageProvider"><parameters><parameter name="key"/></parameters></function><function name="dojo.storage.browser.WhatWGStorageProvider.getKeys" prototype="dojo.storage.browser.WhatWGStorageProvider"/><function name="dojo.storage.browser.WhatWGStorageProvider.clear" prototype="dojo.storage.browser.WhatWGStorageProvider"/><function name="dojo.storage.browser.WhatWGStorageProvider.remove" prototype="dojo.storage.browser.WhatWGStorageProvider"><parameters><parameter name="key"/></parameters></function><function name="dojo.storage.browser.WhatWGStorageProvider.isPermanent" prototype="dojo.storage.browser.WhatWGStorageProvider"/><function name="dojo.storage.browser.WhatWGStorageProvider.getMaximumSize" prototype="dojo.storage.browser.WhatWGStorageProvider"/><function name="dojo.storage.browser.WhatWGStorageProvider.hasSettingsUI" prototype="dojo.storage.browser.WhatWGStorageProvider"/><function name="dojo.storage.browser.WhatWGStorageProvider.showSettingsUI" prototype="dojo.storage.browser.WhatWGStorageProvider"/><function name="dojo.storage.browser.WhatWGStorageProvider.hideSettingsUI" prototype="dojo.storage.browser.WhatWGStorageProvider"/><function name="dojo.storage.browser.WhatWGStorageProvider.getType" prototype="dojo.storage.browser.WhatWGStorageProvider"/><function name="dojo.storage.browser.FlashStorageProvider.initialize" prototype="dojo.storage.browser.FlashStorageProvider"/><function name="dojo.storage.browser.FlashStorageProvider.isAvailable" prototype="dojo.storage.browser.FlashStorageProvider"/><function name="dojo.storage.browser.FlashStorageProvider.put" prototype="dojo.storage.browser.FlashStorageProvider"><parameters><parameter name="key"/><parameter name="value"/><parameter name="resultsHandler"/></parameters></function><function name="dojo.storage.browser.FlashStorageProvider.get" prototype="dojo.storage.browser.FlashStorageProvider"><parameters><parameter name="key"/></parameters></function><function name="dojo.storage.browser.FlashStorageProvider.getKeys" prototype="dojo.storage.browser.FlashStorageProvider"/><function name="dojo.storage.browser.FlashStorageProvider.clear" prototype="dojo.storage.browser.FlashStorageProvider"/><function name="dojo.storage.browser.FlashStorageProvider.remove" prototype="dojo.storage.browser.FlashStorageProvider"><summary>Note- This one method is not implemented on the FlashStorageProvider yet</summary><parameters><parameter name="key"/></parameters></function><function name="dojo.storage.browser.FlashStorageProvider.isPermanent" prototype="dojo.storage.browser.FlashStorageProvider"/><function name="dojo.storage.browser.FlashStorageProvider.getMaximumSize" prototype="dojo.storage.browser.FlashStorageProvider"/><function name="dojo.storage.browser.FlashStorageProvider.hasSettingsUI" prototype="dojo.storage.browser.FlashStorageProvider"/><function name="dojo.storage.browser.FlashStorageProvider.showSettingsUI" prototype="dojo.storage.browser.FlashStorageProvider"/><function name="dojo.storage.browser.FlashStorageProvider.hideSettingsUI" prototype="dojo.storage.browser.FlashStorageProvider"><chains><chain type="call">dojo.storage.onHideSettingsUI</chain></chains></function><function name="dojo.storage.browser.FlashStorageProvider.getType" prototype="dojo.storage.browser.FlashStorageProvider"/><function name="dojo.storage.browser.FlashStorageProvider._flashLoaded" prototype="dojo.storage.browser.FlashStorageProvider"/><function name="dojo.storage.browser.FlashStorageProvider._onStatus" prototype="dojo.storage.browser.FlashStorageProvider"><parameters><parameter name="statusResult"/><parameter name="key"/></parameters><chains><chain type="call">ds._statusHandler</chain></chains></function></resource><resource location="dojo.storage"><requires><environment type="common"><require>dojo.lang.*</require><require>dojo.event.*</require></environment></requires><function name="dojo.storage" initialized="true"><summary>A singleton for working with Dojo Storage.</summary><description>dojo.storage exposes the current available storage provider on this platform. It gives you methods such as dojo.storage.put(), dojo.storage.get(), etc. For more details on Dojo Storage, see the primary documentation page at http: // manual.dojotoolkit.org/storage.html Note for storage provider developers who are creating subclasses- This is the base class for all storage providers Specific kinds of Storage Providers should subclass this and implement these methods. You should avoid initialization storage provider subclass's constructor; instead, perform initialization in your initialize() method.</description></function><function name="dojo.storage.manager" initialized="true"><summary>A singleton class in charge of the Dojo Storage system</summary><variables><variable scope="instance" name="currentProvider"/><variable scope="instance" name="available"/><variable scope="instance" name="_initialized"/><variable scope="instance" name="_providers"/><variable scope="instance" name="namespace"/><variable scope="instance" name="initialize"/><variable scope="instance" name="register"/><variable scope="instance" name="setProvider"/><variable scope="instance" name="autodetect"/><variable scope="instance" name="isAvailable"/><variable scope="instance" name="isInitialized"/><variable scope="instance" name="supportsProvider"/><variable scope="instance" name="getProvider"/><variable scope="instance" name="loaded"/></variables><description>Initializes the storage systems and figures out the best available storage options on this platform. currentProvider: Object The storage provider that was automagically chosen to do storage on this platform, such as dojo.storage.browser.FlashStorageProvider.</description></function><function name="dojo.storage.manager.initialize" instance="dojo.storage.manager"><summary>Initializes the storage system and autodetects the best storage provider we can provide on this platform</summary></function><function name="dojo.storage.manager.register" instance="dojo.storage.manager"><summary>Registers the existence of a new storage provider; used by subclasses to inform the manager of their existence. The storage manager will select storage providers based on their ordering, so the order in which you call this method matters.</summary><parameters><parameter name="name" type="The">full class name of this provider, such as "dojo.storage.browser.FlashStorageProvider".</parameter><parameter name="instance" type="An">instance of this provider, which we will use to call isAvailable() on.</parameter></parameters></function><function name="dojo.storage.manager.setProvider" instance="dojo.storage.manager"><summary>Instructs the storageManager to use the given storage class for all storage requests.</summary><parameters><parameter name="storageClass"/></parameters><description>Example- dojo.storage.setProvider( dojo.storage.browser.IEStorageProvider)</description></function><function name="dojo.storage.manager.autodetect" instance="dojo.storage.manager"><summary>Autodetects the best possible persistent storage provider available on this platform.</summary></function><function name="dojo.storage.manager.isAvailable" instance="dojo.storage.manager"><summary>Boolean Returns whether any storage options are available.</summary></function><function name="dojo.storage.manager.isInitialized" instance="dojo.storage.manager"><summary>Boolean Returns whether the storage system is initialized and ready to be used.</summary></function><function name="dojo.storage.manager.supportsProvider" instance="dojo.storage.manager"><summary>Boolean Determines if this platform supports the given storage provider.</summary><parameters><parameter name="storageClass" type="string"/></parameters><description>Example- dojo.storage.manager.supportsProvider( "dojo.storage.browser.InternetExplorerStorageProvider");</description></function><function name="dojo.storage.manager.getProvider" instance="dojo.storage.manager"><summary>Object Gets the current provider</summary></function><function name="dojo.storage.manager.loaded" instance="dojo.storage.manager"><summary>The storage provider should call this method when it is loaded and ready to be used. Clients who will use the provider will connect to this method to know when they can use the storage system.</summary><description>Example- if(dojo.storage.manager.isInitialized() == false){ dojo.event.connect(dojo.storage.manager, "loaded", TestStorage, TestStorage.initialize); }else{ dojo.event.connect(dojo, "loaded", TestStorage, TestStorage.initialize); }</description></function></resource><resource location="dojo.string.Builder"><requires><environment type="common"><require>dojo.string</require><require>dojo.lang.common</require></environment></requires><function name="dojo.string.Builder"><returns type="mixed"/><parameters><parameter name="str" optional="true" type="string"/></parameters><chains><chain type="call">this.append</chain></chains><variables><variable scope="instance" name="arrConcat"/><variable scope="instance" name="length"/><variable scope="instance" name="toString"/><variable scope="instance" name="append"/><variable scope="instance" name="clear"/><variable scope="instance" name="remove"/><variable scope="instance" name="replace"/><variable scope="instance" name="insert"/></variables></function><function name="dojo.string.Builder.toString" is="dojo.string.Builder.valueOf"/><function name="dojo.string.Builder.valueOf" instance="dojo.string.Builder"><returns type="string"/><summary>Concatenate internal buffer and return as a string</summary></function><function name="dojo.string.Builder.append" instance="dojo.string.Builder"><returns type="dojo.string.Builder"/><summary>Append all arguments to the end of the internal buffer</summary><chains><chain type="call">this.append</chain></chains></function><function name="dojo.string.Builder.clear" instance="dojo.string.Builder"><returns type="dojo.string.Builder"/><summary>Clear the internal buffer.</summary></function><function name="dojo.string.Builder.remove" instance="dojo.string.Builder"><returns type="dojo.string.Builder"/><summary>Remove a section of string from the internal buffer.</summary><parameters><parameter name="f" type="integer"/><parameter name="l" type="integer"/></parameters></function><function name="dojo.string.Builder.replace" instance="dojo.string.Builder"><returns type="dojo.string.Builder"/><summary>replace phrase *o* with phrase *n*.</summary><parameters><parameter name="o" type="string"/><parameter name="n" type="string"/></parameters></function><function name="dojo.string.Builder.insert" instance="dojo.string.Builder"><returns type="dojo.string.Builder"/><summary>Insert string s at index idx.</summary><parameters><parameter name="idx" type="integer"/><parameter name="s" type="string"/></parameters></function></resource><resource location="dojo.string._"><requires><environment type="common"><require>dojo.string</require><require>dojo.string.common</require><require>dojo.string.extras</require><require>dojo.string.Builder</require></environment></requires></resource><resource location="dojo.string.common"><function name="dojo.string.trim"><returns type="string"/><summary>Trim whitespace from str. If wh &gt; 0, trim from start, if wh &lt; 0, trim from end, else both</summary><parameters><parameter name="str" type="string"/><parameter name="wh" optional="true" type="integer"/></parameters></function><function name="dojo.string.trimStart"><returns type="string"/><summary>Trim whitespace at the beginning of 'str'</summary><parameters><parameter name="str" type="string"/></parameters></function><function name="dojo.string.trimEnd"><summary>Trim whitespace at the end of 'str'</summary><parameters><parameter name="str" type="string"/></parameters></function><function name="dojo.string.repeat"><returns type="string"/><summary>Return 'str' repeated 'count' times, optionally placing 'separator' between each rep</summary><parameters><parameter name="str" type="string"/><parameter name="count" type="integer"/><parameter name="separator" optional="true" type="string"/></parameters></function><function name="dojo.string.pad"><returns type="string"/><summary>Pad 'str' to guarantee that it is at least 'len' length with the character 'c' at either the start (dir=1) or end (dir=-1) of the string</summary><parameters><parameter name="str" type="string"/><parameter name="len" type="integer =2"/><parameter name="c" type="string ='0'"/><parameter name="dir" type="integer =1"/></parameters></function><function name="dojo.string.padLeft"><returns type="string"/><summary>same as dojo.string.pad(str, len, c, 1)</summary><parameters><parameter name="str" type="string"/><parameter name="len" type="integer"/><parameter name="c" type="string"/></parameters></function><function name="dojo.string.padRight"><returns type="string"/><summary>same as dojo.string.pad(str, len, c, -1)</summary><parameters><parameter name="str" type="string"/><parameter name="len" type="integer"/><parameter name="c" type="string"/></parameters></function></resource><resource location="dojo.string.extras"><requires><environment type="common"><require>dojo.string.common</require><require>dojo.lang.common</require><require>dojo.lang.array</require></environment></requires><function name="dojo.string.substituteParams"><summary>Performs parameterized substitutions on a string. Throws an exception if any parameter is unmatched.</summary><parameters><parameter name="template" type="the">original string template with %{values} to be replaced</parameter><parameter name="hash" type="name/value">pairs (type object) to provide substitutions. Alternatively, substitutions may be included as arguments 1..n to this function, corresponding to template parameters 0..n-1</parameter></parameters><description>For example, dojo.string.substituteParams("File '%{0}' is not found in directory '%{1}'.","foo.html","/temp");</description></function><function name="dojo.string.capitalize"><returns type="string"/><summary>Uppercases the first letter of each word</summary><parameters><parameter name="str" type="string"/></parameters></function><function name="dojo.string.isBlank"><returns type="boolean"/><summary>Return true if the entire string is whitespace characters</summary><parameters><parameter name="str" type="string"/></parameters></function><function name="dojo.string.encodeAscii"><returns type="mixed"/><parameters><parameter name="str" type="string"/></parameters></function><function name="dojo.string.escape"><returns type="string"/><summary>Adds escape sequences for special characters according to the convention of 'type'</summary><parameters><parameter name="type" type="one">of xml|html|xhtml|sql|regexp|regex|javascript|jscript|js|ascii</parameter><parameter name="str" type="the">string to be escaped</parameter></parameters><chains><chain type="call">dojo.string.escapeXml</chain><chain type="call">dojo.string.escapeSql</chain><chain type="call">dojo.string.escapeRegExp</chain><chain type="call">dojo.string.escapeJavaScript</chain><chain type="call">dojo.string.encodeAscii</chain></chains></function><function name="dojo.string.escapeXml"><returns type="string"/><summary>Adds escape sequences for special characters in XML: &amp;&lt;&gt;"' Optionally skips escapes for single quotes</summary><parameters><parameter name="str" type="string"/><parameter name="noSingleQuotes" type="boolean"/></parameters></function><function name="dojo.string.escapeSql"><returns type="string"/><summary>Adds escape sequences for single quotes in SQL expressions</summary><parameters><parameter name="str" type="string"/></parameters></function><function name="dojo.string.escapeRegExp"><returns type="string"/><summary>Adds escape sequences for special characters in regular expressions</summary><parameters><parameter name="str" type="string"/></parameters></function><function name="dojo.string.escapeJavaScript"><returns type="string"/><summary>Adds escape sequences for single and double quotes as well as non-visible characters in JavaScript string literal expressions</summary><parameters><parameter name="str" type="string"/></parameters></function><function name="dojo.string.escapeString"><summary>Adds escape sequences for non-visual characters, double quote and backslash and surrounds with double quotes to form a valid string literal.</summary><parameters><parameter name="str" type="string"/></parameters></function><function name="dojo.string.summary"><returns type="string"/><summary>Truncates 'str' after 'len' characters and appends periods as necessary so that it ends with "..."</summary><parameters><parameter name="str" type="string"/><parameter name="len" type="number"/></parameters></function><function name="dojo.string.endsWith"><returns type="boolean"/><summary>Returns true if 'str' ends with 'end'</summary><parameters><parameter name="str" type="string"/><parameter name="end" type="string"/><parameter name="ignoreCase" type="boolean"/></parameters></function><function name="dojo.string.endsWithAny"><returns type="boolean"/><summary>Returns true if 'str' ends with any of the arguments[2 -&gt; n]</summary><parameters><parameter name="str" type="string , ..."/></parameters></function><function name="dojo.string.startsWith"><returns type="boolean"/><summary>Returns true if 'str' starts with 'start'</summary><parameters><parameter name="str" type="string"/><parameter name="start" type="string"/><parameter name="ignoreCase" type="boolean"/></parameters></function><function name="dojo.string.startsWithAny"><returns type="boolean"/><summary>Returns true if 'str' starts with any of the arguments[2 -&gt; n]</summary><parameters><parameter name="str" type="string , ..."/></parameters></function><function name="dojo.string.has"><returns type="boolean"/><summary>Returns true if 'str' contains any of the arguments 2 -&gt; n</summary><parameters><parameter name="str" type="string , ..."/></parameters></function><function name="dojo.string.normalizeNewlines"><returns type="string"/><summary>Changes occurences of CR and LF in text to CRLF, or if newlineChar is provided as '\n' or '\r', substitutes newlineChar for occurrences of CR/LF and CRLF</summary><parameters><parameter name="text" type="string"/><parameter name="newlineChar" type="string? (\n or \r)"/></parameters></function><function name="dojo.string.splitEscaped"><returns type="array"/><summary>Splits 'str' into an array separated by 'charac', but skips characters escaped with a backslash</summary><parameters><parameter name="str" type="string"/><parameter name="charac" type="string of length=1"/></parameters></function></resource><resource location="dojo.string"><requires><environment type="common"><require>dojo.string.common</require></environment></requires></resource><resource location="dojo.style"><requires><environment type="browser"><require>dojo.html.style</require></environment></requires><requires><environment type="common"><require>dojo.lang.common</require></environment></requires></resource><resource location="dojo.svg"><requires><environment type="common"><require>dojo.lang.common</require><require>dojo.dom</require></environment></requires><function name="dojo.svg.graphics" is="dojo.svg.g"/><function name="dojo.svg.g" initialized="true"><summary>Singleton to encapsulate SVG rendering functions.</summary><parameters><parameter name="d" type="DOMDocument"/></parameters></function><function name="dojo.svg.g.suspend" instance="dojo.svg.g"><summary>Suspend the rendering engine</summary></function><function name="dojo.svg.g.resume" instance="dojo.svg.g"><summary>Resume the rendering engine</summary></function><function name="dojo.svg.g.force" instance="dojo.svg.g"><summary>Force the render engine to redraw</summary></function><function name="dojo.svg.animations" is="dojo.svg.anim"/><function name="dojo.svg.anim" initialized="true"><returns type="bool"/><summary>Singleton to encapsulate SVG animation functionality.</summary><parameters><parameter name="d" type="DOMDocument"/></parameters></function><function name="dojo.svg.anim.arePaused" instance="dojo.svg.anim"><returns type="bool"/><summary>check to see if all animations are paused</summary></function><function name="dojo.svg.anim.pause" instance="dojo.svg.anim"><summary>pause all animations</summary></function><function name="dojo.svg.anim.resume" instance="dojo.svg.anim"><summary>resume all animations</summary></function><function name="dojo.svg.toCamelCase"><returns type="string"/><summary>converts a CSS-style selector to a camelCased one</summary><parameters><parameter name="selector" type="string"/></parameters></function><function name="dojo.svg.toSelectorCase"><returns type="string"/><summary>converts a camelCased selector to a CSS style one</summary><parameters><parameter name="selector" type="string"/></parameters></function><function name="dojo.svg.getStyle"><returns type="object"/><summary>get the computed style of selector for node.</summary><parameters><parameter name="node" type="SVGElement"/><parameter name="cssSelector" type="string"/></parameters></function><function name="dojo.svg.getNumericStyle"><summary>return the numeric version of the computed style of selector on node.</summary><parameters><parameter name="node" type="SVGElement"/><parameter name="cssSelector" type="string"/></parameters></function><function name="dojo.svg.getOpacity"><returns type="float"/><summary>Return the opacity of the passed element</summary><parameters><parameter name="node" type="SVGElement"/></parameters></function><function name="dojo.svg.setOpacity"><summary>set the opacity of node using attributes.</summary><parameters><parameter name="node" type="SVGElement"/><parameter name="opacity" type="float"/></parameters></function><function name="dojo.svg.clearOpacity"><summary>Set any attributes setting opacity to opaque (1.0)</summary><parameters><parameter name="node" type="SVGElement"/></parameters></function><function name="dojo.svg.getCoords"><returns type="object"/><summary>Returns the x/y coordinates of the passed node, if available.</summary><parameters><parameter name="node" type="SVGElement"/></parameters></function><function name="dojo.svg.setCoords"><summary>Set the x/y coordinates of the passed node</summary><parameters><parameter name="node" type="SVGElement"/><parameter name="coords" type="object"/></parameters></function><function name="dojo.svg.getDimensions"><returns type="object"/><summary>Get the height and width of the passed node.</summary><parameters><parameter name="node" type="SVGElement"/></parameters></function><function name="dojo.svg.setDimensions"><summary>Set the dimensions of the passed element if possible. will only support shape-based and container elements; path-based elements are ignored.</summary><parameters><parameter name="node" type="SVGElement"/><parameter name="dim" type="object"/></parameters></function><function name="dojo.svg.translate"><summary>Translates the passed node by dx and dy</summary><parameters><parameter name="node" type="SVGElement"/><parameter name="dx" type="int"/><parameter name="dy" type="int"/></parameters></function><function name="dojo.svg.scale"><summary>Scales the passed element by factor scaleX and scaleY. If scaleY not passed, scaleX is used.</summary><parameters><parameter name="node" type="SVGElement"/><parameter name="scaleX" type="float"/><parameter name="scaleY" optional="true" type="float"/></parameters></function><function name="dojo.svg.rotate"><summary>rotate the passed node by ang, with optional cx/cy as the rotation point.</summary><parameters><parameter name="node" type="SVGElement"/><parameter name="ang" type="float"/><parameter name="cx" optional="true" type="int"/><parameter name="cy" optional="true" type="int"/></parameters></function><function name="dojo.svg.skew"><summary>skew the passed node by ang over axis.</summary><parameters><parameter name="node" type="SVGElement"/><parameter name="ang" type="float"/><parameter name="axis" optional="true" type="string"/></parameters></function><function name="dojo.svg.flip"><summary>flip the passed element over axis</summary><parameters><parameter name="node" type="SVGElement"/><parameter name="axis" optional="true" type="string"/></parameters></function><function name="dojo.svg.invert"><summary>transform the passed node by the inverse of the current matrix</summary><parameters><parameter name="node" type="SVGElement"/></parameters></function><function name="dojo.svg.applyMatrix"><summary>apply the passed matrix to node. If params b - f are passed, a matrix will be created.</summary><parameters><parameter name="node" type="SVGElement"/><parameter name="a" type="int || SVGMatrix"/><parameter name="b" optional="true" type="int"/><parameter name="c" optional="true" type="int"/><parameter name="d" optional="true" type="int"/><parameter name="e" optional="true" type="int"/><parameter name="f" optional="true" type="int"/></parameters></function><function name="dojo.svg.group"><summary>expect an array of nodes, attaches the group to the parent of the first node.</summary><parameters><parameter name="nodes" type="Nodelist || array"/></parameters></function><function name="dojo.svg.ungroup"><summary>puts the children of the group on the same level as group was.</summary><parameters><parameter name="g" type="SVGGElement"/></parameters></function><function name="dojo.svg.getGroup"><summary>if the node is part of a group, return the group, else return null.</summary><parameters><parameter name="node" type="SVGElement"/></parameters></function><function name="dojo.svg.bringToFront"><summary>move the passed node the to top of the group (i.e. last child)</summary><parameters><parameter name="node" type="SVGElement"/></parameters></function><function name="dojo.svg.sendToBack"><summary>move the passed node to the bottom of the group (i.e. first child)</summary><parameters><parameter name="node" type="SVGElement"/></parameters></function><function name="dojo.svg.bringForward"><summary>move the passed node up one in the child node chain</summary><parameters><parameter name="node" type="SVGElement"/></parameters></function><function name="dojo.svg.sendBackward"><summary>move the passed node down one in the child node chain</summary><parameters><parameter name="node" type="SVGElement"/></parameters></function><function name="dojo.svg.createNodesFromText"><returns type="array"/><summary>Create a list of nodes from text</summary><parameters><parameter name="txt" type="string"/><parameter name="wrap" optional="true" type="bool"/></parameters></function></resource><resource location="dojo.text._"><requires><environment type="common"><require>dojo.text.String</require><require>dojo.text.Builder</require></environment></requires></resource><resource location="dojo.text.textDirectory"><requires><environment type="common"><require>dojo.cal.textDirectory</require></environment></requires></resource><resource location="dojo.undo.Manager"><requires><environment type="common"><require>dojo.lang.common</require></environment></requires><function name="dojo.undo.Manager"><summary>Constructor for a dojo.undo.Manager object.</summary><parameters><parameter name="parent" type="dojo.undo.Manager Object"/></parameters><variables><variable scope="instance" name="_parent"/><variable scope="prototype" name="_parent"/><variable scope="prototype" name="_undoStack"/><variable scope="prototype" name="_redoStack"/><variable scope="prototype" name="_currentManager"/><variable scope="prototype" name="canUndo"/><variable scope="prototype" name="canRedo"/><variable scope="prototype" name="isUndoing"/><variable scope="prototype" name="isRedoing"/></variables></function><function name="dojo.undo.Manager.onUndo"><summary>An event that fires when undo is called. It allows you to hook in and update your code (UI?) as necessary.</summary><parameters><parameter name="manager" type="Object"/><parameter name="item" type="Object"/></parameters></function><function name="dojo.undo.Manager.onRedo"><summary>An event that fires when redo is called. It allows you to hook in and update your code (UI?) as necessary.</summary><parameters><parameter name="manager" type="Object"/><parameter name="item" type="Object"/></parameters></function><function name="dojo.undo.Manager.onUndoAny"><summary>An event that fires when *any* undo action is done, which means you'll have one for every item in a transaction. This is usually only useful for debugging. See notes for onUndo for info on the function parameters.</summary><parameters><parameter name="manager" type="Object"/><parameter name="item" type="Object"/></parameters></function><function name="dojo.undo.Manager.onRedoAny"><summary>An event that fires when *any* redo action is done, which means you'll have one for every item in a transaction. This is usually only useful for debugging. See notes for onRedo for info on the function parameters.</summary><parameters><parameter name="manager" type="Object"/><parameter name="item" type="Object"/></parameters></function><function name="dojo.undo.Manager._updateStatus"><summary>Private method used to set some internal state.</summary><variables><variable scope="instance" name="canUndo"/><variable scope="instance" name="canRedo"/></variables></function><function name="dojo.undo.Manager.clear"><summary>Clears this instance of dojo.undo.Manager.</summary><variables><variable scope="instance" name="_undoStack"/><variable scope="instance" name="_redoStack"/><variable scope="instance" name="_currentManager"/><variable scope="instance" name="isUndoing"/><variable scope="instance" name="isRedoing"/></variables></function><function name="dojo.undo.Manager.undo"><returns type="boolean"/><summary>Call this method to go one place back in the undo stack. Returns true if the manager successfully completed the undo step.</summary><variables><variable scope="instance" name="isUndoing"/></variables></function><function name="dojo.undo.Manager.redo"><returns type="boolean"/><summary>Call this method to go one place forward in the redo stack. Returns true if the manager successfully completed the redo step.</summary><variables><variable scope="instance" name="isRedoing"/></variables></function><function name="dojo.undo.Manager.undoAll"><summary>Call undo as many times as it takes to get all the way through the undo stack.</summary></function><function name="dojo.undo.Manager.redoAll"><summary>Call redo as many times as it takes to get all the way through the redo stack.</summary></function><function name="dojo.undo.Manager.push"><summary>add something to the undo manager.</summary><parameters><parameter name="undo" type="Function"/><parameter name="redo" optional="true" type="Function"/><parameter name="description" optional="true" type="String"/></parameters><chains><chain type="call">this._currentManager.push</chain></chains><variables><variable scope="instance" name="_currentManager"/><variable scope="instance" name="_redoStack"/></variables></function><function name="dojo.undo.Manager.concat"><summary>Adds all undo and redo stack items to another dojo.undo.Manager instance.</summary><parameters><parameter name="manager" type="Object"/></parameters><chains><chain type="call">this._currentManager.concat</chain></chains><variables><variable scope="instance" name="_currentManager"/><variable scope="instance" name="_redoStack"/></variables></function><function name="dojo.undo.Manager.beginTransaction"><summary>All undo/redo items added via push() after this call is made but before endTransaction() is called are treated as one item in the undo and redo stacks. When undo() or redo() is called then undo/redo is called on all of the items in the transaction. Transactions can be nested.</summary><parameters><parameter name="description" optional="true" type="String"/></parameters><chains><chain type="call">this._currentManager.beginTransaction</chain></chains><variables><variable scope="instance" name="_currentManager"/></variables></function><function name="dojo.undo.Manager.endTransaction"><summary>Ends a transaction started by beginTransaction(). See beginTransaction() for details.</summary><parameters><parameter name="flatten" type="boolean">If true, adds the current transaction to the parent's undo stack.</parameter></parameters><chains><chain type="call">this._currentManager.endTransaction</chain></chains><variables><variable scope="instance" name="_currentManager"/><variable scope="instance" name="_parent._currentManager"/><variable scope="instance" name="_undoStack.length"/></variables></function><function name="dojo.undo.Manager.endAllTransactions"><summary>Ends all nested transactions.</summary></function><function name="dojo.undo.Manager.getTop"><summary>Finds the top parent of an undo manager.</summary></function></resource><resource location="dojo.undo._"><requires><environment type="common"><require>dojo.undo.Manager</require></environment></requires></resource><resource location="dojo.undo.browser"><requires><environment type="common"><require>dojo.io.common</require></environment></requires><function name="tcb"><parameters><parameter name="handleName"/></parameters><chains><chain type="call">oldCB</chain></chains></function><function name="tfw"><parameters><parameter name="handleName"/></parameters><chains><chain type="call">oldFW</chain></chains></function><function name="dojo.undo.browser.setInitialState"><summary>Sets the state object and back callback for the very first page that is loaded.</summary><parameters><parameter name="args" type="Object">See the addToHistory() function for the list of valid args properties.</parameter></parameters><variables><variable scope="instance" name="initialState"/></variables><description>It is recommended that you call this method as part of an event listener that is registered via dojo.addOnLoad().</description></function><function name="dojo.undo.browser.addToHistory"><summary>adds a state object (args) to the history list. You must set djConfig.preventBackButtonFix = false to use dojo.undo.browser.</summary><parameters><parameter name="args"/></parameters><chains><chain type="call">oldCB</chain><chain type="call">oldFW</chain></chains><variables><variable scope="instance" name="forwardStack"/><variable scope="instance" name="historyIframe"/><variable scope="instance" name="bookmarkAnchor"/><variable scope="instance" name="bookmarkAnchor.style.display"/><variable scope="instance" name="historyStack.length"/><variable scope="instance" name="initialState"/><variable scope="instance" name="changingUrl"/><variable scope="instance" name="bookmarkAnchor.href"/><variable scope="instance" name="locationTimer"/></variables></function><function name="dojo.undo.browser.checkLocation"><summary>private method. Do not call this directly.</summary></function><function name="dojo.undo.browser.iframeLoaded"><summary>private method. Do not call this directly.</summary><parameters><parameter name="evt"/><parameter name="ifrLoc"/></parameters><variables><variable scope="instance" name="historyStack.length"/><variable scope="instance" name="moveForward"/></variables></function><function name="dojo.undo.browser.handleBackButton"><summary>private method. Do not call this directly.</summary><variables><variable scope="instance" name="historyStack.length"/></variables></function><function name="dojo.undo.browser.handleForwardButton"><summary>private method. Do not call this directly.</summary></function><function name="dojo.undo.browser._createState"><returns type="Object"/><summary>private method. Do not call this directly.</summary><parameters><parameter name="url"/><parameter name="args"/><parameter name="hash"/></parameters></function><function name="dojo.undo.browser._getUrlQuery"><returns type="mixed"/><summary>private method. Do not call this directly.</summary><parameters><parameter name="url"/></parameters></function><function name="dojo.undo.browser._loadIframeHistory"><returns type="String"/><summary>private method. Do not call this directly.</summary><variables><variable scope="instance" name="moveForward"/></variables></function><object name="dojo.undo.browser"><variables><variable name="initialHref"/><variable name="initialHash"/><variable name="moveForward"/><variable name="historyStack"/><variable name="forwardStack"/><variable name="historyIframe"/><variable name="bookmarkAnchor"/><variable name="locationTimer"/></variables></object></resource><resource location="dojo.uri.Uri"><function name="dojo.uri" initialized="true"><variables><variable scope="instance" name="dojoUri"/><variable scope="instance" name="moduleUri"/><variable scope="instance" name="Uri"/><variable scope="instance" name="uri"/><variable scope="instance" name="scheme"/><variable scope="instance" name="authority"/><variable scope="instance" name="path"/><variable scope="instance" name="query"/><variable scope="instance" name="fragment"/><variable scope="instance" name="user"/><variable scope="instance" name="password"/><variable scope="instance" name="host"/><variable scope="instance" name="port"/><variable scope="instance" name="toString"/></variables></function><function name="dojo.uri.dojoUri" instance="dojo.uri"><summary>returns a Uri object resolved relative to the dojo root</summary><parameters><parameter name="uri" type="dojo.uri.Uri||String"/></parameters></function><function name="dojo.uri.moduleUri" instance="dojo.uri"><summary>returns a Uri object relative to a module</summary><parameters><parameter name="module" type="String"/><parameter name="uri" type="dojo.uri.Uri||String"/></parameters><description>Examples: dojo.uri.moduleUri("dojo","Editor"), or dojo.uri.moduleUri("acme","someWidget")</description></function><function name="dojo.uri.Uri" instance="dojo.uri"><summary>Constructor to create an object representing a URI.</summary><description>Each argument is evaluated in order relative to the next until a canonical uri is produced. To get an absolute Uri relative to the current document use new dojo.uri.Uri(document.baseURI, uri)</description></function><function name="dojo.uri.Uri.toString" instance="dojo.uri.Uri"/><function name="dojo.uri.toString" instance="dojo.uri"/></resource><resource location="dojo.uuid.LightweightGenerator"><function name="dojo.uuid.LightweightGenerator" initialized="true"><returns type="for example: &quot;3B12F1DF&quot;"/><variables><variable scope="instance" name="generate"/></variables></function><function name="dojo.uuid.LightweightGenerator.generate" instance="dojo.uuid.LightweightGenerator"><summary>This function generates random UUIDs, meaning "version 4" UUIDs.</summary><parameters><parameter name="returnType" type="The">type of object to return. Usually String or dojo.uuid.Uuid</parameter></parameters><description>A typical generated value would be something like this: "3b12f1df-5232-4804-897e-917bf397618a"</description></function></resource><resource location="dojo.uuid.NameBasedGenerator"><function name="dojo.uuid.NameBasedGenerator" initialized="true"><returns type="mixed"/><variables><variable scope="instance" name="generate"/></variables></function><function name="dojo.uuid.NameBasedGenerator.generate" instance="dojo.uuid.NameBasedGenerator"><returns type="mixed"/><summary>This function generates name-based UUIDs, meaning "version 3" and "version 5" UUIDs.</summary><parameters><parameter name="returnType" type="The">type of object to return. Usually String or dojo.uuid.Uuid</parameter></parameters></function></resource><resource location="dojo.uuid.NilGenerator"><function name="dojo.uuid.NilGenerator" initialized="true"><returns type="object"/><variables><variable scope="instance" name="generate"/></variables></function><function name="dojo.uuid.NilGenerator.generate" instance="dojo.uuid.NilGenerator"><returns type="object"/><summary>This function returns the Nil UUID: "00000000-0000-0000-0000-000000000000".</summary><parameters><parameter name="returnType" type="The">type of object to return. Usually String or dojo.uuid.Uuid</parameter></parameters><description>The Nil UUID is described in section 4.1.7 of RFC 4122: http: // www.ietf.org/rfc/rfc4122.txt</description></function></resource><resource location="dojo.uuid.RandomGenerator"><function name="dojo.uuid.RandomGenerator" initialized="true"><returns type="mixed"/><variables><variable scope="instance" name="generate"/></variables></function><function name="dojo.uuid.RandomGenerator.generate" instance="dojo.uuid.RandomGenerator"><returns type="mixed"/><summary>This function generates random UUIDs, meaning "version 4" UUIDs.</summary><parameters><parameter name="returnType" type="The">type of object to return. Usually String or dojo.uuid.Uuid</parameter></parameters><description>A typical generated value would be something like this: "3b12f1df-5232-4804-897e-917bf397618a"</description></function></resource><resource location="dojo.uuid.TimeBasedGenerator"><requires><environment type="common"><require>dojo.lang.common</require><require>dojo.lang.type</require><require>dojo.lang.assert</require></environment></requires><function name="dojo.uuid.TimeBasedGenerator" initialized="true"><returns type="mixed"/><variables><variable scope="instance" name="GREGORIAN_CHANGE_OFFSET_IN_HOURS"/><variable scope="instance" name="setNode"/><variable scope="instance" name="getNode"/><variable scope="instance" name="generate"/></variables></function><function name="dojo.uuid.TimeBasedGenerator.setNode" instance="dojo.uuid.TimeBasedGenerator"><summary>Sets the 'node' value that will be included in generated UUIDs.</summary><parameters><parameter name="node" type="A">12-character hex string representing a pseudoNode or hardwareNode.</parameter></parameters></function><function name="dojo.uuid.TimeBasedGenerator.getNode" instance="dojo.uuid.TimeBasedGenerator"><returns type="String (a 12-character hex string representing a pseudoNode or hardwareNode)"/><summary>Returns the 'node' value that will be included in generated UUIDs.</summary></function><function name="dojo.uuid.TimeBasedGenerator.generate" instance="dojo.uuid.TimeBasedGenerator"><returns type="object"/><summary>This function generates time-based UUIDs, meaning "version 1" UUIDs.</summary><parameters><parameter name="input" optional="true" type="misc"/></parameters><description>For more info, see http: // www.webdav.org/specs/draft-leach-uuids-guids-01.txt http: // www.infonuovo.com/dma/csdocs/sketch/instidid.htm http: // kruithof.xs4all.nl/uuid/uuidgen http: // www.opengroup.org/onlinepubs/009629399/apdxa.htm#tagcjh_20 http: // jakarta.apache.org/commons/sandbox/id/apidocs/org/apache/commons/id/uuid/clock/Clock.html</description></function></resource><resource location="dojo.uuid.Uuid"><requires><environment type="common"><require>dojo.lang.common</require><require>dojo.lang.assert</require></environment></requires><function name="dojo.uuid.Uuid"><summary>This is the constructor for the Uuid class. The Uuid class offers methods for inspecting existing UUIDs. examples: var uuid; uuid = new dojo.uuid.Uuid("3b12f1df-5232-4804-897e-917bf397618a"); uuid = new dojo.uuid.Uuid(); // "00000000-0000-0000-0000-000000000000" uuid = new dojo.uuid.Uuid(dojo.uuid.RandomGenerator); uuid = new dojo.uuid.Uuid(dojo.uuid.TimeBasedGenerator); dojo.uuid.Uuid.setGenerator(dojo.uuid.RandomGenerator); uuid = new dojo.uuid.Uuid(); dojo.lang.assert(!uuid.isEqual(dojo.uuid.Uuid.NIL_UUID));</summary><parameters><parameter name="input" type="string || generator"/></parameters><variables><variable scope="instance" name="_uuidString"/><variable scope="instance" name="_uuidString.length"/><variable scope="instance" name="_versionNumber"/><variable scope="instance" name="_nodeString"/><variable scope="instance" name="_timestampAsHexString"/><variable scope="instance" name="_timestampAsHexString.length"/><variable scope="instance" name="_timestampAsDate"/></variables></function><function name="dojo.uuid.Uuid.compare" prototype="dojo.uuid.Uuid"><returns type="integer (either 0, 1, or -1)"/><summary>Compares this UUID to another UUID, and returns 0, 1, or -1.</summary><parameters><parameter name="otherUuid" type="Any">object that has toString() method that returns a 36-character string that conforms to the UUID spec.</parameter></parameters><description>This implementation is intended to match the sample implementation in IETF RFC 4122: http: // www.ietf.org/rfc/rfc4122.txt</description></function><function name="dojo.uuid.Uuid.setGenerator"><summary>Sets the default generator, which will be used by the "new dojo.uuid.Uuid()" constructor if no parameters are passed in.</summary><parameters><parameter name="generator" type="A">UUID generator, such as dojo.uuid.TimeBasedGenerator.</parameter></parameters></function><function name="dojo.uuid.Uuid.getGenerator"><returns type="generator (A UUID generator, such as dojo.uuid.TimeBasedGenerator)."/><summary>Returns the default generator. See setGenerator().</summary></function><function name="dojo.uuid.Uuid.toString" prototype="dojo.uuid.Uuid"><returns type="string"/><summary>By default this method returns a standard 36-character string representing the UUID, such as "3b12f1df-5232-4804-897e-917bf397618a". You can also pass in an optional format specifier to request the output in any of a half dozen slight variations.</summary><parameters><parameter name="format" type="One">of these strings: '{}', '()', '""', "''", 'urn', '!-'</parameter></parameters></function><function name="dojo.uuid.Uuid.isEqual" prototype="dojo.uuid.Uuid"><returns type="boolean"/><summary>Returns true if this UUID is equal to the otherUuid, or false otherwise.</summary><parameters><parameter name="otherUuid" type="Any">object that has toString() method that returns a 36-character string that conforms to the UUID spec.</parameter></parameters></function><function name="dojo.uuid.Uuid.isValid" prototype="dojo.uuid.Uuid"><returns type="boolean"/><summary>Returns true if the UUID was initialized with a valid value.</summary></function><function name="dojo.uuid.Uuid.getVariant" prototype="dojo.uuid.Uuid"><returns type="dojo.uuid.Uuid.Variant"/><summary>Returns a variant code that indicates what type of UUID this is. Returns one of the enumerated dojo.uuid.Uuid.Variant values.</summary></function><function name="dojo.uuid.Uuid.getVersion" prototype="dojo.uuid.Uuid"><returns type="dojo.uuid.Uuid.Version"/><summary>Returns a version number that indicates what type of UUID this is. Returns one of the enumerated dojo.uuid.Uuid.Version values.</summary></function><function name="dojo.uuid.Uuid.getNode" prototype="dojo.uuid.Uuid"><returns type="String (a 12-character string, which will look something like &quot;917bf397618a&quot;)"/><summary>If this is a version 1 UUID (a time-based UUID), getNode() returns a 12-character string with the "node" or "pseudonode" portion of the UUID, which is the rightmost 12 characters.</summary></function><function name="dojo.uuid.Uuid.getTimestamp" prototype="dojo.uuid.Uuid"><returns type="mixed"/><summary>If this is a version 1 UUID (a time-based UUID), this method returns the timestamp value encoded in the UUID. The caller can ask for the timestamp to be returned either as a JavaScript Date object or as a 15-character string of hex digits.</summary><parameters><parameter name="returnType" type="Any">of these five values: "string", String, "hex", "date", Date</parameter></parameters></function><object name="dojo.uuid.Uuid.Version"><variables><variable name="UNKNOWN"/><variable name="TIME_BASED"/><variable name="DCE_SECURITY"/><variable name="NAME_BASED_MD5"/><variable name="RANDOM"/><variable name="NAME_BASED_SHA1"/></variables></object><object name="dojo.uuid.Uuid.Variant"><variables><variable name="NCS"/><variable name="DCE"/><variable name="MICROSOFT"/><variable name="UNKNOWN"/></variables></object></resource><resource location="dojo.uuid._"><requires><environment type="common"><require>dojo.uuid.Uuid</require><require>dojo.uuid.LightweightGenerator</require><require>dojo.uuid.RandomGenerator</require><require>dojo.uuid.TimeBasedGenerator</require><require>dojo.uuid.NameBasedGenerator</require><require>dojo.uuid.NilGenerator</require></environment></requires></resource><resource location="dojo.validate._"><requires><environment type="common"><require>dojo.validate.check</require><require>dojo.validate.datetime</require><require>dojo.validate.de</require><require>dojo.validate.jp</require><require>dojo.validate.us</require><require>dojo.validate.web</require><require>dojo.validate</require></environment></requires></resource><resource location="dojo.validate.check"><requires><environment type="common"><require>dojo.validate.common</require><require>dojo.lang.common</require></environment></requires><function name="dojo.validate.check"><returns type="Object">an object that contains several methods summarizing the results of the validation</returns><summary>validates user input of an HTML form based on input profile</summary><parameters><parameter name="form" type="form">to be validated</parameter><parameter name="profile" type="specifies">how the form fields are to be validated {trim:Array, uppercase:Array, lowercase:Array, ucfirst:Array, digit:Array, required:Array, dependencies:Object, constraints:Object, confirm:Object}</parameter></parameters></function><function name="dojo.validate.evaluateConstraint"><returns type="Boolean"/><summary>Evaluates dojo.validate.check() constraints that are specified as array arguments</summary><parameters><parameter name="profile" type="The">dojo.validate.check() profile that this evaluation is against.</parameter><parameter name="constraint" type="The">single [] array of function and arguments for the function.</parameter><parameter name="fieldName" type="The">form dom name of the field being validated.</parameter><parameter name="elem" type="The">form element field.</parameter></parameters><chains><chain type="call">isValidSomething</chain></chains><description>The arrays are expected to be in the format of: constraints:{</description></function></resource><resource location="dojo.validate.common"><requires><environment type="common"><require>dojo.regexp</require></environment></requires><function name="dojo.validate.isText"><returns type="Boolean"/><summary>Checks if a string has non whitespace characters. Parameters allow you to constrain the length.</summary><parameters><parameter name="value" type="A">string</parameter><parameter name="flags" type="maxlength">If set, checks if there are at most flags.maxlength number of characters.</parameter></parameters></function><function name="dojo.validate.isInteger"><returns type="Boolean"/><summary>Validates whether a string is in an integer format</summary><parameters><parameter name="value" type="A">string</parameter><parameter name="flags" type="separator">The character used as the thousands separator. Default is no separator. For more than one symbol use an array, e.g. [",", ""], makes ',' optional.</parameter></parameters></function><function name="dojo.validate.isRealNumber"><returns type="Boolean"/><summary>Validates whether a string is a real valued number. Format is the usual exponential notation.</summary><parameters><parameter name="value" type="A">string</parameter><parameter name="flags" type="in">regexp.integer can be applied.</parameter></parameters></function><function name="dojo.validate.isCurrency"><returns type="Boolean"/><summary>Validates whether a string denotes a monetary value.</summary><parameters><parameter name="value" type="A">string</parameter><parameter name="flags" type="decimal">The character used for the decimal point. Default is ".".</parameter></parameters></function><function name="dojo.validate.isInRange"><returns type="Boolean"/><summary>Validates whether a string denoting an integer, real number, or monetary value is between a max and min.</summary><parameters><parameter name="value" type="A">string</parameter><parameter name="flags" type="decimal">The character used for the decimal point. Default is ".".</parameter></parameters></function><function name="dojo.validate.isNumberFormat"><returns type="Boolean"/><summary>Validates any sort of number based format</summary><parameters><parameter name="value" type="A">string</parameter><parameter name="flags" type="format">A string or an Array of strings for multiple formats.</parameter></parameters><description>Use it for phone numbers, social security numbers, zip-codes, etc. The value can be validated against one format or one of multiple formats. Format # Stands for a digit, 0-9. ? Stands for an optional digit, 0-9 or nothing. All other characters must appear literally in the expression. Example "(###) ###-####" -&gt; (510) 542-9742 "(###) ###-#### x#???" -&gt; (510) 542-9742 x153 "###-##-####" -&gt; 506-82-1089 i.e. social security number "#####-####" -&gt; 98225-1649 i.e. zip code</description></function><function name="dojo.validate.isValidLuhn"><returns type="Boolean"/><summary>Compares value against the Luhn algorithm to verify its integrity</summary><parameters><parameter name="value" type="String"/></parameters></function></resource><resource location="dojo.validate.creditCard"><requires><environment type="common"><require>dojo.lang.common</require><require>dojo.validate.common</require></environment></requires><function name="dojo.validate.isValidCreditCard"><returns type="Boolean"/><parameters><parameter name="value" type="String|Int"/><parameter name="ccType" type="String"/></parameters></function><function name="dojo.validate.isValidCreditCardNumber"><returns type="mixed"/><parameters><parameter name="value" type="Summary">checks if the # matches the pattern for that card or any card types if none is specified CC #, white spaces and dashes are ignored</parameter><parameter name="ccType" type="is">of the values in cardinfo -- if Omitted it it returns a | delimited string of matching card types, or false if no matches found Value: Boolean</parameter></parameters></function><function name="dojo.validate.isValidCvv"><returns type="Boolean">Summary: true if the security code (CCV) matches the correct format for supplied ccType Value: Boolean</returns><parameters><parameter name="value" type="String|Int"/><parameter name="ccType" type="String"/></parameters></function></resource><resource location="dojo.validate.datetime"><requires><environment type="common"><require>dojo.validate.common</require></environment></requires><function name="dojo.validate.isValidTime"><parameters><parameter name="value"/><parameter name="flags"/></parameters></function><function name="dojo.validate.is12HourTime"><parameters><parameter name="value"/></parameters></function><function name="dojo.validate.is24HourTime"><parameters><parameter name="value"/></parameters></function><function name="dojo.validate.isValidDate"><parameters><parameter name="dateValue"/><parameter name="format"/></parameters></function></resource><resource location="dojo.validate.de"><requires><environment type="common"><require>dojo.validate.common</require></environment></requires><function name="dojo.validate.isGermanCurrency"><returns type="Boolean"/><summary>checks to see if 'value' is a valid representation of German currency (Euros)</summary><parameters><parameter name="value" type="String"/></parameters></function></resource><resource location="dojo.validate.jp"><requires><environment type="common"><require>dojo.validate.common</require></environment></requires><function name="dojo.validate.isJapaneseCurrency"><returns type="Boolean"/><summary>checks to see if 'value' is a valid representation of Japanese currency</summary><parameters><parameter name="value" type="String"/></parameters></function></resource><resource location="dojo.validate.us"><requires><environment type="common"><require>dojo.validate.common</require></environment></requires><function name="dojo.validate.us.isCurrency"><returns type="Boolean"/><summary>Validates U.S. currency</summary><parameters><parameter name="value" type="the">representation to check</parameter><parameter name="flags" type="flags">in validate.isCurrency can be applied.</parameter></parameters></function><function name="dojo.validate.us.isState"><returns type="Boolean"/><summary>Validates US state and territory abbreviations.</summary><parameters><parameter name="value" type="A">two character string</parameter><parameter name="flags" type="allowMilitary">Allow military 'states', e.g. Armed Forces Europe (AE). Default is true.</parameter></parameters></function><function name="dojo.validate.us.isPhoneNumber"><returns type="Boolean"/><summary>Validates 10 US digit phone number for several common formats</summary><parameters><parameter name="value" type="The">telephone number string</parameter></parameters></function><function name="dojo.validate.us.isSocialSecurityNumber"><returns type="Boolean"/><summary>Validates social security number</summary><parameters><parameter name="value" type="String"/></parameters></function><function name="dojo.validate.us.isZipCode"><returns type="Boolean"/><summary>Validates U.S. zip-code</summary><parameters><parameter name="value" type="String"/></parameters></function></resource><resource location="dojo.validate.web"><requires><environment type="common"><require>dojo.validate.common</require></environment></requires><function name="dojo.validate.isIpAddress"><returns type="Boolean"/><summary>Validates an IP address</summary><parameters><parameter name="value" type="A">string.</parameter><parameter name="flags" type="allowHybrid">IPv6 address written as six groups of four hexadecimal digits followed by the usual 4 dotted decimal digit notation of IPv4. x:x:x:x:x:x:d.d.d.d</parameter></parameters><description>Supports 5 formats for IPv4: dotted decimal, dotted hex, dotted octal, decimal and hexadecimal. Supports 2 formats for Ipv6.</description></function><function name="dojo.validate.isUrl"><returns type="Boolean"/><summary>Checks if a string could be a valid URL</summary><parameters><parameter name="value" type="A">string</parameter><parameter name="flags" type="in">regexp.tld can be applied.</parameter></parameters></function><function name="dojo.validate.isEmailAddress"><returns type="Boolean"/><summary>Checks if a string could be a valid email address</summary><parameters><parameter name="value" type="A">string</parameter><parameter name="flags" type="in">regexp.tld can be applied.</parameter></parameters></function><function name="dojo.validate.isEmailAddressList"><returns type="Boolean"/><summary>Checks if a string could be a valid email address list.</summary><parameters><parameter name="value" type="A">string.</parameter><parameter name="flags" type="in">regexp.tld can be applied.</parameter></parameters></function><function name="dojo.validate.getEmailAddressList"><returns type="Array"/><summary>Check if value is an email address list. If an empty list is returned, the value didn't pass the test or it was empty.</summary><parameters><parameter name="value" type="A">string</parameter><parameter name="flags" type="An">object (same as dojo.validate.isEmailAddressList)</parameter></parameters></function></resource><resource location="dojo.validate"><requires><environment type="common"><require>dojo.validate.common</require></environment></requires></resource><resource location="dojo.widget.AccordionContainer"><requires><environment type="common"><require>dojo.widget.*</require><require>dojo.html.*</require><require>dojo.lfx.html</require><require>dojo.html.selection</require><require>dojo.widget.html.layout</require><require>dojo.widget.PageContainer</require></environment></requires><function name="dojo.widget.AccordionContainer"><summary>Holds a set of panes where every pane's title is visible, but only one pane's content is visible at a time, and switching between panes is visualized by sliding the other panes up/down.</summary><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="isContainer"/><variable name="labelNodeClass" type="String">CSS class name for dom node w/the title</variable><variable name="containerNodeClass" type="String">CSS class name for dom node holding the content</variable><variable name="duration"/><variable scope="instance" name="children"/><variable scope="prototype" name="isContainer"/><variable scope="prototype" name="labelNodeClass">CSS class name for dom node w/the title</variable><variable scope="prototype" name="containerNodeClass">CSS class name for dom node holding the content</variable><variable scope="prototype" name="duration"/></variables></function><function name="dojo.widget.AccordionContainer.fillInTemplate" prototype="dojo.widget.AccordionContainer"/><function name="dojo.widget.AccordionContainer.addChild" prototype="dojo.widget.AccordionContainer"><returns type="Widget"/><parameters><parameter name="widget" type="Widget"/></parameters></function><function name="dojo.widget.AccordionContainer._addChild" prototype="dojo.widget.AccordionContainer"><returns type="Widget"/><summary>Internal call to add child, used during postCreate() and by the real addChild() call</summary><parameters><parameter name="widget" type="Widget"/></parameters></function><function name="dojo.widget.AccordionContainer.postCreate" prototype="dojo.widget.AccordionContainer"/><function name="dojo.widget.AccordionContainer.removeChild" prototype="dojo.widget.AccordionContainer"><parameters><parameter name="widget" type="Widget"/></parameters><chains><chain type="call">dojo.widget.AccordionContainer.superclass.removeChild</chain></chains></function><function name="dojo.widget.AccordionContainer.onResized" prototype="dojo.widget.AccordionContainer"/><function name="dojo.widget.AccordionContainer._setSizes" prototype="dojo.widget.AccordionContainer"><summary>Set panes' size/position based on my size, and the current open node.</summary></function><function name="dojo.widget.AccordionContainer.selectChild" prototype="dojo.widget.AccordionContainer"><summary>close the current page and select a new one</summary><parameters><parameter name="page" type="Widget"/></parameters></function><function name="dojo.widget.AccordionPane"><summary>AccordionPane is a box with a title that contains another widget (often a ContentPane). It's a widget used internally by AccordionContainer.</summary><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="label" type="to">print on top of AccordionPane</variable><variable name="class"/><variable name="labelNodeClass"/><variable name="containerNodeClass"/><variable name="selected" type="Boolean">if true, this is the open pane</variable><variable name="templatePath"/><variable name="templateCssPath"/><variable name="isContainer"/><variable scope="instance" name="labelNode.innerHTML"/><variable scope="instance" name="selected" type="Boolean">if true, this is the open pane</variable><variable scope="prototype" name="label">print on top of AccordionPane</variable><variable scope="prototype" name="class"/><variable scope="prototype" name="labelNodeClass"/><variable scope="prototype" name="containerNodeClass"/><variable scope="prototype" name="selected">if true, this is the open pane</variable><variable scope="prototype" name="templatePath"/><variable scope="prototype" name="templateCssPath"/><variable scope="prototype" name="isContainer"/></variables></function><function name="dojo.widget.AccordionPane.fillInTemplate" prototype="dojo.widget.AccordionPane"><chains><chain type="call">dojo.widget.AccordionPane.superclass.fillInTemplate</chain></chains></function><function name="dojo.widget.AccordionPane.setLabel" prototype="dojo.widget.AccordionPane"><summary>set the title of the node</summary><parameters><parameter name="label" type="String"/></parameters></function><function name="dojo.widget.AccordionPane.resizeTo" prototype="dojo.widget.AccordionPane"><parameters><parameter name="width"/><parameter name="height"/></parameters></function><function name="dojo.widget.AccordionPane.getLabelHeight" prototype="dojo.widget.AccordionPane"><returns type="Integer"/><summary>returns the height of the title dom node</summary></function><function name="dojo.widget.AccordionPane.onLabelClick" prototype="dojo.widget.AccordionPane"><summary>callback when someone clicks my label</summary></function><function name="dojo.widget.AccordionPane.setSelected" prototype="dojo.widget.AccordionPane"><parameters><parameter name="isSelected" type="Boolean"/></parameters></function><function name="dojo.widget.Widget"><variables><variable scope="prototype" name="open"/></variables></function></resource><resource location="dojo.widget.AnimatedPng"><requires><environment type="common"><require>dojo.widget.*</require><require>dojo.widget.HtmlWidget</require></environment></requires><function name="dojo.widget.AnimatedPng"><summary>PNGs have great tranparency, but lack animation. This widget lets you point an img tag at an animated gif for graceful degrading, while letting you specify a png containing a grid of cells to animate between.</summary><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="isContainer"/><variable name="width"/><variable name="height" type="of">each frame) in pixels</variable><variable name="aniSrc" type="String">pathname to png file containing frames to be animated (ie, displayed sequentially)</variable><variable name="interval" type="Integer">time to display each frame</variable><variable name="_blankSrc"/><variable name="templateString"/><variable scope="instance" name="cellWidth"/><variable scope="instance" name="cellHeight"/><variable scope="instance" name="domNode.src"/><variable scope="instance" name="domNode.width"/><variable scope="instance" name="domNode.height"/><variable scope="instance" name="domNode.style.backgroundImage"/><variable scope="instance" name="domNode.style.backgroundRepeat"/><variable scope="instance" name="aniCols"/><variable scope="instance" name="aniRows"/><variable scope="instance" name="aniCells"/><variable scope="instance" name="aniFrame"/><variable scope="instance" name="domNode.style.backgroundPosition"/><variable scope="prototype" name="isContainer"/><variable scope="prototype" name="width"/><variable scope="prototype" name="height">each frame) in pixels</variable><variable scope="prototype" name="aniSrc">pathname to png file containing frames to be animated (ie, displayed sequentially)</variable><variable scope="prototype" name="interval">time to display each frame</variable><variable scope="prototype" name="_blankSrc"/><variable scope="prototype" name="templateString"/></variables></function><function name="dojo.widget.AnimatedPng.postCreate" prototype="dojo.widget.AnimatedPng"/><function name="dojo.widget.AnimatedPng._initAni" prototype="dojo.widget.AnimatedPng"><parameters><parameter name="w"/><parameter name="h"/></parameters></function><function name="dojo.widget.AnimatedPng._tick" prototype="dojo.widget.AnimatedPng"/></resource><resource location="dojo.widget.Button"><requires><environment type="common"><require>dojo.lang.extras</require><require>dojo.html.*</require><require>dojo.html.selection</require><require>dojo.widget.*</require></environment></requires><function name="dojo.widget.Button"><summary>Basically the same thing as a normal HTML button, but with special styling.</summary><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="isContainer"/><variable name="caption"/><variable name="templatePath"/><variable name="templateCssPath"/><variable name="inactiveImg" type="Url">prefix of filename holding images (left, center, right) for button in normal state</variable><variable name="activeImg" type="Url">prefix of filename holding images (left, center, right) for button when it's being hovered over widget2height: Number shape of the button's end pieces; the height of the end pieces is a function of the button's height (which in turn is a function of the button's content), and then the width of the end pieces is relative to their height.</variable><variable name="pressedImg"/><variable name="disabledImg"/><variable name="width2height"/><variable scope="instance" name="height"/><variable scope="instance" name="containerWidth"/><variable scope="instance" name="containerNode.style.left"/><variable scope="instance" name="leftImage.height"/><variable scope="instance" name="leftImage.width"/><variable scope="instance" name="centerImage.width"/><variable scope="instance" name="centerImage.style.left"/><variable scope="instance" name="domNode.style.height"/><variable scope="instance" name="domNode.style.width"/><variable scope="instance" name="leftImage.src"/><variable scope="instance" name="centerImage.src"/><variable scope="instance" name="rightImage.src"/><variable scope="instance" name="caption"/><variable scope="instance" name="containerNode.innerHTML"/><variable scope="instance" name="disabled"/><variable scope="prototype" name="isContainer"/><variable scope="prototype" name="caption"/><variable scope="prototype" name="templatePath"/><variable scope="prototype" name="templateCssPath"/><variable scope="prototype" name="inactiveImg">prefix of filename holding images (left, center, right) for button in normal state</variable><variable scope="prototype" name="activeImg">prefix of filename holding images (left, center, right) for button when it's being hovered over widget2height: Number shape of the button's end pieces; the height of the end pieces is a function of the button's height (which in turn is a function of the button's content), and then the width of the end pieces is relative to their height.</variable><variable scope="prototype" name="pressedImg"/><variable scope="prototype" name="disabledImg"/><variable scope="prototype" name="width2height"/></variables></function><function name="dojo.widget.Button.fillInTemplate" prototype="dojo.widget.Button"/><function name="dojo.widget.Button.postCreate" prototype="dojo.widget.Button"/><function name="dojo.widget.Button._sizeMyself" prototype="dojo.widget.Button"/><function name="dojo.widget.Button._sizeMyselfHelper" prototype="dojo.widget.Button"/><function name="dojo.widget.Button.onMouseOver" prototype="dojo.widget.Button"><summary>callback when user mouses-over the button</summary><parameters><parameter name="e" type="Event"/></parameters></function><function name="dojo.widget.Button.onMouseDown" prototype="dojo.widget.Button"><summary>callback when user starts to click the button</summary><parameters><parameter name="e" type="Event"/></parameters></function><function name="dojo.widget.Button.onMouseUp" prototype="dojo.widget.Button"><summary>callback when the user finishes clicking</summary><parameters><parameter name="e" type="Event"/></parameters></function><function name="dojo.widget.Button.onMouseOut" prototype="dojo.widget.Button"><returns type="Ignore IE mouseOut events that dont actually leave button - Prevents hover image flicker in IE"/><summary>callback when the user moves the mouse off the button</summary><parameters><parameter name="e" type="Event"/></parameters></function><function name="dojo.widget.Button.onKey" prototype="dojo.widget.Button"><summary>callback when the user presses a key (on key-down)</summary><parameters><parameter name="e" type="Event"/></parameters></function><function name="dojo.widget.Button.onFocus" prototype="dojo.widget.Button"><summary>callback on focus to the button</summary><parameters><parameter name="e" type="Event"/></parameters></function><function name="dojo.widget.Button.onBlur" prototype="dojo.widget.Button"><summary>callback when button loses focus</summary><parameters><parameter name="e" type="Event"/></parameters></function><function name="dojo.widget.Button.buttonClick" prototype="dojo.widget.Button"><summary>internal function for handling button clicks</summary><parameters><parameter name="e" type="Event"/></parameters></function><function name="dojo.widget.Button.onClick" prototype="dojo.widget.Button"><summary>callback for when button is clicked; user can override this function</summary><parameters><parameter name="e" type="Event"/></parameters></function><function name="dojo.widget.Button._setImage" prototype="dojo.widget.Button"><parameters><parameter name="prefix" type="String"/></parameters></function><function name="dojo.widget.Button._toggleMenu" prototype="dojo.widget.Button"><parameters><parameter name="menuId" type="String"/></parameters></function><function name="dojo.widget.Button.setCaption" prototype="dojo.widget.Button"><summary>reset the caption (text) of the button; takes an HTML string</summary><parameters><parameter name="content" type="String"/></parameters></function><function name="dojo.widget.Button.setDisabled" prototype="dojo.widget.Button"><summary>set disabled state of button</summary><parameters><parameter name="disabled" type="Boolean"/></parameters></function><function name="dojo.widget.DropDownButton"><summary>push the button and a menu shows up</summary><chains><chain type="call">dojo.widget.Button</chain><chain type="prototype">dojo.widget.Button</chain></chains><variables><variable name="menuId" type="String">widget id of the menu that this button should activate</variable><variable name="downArrow"/><variable name="disabledDownArrow"/><variable scope="instance" name="arrow"/><variable scope="instance" name="arrow.src"/><variable scope="prototype" name="menuId">widget id of the menu that this button should activate</variable><variable scope="prototype" name="downArrow"/><variable scope="prototype" name="disabledDownArrow"/></variables></function><function name="dojo.widget.DropDownButton.fillInTemplate" prototype="dojo.widget.DropDownButton"><chains><chain type="call">dojo.widget.DropDownButton.superclass.fillInTemplate</chain></chains></function><function name="dojo.widget.DropDownButton._sizeMyselfHelper" prototype="dojo.widget.DropDownButton"><chains><chain type="call">dojo.widget.DropDownButton.superclass._sizeMyselfHelper</chain></chains></function><function name="dojo.widget.DropDownButton.onClick" prototype="dojo.widget.DropDownButton"><summary>callback when button is clicked; user shouldn't override this function or else the menu won't toggle</summary><parameters><parameter name="e" type="Event"/></parameters></function><function name="dojo.widget.ComboButton"><summary>left side is normal button, right side displays menu</summary><chains><chain type="call">dojo.widget.Button</chain><chain type="prototype">dojo.widget.Button</chain></chains><variables><variable name="menuId" type="String">widget id of the menu that this button should activate</variable><variable name="templatePath"/><variable name="splitWidth" type="Integer"># of pixels between left &amp; right part of button</variable><variable name="arrowWidth" type="Integer">width of segment holding down arrow ** functions on right part of button **</variable><variable scope="instance" name="height"/><variable scope="instance" name="containerWidth"/><variable scope="instance" name="leftImage.height"/><variable scope="instance" name="arrowBackgroundImage.height"/><variable scope="instance" name="leftImage.width"/><variable scope="instance" name="centerImage.width"/><variable scope="instance" name="buttonNode.style.height"/><variable scope="instance" name="buttonNode.style.width"/><variable scope="instance" name="arrowBackgroundImage.width"/><variable scope="instance" name="rightImage.width"/><variable scope="instance" name="rightPart.style.height"/><variable scope="instance" name="rightPart.style.width"/><variable scope="instance" name="domNode.style.height"/><variable scope="instance" name="domNode.style.width"/><variable scope="instance" name="leftImage.src"/><variable scope="instance" name="centerImage.src"/><variable scope="instance" name="arrowBackgroundImage.src"/><variable scope="instance" name="rightImage.src"/><variable scope="prototype" name="menuId">widget id of the menu that this button should activate</variable><variable scope="prototype" name="templatePath"/><variable scope="prototype" name="splitWidth"># of pixels between left &amp; right part of button</variable><variable scope="prototype" name="arrowWidth">width of segment holding down arrow ** functions on right part of button **</variable></variables></function><function name="dojo.widget.ComboButton._sizeMyselfHelper" prototype="dojo.widget.ComboButton"><parameters><parameter name="e" type="Event"/></parameters></function><function name="dojo.widget.ComboButton._setImage" prototype="dojo.widget.ComboButton"><parameters><parameter name="prefix"/></parameters></function><function name="dojo.widget.ComboButton.rightOver" prototype="dojo.widget.ComboButton"><summary>callback when mouse-over right part of button; onMouseOver() is the callback for the left side of the button.</summary><parameters><parameter name="e" type="Event"/></parameters></function><function name="dojo.widget.ComboButton.rightDown" prototype="dojo.widget.ComboButton"><summary>callback when mouse-down right part of button; onMouseDown() is the callback for the left side of the button.</summary><parameters><parameter name="e" type="Event"/></parameters></function><function name="dojo.widget.ComboButton.rightUp" prototype="dojo.widget.ComboButton"><summary>callback when mouse-up right part of button; onMouseUp() is the callback for the left side of the button.</summary><parameters><parameter name="e" type="Event"/></parameters></function><function name="dojo.widget.ComboButton.rightOut" prototype="dojo.widget.ComboButton"><summary>callback when moving the mouse off of the right part of button; onMouseOut() is the callback for the left side of the button.</summary><parameters><parameter name="e" type="Event"/></parameters></function><function name="dojo.widget.ComboButton.rightClick" prototype="dojo.widget.ComboButton"><summary>callback when clicking the right part of button; onClick() is the callback for the left side of the button.</summary><parameters><parameter name="e" type="Event"/></parameters></function><function name="dojo.widget.ComboButton._setImageR" prototype="dojo.widget.ComboButton"><parameters><parameter name="prefix"/></parameters></function><function name="dojo.widget.ComboButton.onKey" prototype="dojo.widget.ComboButton"><parameters><parameter name="e" type="Event"/></parameters></function></resource><resource location="dojo.widget.Chart"><requires><environment type="common"><require>dojo.widget.*</require><require>dojo.gfx.color</require><require>dojo.gfx.color.hsl</require></environment></requires><function name="dojo.widget.Chart"><summary>Base class for svg and vml implementations of Chart</summary><variables><variable name="isContainer"/><variable scope="instance" name="series"/><variable scope="prototype" name="isContainer"/></variables></function><function name="dojo.widget.Chart.assignColors" prototype="dojo.widget.Chart"><summary>Assigns/generates a color for a data series.</summary></function><function name="dojo.widget.Chart.parseData" prototype="dojo.widget.Chart"><parameters><parameter name="table"/></parameters></function><function name="dojo.widget.Chart.DataSeries.add" prototype="dojo.widget.Chart.DataSeries"><parameters><parameter name="v"/></parameters></function><function name="dojo.widget.Chart.DataSeries.clear" prototype="dojo.widget.Chart.DataSeries"/><function name="dojo.widget.Chart.DataSeries"><summary>Every chart has a set of data series; this is the series. Note that each member of value is an object and in the minimum has 2 properties: .x and .value.</summary><parameters><parameter name="key"/><parameter name="label"/><parameter name="plotType"/><parameter name="color"/></parameters><variables><variable scope="instance" name="values"/><variable scope="instance" name="id"/><variable scope="instance" name="key"/><variable scope="instance" name="label"/><variable scope="instance" name="plotType"/><variable scope="instance" name="color"/></variables></function><function name="dojo.widget.Chart.DataSeries.createRange" prototype="dojo.widget.Chart.DataSeries"><parameters><parameter name="len"/></parameters></function><function name="dojo.widget.Chart.DataSeries.getMean" prototype="dojo.widget.Chart.DataSeries"><parameters><parameter name="len"/></parameters></function><function name="dojo.widget.Chart.DataSeries.getMovingAverage" prototype="dojo.widget.Chart.DataSeries"><parameters><parameter name="len"/></parameters></function><function name="dojo.widget.Chart.DataSeries.getVariance" prototype="dojo.widget.Chart.DataSeries"><parameters><parameter name="len"/></parameters></function><function name="dojo.widget.Chart.DataSeries.getStandardDeviation" prototype="dojo.widget.Chart.DataSeries"><parameters><parameter name="len"/></parameters></function><function name="dojo.widget.Chart.DataSeries.getMax" prototype="dojo.widget.Chart.DataSeries"><parameters><parameter name="len"/></parameters></function><function name="dojo.widget.Chart.DataSeries.getMin" prototype="dojo.widget.Chart.DataSeries"><parameters><parameter name="len"/></parameters></function><function name="dojo.widget.Chart.DataSeries.getMedian" prototype="dojo.widget.Chart.DataSeries"><parameters><parameter name="len"/></parameters></function><function name="dojo.widget.Chart.DataSeries.getMode" prototype="dojo.widget.Chart.DataSeries"><parameters><parameter name="len"/></parameters></function></resource><resource location="dojo.widget.Checkbox"><requires><environment type="common"><require>dojo.widget.*</require><require>dojo.widget.HtmlWidget</require><require>dojo.event.*</require><require>dojo.html.style</require><require>dojo.html.selection</require></environment></requires><function name="dojo.widget.Checkbox"><summary>Same as an HTML checkbox, but with fancy styling</summary><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="templatePath"/><variable name="templateCssPath"/><variable name="name"/><variable name="id"/><variable name="checked"/><variable name="tabIndex" type="Integer">order fields are traversed when user hits the tab key</variable><variable name="value"/><variable scope="instance" name="tabIndex" type="Integer">order fields are traversed when user hits the tab key</variable><variable scope="instance" name="id"/><variable scope="instance" name="inputNode.checked"/><variable scope="instance" name="disabled"/><variable scope="instance" name="checked"/><variable scope="prototype" name="templatePath"/><variable scope="prototype" name="templateCssPath"/><variable scope="prototype" name="name"/><variable scope="prototype" name="id"/><variable scope="prototype" name="checked"/><variable scope="prototype" name="tabIndex">order fields are traversed when user hits the tab key</variable><variable scope="prototype" name="value"/></variables></function><function name="dojo.widget.Checkbox.postMixInProperties" prototype="dojo.widget.Checkbox"><chains><chain type="call">dojo.widget.Checkbox.superclass.postMixInProperties</chain></chains></function><function name="dojo.widget.Checkbox.fillInTemplate" prototype="dojo.widget.Checkbox"/><function name="dojo.widget.Checkbox.postCreate" prototype="dojo.widget.Checkbox"/><function name="dojo.widget.Checkbox._connectEvents" prototype="dojo.widget.Checkbox"><parameters><parameter name="node" type="DomNode"/></parameters></function><function name="dojo.widget.Checkbox._onClick" prototype="dojo.widget.Checkbox"><parameters><parameter name="e" type="Event"/></parameters></function><function name="dojo.widget.Checkbox.setValue" prototype="dojo.widget.Checkbox"><summary>set the checkbox state</summary><parameters><parameter name="bool" type="boolean"/></parameters></function><function name="dojo.widget.Checkbox.onClick" prototype="dojo.widget.Checkbox"><summary>user overridable callback function for checkbox being clicked</summary></function><function name="dojo.widget.Checkbox.onKey" prototype="dojo.widget.Checkbox"><summary>callback when user hits a key</summary><parameters><parameter name="e" type="Event"/></parameters></function><function name="dojo.widget.Checkbox.mouseOver" prototype="dojo.widget.Checkbox"><summary>callback when user moves mouse over checkbox</summary><parameters><parameter name="e" type="Event"/></parameters></function><function name="dojo.widget.Checkbox.mouseOut" prototype="dojo.widget.Checkbox"><summary>callback when user moves mouse off of checkbox</summary><parameters><parameter name="e" type="Event"/></parameters></function><function name="dojo.widget.Checkbox._hover" prototype="dojo.widget.Checkbox"><parameters><parameter name="e" type="Event"/><parameter name="isOver" type="Boolean"/></parameters></function><function name="dojo.widget.Checkbox._setInfo" prototype="dojo.widget.Checkbox"><summary>set state of hidden checkbox node to correspond to displayed value. also set CSS class string according to checked/unchecked and disabled/enabled state</summary></function><function name="dojo.widget.a11y.Checkbox"><summary>variation on Checkbox widget to be display on monitors in high-contrast mode (that don't display CSS background images)</summary><chains><chain type="call">dojo.widget.Checkbox</chain><chain type="prototype">dojo.widget.Checkbox</chain></chains><variables><variable name="templatePath"/><variable scope="instance" name="inputNode.checked"/><variable scope="prototype" name="templatePath"/></variables></function><function name="dojo.widget.a11y.Checkbox.fillInTemplate" prototype="dojo.widget.a11y.Checkbox"/><function name="dojo.widget.a11y.Checkbox.postCreate" prototype="dojo.widget.a11y.Checkbox"><parameters><parameter name="args"/><parameter name="frag"/></parameters></function><function name="dojo.widget.a11y.Checkbox._onClick" prototype="dojo.widget.a11y.Checkbox"/></resource><resource location="dojo.widget.Clock"><requires><environment type="common"><require>dojo.widget.*</require><require>dojo.gfx.*</require><require>dojo.uri.Uri</require><require>dojo.lang.common</require><require>dojo.lang.timing.Timer</require></environment></requires><function name="dojo.widget.Clock"><summary>A basic clock that supports offset and labels</summary><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="set"/><variable name="start"/><variable name="stop"/><variable name="_initPoly"/><variable name="_placeHand"/><variable name="placeHour"/><variable name="placeMinute"/><variable name="placeSecond"/><variable name="init"/><variable name="postCreate"/><variable scope="instance" name="timeZoneOffset"/><variable scope="instance" name="label"/><variable scope="instance" name="date"/><variable scope="instance" name="handColor"/><variable scope="instance" name="handStroke"/><variable scope="instance" name="secondHandColor"/><variable scope="instance" name="topLabelColor"/><variable scope="instance" name="labelColor"/><variable scope="instance" name="timer"/><variable scope="instance" name="center"/><variable scope="instance" name="hands"/><variable scope="instance" name="shadows"/><variable scope="instance" name="image"/><variable scope="instance" name="surface"/><variable scope="instance" name="labelNode"/><variable scope="instance" name="topLabelNode"/><variable scope="instance" name="timer.onTick"/><variable scope="prototype" name="set"/><variable scope="prototype" name="start"/><variable scope="prototype" name="stop"/><variable scope="prototype" name="_initPoly"/><variable scope="prototype" name="_placeHand"/><variable scope="prototype" name="placeHour"/><variable scope="prototype" name="placeMinute"/><variable scope="prototype" name="placeSecond"/><variable scope="prototype" name="init"/><variable scope="prototype" name="postCreate"/></variables><description>Uses SVG and Internet Explorer's VML implementation to render a clock using the gfx module. timeZoneOffset: Integer Amount (in hours) to offset the clock, relative to local time. date: Date image: String Location of the background image</description></function><function name="dojo.widget.Clock.draw" instance="dojo.widget.Clock"><summary>Moves the hands of the clock to the proper position based on the current date.</summary></function></resource><resource location="dojo.widget.ColorPalette"><requires><environment type="common"><require>dojo.widget.*</require><require>dojo.html.layout</require><require>dojo.html.display</require><require>dojo.html.selection</require></environment></requires><function name="dojo.widget.ColorPalette"><summary>Grid showing various colors, so the user pick a certain color</summary><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="palette" type="String">Size of grid, either "7x10" or "3x4".</variable><variable scope="instance" name="domNode"/><variable scope="instance" name="style.borderColor"/><variable scope="prototype" name="palette">Size of grid, either "7x10" or "3x4".</variable></variables></function><function name="dojo.widget.ColorPalette.buildRendering" prototype="dojo.widget.ColorPalette"/><function name="dojo.widget.ColorPalette.onClick" prototype="dojo.widget.ColorPalette"><parameters><parameter name="e" type="Event"/></parameters></function><function name="dojo.widget.ColorPalette.onColorSelect" prototype="dojo.widget.ColorPalette"><summary>Callback when a color is selected.</summary><parameters><parameter name="color" type="String">Hex value corresponding to color.</parameter></parameters></function><object name="dojo.widget.ColorPalette._palettes"><variables><variable name="7x10"/><variable name="3x4"/></variables></object></resource><resource location="dojo.widget.ComboBox"><requires><environment type="common"><require>dojo.widget.*</require><require>dojo.event.*</require><require>dojo.io.*</require><require>dojo.html.*</require><require>dojo.string</require><require>dojo.widget.html.stabile</require><require>dojo.widget.PopupContainer</require></environment></requires><function name="dojo.widget.incrementalComboBoxDataProvider._addToCache" prototype="dojo.widget.incrementalComboBoxDataProvider"><parameters><parameter name="keyword" type="String"/><parameter name="data" type="Array"/></parameters></function><function name="dojo.widget.incrementalComboBoxDataProvider.startSearch" prototype="dojo.widget.incrementalComboBoxDataProvider"><summary>Start the search for patterns that match searchStr, and call specified callback functions with the results</summary><parameters><parameter name="searchStr" type="The">characters the user has typed into the &lt;input&gt;.</parameter><parameter name="callback" type="This">function will be called with the result, as an array of label/value pairs (the value is used for the Select widget). Example: [ ["Alabama","AL"], ["Alaska","AK"], ["American Samoa","AS"] ]</parameter></parameters></function><function name="dojo.widget.incrementalComboBoxDataProvider"><summary>Reference implementation / interface for Combobox incremental data provider. This class takes a search string and returns values that match that search string. The filtering of values (to find values matching given search string) is done on the server.</summary><parameters><parameter name="options" type="Structure">containing {dataUrl: "foo.js?search={searchString}"} or similar data. dataUrl is a URL that is passed the search string a returns a JSON structure showing the matching values, like [ ["Alabama","AL"], ["Alaska","AK"], ["American Samoa","AS"] ]</parameter></parameters><variables><variable scope="instance" name="_lastRequest"/><variable scope="instance" name="_inFlight"/><variable scope="instance" name="searchUrl"/><variable scope="instance" name="_cache"/><variable scope="instance" name="allowCache"/></variables></function><function name="dojo.widget.basicComboBoxDataProvider._getData" prototype="dojo.widget.basicComboBoxDataProvider"><parameters><parameter name="url" type="String"/></parameters></function><function name="dojo.widget.basicComboBoxDataProvider.startSearch" prototype="dojo.widget.basicComboBoxDataProvider"><summary>Start the search for patterns that match searchStr.</summary><parameters><parameter name="searchStr" type="The">characters the user has typed into the &lt;input&gt;.</parameter><parameter name="callback" type="This">function will be called with the result, as an array of label/value pairs (the value is used for the Select widget). Example: [ ["Alabama","AL"], ["Alaska","AK"], ["American Samoa","AS"] ]</parameter></parameters></function><function name="dojo.widget.basicComboBoxDataProvider._performSearch" prototype="dojo.widget.basicComboBoxDataProvider"><parameters><parameter name="searchStr" type="String"/><parameter name="callback" type="Function"/></parameters></function><function name="dojo.widget.basicComboBoxDataProvider.setData" prototype="dojo.widget.basicComboBoxDataProvider"><summary>set (or reset) the data and initialize lookup structures</summary><parameters><parameter name="pdata" type="Array"/></parameters></function><function name="dojo.widget.basicComboBoxDataProvider"><summary>Reference implementation / interface for Combobox data provider. This class takes a search string and returns values that match that search string. All possible values for the combobox are downloaded on initialization, and then startSearch() runs locally, merely filting that downloaded list, to find values matching search string NOTE: this data provider is designed as a naive reference implementation, and as such it is written more for readability than speed. A deployable data provider would implement lookups, search caching (and invalidation), and a significantly less naive data structure for storage of items.</summary><parameters><parameter name="options" type="Object">Options object. Example: { dataUrl: String (URL to query to get list of possible drop down values), setAllValues: Function (callback for setting initially selected value) } The return format for dataURL is (for example) [ ["Alabama","AL"], ["Alaska","AK"], ["American Samoa","AS"] ... ]</parameter><parameter name="node" type="Pointer">to the domNode in the original markup. This is needed in the case when the list of values is embedded in the html like &lt;select&gt; &lt;option&gt;Alabama&lt;/option&gt; &lt;option&gt;Arkansas&lt;/option&gt; ... rather than specified as a URL.</parameter></parameters><variables><variable scope="instance" name="_data"/><variable scope="instance" name="searchLimit"/><variable scope="instance" name="searchType"/><variable scope="instance" name="caseSensitive"/></variables></function><function name="dojo.widget.ComboBox"><summary>Auto-completing text box, and base class for Select widget. The drop down box's values are populated from an class called a data provider, which returns a list of values based on the characters that the user has typed into the input box. Some of the options to the ComboBox are actually arguments to the data provider.</summary><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="forceValidOption"/><variable name="searchType"/><variable name="dataProvider"/><variable name="autoComplete"/><variable name="searchDelay"/><variable name="dataUrl"/><variable name="fadeTime"/><variable name="maxListLength"/><variable name="mode"/><variable name="selectedResult"/><variable name="dataProviderClass"/><variable name="buttonSrc"/><variable name="dropdownToggle"/><variable name="templatePath"/><variable name="templateCssPath"/><variable name="enable"/><variable name="_onMouseOut"/><variable scope="instance" name="comboBoxValue.value"/><variable scope="instance" name="textInputNode.value"/><variable scope="instance" name="disabled"/><variable scope="instance" name="_prev_key_backspace"/><variable scope="instance" name="_prev_key_esc"/><variable scope="instance" name="searchTimer"/><variable scope="instance" name="comboBoxSelectionValue.value"/><variable scope="instance" name="_highlighted_option"/><variable scope="instance" name="name"/><variable scope="instance" name="comboBoxValue.name"/><variable scope="instance" name="comboBoxSelectionValue.name"/><variable scope="instance" name="dataProviderClass"/><variable scope="instance" name="mode"/><variable scope="instance" name="dataProvider"/><variable scope="instance" name="popupWidget"/><variable scope="instance" name="optionsListNode"/><variable scope="instance" name="_hasFocus"/><variable scope="instance" name="blurTimer"/><variable scope="instance" name="_mouseover_list"/><variable scope="instance" name="selectedResult"/><variable scope="instance" name="optionsListNode.innerHTML"/><variable scope="prototype" name="forceValidOption"/><variable scope="prototype" name="searchType"/><variable scope="prototype" name="dataProvider"/><variable scope="prototype" name="autoComplete"/><variable scope="prototype" name="searchDelay"/><variable scope="prototype" name="dataUrl"/><variable scope="prototype" name="fadeTime"/><variable scope="prototype" name="maxListLength"/><variable scope="prototype" name="mode"/><variable scope="prototype" name="selectedResult"/><variable scope="prototype" name="dataProviderClass"/><variable scope="prototype" name="buttonSrc"/><variable scope="prototype" name="dropdownToggle"/><variable scope="prototype" name="templatePath"/><variable scope="prototype" name="templateCssPath"/><variable scope="prototype" name="enable"/><variable scope="prototype" name="_onMouseOut"/></variables></function><function name="dojo.widget.ComboBox.setValue" prototype="dojo.widget.ComboBox"><summary>Sets the value of the combobox</summary><parameters><parameter name="value" type="String"/></parameters></function><function name="dojo.widget.ComboBox.onValueChanged" prototype="dojo.widget.ComboBox"><summary>callback when value changes, for user to attach to</summary><parameters><parameter name="value" type="String"/></parameters></function><function name="dojo.widget.ComboBox.getValue" prototype="dojo.widget.ComboBox"><summary>Rerturns combo box value</summary></function><function name="dojo.widget.ComboBox.getState" prototype="dojo.widget.ComboBox"><summary>Used for saving state of ComboBox when navigates to a new page, in case they then hit the browser's "Back" button.</summary></function><function name="dojo.widget.ComboBox.setState" prototype="dojo.widget.ComboBox"><summary>Used for restoring state of ComboBox when has navigated to a new page but then hits browser's "Back" button.</summary><parameters><parameter name="state" type="Object"/></parameters></function><function name="dojo.widget.ComboBox.disable" prototype="dojo.widget.ComboBox"/><function name="dojo.widget.ComboBox._getCaretPos" prototype="dojo.widget.ComboBox"><returns type="If focus has shifted, 0 is fine for caret pos."/><parameters><parameter name="element" type="DomNode"/></parameters></function><function name="dojo.widget.ComboBox._setCaretPos" prototype="dojo.widget.ComboBox"><parameters><parameter name="element" type="DomNode"/><parameter name="location" type="Number"/></parameters></function><function name="dojo.widget.ComboBox._setSelectedRange" prototype="dojo.widget.ComboBox"><parameters><parameter name="element" type="DomNode"/><parameter name="start" type="Number"/><parameter name="end" type="Number"/></parameters></function><function name="dojo.widget.ComboBox._handleKeyEvents" prototype="dojo.widget.ComboBox"><summary>handles keyboard events</summary><parameters><parameter name="evt" type="Event"/></parameters></function><function name="dojo.widget.ComboBox.compositionEnd" prototype="dojo.widget.ComboBox"><summary>When inputting characters using an input method, such as Asian languages, it will generate this event instead of onKeyDown event</summary><parameters><parameter name="evt" type="Event"/></parameters></function><function name="dojo.widget.ComboBox.onKeyUp" prototype="dojo.widget.ComboBox"><summary>callback on key up event</summary><parameters><parameter name="evt" type="Event"/></parameters></function><function name="dojo.widget.ComboBox.setSelectedValue" prototype="dojo.widget.ComboBox"><summary>This sets a hidden value associated w/the displayed value. The hidden value (and this function) shouldn't be used; if you need a hidden value then use Select widget instead of ComboBox. TODO: remove? FIXME, not sure what to do here!</summary><parameters><parameter name="value" type="String"/></parameters></function><function name="dojo.widget.ComboBox.setAllValues" prototype="dojo.widget.ComboBox"><summary>This sets the displayed value and hidden value. The hidden value (and this function) shouldn't be used; if you need a hidden value then use Select widget instead of ComboBox.</summary><parameters><parameter name="value1" type="String"/><parameter name="value2" type="String"/></parameters></function><function name="dojo.widget.ComboBox._focusOptionNode" prototype="dojo.widget.ComboBox"><summary>does the actual highlight</summary><parameters><parameter name="node" type="DomNode"/></parameters></function><function name="dojo.widget.ComboBox._blurOptionNode" prototype="dojo.widget.ComboBox"/><function name="dojo.widget.ComboBox._highlightNextOption" prototype="dojo.widget.ComboBox"/><function name="dojo.widget.ComboBox._highlightPrevOption" prototype="dojo.widget.ComboBox"/><function name="dojo.widget.ComboBox._itemMouseOver" prototype="dojo.widget.ComboBox"><parameters><parameter name="evt" type="Event"/></parameters></function><function name="dojo.widget.ComboBox._itemMouseOut" prototype="dojo.widget.ComboBox"><parameters><parameter name="evt" type="Event"/></parameters></function><function name="dojo.widget.ComboBox.onResize" prototype="dojo.widget.ComboBox"><summary>this function is called when the input area has changed size</summary></function><function name="dojo.widget.ComboBox.fillInTemplate" prototype="dojo.widget.ComboBox"><parameters><parameter name="args" type="Object"/><parameter name="frag" type="Object"/></parameters></function><function name="dojo.widget.ComboBox._openResultList" prototype="dojo.widget.ComboBox"><parameters><parameter name="results" type="Array"/></parameters></function><function name="dojo.widget.ComboBox._onFocusInput" prototype="dojo.widget.ComboBox"/><function name="dojo.widget.ComboBox._onBlurInput" prototype="dojo.widget.ComboBox"/><function name="dojo.widget.ComboBox._handleBlurTimer" prototype="dojo.widget.ComboBox"><summary>collect all blur timers issues here</summary><parameters><parameter name="clear" type="Boolean"/><parameter name="millisec" type="Number"/></parameters></function><function name="dojo.widget.ComboBox._onMouseOver" prototype="dojo.widget.ComboBox"><summary>needed in IE and Safari as inputTextNode loses focus when scrolling optionslist</summary><parameters><parameter name="evt" type="Event"/></parameters></function><function name="dojo.widget.ComboBox._isInputEqualToResult" prototype="dojo.widget.ComboBox"><parameters><parameter name="result" type="String"/></parameters></function><function name="dojo.widget.ComboBox._isValidOption" prototype="dojo.widget.ComboBox"/><function name="dojo.widget.ComboBox._checkBlurred" prototype="dojo.widget.ComboBox"/><function name="dojo.widget.ComboBox._selectOption" prototype="dojo.widget.ComboBox"><parameters><parameter name="evt" type="Event"/></parameters></function><function name="dojo.widget.ComboBox._clearResultList" prototype="dojo.widget.ComboBox"/><function name="dojo.widget.ComboBox._hideResultList" prototype="dojo.widget.ComboBox"/><function name="dojo.widget.ComboBox._showResultList" prototype="dojo.widget.ComboBox"/><function name="dojo.widget.ComboBox.handleArrowClick" prototype="dojo.widget.ComboBox"><summary>callback when arrow is clicked</summary></function><function name="dojo.widget.ComboBox._tryFocus" prototype="dojo.widget.ComboBox"/><function name="dojo.widget.ComboBox._startSearchFromInput" prototype="dojo.widget.ComboBox"/><function name="dojo.widget.ComboBox._startSearch" prototype="dojo.widget.ComboBox"><parameters><parameter name="key" type="String"/></parameters></function><function name="dojo.widget.ComboBox.postCreate" prototype="dojo.widget.ComboBox"/></resource><resource location="dojo.widget.ContentPane"><requires><environment type="common"><require>dojo.widget.*</require><require>dojo.io.*</require><require>dojo.widget.HtmlWidget</require><require>dojo.string</require><require>dojo.string.extras</require><require>dojo.html.style</require></environment></requires><function name="dojo.widget.ContentPane"><summary>A widget that can be used as a standalone widget or as a baseclass for other widgets Handles replacement of document fragment using either external uri or javascript/java generated markup or DomNode content, instanciating widgets within content and runs scripts. Dont confuse it with an iframe, it only needs document fragments. It's useful as a child of LayoutContainer, SplitContainer, or TabContainer. But note that those classes can contain any widget as a child. scriptScope: Function reference holder to the inline scripts container, if scriptSeparation is true bindArgs: String[] Send in extra args to the dojo.io.bind call per widgetImpl variables</summary><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="isContainer"/><variable name="adjustPaths"/><variable name="href"/><variable name="extractContent"/><variable name="parseContent"/><variable name="cacheContent"/><variable name="preload"/><variable name="refreshOnShow"/><variable name="handler"/><variable name="executeScripts"/><variable name="scriptSeparation"/><variable name="loadingMessage"/><variable name="isLoaded"/><variable scope="instance" name="isLoaded"/><variable scope="instance" name="href"/><variable scope="instance" name="_ioBindObj"/><variable scope="instance" name="returnValue"/><variable scope="instance" name="_callOnUnload"/><variable scope="instance" name="_styleNodes"/><variable scope="instance" name="handler"/><variable scope="instance" name="scriptScope"/><variable scope="instance" name="_onLoadStack"/><variable scope="instance" name="_onUnloadStack"/><variable scope="instance" name="bindArgs"/><variable scope="prototype" name="isContainer"/><variable scope="prototype" name="adjustPaths"/><variable scope="prototype" name="href"/><variable scope="prototype" name="extractContent"/><variable scope="prototype" name="parseContent"/><variable scope="prototype" name="cacheContent"/><variable scope="prototype" name="preload"/><variable scope="prototype" name="refreshOnShow"/><variable scope="prototype" name="handler"/><variable scope="prototype" name="executeScripts"/><variable scope="prototype" name="scriptSeparation"/><variable scope="prototype" name="loadingMessage"/><variable scope="prototype" name="isLoaded"/></variables></function><function name="dojo.widget.ContentPane.postCreate" prototype="dojo.widget.ContentPane"><parameters><parameter name="args"/><parameter name="frag"/><parameter name="parentComp"/></parameters></function><function name="dojo.widget.ContentPane.show" prototype="dojo.widget.ContentPane"><chains><chain type="call">dojo.widget.ContentPane.superclass.show</chain></chains></function><function name="dojo.widget.ContentPane.refresh" prototype="dojo.widget.ContentPane"><summary>Force a refresh (re-download) of content, be sure to turn of cache</summary></function><function name="dojo.widget.ContentPane.loadContents" prototype="dojo.widget.ContentPane"><summary>Download if isLoaded is false, else ignore</summary></function><function name="dojo.widget.ContentPane.setUrl" prototype="dojo.widget.ContentPane"><summary>Reset the (external defined) content of this pane and replace with new url</summary><parameters><parameter name="url" type="String||dojo.uri.Uri"/></parameters></function><function name="dojo.widget.ContentPane.abort" prototype="dojo.widget.ContentPane"><summary>Aborts a inflight download of content</summary></function><function name="dojo.widget.ContentPane._downloadExternalContent" prototype="dojo.widget.ContentPane"><parameters><parameter name="url"/><parameter name="useCache"/></parameters><chains><chain type="call">self.onDownloadEnd</chain><chain type="call">self._handleDefaults</chain></chains></function><function name="dojo.widget.ContentPane._cacheSetting" prototype="dojo.widget.ContentPane"><parameters><parameter name="bindObj"/><parameter name="useCache"/></parameters></function><function name="dojo.widget.ContentPane.onLoad" prototype="dojo.widget.ContentPane"><summary>Event hook, is called after everything is loaded and widgetified</summary><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.ContentPane.onUnLoad" prototype="dojo.widget.ContentPane"><summary>Deprecated, use onUnload (lowercased load)</summary><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.ContentPane.onUnload" prototype="dojo.widget.ContentPane"><summary>Event hook, is called before old content is cleared</summary><parameters><parameter name="e"/></parameters><chains><chain type="call">this.onUnLoad</chain></chains></function><function name="dojo.widget.ContentPane._runStack" prototype="dojo.widget.ContentPane"><parameters><parameter name="stName"/></parameters></function><function name="dojo.widget.ContentPane.addOnLoad" prototype="dojo.widget.ContentPane"><summary>Stores function refs and calls them one by one in the order they came in when load event occurs.</summary><parameters><parameter name="obj" optional="true" type="Function||Object">holder object</parameter><parameter name="func" type="Function">function that will be called</parameter></parameters></function><function name="dojo.widget.ContentPane.addOnUnload" prototype="dojo.widget.ContentPane"><summary>Stores function refs and calls them one by one in the order they came in when unload event occurs.</summary><parameters><parameter name="obj" type="Function||Object">holder object</parameter><parameter name="func" type="Function">function that will be called</parameter></parameters></function><function name="dojo.widget.ContentPane.addOnUnLoad" prototype="dojo.widget.ContentPane"><summary>Deprecated use addOnUnload (lower cased load)</summary><chains><chain type="call">this.addOnUnload</chain></chains></function><function name="dojo.widget.ContentPane._pushOnStack" prototype="dojo.widget.ContentPane"><parameters><parameter name="stack"/><parameter name="obj"/><parameter name="func"/></parameters></function><function name="dojo.widget.ContentPane.destroy" prototype="dojo.widget.ContentPane"><chains><chain type="call">dojo.widget.ContentPane.superclass.destroy</chain></chains></function><function name="dojo.widget.ContentPane.onExecError" prototype="dojo.widget.ContentPane"><summary>called when content script eval error or Java error occurs, preventDefault-able default is to debug not alert as in 0.3.1</summary><parameters><parameter name="e" type="Object"/></parameters></function><function name="dojo.widget.ContentPane.onContentError" prototype="dojo.widget.ContentPane"><summary>called on DOM faults, require fault etc in content, preventDefault-able default is to display errormessage inside pane</summary><parameters><parameter name="e" type="Object"/></parameters></function><function name="dojo.widget.ContentPane.onDownloadError" prototype="dojo.widget.ContentPane"><summary>called when download error occurs, preventDefault-able default is to display errormessage inside pane</summary><parameters><parameter name="e" type="Object"/></parameters></function><function name="dojo.widget.ContentPane.onDownloadStart" prototype="dojo.widget.ContentPane"><summary>called before download starts, preventDefault-able default is to display loadingMessage inside pane by changing e.text in your event handler you can change loading message</summary><parameters><parameter name="e" type="Object"/></parameters></function><function name="dojo.widget.ContentPane.onDownloadEnd" prototype="dojo.widget.ContentPane"><summary>called when download is finished</summary><parameters><parameter name="url" type="String">url that downloaded data</parameter><parameter name="data" type="String">the markup that was downloaded</parameter></parameters></function><function name="dojo.widget.ContentPane._handleDefaults" prototype="dojo.widget.ContentPane"><parameters><parameter name="e"/><parameter name="handler"/><parameter name="messType"/></parameters></function><function name="dojo.widget.ContentPane.splitAndFixPaths" prototype="dojo.widget.ContentPane"><returns type="Object"/><summary>adjusts all relative paths in (hopefully) all cases, images, remote scripts, links etc. splits up content in different pieces, scripts, title, style, link and whats left becomes .xml</summary><parameters><parameter name="s" type="String">The markup in string</parameter><parameter name="url" optional="true" type="String||dojo.uri.Uri">url that pulled in markup</parameter></parameters></function><function name="dojo.widget.ContentPane._setContent" prototype="dojo.widget.ContentPane"><parameters><parameter name="cont"/></parameters></function><function name="dojo.widget.ContentPane.setContent" prototype="dojo.widget.ContentPane"><summary>Replaces old content with data content, include style classes from old content</summary><parameters><parameter name="data" type="String||DomNode">new content, be it Document fragment or a DomNode chain If data contains style tags, link rel=stylesheet it inserts those styles into DOM</parameter></parameters></function><function name="dojo.widget.ContentPane.setHandler" prototype="dojo.widget.ContentPane"><summary>Generate pane content from given java function</summary><parameters><parameter name="handler" type="Function"/></parameters><chains><chain type="call">fcn</chain></chains></function><function name="dojo.widget.ContentPane.setHandler.handler" instance="dojo.widget.ContentPane.setHandler"><chains><chain type="call">fcn</chain></chains></function><function name="dojo.widget.ContentPane._runHandler" prototype="dojo.widget.ContentPane"/><function name="dojo.widget.ContentPane._executeScripts" prototype="dojo.widget.ContentPane"><parameters><parameter name="scripts"/></parameters><chains><chain type="call">self._handleDefaults</chain></chains></function></resource><resource location="dojo.widget.CurrencyTextbox"><requires><environment type="common"><require>dojo.widget.IntegerTextbox</require><require>dojo.validate.common</require></environment></requires><function name="dojo.widget.CurrencyTextbox"><summary>A subclass that extends IntegerTextbox. Over-rides isValid/isInRange to test if input denotes a monetary value .</summary><chains><chain type="call">dojo.widget.IntegerTextbox</chain><chain type="prototype">dojo.widget.IntegerTextbox</chain></chains><variables><variable name="fractional"/><variable name="symbol"/><variable name="separator"/><variable name="min"/><variable name="max"/><variable scope="instance" name="flags.fractional"/><variable scope="instance" name="flags.symbol"/><variable scope="instance" name="flags.min"/><variable scope="instance" name="flags.max"/><variable scope="prototype" name="fractional"/><variable scope="prototype" name="symbol"/><variable scope="prototype" name="separator"/><variable scope="prototype" name="min"/><variable scope="prototype" name="max"/></variables></function><function name="dojo.widget.CurrencyTextbox.mixInProperties" prototype="dojo.widget.CurrencyTextbox"><parameters><parameter name="localProperties"/><parameter name="frag"/></parameters><chains><chain type="call">dojo.widget.CurrencyTextbox.superclass.mixInProperties</chain></chains></function><function name="dojo.widget.CurrencyTextbox.isValid" prototype="dojo.widget.CurrencyTextbox"><summary>Over-ride for currency validation</summary></function><function name="dojo.widget.CurrencyTextbox.isInRange" prototype="dojo.widget.CurrencyTextbox"><summary>Over-ride for currency validation</summary></function></resource><resource location="dojo.widget.DatePicker"><requires><environment type="common"><require>dojo.date.common</require><require>dojo.date.format</require><require>dojo.date.serialize</require><require>dojo.widget.*</require><require>dojo.widget.HtmlWidget</require><require>dojo.event.*</require><require>dojo.dom</require><require>dojo.html.style</require></environment></requires><function name="dojo.widget.DatePicker"><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="value" type="start">attributes String|Date form value property if =='today' will be today's date</variable><variable name="name"/><variable name="displayWeeks"/><variable name="adjustWeeks"/><variable name="startDate"/><variable name="endDate"/><variable name="weekStartsOn"/><variable name="storedDate"/><variable name="staticDisplay"/><variable name="dayWidth" type="String">how to render the names of the days in the header. see dojo.date.getDayNames</variable><variable name="templatePath"/><variable name="templateCssPath"/><variable scope="instance" name="value" type="start">attributes String|Date form value property if =='today' will be today's date</variable><variable scope="instance" name="startDate"/><variable scope="instance" name="endDate"/><variable scope="instance" name="weekStartsOn"/><variable scope="instance" name="today"/><variable scope="instance" name="weekTemplate"/><variable scope="instance" name="selectedNode"/><variable scope="instance" name="clickedNode"/><variable scope="instance" name="firstDay"/><variable scope="instance" name="selectedIsUsed"/><variable scope="instance" name="currentIsUsed"/><variable scope="instance" name="curMonth"/><variable scope="instance" name="displayWeeks"/><variable scope="instance" name="adjustWeeks"/><variable scope="instance" name="staticDisplay"/><variable scope="instance" name="lastDay"/><variable scope="instance" name="monthLabelNode.innerHTML"/><variable scope="prototype" name="value">attributes String|Date form value property if =='today' will be today's date</variable><variable scope="prototype" name="name"/><variable scope="prototype" name="displayWeeks"/><variable scope="prototype" name="adjustWeeks"/><variable scope="prototype" name="startDate"/><variable scope="prototype" name="endDate"/><variable scope="prototype" name="weekStartsOn"/><variable scope="prototype" name="storedDate"/><variable scope="prototype" name="staticDisplay"/><variable scope="prototype" name="dayWidth">how to render the names of the days in the header. see dojo.date.getDayNames</variable><variable scope="prototype" name="templatePath"/><variable scope="prototype" name="templateCssPath"/></variables></function><function name="dojo.widget.DatePicker.postMixInProperties" prototype="dojo.widget.DatePicker"><summary>see dojo.widget.DomWidget</summary><chains><chain type="call">dojo.widget.DatePicker.superclass.postMixInProperties</chain></chains></function><function name="dojo.widget.DatePicker.fillInTemplate" prototype="dojo.widget.DatePicker"><summary>see dojo.widget.DomWidget</summary><parameters><parameter name="args"/><parameter name="frag"/></parameters><chains><chain type="call">dojo.widget.DatePicker.superclass.fillInTemplate</chain></chains></function><function name="dojo.widget.DatePicker.getValue" prototype="dojo.widget.DatePicker"><returns type="String"/><summary>return current date in RFC 3339 format</summary></function><function name="dojo.widget.DatePicker.getDate" prototype="dojo.widget.DatePicker"><returns type="Date"/><summary>return current date as a Date object</summary></function><function name="dojo.widget.DatePicker.setValue" prototype="dojo.widget.DatePicker"><summary>set the current date from RFC 3339 formatted string or a date object, synonymous with setDate</summary><parameters><parameter name="rfcDate" type="Date|String"/></parameters></function><function name="dojo.widget.DatePicker.setDate" prototype="dojo.widget.DatePicker"><summary>set the current date and update the UI</summary><parameters><parameter name="dateObj" type="Date|String"/></parameters></function><function name="dojo.widget.DatePicker._preInitUI" prototype="dojo.widget.DatePicker"><parameters><parameter name="dateObj"/><parameter name="initFirst" type="is">to tell _initFirstDay if you want first day of the displayed calendar, or first day of the week for dateObj</parameter><parameter name="initUI" type="tells">preInitUI to go ahead and run initUI if set to true</parameter></parameters></function><function name="dojo.widget.DatePicker._initUI" prototype="dojo.widget.DatePicker"><parameters><parameter name="days"/></parameters></function><function name="dojo.widget.DatePicker._initControls" prototype="dojo.widget.DatePicker"/><function name="dojo.widget.DatePicker._incrementWeek" prototype="dojo.widget.DatePicker"><parameters><parameter name="evt"/></parameters></function><function name="dojo.widget.DatePicker._incrementMonth" prototype="dojo.widget.DatePicker"><parameters><parameter name="evt"/></parameters></function><function name="dojo.widget.DatePicker._incrementYear" prototype="dojo.widget.DatePicker"><parameters><parameter name="evt"/></parameters></function><function name="dojo.widget.DatePicker.onIncrementWeek" prototype="dojo.widget.DatePicker"><summary>handler for increment week event</summary><parameters><parameter name="evt" type="Event"/></parameters></function><function name="dojo.widget.DatePicker.onIncrementMonth" prototype="dojo.widget.DatePicker"><summary>handler for increment month event</summary><parameters><parameter name="evt" type="Event"/></parameters></function><function name="dojo.widget.DatePicker.onIncrementYear" prototype="dojo.widget.DatePicker"><summary>handler for increment year event</summary><parameters><parameter name="evt" type="Event"/></parameters></function><function name="dojo.widget.DatePicker._setMonthLabel" prototype="dojo.widget.DatePicker"><parameters><parameter name="monthIndex"/></parameters></function><function name="dojo.widget.DatePicker._setYearLabels" prototype="dojo.widget.DatePicker"><parameters><parameter name="year"/></parameters></function><function name="dojo.widget.DatePicker._getDateClassName" prototype="dojo.widget.DatePicker"><parameters><parameter name="date"/><parameter name="monthState"/></parameters></function><function name="dojo.widget.DatePicker.onClick" prototype="dojo.widget.DatePicker"><summary>the click event handler</summary><parameters><parameter name="evt" type="Event"/></parameters></function><function name="dojo.widget.DatePicker._handleUiClick" prototype="dojo.widget.DatePicker"><returns type="this date is disabled... ignore it"/><parameters><parameter name="evt" type="Event"/></parameters></function><function name="dojo.widget.DatePicker.onValueChanged" prototype="dojo.widget.DatePicker"><summary>the set date event handler</summary><parameters><parameter name="date" type="Date"/></parameters></function><function name="dojo.widget.DatePicker._isDisabledDate" prototype="dojo.widget.DatePicker"><parameters><parameter name="dateObj"/></parameters></function><function name="dojo.widget.DatePicker.isDisabledDate" prototype="dojo.widget.DatePicker"><returns type="Boolean"/><summary>May be overridden to disable certain dates in the calendar e.g. isDisabledDate=dojo.date.isWeekend</summary><parameters><parameter name="dateObj" type="Date"/><parameter name="locale" optional="true" type="String"/></parameters></function><function name="dojo.widget.DatePicker._initFirstDay" prototype="dojo.widget.DatePicker"><returns type="Date"/><parameters><parameter name="dateObj" type="Date"/><parameter name="adj" type="false">for first day of month, true for first day of week adjusted by startOfWeek</parameter></parameters></function><function name="dojo.widget.DatePicker._getAdjustedDay" prototype="dojo.widget.DatePicker"><returns type="Number: 0..6 where 0=Sunday"/><summary>used to adjust date.getDay() values to the new values based on the current first day of the week value</summary><parameters><parameter name="dateObj" type="Date"/></parameters></function><function name="dojo.widget.DatePicker.destroy" prototype="dojo.widget.DatePicker"><chains><chain type="call">dojo.widget.DatePicker.superclass.destroy</chain></chains></function><object name="dojo.widget.DatePicker.classNames"><summary>stores a list of class names that may be overriden TODO: this is not good; can't be adjusted via markup, etc. since it's an array</summary><variables><variable name="previous"/><variable name="disabledPrevious"/><variable name="current"/><variable name="disabledCurrent"/><variable name="next"/><variable name="disabledNext"/><variable name="currentDate"/><variable name="selectedDate"/></variables></object></resource><resource location="dojo.widget.DateTextbox"><requires><environment type="common"><require>dojo.widget.ValidationTextbox</require><require>dojo.date.format</require><require>dojo.validate.datetime</require></environment></requires><function name="dojo.widget.DateTextbox"><chains><chain type="call">dojo.widget.ValidationTextbox</chain><chain type="prototype">dojo.widget.ValidationTextbox</chain></chains><variables><variable name="displayFormat"/><variable name="formatLength"/><variable scope="instance" name="flags.format"/><variable scope="prototype" name="displayFormat"/><variable scope="prototype" name="formatLength"/></variables></function><function name="dojo.widget.DateTextbox.mixInProperties" prototype="dojo.widget.DateTextbox"><summary>see dojo.widget.Widget</summary><parameters><parameter name="localProperties" type="Object"/></parameters><chains><chain type="call">dojo.widget.DateTextbox.superclass.mixInProperties</chain></chains></function><function name="dojo.widget.DateTextbox.isValid" prototype="dojo.widget.DateTextbox"><summary>see dojo.widget.ValidationTextbox</summary></function><function name="dojo.widget.TimeTextbox"><chains><chain type="call">dojo.widget.ValidationTextbox</chain><chain type="prototype">dojo.widget.ValidationTextbox</chain></chains><variables><variable name="displayFormat"/><variable name="formatLength"/><variable scope="instance" name="flags.format"/><variable scope="instance" name="flags.amSymbol"/><variable scope="instance" name="flags.pmSymbol"/><variable scope="prototype" name="displayFormat"/><variable scope="prototype" name="formatLength"/></variables></function><function name="dojo.widget.TimeTextbox.mixInProperties" prototype="dojo.widget.TimeTextbox"><summary>see dojo.widget.Widget</summary><parameters><parameter name="localProperties" type="Object"/></parameters><chains><chain type="call">dojo.widget.TimeTextbox.superclass.mixInProperties</chain></chains></function><function name="dojo.widget.TimeTextbox.isValid" prototype="dojo.widget.TimeTextbox"><summary>see dojo.widget.ValidationTextbox</summary></function></resource><resource location="dojo.widget.DebugConsole"><requires><environment type="common"><require>dojo.widget.Widget</require><require>dojo.widget.*</require><require>dojo.widget.FloatingPane</require></environment></requires><function name="dojo.widget.DebugConsole"><summary>opens a floating pane that collects and display debug messages (from dojo.debug(), etc.)</summary><chains><chain type="call">dojo.widget.FloatingPane</chain><chain type="prototype">dojo.widget.FloatingPane</chain></chains><variables><variable scope="instance" name="containerNode.id"/></variables></function><function name="dojo.widget.DebugConsole.fillInTemplate" prototype="dojo.widget.DebugConsole"><chains><chain type="call">dojo.widget.DebugConsole.superclass.fillInTemplate</chain></chains></function></resource><resource location="dojo.widget.Dialog"><requires><environment type="common"><require>dojo.widget.*</require><require>dojo.widget.ContentPane</require><require>dojo.event.*</require><require>dojo.gfx.color</require><require>dojo.html.layout</require><require>dojo.html.display</require><require>dojo.html.iframe</require></environment></requires><function name="dojo.widget.Dialog"><summary>Pops up a modal dialog window, blocking access to the screen and also graying out the screen Dialog is extended from ContentPane so it supports all the same parameters (href, etc.)</summary><variables><variable name="templatePath"/><variable name="blockDuration"/><variable name="lifetime" type="Integer">if set, this controls the number of seconds the dialog will be displayed before automatically disappearing</variable><variable name="closeNode"/><variable scope="instance" name="timeRemaining"/><variable scope="instance" name="timerNode.innerHTML"/><variable scope="instance" name="closeNode.style.visibility"/><variable scope="instance" name="closeNode.style.display"/><variable scope="instance" name="timer"/><variable scope="instance" name="timerNode"/><variable scope="instance" name="closeNode"/><variable scope="prototype" name="templatePath"/><variable scope="prototype" name="blockDuration"/><variable scope="prototype" name="lifetime">if set, this controls the number of seconds the dialog will be displayed before automatically disappearing</variable><variable scope="prototype" name="closeNode"/></variables></function><function name="dojo.widget.Dialog.postMixInProperties" prototype="dojo.widget.Dialog"><chains><chain type="call">dojo.widget.Dialog.superclass.postMixInProperties</chain></chains></function><function name="dojo.widget.Dialog.postCreate" prototype="dojo.widget.Dialog"><chains><chain type="call">dojo.widget.Dialog.superclass.postCreate</chain><chain type="call">dojo.widget.ModalDialogBase.prototype.postCreate</chain></chains></function><function name="dojo.widget.Dialog.show" prototype="dojo.widget.Dialog"><chains><chain type="call">dojo.widget.Dialog.superclass.show</chain></chains></function><function name="dojo.widget.Dialog.onLoad" prototype="dojo.widget.Dialog"><chains><chain type="call">dojo.widget.Dialog.superclass.onLoad</chain></chains></function><function name="dojo.widget.Dialog.fillInTemplate" prototype="dojo.widget.Dialog"/><function name="dojo.widget.Dialog.hide" prototype="dojo.widget.Dialog"><chains><chain type="call">dojo.widget.Dialog.superclass.hide</chain></chains></function><function name="dojo.widget.Dialog.setTimerNode" prototype="dojo.widget.Dialog"><summary>specify into which node to write the remaining # of seconds TODO: make this a parameter too</summary><parameters><parameter name="node"/></parameters></function><function name="dojo.widget.Dialog.setCloseControl" prototype="dojo.widget.Dialog"><summary>Specify which node is the close button for this dialog. If no close node is specified then clicking anywhere on the screen will close the dialog.</summary><parameters><parameter name="node" type="String|DomNode"/></parameters></function><function name="dojo.widget.Dialog.setShowControl" prototype="dojo.widget.Dialog"><summary>when specified node is clicked, show this dialog TODO: make this a parameter too</summary><parameters><parameter name="node" type="String|DomNode"/></parameters></function><function name="dojo.widget.Dialog._onTick" prototype="dojo.widget.Dialog"><summary>callback every second that the timer clicks</summary></function></resource><resource location="dojo.widget.DocPane"><requires><environment type="common"><require>dojo.widget.*</require><require>dojo.io.*</require><require>dojo.event.*</require><require>dojo.widget.HtmlWidget</require><require>dojo.widget.Editor2</require><require>dojo.widget.Dialog</require><require>dojo.html.common</require><require>dojo.html.display</require></environment></requires><function name="dojo.widget.DocPane"><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="dialog"/><variable name="dialogBg"/><variable name="dialogFg"/><variable name="logIn"/><variable name="edit"/><variable name="save"/><variable name="cancel"/><variable name="detail"/><variable name="result"/><variable name="packag"/><variable name="fn"/><variable name="fnLink"/><variable name="count"/><variable name="row"/><variable name="summary" type="This">widget is used by the API documentation system; Users aren't expected to use this widget directly.</variable><variable name="description"/><variable name="variables"/><variable name="vRow"/><variable name="vLink"/><variable name="vDesc"/><variable name="methods"/><variable name="mRow"/><variable name="mLink"/><variable name="mDesc"/><variable name="requires"/><variable name="rRow"/><variable name="rRow2"/><variable name="rH3"/><variable name="rLink"/><variable name="parameters"/><variable name="pRow"/><variable name="pLink"/><variable name="pDesc"/><variable name="pOpt"/><variable name="pType"/><variable name="sType"/><variable name="sName"/><variable name="sParams"/><variable name="sPType"/><variable name="sPTypeSave"/><variable name="sPName"/><variable name="sPNameSave"/><variable name="pkgDescription"/><variable name="_appends"/><variable name="templatePath"/><variable name="templateCssPath"/><variable name="isContainer"/><variable scope="instance" name="requires"/><variable scope="instance" name="rRow.style.display"/><variable scope="instance" name="rRow2.style.display"/><variable scope="instance" name="methods"/><variable scope="instance" name="mRow.style.display"/><variable scope="instance" name="dialog"/><variable scope="instance" name="homeSave"/><variable scope="instance" name="detailSave"/><variable scope="instance" name="resultSave"/><variable scope="instance" name="packageSave"/><variable scope="instance" name="results"/><variable scope="instance" name="rowParent"/><variable scope="instance" name="rowSave"/><variable scope="instance" name="vParent"/><variable scope="instance" name="vSave"/><variable scope="instance" name="pParent"/><variable scope="instance" name="pSave"/><variable scope="instance" name="sPTypeSave"/><variable scope="instance" name="sPNameSave"/><variable scope="instance" name="navSave"/><variable scope="instance" name="_isLoggedIn"/><variable scope="instance" name="pkgEditor"/><variable scope="instance" name="fn.innerHTML"/><variable scope="instance" name="variables.style.display"/><variable scope="instance" name="vLink.innerHTML"/><variable scope="instance" name="vDesc.parentNode.style.display"/><variable scope="instance" name="sParams.innerHTML"/><variable scope="instance" name="parameters.style.display"/><variable scope="instance" name="pLink.innerHTML"/><variable scope="instance" name="pOpt.style.display"/><variable scope="instance" name="pType.parentNode.style.display"/><variable scope="instance" name="pType.innerHTML"/><variable scope="instance" name="pDesc.parentNode.style.display"/><variable scope="instance" name="pDesc.innerHTML"/><variable scope="instance" name="sPTypeSave.innerHTML"/><variable scope="instance" name="sPNameSave.innerHTML"/><variable scope="instance" name="sType.innerHTML"/><variable scope="instance" name="sName.innerHTML"/><variable scope="instance" name="_pkgPath"/><variable scope="instance" name="pkg.innerHTML"/><variable scope="instance" name="rH3.style.display"/><variable scope="instance" name="rH3.innerHTML"/><variable scope="instance" name="rLink.innerHTML"/><variable scope="instance" name="rLink.href"/><variable scope="instance" name="mLink.innerHTML"/><variable scope="instance" name="mLink.href"/><variable scope="instance" name="mDesc.parentNode.style.display"/><variable scope="instance" name="mDesc.innerHTML"/><variable scope="instance" name="pkgDescription.innerHTML"/><variable scope="instance" name="count.innerHTML"/><variable scope="instance" name="fnLink.innerHTML"/><variable scope="instance" name="fnLink.href"/><variable scope="instance" name="summary.parentNode.style.display"/><variable scope="instance" name="summary.innerHTML"/><variable scope="prototype" name="dialog"/><variable scope="prototype" name="dialogBg"/><variable scope="prototype" name="dialogFg"/><variable scope="prototype" name="logIn"/><variable scope="prototype" name="edit"/><variable scope="prototype" name="save"/><variable scope="prototype" name="cancel"/><variable scope="prototype" name="detail"/><variable scope="prototype" name="result"/><variable scope="prototype" name="packag"/><variable scope="prototype" name="fn"/><variable scope="prototype" name="fnLink"/><variable scope="prototype" name="count"/><variable scope="prototype" name="row"/><variable scope="prototype" name="summary">widget is used by the API documentation system; Users aren't expected to use this widget directly.</variable><variable scope="prototype" name="description"/><variable scope="prototype" name="variables"/><variable scope="prototype" name="vRow"/><variable scope="prototype" name="vLink"/><variable scope="prototype" name="vDesc"/><variable scope="prototype" name="methods"/><variable scope="prototype" name="mRow"/><variable scope="prototype" name="mLink"/><variable scope="prototype" name="mDesc"/><variable scope="prototype" name="requires"/><variable scope="prototype" name="rRow"/><variable scope="prototype" name="rRow2"/><variable scope="prototype" name="rH3"/><variable scope="prototype" name="rLink"/><variable scope="prototype" name="parameters"/><variable scope="prototype" name="pRow"/><variable scope="prototype" name="pLink"/><variable scope="prototype" name="pDesc"/><variable scope="prototype" name="pOpt"/><variable scope="prototype" name="pType"/><variable scope="prototype" name="sType"/><variable scope="prototype" name="sName"/><variable scope="prototype" name="sParams"/><variable scope="prototype" name="sPType"/><variable scope="prototype" name="sPTypeSave"/><variable scope="prototype" name="sPName"/><variable scope="prototype" name="sPNameSave"/><variable scope="prototype" name="pkgDescription"/><variable scope="prototype" name="_appends"/><variable scope="prototype" name="templatePath"/><variable scope="prototype" name="templateCssPath"/><variable scope="prototype" name="isContainer"/></variables></function><function name="dojo.widget.DocPane.fillInTemplate" prototype="dojo.widget.DocPane"/><function name="dojo.widget.DocPane._logIn" prototype="dojo.widget.DocPane"/><function name="dojo.widget.DocPane._loggedIn" prototype="dojo.widget.DocPane"/><function name="dojo.widget.DocPane._save" prototype="dojo.widget.DocPane"/><function name="dojo.widget.DocPane.onDocSelectFunction" prototype="dojo.widget.DocPane"><parameters><parameter name="message"/></parameters></function><function name="dojo.widget.DocPane.onPkgResult" prototype="dojo.widget.DocPane"><parameters><parameter name="results" type="Object"/></parameters></function><function name="dojo.widget.DocPane.onDocResults" prototype="dojo.widget.DocPane"><parameters><parameter name="fns"/></parameters></function></resource><resource location="dojo.widget.DomWidget"><requires><environment type="common"><require>dojo.event.*</require><require>dojo.widget.Widget</require><require>dojo.dom</require><require>dojo.html.style</require><require>dojo.xml.Parse</require><require>dojo.uri.*</require><require>dojo.lang.func</require><require>dojo.lang.extras</require></environment></requires><function name="dojo.widget.DomWidget"><summary>dojo.widget.DomWidget is the superclass that provides behavior for all DOM-based renderers, including HtmlWidget and SvgWidget. DomWidget implements the templating system that most widget authors use to define the UI for their widgets.</summary><chains><chain type="call">dojo.widget.Widget</chain><chain type="prototype">dojo.widget.Widget</chain></chains><variables><variable name="templateNode" type="DomNode">a node that represents the widget template. Pre-empts both templateString and templatePath. method over-ride</variable><variable name="templateString"/><variable name="templateCssString"/><variable name="preventClobber"/><variable name="domNode"/><variable name="containerNode"/><variable name="widgetsInTemplate"/><variable scope="instance" name="containerNode"/><variable scope="instance" name="_sourceNodeRef"/><variable scope="instance" name="templateCssString"/><variable scope="instance" name="templateCssPath"/><variable scope="instance" name="domNode"/><variable scope="instance" name="templateString"/><variable scope="instance" name="templateNode" type="DomNode">a node that represents the widget template. Pre-empts both templateString and templatePath. method over-ride</variable><variable scope="prototype" name="templateNode">a node that represents the widget template. Pre-empts both templateString and templatePath. method over-ride</variable><variable scope="prototype" name="templateString"/><variable scope="prototype" name="templateCssString"/><variable scope="prototype" name="preventClobber"/><variable scope="prototype" name="domNode"/><variable scope="prototype" name="containerNode"/><variable scope="prototype" name="widgetsInTemplate"/></variables></function><function name="dojo.widget.DomWidget.addChild" prototype="dojo.widget.DomWidget"><returns type="Widget">the widget that was inserted</returns><summary>Process the given child widget, inserting it's dom node as a child of our dom node</summary><parameters><parameter name="widget" type="Widget"/><parameter name="overrideContainerNode" optional="true" type="DomNode">a non-default container node for the widget</parameter><parameter name="pos" optional="true" type="String">can be one of "before", "after", "first", or "last". This has the same meaning as in dojo.dom.insertAtPosition()</parameter><parameter name="ref" optional="true" type="DomNode">a node to place the widget relative to</parameter><parameter name="insertIndex" optional="true" type="int">DOM index, same meaning as in dojo.dom.insertAtIndex()</parameter></parameters></function><function name="dojo.widget.DomWidget.addWidgetAsDirectChild" prototype="dojo.widget.DomWidget"><summary>Process the given child widget, inserting it's dom node as a child of our dom node</summary><parameters><parameter name="widget" type="Widget"/><parameter name="overrideContainerNode" type="DomNode">a non-default container node for the widget</parameter><parameter name="pos" optional="true" type="String">can be one of "before", "after", "first", or "last". This has the same meaning as in dojo.dom.insertAtPosition()</parameter><parameter name="ref" optional="true" type="DomNode">a node to place the widget relative to</parameter><parameter name="insertIndex" optional="true" type="int">DOM index, same meaning as in dojo.dom.insertAtIndex()</parameter></parameters></function><function name="dojo.widget.DomWidget.registerChild" prototype="dojo.widget.DomWidget"><summary>record that given widget descends from me</summary><parameters><parameter name="widget" type="Widget">the widget that is now a child</parameter><parameter name="insertionIndex" type="int">where in the children[] array to place it</parameter></parameters></function><function name="dojo.widget.DomWidget.removeChild" prototype="dojo.widget.DomWidget"><returns type="Widget"/><summary>detach child domNode from parent domNode</summary><parameters><parameter name="widget" type="Widget"/></parameters><chains><chain type="call">dojo.widget.DomWidget.superclass.removeChild</chain></chains></function><function name="dojo.widget.DomWidget.getFragNodeRef" prototype="dojo.widget.DomWidget"><returns type="mixed">the source node, if any, that the widget was declared from</returns><parameters><parameter name="frag" type="Object">an opaque data structure generated by the first-pass parser</parameter></parameters></function><function name="dojo.widget.DomWidget.postInitialize" prototype="dojo.widget.DomWidget"><summary>Replace the source domNode with the generated dom structure, and register the widget with its parent. This is an implementation of the stub function defined in dojo.widget.Widget. dojo.profile.start(this.widgetType + " postInitialize");</summary><parameters><parameter name="args" type="Object"/><parameter name="frag" type="Object"/><parameter name="parentComp" type="Widget"/></parameters></function><function name="dojo.widget.DomWidget.buildRendering" prototype="dojo.widget.DomWidget"><summary>Construct the UI for this widget, generally from a template. This can be over-ridden for custom UI creation to to side-step the template system. This is an implementation of the stub function defined in dojo.widget.Widget.</summary><parameters><parameter name="args" type="Object"/><parameter name="frag" type="Object"/></parameters></function><function name="dojo.widget.DomWidget.buildFromTemplate" prototype="dojo.widget.DomWidget"><summary>Called by buildRendering, creates the actual UI in a DomWidget.</summary><parameters><parameter name="args" type="Object"/><parameter name="frag" type="Object"/></parameters><chains><chain type="call">kval</chain></chains></function><function name="dojo.widget.DomWidget.attachTemplateNodes" prototype="dojo.widget.DomWidget"><summary>hooks up event handlers and property/node linkages. Calls dojo.widget.attachTemplateNodes to do all the hard work.</summary><parameters><parameter name="baseNode" type="DomNode">defaults to "this.domNode"</parameter><parameter name="targetObj" type="Widget">defaults to "this"</parameter></parameters></function><function name="dojo.widget.DomWidget.fillInTemplate" prototype="dojo.widget.DomWidget"><summary>stub function! sub-classes may use as a default UI initializer function. The UI rendering will be available by the time this is called from buildRendering. If buildRendering is over-ridden, this function may not be fired!</summary></function><function name="dojo.widget.DomWidget.destroyRendering" prototype="dojo.widget.DomWidget"><summary>UI destructor. Destroy the dom nodes associated w/this widget.</summary></function><function name="dojo.widget.DomWidget.createNodesFromText" prototype="dojo.widget.DomWidget"><summary>Attempts to create a set of nodes based on the structure of the passed text. Implemented in HtmlWidget and SvgWidget.</summary></function><function name="dojo.widget.fillFromTemplateCache"><summary>static method to build from a template w/ or w/o a real widget in place</summary><parameters><parameter name="obj" type="DomWidget">an instance of dojo.widget.DomWidget to initialize the template for</parameter><parameter name="templatePath" type="String">the URL to get the template from. dojo.uri.Uri is often passed as well.</parameter><parameter name="templateString" optional="true" type="String">a string to use in lieu of fetching the template from a URL</parameter><parameter name="avoidCache" optional="true" type="Boolean">should the template system not use whatever is in the cache and always use the passed templatePath or templateString?</parameter></parameters></function><function name="dojo.widget.attachTemplateNodes"><summary>map widget properties and functions to the handlers specified in the dom node and it's descendants. This function iterates over all nodes and looks for these properties: * dojoAttachPoint * dojoAttachEvent * waiRole * waiState * any "dojoOn*" proprties passed in the events array</summary><parameters><parameter name="rootNode" type="DomNode">the node to search for properties. All children will be searched.</parameter><parameter name="targetObj" type="Widget"/><parameter name="events" type="Array">a list of properties generated from getDojoEventsFromStr.</parameter></parameters></function><function name="dojo.widget.getDojoEventsFromStr"><returns type="Array"/><summary>generates a list of properties with names that match the form dojoOn*</summary><parameters><parameter name="str" type="String">the template string to search var lstr = str.toLowerCase();</parameter></parameters></function><function name="dojo.widget.wai.setAttr"><summary>Use appropriate API to set the role or state attribute onto the element.</summary><parameters><parameter name="node" type="DomNode"/><parameter name="ns" type="String"/><parameter name="attr" type="String"/><parameter name="value" type="String|Boolean"/></parameters><description>In IE use the generic setAttribute() api. Append a namespace alias to the attribute name and appropriate prefix to the value. Otherwise, use the setAttribueNS api to set the namespaced attribute. Also add the appropriate prefix to the attribute value.</description></function><function name="dojo.widget.wai.getAttr"><parameters><parameter name="node" type="DomNode"/><parameter name="ns" type="String"/><parameter name="attr" type="String|Boolena"/></parameters></function><function name="dojo.widget.wai.removeAttr"><returns type="only IE returns a value"/><summary>Use the appropriate API to remove the role or state value</summary><parameters><parameter name="node" type="DomNode"/><parameter name="ns" type="String"/><parameter name="attr" type="String|Boolena"/></parameters><description>In IE use the generic removeAttribute() api. An alias value was added to the attribute name to simulate a namespace when the attribute was set. Otherwise use the removeAttributeNS() api to remove the state value</description></function><object name="dojo.widget.defaultStrings"><summary>a mapping of strings that are used in template variable replacement</summary><variables><variable name="dojoRoot"/><variable name="baseScriptUri"/></variables></object><object name="dojo.widget.wai.waiRole"><variables><variable name="name" type="String">information for mapping accessibility role</variable><variable name="namespace" type="String">URI of the namespace for the set of roles</variable><variable name="alias" type="String">The alias to assign the namespace</variable><variable name="prefix" type="String">The prefix to assign to the role value</variable></variables></object><object name="dojo.widget.wai.waiState"><variables><variable name="name" type="String">information for mapping accessibility state</variable><variable name="namespace" type="String">URI of the namespace for the set of states</variable><variable name="alias" type="String">The alias to assign the namespace</variable><variable name="prefix" type="String">empty string - state value does not require prefix</variable></variables></object><object name="dojo.widget.wai"><summary>Contains functions to set accessibility roles and states onto widget elements</summary></object></resource><resource location="dojo.widget.DropdownContainer"><requires><environment type="common"><require>dojo.widget.*</require><require>dojo.widget.HtmlWidget</require><require>dojo.widget.PopupContainer</require><require>dojo.event.*</require><require>dojo.html.layout</require><require>dojo.html.display</require><require>dojo.html.iframe</require><require>dojo.html.util</require></environment></requires><function name="dojo.widget.DropdownContainer"><summary>provides an input box and a button for a dropdown. In subclass, the dropdown can be specified.</summary><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="inputWidth"/><variable name="id"/><variable name="inputId"/><variable name="inputName"/><variable name="iconURL"/><variable name="copyClasses"/><variable name="iconAlt"/><variable name="containerToggle"/><variable name="containerToggleDuration"/><variable name="templateString"/><variable name="templateCssPath"/><variable name="isContainer"/><variable scope="instance" name="popup"/><variable scope="instance" name="containerNode"/><variable scope="instance" name="domNode.id"/><variable scope="instance" name="inputNode.id"/><variable scope="instance" name="inputNode.name"/><variable scope="instance" name="inputNode.style.width"/><variable scope="instance" name="inputNode.disabled"/><variable scope="instance" name="inputNode.style"/><variable scope="instance" name="inputNode.className"/><variable scope="prototype" name="inputWidth"/><variable scope="prototype" name="id"/><variable scope="prototype" name="inputId"/><variable scope="prototype" name="inputName"/><variable scope="prototype" name="iconURL"/><variable scope="prototype" name="copyClasses"/><variable scope="prototype" name="iconAlt"/><variable scope="prototype" name="containerToggle"/><variable scope="prototype" name="containerToggleDuration"/><variable scope="prototype" name="templateString"/><variable scope="prototype" name="templateCssPath"/><variable scope="prototype" name="isContainer"/></variables></function><function name="dojo.widget.DropdownContainer.attachTemplateNodes" prototype="dojo.widget.DropdownContainer"><summary>use attachTemplateNodes to specify containerNode, as fillInTemplate is too late for this</summary><chains><chain type="call">dojo.widget.DropdownContainer.superclass.attachTemplateNodes</chain></chains></function><function name="dojo.widget.DropdownContainer.fillInTemplate" prototype="dojo.widget.DropdownContainer"><parameters><parameter name="args"/><parameter name="frag"/></parameters></function><function name="dojo.widget.DropdownContainer.onIconClick" prototype="dojo.widget.DropdownContainer"><parameters><parameter name="evt" type="Event"/></parameters></function><function name="dojo.widget.DropdownContainer.hideContainer" prototype="dojo.widget.DropdownContainer"><summary>hide the dropdown</summary></function><function name="dojo.widget.DropdownContainer.onInputChange" prototype="dojo.widget.DropdownContainer"><summary>signal for changes in the input box</summary></function><function name="dojo.widget.DropdownContainer.enable" prototype="dojo.widget.DropdownContainer"><summary>enable this widget to accept user input</summary><chains><chain type="call">dojo.widget.DropdownContainer.superclass.enable</chain></chains></function><function name="dojo.widget.DropdownContainer.disable" prototype="dojo.widget.DropdownContainer"><summary>lock this widget so that the user can't change the value</summary><chains><chain type="call">dojo.widget.DropdownContainer.superclass.disable</chain></chains></function></resource><resource location="dojo.widget.DropdownDatePicker"><requires><environment type="common"><require>dojo.widget.*</require><require>dojo.widget.DropdownContainer</require><require>dojo.widget.DatePicker</require><require>dojo.event.*</require><require>dojo.html.*</require><require>dojo.date.format</require><require>dojo.date.serialize</require><require>dojo.string.common</require><require>dojo.i18n.common</require></environment></requires><function name="dojo.widget.DropdownDatePicker"><chains><chain type="call">dojo.widget.DropdownContainer</chain><chain type="prototype">dojo.widget.DropdownContainer</chain></chains><variables><variable name="iconURL"/><variable name="formatLength"/><variable name="displayFormat"/><variable name="dateFormat"/><variable name="saveFormat"/><variable name="value"/><variable name="name"/><variable name="displayWeeks"/><variable name="adjustWeeks"/><variable name="startDate"/><variable name="endDate"/><variable name="weekStartsOn"/><variable name="staticDisplay"/><variable scope="instance" name="iconAlt"/><variable scope="instance" name="value"/><variable scope="instance" name="datePicker"/><variable scope="instance" name="containerNode.explodeClassName"/><variable scope="instance" name="valueNode.name"/><variable scope="instance" name="inputNode.value"/><variable scope="instance" name="valueNode.value"/><variable scope="prototype" name="iconURL"/><variable scope="prototype" name="formatLength"/><variable scope="prototype" name="displayFormat"/><variable scope="prototype" name="dateFormat"/><variable scope="prototype" name="saveFormat"/><variable scope="prototype" name="value"/><variable scope="prototype" name="name"/><variable scope="prototype" name="displayWeeks"/><variable scope="prototype" name="adjustWeeks"/><variable scope="prototype" name="startDate"/><variable scope="prototype" name="endDate"/><variable scope="prototype" name="weekStartsOn"/><variable scope="prototype" name="staticDisplay"/></variables></function><function name="dojo.widget.DropdownDatePicker.postMixInProperties" prototype="dojo.widget.DropdownDatePicker"><summary>see dojo.widget.DomWidget</summary><parameters><parameter name="localProperties"/><parameter name="frag"/></parameters><chains><chain type="call">dojo.widget.DropdownDatePicker.superclass.postMixInProperties</chain></chains></function><function name="dojo.widget.DropdownDatePicker.fillInTemplate" prototype="dojo.widget.DropdownDatePicker"><summary>see dojo.widget.DomWidget</summary><parameters><parameter name="args"/><parameter name="frag"/></parameters><chains><chain type="call">dojo.widget.DropdownDatePicker.superclass.fillInTemplate</chain></chains></function><function name="dojo.widget.DropdownDatePicker.getValue" prototype="dojo.widget.DropdownDatePicker"><returns type="String"/><summary>return current date in RFC 3339 format</summary></function><function name="dojo.widget.DropdownDatePicker.getDate" prototype="dojo.widget.DropdownDatePicker"><returns type="Date"/><summary>return current date as a Date object</summary></function><function name="dojo.widget.DropdownDatePicker.setValue" prototype="dojo.widget.DropdownDatePicker"><summary>set the current date from RFC 3339 formatted string or a date object, synonymous with setDate</summary><parameters><parameter name="rfcDate" type="Date|String"/></parameters></function><function name="dojo.widget.DropdownDatePicker.setDate" prototype="dojo.widget.DropdownDatePicker"><summary>set the current date and update the UI</summary><parameters><parameter name="dateObj" type="Date|String"/></parameters></function><function name="dojo.widget.DropdownDatePicker._updateText" prototype="dojo.widget.DropdownDatePicker"><summary>updates the &lt;input&gt; field according to the current value (ie, displays the formatted date)</summary></function><function name="dojo.widget.DropdownDatePicker.onValueChanged" prototype="dojo.widget.DropdownDatePicker"><summary>triggered when this.value is changed</summary><parameters><parameter name="dateObj" type="Date"/></parameters></function><function name="dojo.widget.DropdownDatePicker.onInputChange" prototype="dojo.widget.DropdownDatePicker"><summary>callback when user manually types a date into the &lt;input&gt; field</summary></function><function name="dojo.widget.DropdownDatePicker._syncValueNode" prototype="dojo.widget.DropdownDatePicker"/><function name="dojo.widget.DropdownDatePicker.destroy" prototype="dojo.widget.DropdownDatePicker"><parameters><parameter name="finalize" type="Boolean"/></parameters><chains><chain type="call">dojo.widget.DropdownDatePicker.superclass.destroy</chain></chains></function></resource><resource location="dojo.widget.DropdownTimePicker"><requires><environment type="common"><require>dojo.widget.*</require><require>dojo.widget.DropdownContainer</require><require>dojo.widget.TimePicker</require><require>dojo.event.*</require><require>dojo.html.*</require><require>dojo.date.format</require><require>dojo.date.serialize</require><require>dojo.i18n.common</require></environment></requires><function name="dojo.widget.DropdownTimePicker"><chains><chain type="call">dojo.widget.DropdownContainer</chain><chain type="prototype">dojo.widget.DropdownContainer</chain></chains><variables><variable name="iconURL" type="URL">path of icon for button to display time picker widget</variable><variable name="formatLength" type="String">Type of formatting used for visual display, appropriate to locale (choice of long, short, medium or full) See dojo.date.format for details. deprecated, will be removed for 0.5</variable><variable name="displayFormat"/><variable name="timeFormat"/><variable name="saveFormat"/><variable name="value"/><variable name="name"/><variable scope="instance" name="iconAlt"/><variable scope="instance" name="value"/><variable scope="instance" name="timePicker"/><variable scope="instance" name="containerNode.style.zIndex"/><variable scope="instance" name="containerNode.explodeClassName"/><variable scope="instance" name="valueNode.name"/><variable scope="instance" name="inputNode.value"/><variable scope="instance" name="valueNode.value"/><variable scope="prototype" name="iconURL">path of icon for button to display time picker widget</variable><variable scope="prototype" name="formatLength">Type of formatting used for visual display, appropriate to locale (choice of long, short, medium or full) See dojo.date.format for details. deprecated, will be removed for 0.5</variable><variable scope="prototype" name="displayFormat"/><variable scope="prototype" name="timeFormat"/><variable scope="prototype" name="saveFormat"/><variable scope="prototype" name="value"/><variable scope="prototype" name="name"/></variables></function><function name="dojo.widget.DropdownTimePicker.postMixInProperties" prototype="dojo.widget.DropdownTimePicker"><summary>see dojo.widget.DomWidget</summary><chains><chain type="call">dojo.widget.DropdownTimePicker.superclass.postMixInProperties</chain></chains></function><function name="dojo.widget.DropdownTimePicker.fillInTemplate" prototype="dojo.widget.DropdownTimePicker"><summary>see dojo.widget.DomWidget</summary><chains><chain type="call">dojo.widget.DropdownTimePicker.superclass.fillInTemplate</chain></chains></function><function name="dojo.widget.DropdownTimePicker.getValue" prototype="dojo.widget.DropdownTimePicker"><returns type="String"/><summary>return current time in time-only portion of RFC 3339 format</summary></function><function name="dojo.widget.DropdownTimePicker.getTime" prototype="dojo.widget.DropdownTimePicker"><returns type="Date"/><summary>return current time as a Date object</summary></function><function name="dojo.widget.DropdownTimePicker.setValue" prototype="dojo.widget.DropdownTimePicker"><summary>set the current time from RFC 3339 formatted string or a date object, synonymous with setTime</summary><parameters><parameter name="rfcDate" type="Date|String"/></parameters></function><function name="dojo.widget.DropdownTimePicker.setTime" prototype="dojo.widget.DropdownTimePicker"><summary>set the current time and update the UI</summary><parameters><parameter name="dateObj" type="Date|String"/></parameters></function><function name="dojo.widget.DropdownTimePicker._updateText" prototype="dojo.widget.DropdownTimePicker"><summary>updates the &lt;input&gt; field according to the current value (ie, displays the formatted date)</summary></function><function name="dojo.widget.DropdownTimePicker.onValueChanged" prototype="dojo.widget.DropdownTimePicker"><summary>triggered when this.value is changed</summary><parameters><parameter name="dateObj" type="Date"/></parameters></function><function name="dojo.widget.DropdownTimePicker.onInputChange" prototype="dojo.widget.DropdownTimePicker"><summary>callback when user manually types a time into the &lt;input&gt; field</summary></function><function name="dojo.widget.DropdownTimePicker._syncValueNode" prototype="dojo.widget.DropdownTimePicker"/><function name="dojo.widget.DropdownTimePicker.destroy" prototype="dojo.widget.DropdownTimePicker"><parameters><parameter name="finalize" type="Boolean"/></parameters><chains><chain type="call">dojo.widget.DropdownTimePicker.superclass.destroy</chain></chains></function></resource><resource location="dojo.widget.Editor"><requires><environment type="common"><require>dojo.io.*</require><require>dojo.widget.*</require><require>dojo.widget.Toolbar</require><require>dojo.widget.RichText</require><require>dojo.widget.ColorPalette</require><require>dojo.string.extras</require></environment></requires><function name="dojo.widget.Editor"><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable scope="instance" name="contentFilters"/><variable scope="instance" name="_toolbars"/><variable scope="instance" name="_richText"/><variable scope="instance" name="_toolbarContainer"/><variable scope="instance" name="_toolbarContainer.domNode.style.display"/><variable scope="instance" name="_updateToolbarTimer"/><variable scope="instance" name="_updateToolbarLastRan"/><variable scope="instance" name="_richText.contentFilters"/><variable scope="prototype" name="widgetType"/><variable scope="prototype" name="saveUrl"/><variable scope="prototype" name="saveMethod"/><variable scope="prototype" name="saveArgName"/><variable scope="prototype" name="closeOnSave"/><variable scope="prototype" name="items"/><variable scope="prototype" name="formatBlockItems"/><variable scope="prototype" name="fontNameItems"/><variable scope="prototype" name="fontSizeItems"/><variable scope="prototype" name="validateItems"/><variable scope="prototype" name="focusOnLoad"/><variable scope="prototype" name="minHeight"/><variable scope="prototype" name="_richText"/><variable scope="prototype" name="_richTextType"/><variable scope="prototype" name="_toolbarContainer"/><variable scope="prototype" name="_toolbarContainerType"/><variable scope="prototype" name="_toolbars"/><variable scope="prototype" name="_toolbarType"/><variable scope="prototype" name="_toolbarItemType"/><variable scope="prototype" name="_updateToolbarLastRan"/><variable scope="prototype" name="_updateToolbarTimer"/><variable scope="prototype" name="_updateToolbarFrequency"/><variable scope="prototype" name="supportedCommands"/></variables></function><function name="dojo.widget.Editor.getItemProperties" prototype="dojo.widget.Editor"><parameters><parameter name="name"/></parameters></function><function name="dojo.widget.Editor.buildRendering" prototype="dojo.widget.Editor"><parameters><parameter name="args"/><parameter name="frag"/></parameters></function><function name="dojo.widget.Editor.setRichText" prototype="dojo.widget.Editor"><parameters><parameter name="richText"/></parameters></function><function name="dojo.widget.Editor.initToolbar" prototype="dojo.widget.Editor"><returns type="only create it once"/></function><function name="dojo.widget.Editor.insertToolbar" prototype="dojo.widget.Editor"><parameters><parameter name="tbNode"/><parameter name="richTextNode"/></parameters></function><function name="dojo.widget.Editor.addToolbar" prototype="dojo.widget.Editor"><parameters><parameter name="toolbar"/></parameters></function><function name="dojo.widget.Editor.addItem" prototype="dojo.widget.Editor"><parameters><parameter name="item"/><parameter name="tb"/><parameter name="dontValidate"/></parameters></function><function name="dojo.widget.Editor.enableToolbar" prototype="dojo.widget.Editor"/><function name="dojo.widget.Editor.disableToolbar" prototype="dojo.widget.Editor"><parameters><parameter name="hide"/></parameters></function><function name="dojo.widget.Editor.updateToolbar" prototype="dojo.widget.Editor"><parameters><parameter name="force"/></parameters></function><function name="dojo.widget.Editor.updateItem" prototype="dojo.widget.Editor"><parameters><parameter name="item"/></parameters></function><function name="dojo.widget.Editor.isSupportedCommand" prototype="dojo.widget.Editor"><parameters><parameter name="cmd"/></parameters></function><function name="dojo.widget.Editor.getCommandImage" prototype="dojo.widget.Editor"><parameters><parameter name="cmd"/></parameters></function><function name="dojo.widget.Editor._action" prototype="dojo.widget.Editor"><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.Editor._setValue" prototype="dojo.widget.Editor"><parameters><parameter name="a"/><parameter name="b"/></parameters></function><function name="dojo.widget.Editor._save" prototype="dojo.widget.Editor"><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.Editor._close" prototype="dojo.widget.Editor"><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.Editor.onAction" prototype="dojo.widget.Editor"><parameters><parameter name="cmd"/><parameter name="value"/></parameters></function><function name="dojo.widget.Editor.fillInTemplate" prototype="dojo.widget.Editor"><parameters><parameter name="args"/><parameter name="frag"/></parameters></function><function name="dojo.widget.Editor._fire" prototype="dojo.widget.Editor"><parameters><parameter name="eventName"/></parameters></function><function name="dojo.widget.Editor.getHtml" prototype="dojo.widget.Editor"/><function name="dojo.widget.Editor.getEditorContent" prototype="dojo.widget.Editor"/><function name="dojo.widget.Editor.onClose" prototype="dojo.widget.Editor"><parameters><parameter name="save"/><parameter name="hide"/></parameters></function><function name="dojo.widget.Editor.onLoad" prototype="dojo.widget.Editor"/><function name="dojo.widget.Editor.onSave" prototype="dojo.widget.Editor"/><function name="dojo.widget.Editor.onCancel" prototype="dojo.widget.Editor"/><object name="dojo.widget.Editor.itemGroups"><variables><variable name="textGroup"/><variable name="blockGroup"/><variable name="justifyGroup"/><variable name="commandGroup"/><variable name="colorGroup"/><variable name="listGroup"/><variable name="indentGroup"/><variable name="linkGroup"/></variables></object><object name="dojo.widget.Editor.formatBlockValues"><variables><variable name="Normal"/><variable name="Main heading"/><variable name="Sub heading"/><variable name="Sub sub heading"/><variable name="Preformatted"/></variables></object><object name="dojo.widget.Editor.fontNameValues"><variables><variable name="Arial"/><variable name="Verdana"/><variable name="Times New Roman"/><variable name="Courier"/></variables></object><object name="dojo.widget.Editor.fontSizeValues"><variables><variable name="2 (10 pt)"/><variable name="3 (12 pt)"/><variable name="4 (14 pt)"/><variable name="5 (18 pt)"/><variable name="6 (24 pt)"/><variable name="7 (36 pt)"/></variables></object></resource><resource location="dojo.widget.Editor2"><requires><environment type="common"><require>dojo.io.*</require><require>dojo.widget.RichText</require><require>dojo.widget.Editor2Toolbar</require><require>dojo.widget.FloatingPane</require><require>dojo.widget.Editor2Plugin.AlwaysShowToolbar</require></environment></requires><function name="dojo.widget.Editor2Dialog"><summary>Provides a Dialog which can be modal or normal for the Editor2.</summary><variables><variable name="templatePath"/><variable name="modal"/><variable name="width"/><variable name="height"/><variable name="windowState"/><variable name="displayCloseAction"/><variable name="contentFile"/><variable name="contentClass" type="String">TODO modified from ModalDialogBase.checkSize to call _sizeBackground conditionally</variable><variable scope="instance" name="contentWidget"/><variable scope="instance" name="bg.style.zIndex"/><variable scope="prototype" name="templatePath"/><variable scope="prototype" name="modal"/><variable scope="prototype" name="width"/><variable scope="prototype" name="height"/><variable scope="prototype" name="windowState"/><variable scope="prototype" name="displayCloseAction"/><variable scope="prototype" name="contentFile"/><variable scope="prototype" name="contentClass">TODO modified from ModalDialogBase.checkSize to call _sizeBackground conditionally</variable></variables></function><function name="dojo.widget.Editor2Dialog.fillInTemplate" prototype="dojo.widget.Editor2Dialog"><parameters><parameter name="args"/><parameter name="frag"/></parameters><chains><chain type="call">dojo.widget.Editor2Dialog.superclass.fillInTemplate</chain></chains></function><function name="dojo.widget.Editor2Dialog.postCreate" prototype="dojo.widget.Editor2Dialog"><chains><chain type="call">dojo.widget.ModalDialogBase.prototype.postCreate</chain><chain type="call">dojo.widget.FloatingPaneBase.prototype.postCreate</chain><chain type="call">dojo.widget.Editor2Dialog.superclass.postCreate</chain></chains></function><function name="dojo.widget.Editor2Dialog.createContent" prototype="dojo.widget.Editor2Dialog"/><function name="dojo.widget.Editor2Dialog.show" prototype="dojo.widget.Editor2Dialog"><chains><chain type="call">dojo.widget.Editor2Dialog.superclass.show</chain><chain type="call">dojo.widget.Editor2Dialog.superclass.hide</chain></chains></function><function name="dojo.widget.Editor2Dialog.onShow" prototype="dojo.widget.Editor2Dialog"><chains><chain type="call">dojo.widget.Editor2Dialog.superclass.onShow</chain></chains></function><function name="dojo.widget.Editor2Dialog.closeWindow" prototype="dojo.widget.Editor2Dialog"><chains><chain type="call">dojo.widget.Editor2Dialog.superclass.closeWindow</chain></chains></function><function name="dojo.widget.Editor2Dialog.hide" prototype="dojo.widget.Editor2Dialog"><chains><chain type="call">dojo.widget.Editor2Dialog.superclass.hide</chain></chains></function><function name="dojo.widget.Editor2Dialog.checkSize" prototype="dojo.widget.Editor2Dialog"/><function name="dojo.widget.Editor2DialogContent"><summary>dojo.widget.Editor2DialogContent is the actual content of a Editor2Dialog. This class should be subclassed to provide the content.</summary><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="widgetsInTemplate"/><variable name="loadContent"/><variable scope="prototype" name="widgetsInTemplate"/><variable scope="prototype" name="loadContent"/></variables></function><function name="dojo.widget.Editor2DialogContent.cancel" prototype="dojo.widget.Editor2DialogContent"><summary>Default handler when cancel button is clicked.</summary></function><function name="dojo.widget.Editor2"><chains><chain type="call">dojo.widget.RichText</chain><chain type="prototype">dojo.widget.RichText</chain></chains><variables><variable name="toolbarAlwaysVisible"/><variable name="toolbarWidget"/><variable name="scrollInterval"/><variable name="toolbarTemplatePath"/><variable name="toolbarTemplateCssPath"/><variable name="toolbarPlaceHolder"/><variable name="_inSourceMode"/><variable name="_htmlEditNode"/><variable name="toolbarGroup"/><variable name="shareToolbar"/><variable name="contextMenuGroupSet"/><variable name="_updateToolbarLastRan"/><variable name="_updateToolbarTimer"/><variable name="_updateToolbarFrequency"/><variable name="_lastStateTimestamp"/><variable name="shortcuts"/><variable scope="instance" name="toolbarGroup"/><variable scope="instance" name="toolbarWidget"/><variable scope="instance" name="loadedPlugins"/><variable scope="instance" name="_inSourceMode"/><variable scope="instance" name="_htmlEditNode"/><variable scope="instance" name="_htmlEditNode.style.display"/><variable scope="instance" name="_htmlEditNode.style.width"/><variable scope="instance" name="_htmlEditNode.style.height"/><variable scope="instance" name="_htmlEditNode.value"/><variable scope="instance" name="_bookmark"/><variable scope="instance" name="_updateToolbarTimer"/><variable scope="instance" name="_updateToolbarLastRan"/><variable scope="instance" name="_lastStateTimestamp"/><variable scope="instance" name="_loadedCommands"/><variable scope="prototype" name="toolbarAlwaysVisible"/><variable scope="prototype" name="toolbarWidget"/><variable scope="prototype" name="scrollInterval"/><variable scope="prototype" name="toolbarTemplatePath"/><variable scope="prototype" name="toolbarTemplateCssPath"/><variable scope="prototype" name="toolbarPlaceHolder"/><variable scope="prototype" name="_inSourceMode"/><variable scope="prototype" name="_htmlEditNode"/><variable scope="prototype" name="toolbarGroup"/><variable scope="prototype" name="shareToolbar"/><variable scope="prototype" name="contextMenuGroupSet"/><variable scope="prototype" name="_updateToolbarLastRan"/><variable scope="prototype" name="_updateToolbarTimer"/><variable scope="prototype" name="_updateToolbarFrequency"/><variable scope="prototype" name="_lastStateTimestamp"/><variable scope="prototype" name="shortcuts"/></variables><description>Plugins are available using dojo's require syntax. Please find available built-in plugins under src/widget/Editor2Plugin. Array: Commands shortcuts. Each element can has up to 3 fields: 1. String: the name of the command 2. String Optional: the char for shortcut key, by default the first char from the command name is used 3. Int Optional: specify the modifier of the shortcut, by default ctrl is used</description></function><function name="dojo.widget.Editor2.editorOnLoad" prototype="dojo.widget.Editor2"><summary>Create toolbar and other initialization routines. This is called after the finish of the loading of document in the editing element dojo.profile.start("dojo.widget.Editor2::editorOnLoad");</summary></function><function name="dojo.widget.Editor2.toolbarLoaded" prototype="dojo.widget.Editor2"><summary>Fired when the toolbar for this editor is created. This event is for plugins to use</summary></function><function name="dojo.widget.Editor2.registerLoadedPlugin" prototype="dojo.widget.Editor2"><summary>Register a plugin which is loaded for this instance</summary><parameters><parameter name="obj" type="Object"/></parameters></function><function name="dojo.widget.Editor2.unregisterLoadedPlugin" prototype="dojo.widget.Editor2"><summary>Delete a loaded plugin for this instance</summary><parameters><parameter name="obj" type="Object"/></parameters></function><function name="dojo.widget.Editor2.execCommand" prototype="dojo.widget.Editor2"><parameters><parameter name="command" type="String"/><parameter name="argument"/></parameters><chains><chain type="call">dojo.widget.Editor2.superclass.execCommand</chain></chains></function><function name="dojo.widget.Editor2.queryCommandEnabled" prototype="dojo.widget.Editor2"><parameters><parameter name="command" type="String"/><parameter name="argument"/></parameters><chains><chain type="call">dojo.widget.Editor2.superclass.queryCommandEnabled</chain></chains></function><function name="dojo.widget.Editor2.queryCommandState" prototype="dojo.widget.Editor2"><parameters><parameter name="command" type="String"/><parameter name="argument"/></parameters><chains><chain type="call">dojo.widget.Editor2.superclass.queryCommandState</chain></chains></function><function name="dojo.widget.Editor2.onClick" prototype="dojo.widget.Editor2"><parameters><parameter name="e" type="Event"/></parameters><chains><chain type="call">dojo.widget.Editor2.superclass.onClick</chain></chains></function><function name="dojo.widget.Editor2.clobberFocus" prototype="dojo.widget.Editor2"><summary>stub to signal other instances to clobber focus</summary></function><function name="dojo.widget.Editor2.toggleHtmlEditing" prototype="dojo.widget.Editor2"><summary>toggle between WYSIWYG mode and HTML source mode</summary></function><function name="dojo.widget.Editor2.setFocus" prototype="dojo.widget.Editor2"><summary>focus is set on this instance dojo.debug("setFocus: start "+this.widgetId);</summary></function><function name="dojo.widget.Editor2.setBlur" prototype="dojo.widget.Editor2"><summary>focus on this instance is lost dojo.debug("setBlur:", this); dojo.event.disconnect(this.toolbarWidget, "exec", this, "execCommand");</summary></function><function name="dojo.widget.Editor2.saveSelection" prototype="dojo.widget.Editor2"><summary>save the current selection for restoring it</summary></function><function name="dojo.widget.Editor2.restoreSelection" prototype="dojo.widget.Editor2"><summary>restore the last saved selection</summary></function><function name="dojo.widget.Editor2.updateToolbar" prototype="dojo.widget.Editor2"><summary>update the associated toolbar of this Editor2</summary><parameters><parameter name="force" type="Boolean"/></parameters></function><function name="dojo.widget.Editor2.destroy" prototype="dojo.widget.Editor2"><parameters><parameter name="finalize" type="Boolean"/></parameters><chains><chain type="call">dojo.widget.Editor2.superclass.destroy</chain></chains></function><function name="dojo.widget.Editor2.onDisplayChanged" prototype="dojo.widget.Editor2"><parameters><parameter name="e" type="Object"/><parameter name="forceUpdate" type="Boolean"/></parameters><chains><chain type="call">dojo.widget.Editor2.superclass.onDisplayChanged</chain></chains></function><function name="dojo.widget.Editor2.onLoad" prototype="dojo.widget.Editor2"><chains><chain type="call">dojo.widget.Editor2.superclass.onLoad</chain></chains></function><function name="dojo.widget.Editor2.onFocus" prototype="dojo.widget.Editor2"><chains><chain type="call">dojo.widget.Editor2.superclass.onFocus</chain></chains></function><function name="dojo.widget.Editor2.getEditorContent" prototype="dojo.widget.Editor2"><chains><chain type="call">dojo.widget.Editor2.superclass.getEditorContent</chain></chains></function><function name="dojo.widget.Editor2.replaceEditorContent" prototype="dojo.widget.Editor2"><parameters><parameter name="html"/></parameters><chains><chain type="call">dojo.widget.Editor2.superclass.replaceEditorContent</chain></chains></function><function name="dojo.widget.Editor2.getCommand" prototype="dojo.widget.Editor2"><summary>return a command associated with this instance of editor</summary><parameters><parameter name="name" type="String"/></parameters></function><function name="dojo.widget.Editor2.setupDefaultShortcuts" prototype="dojo.widget.Editor2"><summary>setup default shortcuts using Editor2 commands</summary></function><function name="dojo.widget.Editor2Manager"><variables><variable name="_currentInstance"/><variable name="commandState"/></variables></function><function name="dojo.widget.Editor2Manager.getCurrentInstance"><summary>Return the current focused Editor2 instance</summary></function><function name="dojo.widget.Editor2Manager.setCurrentInstance"><summary>Set current focused Editor2 instance</summary><parameters><parameter name="inst" type="Widget"/></parameters><variables><variable scope="instance" name="_currentInstance"/></variables></function><function name="dojo.widget.Editor2Manager.getCommand"><summary>Return Editor2 command with the given name</summary><parameters><parameter name="editor" type="dojo.widget.Editor2"/><parameter name="name" type="name">of the command (case insensitive)</parameter></parameters></function><function name="dojo.widget.Editor2Manager.destroy"><summary>Cleaning up. This is called automatically on page unload.</summary><chains><chain type="call">dojo.widget.HandlerManager.prototype.destroy</chain></chains><variables><variable scope="instance" name="_currentInstance"/></variables></function><object name="dojo.widget.Editor2ToolbarGroups"><summary>keeping track of all available share toolbar groups</summary></object></resource><resource location="dojo.widget.Editor2Plugin.AlwaysShowToolbar"><function name="dojo.widget.Editor2Plugin.AlwaysShowToolbar"><parameters><parameter name="editor"/></parameters><variables><variable name="_scrollSetUp"/><variable name="_fixEnabled"/><variable name="_scrollThreshold"/><variable name="_handleScroll"/><variable scope="instance" name="scrollInterval"/><variable scope="instance" name="_scrollSetUp"/><variable scope="instance" name="_scrollThreshold"/><variable scope="instance" name="editor.editorObject.style.marginTop"/><variable scope="instance" name="_IEOriginalPos"/><variable scope="instance" name="_fixEnabled"/><variable scope="instance" name="_handleScroll"/><variable scope="instance" name="editor"/><variable scope="prototype" name="_scrollSetUp"/><variable scope="prototype" name="_fixEnabled"/><variable scope="prototype" name="_scrollThreshold"/><variable scope="prototype" name="_handleScroll"/></variables></function><function name="dojo.widget.Editor2Plugin.AlwaysShowToolbar.setup" prototype="dojo.widget.Editor2Plugin.AlwaysShowToolbar"/><function name="dojo.widget.Editor2Plugin.AlwaysShowToolbar.globalOnScrollHandler" prototype="dojo.widget.Editor2Plugin.AlwaysShowToolbar"/><function name="dojo.widget.Editor2Plugin.AlwaysShowToolbar.destroy" prototype="dojo.widget.Editor2Plugin.AlwaysShowToolbar"/></resource><resource location="dojo.widget.Editor2Plugin.ContextMenu"><requires><environment type="common"><require>dojo.widget.Menu2</require></environment></requires><function name="dojo.widget.Editor2Plugin.ContextMenu.bindEditor" prototype="dojo.widget.Editor2Plugin.ContextMenu"><parameters><parameter name="editor"/></parameters></function><function name="dojo.widget.Editor2Plugin.ContextMenu.setup" prototype="dojo.widget.Editor2Plugin.ContextMenu"><parameters><parameter name="gs"/></parameters></function><function name="dojo.widget.Editor2Plugin.ContextMenu.aboutToShow" prototype="dojo.widget.Editor2Plugin.ContextMenu"/><function name="dojo.widget.Editor2Plugin.ContextMenu.destroy" prototype="dojo.widget.Editor2Plugin.ContextMenu"/><function name="dojo.widget.Editor2Plugin.ContextMenu"><parameters><parameter name="editor"/><parameter name="gs"/></parameters><variables><variable scope="instance" name="groups"/><variable scope="instance" name="separators"/><variable scope="instance" name="editor"/><variable scope="instance" name="contextMenu"/></variables></function><function name="dojo.widget.Editor2Plugin.SimpleContextMenuGroup.refresh" prototype="dojo.widget.Editor2Plugin.SimpleContextMenuGroup"/><function name="dojo.widget.Editor2Plugin.SimpleContextMenuGroup.destroy" prototype="dojo.widget.Editor2Plugin.SimpleContextMenuGroup"/><function name="dojo.widget.Editor2Plugin.SimpleContextMenuGroup"><parameters><parameter name="contextmenuplugin"/></parameters><variables><variable scope="instance" name="contextmenu"/><variable scope="instance" name="contextMenu"/><variable scope="instance" name="items"/></variables></function><function name="dojo.widget.Editor2Plugin.SimpleContextMenuGroup.createItems" prototype="dojo.widget.Editor2Plugin.SimpleContextMenuGroup"/><function name="dojo.widget.Editor2Plugin.SimpleContextMenuGroup.checkVisibility" prototype="dojo.widget.Editor2Plugin.SimpleContextMenuGroup"/><function name="dojo.widget.Editor2Plugin.GenericContextMenuGroup"><chains><chain type="call">dojo.widget.Editor2Plugin.SimpleContextMenuGroup</chain><chain type="prototype">dojo.widget.Editor2Plugin.SimpleContextMenuGroup</chain></chains></function><function name="dojo.widget.Editor2Plugin.LinkContextMenuGroup"><chains><chain type="call">dojo.widget.Editor2Plugin.SimpleContextMenuGroup</chain><chain type="prototype">dojo.widget.Editor2Plugin.SimpleContextMenuGroup</chain></chains></function><function name="dojo.widget.Editor2Plugin.ImageContextMenuGroup"><chains><chain type="call">dojo.widget.Editor2Plugin.SimpleContextMenuGroup</chain><chain type="prototype">dojo.widget.Editor2Plugin.SimpleContextMenuGroup</chain></chains></function><function name="dojo.widget.Editor2ContextMenuItem"><chains><chain type="call">dojo.widget.MenuItem2</chain><chain type="prototype">dojo.widget.MenuItem2</chain></chains><variables><variable name="command"/><variable scope="instance" name="caption"/><variable scope="instance" name="domNode.style.display"/><variable scope="prototype" name="command"/></variables></function><function name="dojo.widget.Editor2ContextMenuItem.buildRendering" prototype="dojo.widget.Editor2ContextMenuItem"><chains><chain type="call">dojo.widget.Editor2ContextMenuItem.superclass.buildRendering</chain></chains></function><function name="dojo.widget.Editor2ContextMenuItem.onClick" prototype="dojo.widget.Editor2ContextMenuItem"/><function name="dojo.widget.Editor2ContextMenuItem.refresh" prototype="dojo.widget.Editor2ContextMenuItem"/><function name="dojo.widget.Editor2ContextMenuItem.hide" prototype="dojo.widget.Editor2ContextMenuItem"/><function name="dojo.widget.Editor2ContextMenuItem.show" prototype="dojo.widget.Editor2ContextMenuItem"/><function name="dojo.widget.Editor2Plugin.ContextMenuManager.registerGroup"><parameters><parameter name="name"/><parameter name="handler"/></parameters></function><function name="dojo.widget.Editor2Plugin.ContextMenuManager.removeGroup"><parameters><parameter name="name"/></parameters></function><function name="dojo.widget.Editor2Plugin.ContextMenuManager.getGroup"><parameters><parameter name="name"/><parameter name="contextmenuplugin"/></parameters></function><function name="dojo.widget.Editor2Plugin.ContextMenuManager.registerGroupSet"><summary>register a group set</summary><parameters><parameter name="name" type="name">of the group set</parameter><parameter name="set" type="an">array of groups, such as ['Generic','Link']</parameter></parameters></function><function name="dojo.widget.Editor2Plugin.ContextMenuManager.removeGroupSet"><parameters><parameter name="name"/></parameters></function><function name="dojo.widget.Editor2Plugin.ContextMenuManager.getContextMenu"><parameters><parameter name="editor"/></parameters></function><object name="dojo.widget.Editor2Plugin.ContextMenuManager"><variables><variable name="menuGroups"/></variables></object></resource><resource location="dojo.widget.Editor2Plugin.CreateLinkDialog"><function name="dojo.widget.Editor2CreateLinkDialog"><chains><chain type="call">dojo.widget.Editor2DialogContent</chain><chain type="prototype">dojo.widget.Editor2DialogContent</chain></chains><variables><variable name="templatePath"/><variable name="editableAttributes"/><variable scope="instance" name="linkNode"/><variable scope="instance" name="extraAttribText"/><variable scope="prototype" name="templatePath"/><variable scope="prototype" name="editableAttributes"/></variables></function><function name="dojo.widget.Editor2CreateLinkDialog.loadContent" prototype="dojo.widget.Editor2CreateLinkDialog"><returns type="do not show the dialog"/></function><function name="dojo.widget.Editor2CreateLinkDialog.ok" prototype="dojo.widget.Editor2CreateLinkDialog"/></resource><resource location="dojo.widget.Editor2Plugin.FindReplace"><requires><environment type="common"><require>dojo.widget.Editor2</require></environment></requires><function name="dojo.widget.Editor2Plugin.FindCommand"><chains><chain type="call">dojo.widget.Editor2DialogCommand</chain><chain type="prototype">dojo.widget.Editor2DialogCommand</chain></chains></function><function name="dojo.widget.Editor2Plugin.FindReplace.getCommand"><parameters><parameter name="editor"/><parameter name="name"/></parameters></function><function name="dojo.widget.Editor2Plugin.FindReplace.getToolbarItem"><parameters><parameter name="name"/></parameters></function></resource><resource location="dojo.widget.Editor2Plugin.FindReplaceDialog"><function name="dojo.widget.Editor2FindDialog"><chains><chain type="call">dojo.widget.Editor2DialogContent</chain><chain type="prototype">dojo.widget.Editor2DialogContent</chain></chains><variables><variable name="templatePath"/><variable scope="prototype" name="templatePath"/></variables></function><function name="dojo.widget.Editor2FindDialog.find" prototype="dojo.widget.Editor2FindDialog"/><function name="dojo.widget.Editor2ReplaceDialog"><chains><chain type="call">dojo.widget.Editor2DialogContent</chain><chain type="prototype">dojo.widget.Editor2DialogContent</chain></chains><variables><variable name="templatePath"/><variable scope="prototype" name="templatePath"/></variables></function><function name="dojo.widget.Editor2ReplaceDialog.replace" prototype="dojo.widget.Editor2ReplaceDialog"/><function name="dojo.widget.Editor2ReplaceDialog.replaceAll" prototype="dojo.widget.Editor2ReplaceDialog"/></resource><resource location="dojo.widget.Editor2Plugin.InsertImageDialog"><function name="dojo.widget.Editor2InsertImageDialog"><chains><chain type="call">dojo.widget.Editor2DialogContent</chain><chain type="prototype">dojo.widget.Editor2DialogContent</chain></chains><variables><variable name="templatePath"/><variable name="editableAttributes"/><variable scope="instance" name="imageNode"/><variable scope="instance" name="extraAttribText"/><variable scope="prototype" name="templatePath"/><variable scope="prototype" name="editableAttributes"/></variables></function><function name="dojo.widget.Editor2InsertImageDialog.loadContent" prototype="dojo.widget.Editor2InsertImageDialog"/><function name="dojo.widget.Editor2InsertImageDialog.ok" prototype="dojo.widget.Editor2InsertImageDialog"/></resource><resource location="dojo.widget.Editor2Plugin.InsertTableDialog"><function name="dojo.widget.Editor2InsertTableDialog"><chains><chain type="call">dojo.widget.Editor2DialogContent</chain><chain type="prototype">dojo.widget.Editor2DialogContent</chain></chains><variables><variable name="templatePath"/><variable name="editableAttributes"/><variable scope="instance" name="tableNode"/><variable scope="instance" name="extraAttribText"/><variable scope="prototype" name="templatePath"/><variable scope="prototype" name="editableAttributes"/></variables></function><function name="dojo.widget.Editor2InsertTableDialog.loadContent" prototype="dojo.widget.Editor2InsertTableDialog"/><function name="dojo.widget.Editor2InsertTableDialog.ok" prototype="dojo.widget.Editor2InsertTableDialog"/></resource><resource location="dojo.widget.Editor2Plugin.SimpleSignalCommands"><requires><environment type="common"><require>dojo.widget.Editor2</require></environment></requires><function name="dojo.widget.Editor2Plugin.SimpleSignalCommand"><parameters><parameter name="editor"/><parameter name="name"/></parameters><chains><chain type="call">dojo.widget.Editor2Command</chain><chain type="prototype">dojo.widget.Editor2Command</chain></chains></function><function name="dojo.widget.Editor2Plugin.SimpleSignalCommand.execute" prototype="dojo.widget.Editor2Plugin.SimpleSignalCommand"/><function name="dojo.widget.Editor2Plugin.SimpleSignalCommands.Handler"><parameters><parameter name="name"/></parameters></function><function name="dojo.widget.Editor2Plugin.SimpleSignalCommands.getCommand"><parameters><parameter name="editor"/><parameter name="name"/></parameters></function><object name="dojo.widget.Editor2Plugin.SimpleSignalCommands"><variables><variable name="signals"/></variables></object></resource><resource location="dojo.widget.Editor2Plugin.TableOperation"><requires><environment type="common"><require>dojo.widget.Editor2</require></environment></requires><function name="dojo.widget.Editor2Plugin.TableContextMenuGroup"><chains><chain type="call">dojo.widget.Editor2Plugin.SimpleContextMenuGroup</chain><chain type="prototype">dojo.widget.Editor2Plugin.SimpleContextMenuGroup</chain></chains></function><function name="dojo.widget.Editor2Plugin.TableOperation.getCommand"><parameters><parameter name="editor"/><parameter name="name"/></parameters></function><function name="dojo.widget.Editor2Plugin.TableOperation.getToolbarItem"><parameters><parameter name="name"/></parameters></function><function name="dojo.widget.Editor2Plugin.TableOperation.getContextMenuGroup"><parameters><parameter name="name"/><parameter name="contextmenuplugin"/></parameters></function><function name="dojo.widget.Editor2Plugin.TableOperation.showIETableBorder"><parameters><parameter name="dom"/></parameters></function><function name="dojo.widget.Editor2Plugin.TableOperation.removeIEFakeClass"><parameters><parameter name="dom"/></parameters></function></resource><resource location="dojo.widget.Editor2Plugin.ToolbarDndSupport"><requires><environment type="common"><require>dojo.dnd.*</require></environment></requires></resource><resource location="dojo.widget.Editor2Plugin._"><requires><environment type="common"><require>dojo.widget.Editor2</require><require>dojo.widget.Editor2Toolbar</require></environment></requires></resource><resource location="dojo.widget.Editor2Toolbar"><requires><environment type="common"><require>dojo.lang.*</require><require>dojo.widget.*</require><require>dojo.event.*</require><require>dojo.html.layout</require><require>dojo.html.display</require><require>dojo.widget.RichText</require><require>dojo.widget.PopupContainer</require><require>dojo.widget.ColorPalette</require><require>dojo.widget.ContentPane</require></environment></requires><function name="dojo.widget.Editor2ToolbarButton.create" prototype="dojo.widget.Editor2ToolbarButton"><summary>create the item</summary><parameters><parameter name="node" type="the">dom node which is the root of this toolbar item</parameter><parameter name="toolbar" type="the">Editor2Toolbar widget this toolbar item belonging to</parameter><parameter name="nohover" type="whether">this item in charge of highlight this item</parameter></parameters></function><function name="dojo.widget.Editor2ToolbarButton"><parameters><parameter name="name"/></parameters><variables><variable scope="instance" name="_domNode"/><variable scope="instance" name="_domNode.title"/><variable scope="instance" name="_parentToolbar"/><variable scope="instance" name="_lastState"/><variable scope="instance" name="_domNode.disabled"/><variable scope="instance" name="_name"/></variables></function><function name="dojo.widget.Editor2ToolbarButton.disableSelection" prototype="dojo.widget.Editor2ToolbarButton"><summary>disable selection on the passed node and all its children</summary><parameters><parameter name="rootnode" type="DomNode"/></parameters></function><function name="dojo.widget.Editor2ToolbarButton.onMouseOver" prototype="dojo.widget.Editor2ToolbarButton"/><function name="dojo.widget.Editor2ToolbarButton.onMouseOut" prototype="dojo.widget.Editor2ToolbarButton"/><function name="dojo.widget.Editor2ToolbarButton.destroy" prototype="dojo.widget.Editor2ToolbarButton"><summary>destructor</summary></function><function name="dojo.widget.Editor2ToolbarButton.onClick" prototype="dojo.widget.Editor2ToolbarButton"><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.Editor2ToolbarButton.refreshState" prototype="dojo.widget.Editor2ToolbarButton"><summary>update the state of the toolbar item</summary></function><function name="dojo.widget.Editor2ToolbarButton.latchToolbarItem" prototype="dojo.widget.Editor2ToolbarButton"/><function name="dojo.widget.Editor2ToolbarButton.enableToolbarItem" prototype="dojo.widget.Editor2ToolbarButton"/><function name="dojo.widget.Editor2ToolbarButton.disableToolbarItem" prototype="dojo.widget.Editor2ToolbarButton"/><function name="dojo.widget.Editor2ToolbarButton.highlightToolbarItem" prototype="dojo.widget.Editor2ToolbarButton"/><function name="dojo.widget.Editor2ToolbarButton.unhighlightToolbarItem" prototype="dojo.widget.Editor2ToolbarButton"/><function name="dojo.widget.Editor2ToolbarButton.removeToolbarItemStyle" prototype="dojo.widget.Editor2ToolbarButton"/><function name="dojo.widget.Editor2ToolbarDropDownButton"><chains><chain type="call">dojo.widget.Editor2ToolbarButton</chain><chain type="prototype">dojo.widget.Editor2ToolbarButton</chain></chains></function><function name="dojo.widget.Editor2ToolbarColorPaletteButton"><chains><chain type="call">dojo.widget.Editor2ToolbarDropDownButton</chain><chain type="prototype">dojo.widget.Editor2ToolbarDropDownButton</chain></chains></function><function name="dojo.widget.Editor2ToolbarFormatBlockPlainSelect"><chains><chain type="call">dojo.widget.Editor2ToolbarButton</chain><chain type="prototype">dojo.widget.Editor2ToolbarButton</chain></chains></function><function name="dojo.widget.Editor2ToolbarComboItem"><chains><chain type="call">dojo.widget.Editor2ToolbarDropDownButton</chain><chain type="prototype">dojo.widget.Editor2ToolbarDropDownButton</chain></chains></function><function name="dojo.widget.Editor2ToolbarFormatBlockSelect"><chains><chain type="call">dojo.widget.Editor2ToolbarComboItem</chain><chain type="prototype">dojo.widget.Editor2ToolbarComboItem</chain></chains></function><function name="dojo.widget.Editor2ToolbarFontSizeSelect"><chains><chain type="call">dojo.widget.Editor2ToolbarComboItem</chain><chain type="prototype">dojo.widget.Editor2ToolbarComboItem</chain></chains></function><function name="dojo.widget.Editor2ToolbarFontNameSelect"><chains><chain type="call">dojo.widget.Editor2ToolbarFontSizeSelect</chain><chain type="prototype">dojo.widget.Editor2ToolbarFontSizeSelect</chain></chains></function><function name="dojo.widget.Editor2Toolbar"><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="templatePath"/><variable name="templateCssPath"/><variable name="ToolbarLatchedItemStyle"/><variable name="ToolbarEnabledItemStyle"/><variable name="ToolbarDisabledItemStyle"/><variable name="ToolbarHighlightedItemStyle"/><variable name="ToolbarHighlightedSelectStyle"/><variable name="ToolbarHighlightedSelectItemStyle"/><variable name="shareGroup"/><variable scope="instance" name="items"/><variable scope="instance" name="shareGroup"/><variable scope="instance" name="domNode.style.zoom"/><variable scope="prototype" name="templatePath"/><variable scope="prototype" name="templateCssPath"/><variable scope="prototype" name="ToolbarLatchedItemStyle"/><variable scope="prototype" name="ToolbarEnabledItemStyle"/><variable scope="prototype" name="ToolbarDisabledItemStyle"/><variable scope="prototype" name="ToolbarHighlightedItemStyle"/><variable scope="prototype" name="ToolbarHighlightedSelectStyle"/><variable scope="prototype" name="ToolbarHighlightedSelectItemStyle"/><variable scope="prototype" name="shareGroup"/></variables></function><function name="dojo.widget.Editor2Toolbar.postCreate" prototype="dojo.widget.Editor2Toolbar"/><function name="dojo.widget.Editor2Toolbar.update" prototype="dojo.widget.Editor2Toolbar"><summary>update all the toolbar items</summary></function><function name="dojo.widget.Editor2Toolbar.checkAvailability" prototype="dojo.widget.Editor2Toolbar"><summary>returns whether items in this toolbar can be executed</summary><description>For unshared toolbar, when clicking on a toolbar, the corresponding editor will be focused, and this function always return true. For shared toolbar, if the current focued editor is not one of the instances sharing this toolbar, this function return false, otherwise true.</description></function><function name="dojo.widget.Editor2Toolbar.destroy" prototype="dojo.widget.Editor2Toolbar"><chains><chain type="call">dojo.widget.Editor2Toolbar.superclass.destroy</chain></chains></function><function name="dojo.widget.Editor2ToolbarItemManager.getToolbarItem"><summary>return a toobar item with the given name</summary><parameters><parameter name="name" type="String"/></parameters></function></resource><resource location="dojo.widget.FilteringTable"><requires><environment type="common"><require>dojo.date.format</require><require>dojo.collections.Store</require><require>dojo.html.*</require><require>dojo.html.util</require><require>dojo.html.style</require><require>dojo.html.selection</require><require>dojo.event.*</require><require>dojo.widget.*</require><require>dojo.widget.HtmlWidget</require></environment></requires><function name="dojo.widget.FilteringTable"><summary>A basic tabular data widget that supports sorting and filtering mechanisms.</summary><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="isContainer"/><variable name="templatePath"/><variable name="templateCssPath"/><variable name="onReset"/><variable name="_meta"/><variable name="format"/><variable name="filterer"/><variable name="noSort"/><variable name="sortType"/><variable name="dataType"/><variable name="sortFunction"/><variable name="filterFunction"/><variable name="label"/><variable name="align"/><variable name="valign"/><variable name="getField"/><variable name="getType"/><variable scope="instance" name="columns"/><variable scope="instance" name="sortInformation"/><variable scope="instance" name="isInitialized"/><variable scope="instance" name="store"/><variable scope="instance" name="valueField"/><variable scope="instance" name="multiple"/><variable scope="instance" name="maxSelect"/><variable scope="instance" name="maxSortable"/><variable scope="instance" name="minRows"/><variable scope="instance" name="defaultDateFormat"/><variable scope="instance" name="alternateRows"/><variable scope="instance" name="headClass"/><variable scope="instance" name="tbodyClass"/><variable scope="instance" name="headerClass"/><variable scope="instance" name="headerUpClass"/><variable scope="instance" name="headerDownClass"/><variable scope="instance" name="rowClass"/><variable scope="instance" name="rowAlternateClass"/><variable scope="instance" name="rowSelectedClass"/><variable scope="instance" name="columnSelected"/><variable scope="prototype" name="isContainer"/><variable scope="prototype" name="templatePath"/><variable scope="prototype" name="templateCssPath"/><variable scope="prototype" name="onReset"/><variable scope="prototype" name="_meta"/><variable scope="prototype" name="format"/><variable scope="prototype" name="filterer"/><variable scope="prototype" name="noSort"/><variable scope="prototype" name="sortType"/><variable scope="prototype" name="dataType"/><variable scope="prototype" name="sortFunction"/><variable scope="prototype" name="filterFunction"/><variable scope="prototype" name="label"/><variable scope="prototype" name="align"/><variable scope="prototype" name="valign"/><variable scope="prototype" name="getField"/><variable scope="prototype" name="getType"/></variables><description>FilteringTable is a 2D data view that supports multiple column sorting and filtering functionality. It can get its data in one of two ways: via HTML (i.e. degradable data), or from an external JSON source through widget.store.setData. Records in a FilteringTable can be selected as if it were a select list. store: dojo.collections.Store The underlying Store for all data represented by the widget. valueField: String The name of the field used as a unique key for each row, defaults to "Id". multiple: boolean Allow multiple selections. maxSelect: Integer Maximum number of rows that can be selected at once. 0 == no limit. maxSortable: Integer Maximum number of columns allowed for sorting at one time. minRows: Integer The minimum number of rows to show. Default is 0. defaultDateFormat: String The default format for a date column, as used by dojo.date.format. alternateRows: Boolean Use alternate row CSS classes to show zebra striping. headClass: String CSS Class name for the head of the table. tbodyClass: String CSS Class name for the body of the table. headerClass: String CSS Class name for headers that are not sorted. headerUpClass: String CSS Class name for headers that are for ascending sorted columns. Default is "selectedUp". headerDownClass: String CSS Class name for headers that are for descending sorted columns. Default is "selectedDown". rowClass: String CSS Class name for body rows. rowAlternateClass: String CSS Class name for alternate rows. Default is "alt". rowSelectedClass: String CSS Class name for selected rows. Default is "selected". columnSelectedClass: String CSS Class name for any columns being sorted on. Unimplemented.</description></function><function name="dojo.widget.FilteringTable.getTypeFromString" prototype="dojo.widget.FilteringTable"><returns type="function"/><summary>Gets a function based on the passed string.</summary><parameters><parameter name="s" type="string"/></parameters></function><function name="dojo.widget.FilteringTable.getByRow" prototype="dojo.widget.FilteringTable"><returns type="object"/><summary>Returns the data object based on the passed row.</summary><parameters><parameter name="row" type="HTMLTableRow"/></parameters></function><function name="dojo.widget.FilteringTable.getDataByRow" prototype="dojo.widget.FilteringTable"><returns type="object"/><summary>Returns the source data object based on the passed row.</summary><parameters><parameter name="row" type="HTMLTableRow"/></parameters></function><function name="dojo.widget.FilteringTable.getRow" prototype="dojo.widget.FilteringTable"><returns type="HTMLTableRow"/><summary>Finds the row in the table based on the passed data object.</summary><parameters><parameter name="obj" type="Object"/></parameters></function><function name="dojo.widget.FilteringTable.getColumnIndex" prototype="dojo.widget.FilteringTable"><returns type="integer"/><summary>Returns index of the column that represents the passed field path.</summary><parameters><parameter name="fieldPath" type="string"/></parameters></function><function name="dojo.widget.FilteringTable.getSelectedData" prototype="dojo.widget.FilteringTable"><returns type="mixed">all objects that are selected.</returns></function><function name="dojo.widget.FilteringTable.isSelected" prototype="dojo.widget.FilteringTable"><returns type="boolean"/><summary>Returns whether the passed object is currently selected.</summary><parameters><parameter name="obj" type="object"/></parameters></function><function name="dojo.widget.FilteringTable.isValueSelected" prototype="dojo.widget.FilteringTable"><returns type="boolean"/><summary>Returns the object represented by key "val" is selected.</summary><parameters><parameter name="val" type="string"/></parameters></function><function name="dojo.widget.FilteringTable.isIndexSelected" prototype="dojo.widget.FilteringTable"><returns type="boolean"/><summary>Returns the object represented by integer "idx" is selected.</summary><parameters><parameter name="idx" type="number"/></parameters></function><function name="dojo.widget.FilteringTable.isRowSelected" prototype="dojo.widget.FilteringTable"><returns type="boolean"/><summary>Returns if the passed row is selected.</summary><parameters><parameter name="row" type="HTMLTableRow"/></parameters></function><function name="dojo.widget.FilteringTable.reset" prototype="dojo.widget.FilteringTable"><summary>Resets the widget to its initial internal state.</summary></function><function name="dojo.widget.FilteringTable.resetSelections" prototype="dojo.widget.FilteringTable"><summary>Unselects all data objects.</summary></function><function name="dojo.widget.FilteringTable.select" prototype="dojo.widget.FilteringTable"><summary>selects the passed object.</summary><parameters><parameter name="obj" type="object"/></parameters></function><function name="dojo.widget.FilteringTable.selectByValue" prototype="dojo.widget.FilteringTable"><summary>selects the object represented by key "val".</summary><parameters><parameter name="val" type="string"/></parameters></function><function name="dojo.widget.FilteringTable.selectByIndex" prototype="dojo.widget.FilteringTable"><summary>selects the object represented at index "idx".</summary><parameters><parameter name="idx" type="number"/></parameters></function><function name="dojo.widget.FilteringTable.selectByRow" prototype="dojo.widget.FilteringTable"><summary>selects the object represented by HTMLTableRow row.</summary><parameters><parameter name="row" type="HTMLTableRow"/></parameters></function><function name="dojo.widget.FilteringTable.selectAll" prototype="dojo.widget.FilteringTable"><summary>selects all objects.</summary></function><function name="dojo.widget.FilteringTable.onDataSelect" prototype="dojo.widget.FilteringTable"><summary>Stub for onDataSelect event.</summary><parameters><parameter name="obj" type="object"/></parameters></function><function name="dojo.widget.FilteringTable.toggleSelection" prototype="dojo.widget.FilteringTable"><summary>Flips the selection state of passed obj.</summary><parameters><parameter name="obj" type="object"/></parameters></function><function name="dojo.widget.FilteringTable.toggleSelectionByValue" prototype="dojo.widget.FilteringTable"><summary>Flips the selection state of object represented by val.</summary><parameters><parameter name="val" type="string"/></parameters></function><function name="dojo.widget.FilteringTable.toggleSelectionByIndex" prototype="dojo.widget.FilteringTable"><summary>Flips the selection state of object at index idx.</summary><parameters><parameter name="idx" type="number"/></parameters></function><function name="dojo.widget.FilteringTable.toggleSelectionByRow" prototype="dojo.widget.FilteringTable"><summary>Flips the selection state of object represented by row.</summary><parameters><parameter name="row" type="HTMLTableRow"/></parameters></function><function name="dojo.widget.FilteringTable.toggleAll" prototype="dojo.widget.FilteringTable"><summary>Flips the selection state of all objects.</summary></function><function name="dojo.widget.FilteringTable.onDataToggle" prototype="dojo.widget.FilteringTable"><summary>Stub for onDataToggle event.</summary><parameters><parameter name="obj" type="object"/></parameters></function></resource><resource location="dojo.widget.FisheyeList"><requires><environment type="common"><require>dojo.widget.*</require><require>dojo.widget.HtmlWidget</require><require>dojo.html.style</require><require>dojo.html.selection</require><require>dojo.html.util</require><require>dojo.event.*</require></environment></requires><function name="dojo.widget.FisheyeList"><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="templateString"/><variable name="templateCssPath"/><variable name="isContainer"/><variable name="snarfChildDomOutput"/><variable name="itemWidth"/><variable name="itemHeight"/><variable name="itemMaxWidth"/><variable name="itemMaxHeight"/><variable name="orientation"/><variable name="conservativeTrigger"/><variable name="effectUnits"/><variable name="itemPadding" type="Integer">padding (in pixels) betweeen each menu item</variable><variable name="attachEdge"/><variable name="labelEdge"/><variable name="enableCrappySvgSupport"/><variable scope="instance" name="isHorizontal"/><variable scope="instance" name="selectedNode"/><variable scope="instance" name="isOver"/><variable scope="instance" name="hitX1"/><variable scope="instance" name="hitY1"/><variable scope="instance" name="hitX2"/><variable scope="instance" name="hitY2"/><variable scope="instance" name="anchorEdge"/><variable scope="instance" name="labelEdge"/><variable scope="instance" name="proximityLeft"/><variable scope="instance" name="proximityRight"/><variable scope="instance" name="proximityTop"/><variable scope="instance" name="proximityBottom"/><variable scope="instance" name="itemCount"/><variable scope="instance" name="barWidth"/><variable scope="instance" name="barHeight"/><variable scope="instance" name="totalWidth"/><variable scope="instance" name="totalHeight"/><variable scope="instance" name="domNode.style.width"/><variable scope="instance" name="domNode.style.height"/><variable scope="instance" name="timerScale"/><variable scope="instance" name="pos"/><variable scope="instance" name="EDGE"/><variable scope="prototype" name="templateString"/><variable scope="prototype" name="templateCssPath"/><variable scope="prototype" name="isContainer"/><variable scope="prototype" name="snarfChildDomOutput"/><variable scope="prototype" name="itemWidth"/><variable scope="prototype" name="itemHeight"/><variable scope="prototype" name="itemMaxWidth"/><variable scope="prototype" name="itemMaxHeight"/><variable scope="prototype" name="orientation"/><variable scope="prototype" name="conservativeTrigger"/><variable scope="prototype" name="effectUnits"/><variable scope="prototype" name="itemPadding">padding (in pixels) betweeen each menu item</variable><variable scope="prototype" name="attachEdge"/><variable scope="prototype" name="labelEdge"/><variable scope="prototype" name="enableCrappySvgSupport"/></variables></function><function name="dojo.widget.FisheyeList.fillInTemplate" prototype="dojo.widget.FisheyeList"/><function name="dojo.widget.FisheyeList.postCreate" prototype="dojo.widget.FisheyeList"/><function name="dojo.widget.FisheyeList._initializePositioning" prototype="dojo.widget.FisheyeList"/><function name="dojo.widget.FisheyeList._onBodyOut" prototype="dojo.widget.FisheyeList"><parameters><parameter name="e" type="Event"/></parameters></function><function name="dojo.widget.FisheyeList._setDormant" prototype="dojo.widget.FisheyeList"><returns type="already dormant?"/><summary>called when mouse moves out of menu's range</summary><parameters><parameter name="e" type="Event"/></parameters></function><function name="dojo.widget.FisheyeList._setActive" prototype="dojo.widget.FisheyeList"><returns type="already activated?"/><summary>called when mouse is moved into menu's range</summary><parameters><parameter name="e" type="Event"/></parameters></function><function name="dojo.widget.FisheyeList._onMouseMove" prototype="dojo.widget.FisheyeList"><summary>called when mouse is moved</summary><parameters><parameter name="e" type="Event"/></parameters></function><function name="dojo.widget.FisheyeList.onResized" prototype="dojo.widget.FisheyeList"/><function name="dojo.widget.FisheyeList._onGridMouseMove" prototype="dojo.widget.FisheyeList"><summary>called when mouse is moved in the vicinity of the menu</summary><parameters><parameter name="x"/><parameter name="y"/></parameters></function><function name="dojo.widget.FisheyeList._paint" prototype="dojo.widget.FisheyeList"/><function name="dojo.widget.FisheyeList._weighAt" prototype="dojo.widget.FisheyeList"><returns type="Integer"/><parameters><parameter name="cen" type="Integer"/><parameter name="i" type="Integer"/></parameters></function><function name="dojo.widget.FisheyeList._setItemSize" prototype="dojo.widget.FisheyeList"><parameters><parameter name="p"/><parameter name="scale"/></parameters></function><function name="dojo.widget.FisheyeList._positionElementsFrom" prototype="dojo.widget.FisheyeList"><parameters><parameter name="p"/><parameter name="offset"/></parameters></function><function name="dojo.widget.FisheyeList._positionLabel" prototype="dojo.widget.FisheyeList"><parameters><parameter name="itm"/></parameters></function><function name="dojo.widget.FisheyeList._calcHitGrid" prototype="dojo.widget.FisheyeList"/><function name="dojo.widget.FisheyeList._toEdge" prototype="dojo.widget.FisheyeList"><parameters><parameter name="inp"/><parameter name="def"/></parameters></function><function name="dojo.widget.FisheyeList._expandSlowly" prototype="dojo.widget.FisheyeList"><summary>slowly expand the image to user specified max size</summary></function><function name="dojo.widget.FisheyeList.destroy" prototype="dojo.widget.FisheyeList"><chains><chain type="call">dojo.widget.FisheyeList.superclass.destroy</chain></chains></function><function name="dojo.widget.FisheyeListItem"><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="iconSrc" type="String">pathname to image file (jpg, gif, png, etc.) of icon for this menu item</variable><variable name="svgSrc"/><variable name="caption" type="String">label to print next to the icon, when it is moused-over</variable><variable name="id"/><variable name="_blankImgPath"/><variable name="templateString"/><variable scope="instance" name="svgNode"/><variable scope="instance" name="imgNode.style.display"/><variable scope="instance" name="imgNode.style.filter"/><variable scope="instance" name="imgNode.src"/><variable scope="instance" name="svgRoot"/><variable scope="instance" name="svgDoc"/><variable scope="instance" name="zeroWidth"/><variable scope="instance" name="zeroHeight"/><variable scope="instance" name="loaded"/><variable scope="instance" name="setWidth"/><variable scope="instance" name="setHeight"/><variable scope="instance" name="setSizeOnLoad"/><variable scope="instance" name="style.width"/><variable scope="instance" name="style.height"/><variable scope="instance" name="svgRoot.width.baseVal.value"/><variable scope="instance" name="svgRoot.height.baseVal.value"/><variable scope="prototype" name="iconSrc">pathname to image file (jpg, gif, png, etc.) of icon for this menu item</variable><variable scope="prototype" name="svgSrc"/><variable scope="prototype" name="caption">label to print next to the icon, when it is moused-over</variable><variable scope="prototype" name="id"/><variable scope="prototype" name="_blankImgPath"/><variable scope="prototype" name="templateString"/></variables></function><function name="dojo.widget.FisheyeListItem.fillInTemplate" prototype="dojo.widget.FisheyeListItem"/><function name="dojo.widget.FisheyeListItem._createSvgNode" prototype="dojo.widget.FisheyeListItem"><parameters><parameter name="src"/></parameters></function><function name="dojo.widget.FisheyeListItem.onMouseOver" prototype="dojo.widget.FisheyeListItem"><summary>callback when user moves mouse over this menu item in conservative mode, don't activate the menu until user mouses over an icon</summary><parameters><parameter name="e" type="Event"/></parameters></function><function name="dojo.widget.FisheyeListItem.onMouseOut" prototype="dojo.widget.FisheyeListItem"><summary>callback when user moves mouse off of this menu item</summary><parameters><parameter name="e" type="Event"/></parameters></function><function name="dojo.widget.FisheyeListItem.onClick" prototype="dojo.widget.FisheyeListItem"><summary>user overridable callback when user clicks this menu item</summary><parameters><parameter name="e" type="Event"/></parameters></function></resource><resource location="dojo.widget.FloatingPane"><requires><environment type="common"><require>dojo.widget.*</require><require>dojo.widget.Manager</require><require>dojo.html.*</require><require>dojo.html.layout</require><require>dojo.html.iframe</require><require>dojo.html.selection</require><require>dojo.lfx.shadow</require><require>dojo.widget.html.layout</require><require>dojo.widget.ContentPane</require><require>dojo.dnd.HtmlDragMove</require><require>dojo.widget.Dialog</require><require>dojo.widget.ResizeHandle</require></environment></requires><function name="dojo.widget.FloatingPane.fillInTemplate" prototype="dojo.widget.FloatingPane"><parameters><parameter name="args"/><parameter name="frag"/></parameters><chains><chain type="call">dojo.widget.FloatingPane.superclass.fillInTemplate</chain></chains></function><function name="dojo.widget.FloatingPane.postCreate" prototype="dojo.widget.FloatingPane"><chains><chain type="call">dojo.widget.FloatingPaneBase.prototype.postCreate</chain><chain type="call">dojo.widget.FloatingPane.superclass.postCreate</chain></chains></function><function name="dojo.widget.FloatingPane.show" prototype="dojo.widget.FloatingPane"><chains><chain type="call">dojo.widget.FloatingPane.superclass.show</chain></chains></function><function name="dojo.widget.FloatingPane.onShow" prototype="dojo.widget.FloatingPane"><chains><chain type="call">dojo.widget.FloatingPane.superclass.onShow</chain></chains></function><function name="dojo.widget.FloatingPane.destroy" prototype="dojo.widget.FloatingPane"><chains><chain type="call">dojo.widget.FloatingPane.superclass.destroy</chain></chains></function><function name="dojo.widget.FloatingPane"><summary>A non-modal floating window. Attaches to a Taskbar which has an icon for each window. Must specify size (like style="width: 500px; height: 500px;"),</summary></function><function name="dojo.widget.ModalFloatingPane"><summary>A modal floating window. This widget is similar to the Dialog widget, but the window, unlike the Dialog, can be moved. Must specify size (like style="width: 500px; height: 500px;"),</summary><variables><variable name="windowState"/><variable name="displayCloseAction"/><variable scope="instance" name="bg.style.zIndex"/><variable scope="prototype" name="windowState"/><variable scope="prototype" name="displayCloseAction"/></variables></function><function name="dojo.widget.ModalFloatingPane.postCreate" prototype="dojo.widget.ModalFloatingPane"><chains><chain type="call">dojo.widget.ModalDialogBase.prototype.postCreate</chain><chain type="call">dojo.widget.ModalFloatingPane.superclass.postCreate</chain></chains></function><function name="dojo.widget.ModalFloatingPane.show" prototype="dojo.widget.ModalFloatingPane"><chains><chain type="call">dojo.widget.ModalFloatingPane.superclass.show</chain></chains></function><function name="dojo.widget.ModalFloatingPane.hide" prototype="dojo.widget.ModalFloatingPane"><chains><chain type="call">dojo.widget.ModalFloatingPane.superclass.hide</chain></chains></function><function name="dojo.widget.ModalFloatingPane.closeWindow" prototype="dojo.widget.ModalFloatingPane"><chains><chain type="call">dojo.widget.ModalFloatingPane.superclass.closeWindow</chain></chains></function></resource><resource location="dojo.widget.Form"><requires><environment type="common"><require>dojo.widget.*</require><require>dojo.widget.HtmlWidget</require></environment></requires><function name="dojo.widget.Form"><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="isContainer"/><variable name="templateString"/><variable name="formElements"/><variable name="ignoreNullValues"/><variable scope="instance" name="formElements"/><variable scope="prototype" name="isContainer"/><variable scope="prototype" name="templateString"/><variable scope="prototype" name="formElements"/><variable scope="prototype" name="ignoreNullValues"/></variables></function><function name="dojo.widget.Form.postCreate" prototype="dojo.widget.Form"><parameters><parameter name="args"/><parameter name="frag"/></parameters></function><function name="dojo.widget.Form._createRepeaters" prototype="dojo.widget.Form"><parameters><parameter name="obj" type="object"/><parameter name="widget" type="widget"/></parameters></function><function name="dojo.widget.Form._createFormElements" prototype="dojo.widget.Form"/><function name="dojo.widget.Form.onSubmit" prototype="dojo.widget.Form"><parameters><parameter name="e" type="event"/></parameters></function><function name="dojo.widget.Form.submit" prototype="dojo.widget.Form"/><function name="dojo.widget.Form._getFormElement" prototype="dojo.widget.Form"><parameters><parameter name="name" type="form elements name"/></parameters></function><function name="dojo.widget.Form._getObject" prototype="dojo.widget.Form"><parameters><parameter name="obj" type="object"/><parameter name="searchString" type="string"/></parameters></function><function name="dojo.widget.Form._setToContainers" prototype="dojo.widget.Form"><parameters><parameter name="obj" type="object"/><parameter name="widget" type="widget"/></parameters></function><function name="dojo.widget.Form.setValues" prototype="dojo.widget.Form"><parameters><parameter name="obj" type="object"/></parameters></function><function name="dojo.widget.Form.getValues" prototype="dojo.widget.Form"/></resource><resource location="dojo.widget.GoogleMap"><requires><environment type="common"><require>dojo.event.*</require><require>dojo.math</require><require>dojo.widget.*</require><require>dojo.uri.Uri</require><require>dojo.widget.HtmlWidget</require></environment></requires><function name="dojo.widget.GoogleMap"><summary>A widget that wraps the Google Map API.</summary><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="templatePath"/><variable name="templateCssPath"/><variable name="isContainer"/><variable name="_defaultPoint"/><variable name="lng"/><variable scope="instance" name="map"/><variable scope="instance" name="geocoder"/><variable scope="instance" name="data"/><variable scope="instance" name="datasrc"/><variable scope="instance" name="controls"/><variable scope="prototype" name="templatePath"/><variable scope="prototype" name="templateCssPath"/><variable scope="prototype" name="isContainer"/><variable scope="prototype" name="_defaultPoint"/><variable scope="prototype" name="lng"/></variables><description>Implements and wraps the Google Map API so that you can easily create and include Google Maps in your Dojo application. Will parse an included table for point information, but also exposes the underlying map via the map property. map: GMap2 The actual Google Map object. geocoder: GClientGeocoder A reference to the Google Geocoder object, for getting points for addresses. data: Object[] Array of generated points plotted on the map datasrc: String Reference to external (to the widget) source for points to plot on the map. controls: String[] List of controls to plot on the map; shortened names correspond to Google Controls.</description></function></resource><resource location="dojo.widget.HslColorPicker"><requires><environment type="common"><require>dojo.widget.*</require><require>dojo.widget.HtmlWidget</require><require>dojo.widget.HslColorPicker</require><require>dojo.math</require><require>dojo.svg</require><require>dojo.gfx.color</require><require>dojo.gfx.color.hsl</require><require>dojo.experimental</require></environment></requires><function name="dojo.widget.svg.HslColorPicker"><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="hue"/><variable name="saturation"/><variable name="light"/><variable name="storedColor"/><variable name="templatePath"/><variable scope="instance" name="height"/><variable scope="instance" name="svgDoc"/><variable scope="instance" name="leftGradientColorNode"/><variable scope="instance" name="rightGradientColorNode"/><variable scope="instance" name="hue"/><variable scope="instance" name="saturation"/><variable scope="instance" name="light"/><variable scope="instance" name="leftGradientStopColor"/><variable scope="instance" name="rightGradientStopColor"/><variable scope="instance" name="storedColor"/><variable scope="instance" name="rgb"/><variable scope="instance" name="filterObject"/><variable scope="prototype" name="hue"/><variable scope="prototype" name="saturation"/><variable scope="prototype" name="light"/><variable scope="prototype" name="storedColor"/><variable scope="prototype" name="templatePath"/></variables></function><function name="dojo.widget.svg.HslColorPicker.fillInTemplate" prototype="dojo.widget.svg.HslColorPicker"/><function name="dojo.widget.svg.HslColorPicker.setSaturationStopColors" prototype="dojo.widget.svg.HslColorPicker"/><function name="dojo.widget.svg.HslColorPicker.setHue" prototype="dojo.widget.svg.HslColorPicker"><parameters><parameter name="hue"/></parameters></function><function name="dojo.widget.svg.HslColorPicker.setHueSlider" prototype="dojo.widget.svg.HslColorPicker"/><function name="dojo.widget.svg.HslColorPicker.setSaturationLight" prototype="dojo.widget.svg.HslColorPicker"><parameters><parameter name="saturation"/><parameter name="light"/></parameters></function><function name="dojo.widget.svg.HslColorPicker.setSaturationLightSlider" prototype="dojo.widget.svg.HslColorPicker"/><function name="dojo.widget.svg.HslColorPicker.onHueClick" prototype="dojo.widget.svg.HslColorPicker"><parameters><parameter name="evt"/></parameters></function><function name="dojo.widget.svg.HslColorPicker.onHueDrag" prototype="dojo.widget.svg.HslColorPicker"><parameters><parameter name="evt"/></parameters></function><function name="dojo.widget.svg.HslColorPicker.onSaturationLightClick" prototype="dojo.widget.svg.HslColorPicker"><parameters><parameter name="evt"/></parameters></function><function name="dojo.widget.svg.HslColorPicker.onSaturationLightDrag" prototype="dojo.widget.svg.HslColorPicker"><parameters><parameter name="evt"/></parameters></function><function name="dojo.widget.svg.HslColorPicker.getStoredColor" prototype="dojo.widget.svg.HslColorPicker"/><function name="dojo.widget.svg.HslColorPicker.setStoredColor" prototype="dojo.widget.svg.HslColorPicker"><parameters><parameter name="rgbHexColor"/></parameters></function><function name="dojo.widget.svg.HslColorPicker.hsl2rgb" prototype="dojo.widget.svg.HslColorPicker"><parameters><parameter name="hue"/><parameter name="saturation"/><parameter name="light"/></parameters></function></resource><resource location="dojo.widget.HtmlWidget"><requires><environment type="common"><require>dojo.widget.DomWidget</require><require>dojo.html.util</require><require>dojo.html.display</require><require>dojo.html.layout</require><require>dojo.lang.extras</require><require>dojo.lang.func</require><require>dojo.lfx.toggle</require></environment></requires><function name="dojo.widget.HtmlWidget"><chains><chain type="call">dojo.widget.DomWidget</chain><chain type="prototype">dojo.widget.DomWidget</chain></chains></function></resource><resource location="dojo.widget.InlineEditBox"><requires><environment type="common"><require>dojo.widget.*</require><require>dojo.event.*</require><require>dojo.lfx.*</require><require>dojo.gfx.color</require><require>dojo.string</require><require>dojo.html.*</require><require>dojo.html.layout</require></environment></requires><function name="dojo.widget.InlineEditBox"><summary>Given node is displayed as-is (for example, an &lt;h1 dojoType="InlineEditBox"&gt; is displayed as an &lt;h1&gt;, but when you click on it, it turns into an &lt;input&gt; or &lt;textarea&gt;, and the user can edit the value.</summary><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="templatePath"/><variable name="templateCssPath"/><variable name="mode"/><variable name="name" type="String">This is passed as the third argument to onSave().</variable><variable name="minWidth"/><variable name="minHeight"/><variable name="editing"/><variable name="value"/><variable name="textValue"/><variable name="defaultText"/><variable scope="instance" name="value"/><variable scope="instance" name="editable"/><variable scope="instance" name="editable.innerHTML"/><variable scope="instance" name="mode"/><variable scope="instance" name="editing"/><variable scope="instance" name="form.style.display"/><variable scope="instance" name="editable.style.display"/><variable scope="instance" name="submitButton.disabled"/><variable scope="instance" name="doFade"/><variable scope="instance" name="cancelButton.disabled"/><variable scope="instance" name="history"/><variable scope="prototype" name="templatePath"/><variable scope="prototype" name="templateCssPath"/><variable scope="prototype" name="mode"/><variable scope="prototype" name="name">This is passed as the third argument to onSave().</variable><variable scope="prototype" name="minWidth"/><variable scope="prototype" name="minHeight"/><variable scope="prototype" name="editing"/><variable scope="prototype" name="value"/><variable scope="prototype" name="textValue"/><variable scope="prototype" name="defaultText"/></variables></function><function name="dojo.widget.InlineEditBox.postMixInProperties" prototype="dojo.widget.InlineEditBox"/><function name="dojo.widget.InlineEditBox.onSave" prototype="dojo.widget.InlineEditBox"><summary>Callback for when value is changed.</summary><parameters><parameter name="newValue"/><parameter name="oldValue"/><parameter name="name"/></parameters></function><function name="dojo.widget.InlineEditBox.onUndo" prototype="dojo.widget.InlineEditBox"><summary>Callback for when editing is aborted (value reverts to pre-edit value).</summary><parameters><parameter name="value"/></parameters></function><function name="dojo.widget.InlineEditBox.postCreate" prototype="dojo.widget.InlineEditBox"><parameters><parameter name="args"/><parameter name="frag"/></parameters></function><function name="dojo.widget.InlineEditBox.onMouseOver" prototype="dojo.widget.InlineEditBox"/><function name="dojo.widget.InlineEditBox.onMouseOut" prototype="dojo.widget.InlineEditBox"/><function name="dojo.widget.InlineEditBox._beginEdit" prototype="dojo.widget.InlineEditBox"><summary>When user clicks the text, then start editing. Hide the text and display the form instead.</summary><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.InlineEditBox.saveEdit" prototype="dojo.widget.InlineEditBox"><summary>Callback when user presses "Save" button</summary><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.InlineEditBox.cancelEdit" prototype="dojo.widget.InlineEditBox"><summary>Callback when user presses "Cancel" button</summary><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.InlineEditBox._finishEdit" prototype="dojo.widget.InlineEditBox"><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.InlineEditBox.setText" prototype="dojo.widget.InlineEditBox"><parameters><parameter name="txt"/></parameters></function><function name="dojo.widget.InlineEditBox.setValue" prototype="dojo.widget.InlineEditBox"><parameters><parameter name="txt" type="String"/></parameters></function><function name="dojo.widget.InlineEditBox.undo" prototype="dojo.widget.InlineEditBox"><summary>Revert to previous value in history list.</summary></function><function name="dojo.widget.InlineEditBox.checkForValueChange" prototype="dojo.widget.InlineEditBox"><summary>Callback when user changes input value. Enable save button if the text value is different than the original value.</summary></function><function name="dojo.widget.InlineEditBox.disable" prototype="dojo.widget.InlineEditBox"><chains><chain type="call">dojo.widget.InlineEditBox.superclass.disable</chain></chains></function><function name="dojo.widget.InlineEditBox.enable" prototype="dojo.widget.InlineEditBox"><chains><chain type="call">dojo.widget.InlineEditBox.superclass.enable</chain></chains></function></resource><resource location="dojo.widget.IntegerTextbox"><requires><environment type="common"><require>dojo.widget.ValidationTextbox</require><require>dojo.validate.common</require></environment></requires><function name="dojo.widget.IntegerTextbox"><summary>A subclass of ValidationTextbox. Over-rides isValid/isInRange to test for integer input.</summary><chains><chain type="call">dojo.widget.ValidationTextbox</chain><chain type="prototype">dojo.widget.ValidationTextbox</chain></chains><variables><variable name="signed" type="String">The leading plus-or-minus sign. Can be true or false, default is either.</variable><variable name="separator" type="The">character used as the thousands separator. Default is no separator.</variable><variable name="min" type="Number">Minimum signed value. Default is -Infinity</variable><variable name="max" type="Number">Maximum signed value. Default is +Infinity</variable><variable scope="instance" name="flags.signed"/><variable scope="instance" name="flags.min"/><variable scope="instance" name="flags.separator"/><variable scope="instance" name="flags.max"/><variable scope="prototype" name="signed">The leading plus-or-minus sign. Can be true or false, default is either.</variable><variable scope="prototype" name="separator">character used as the thousands separator. Default is no separator.</variable><variable scope="prototype" name="min">Minimum signed value. Default is -Infinity</variable><variable scope="prototype" name="max">Maximum signed value. Default is +Infinity</variable></variables></function><function name="dojo.widget.IntegerTextbox.mixInProperties" prototype="dojo.widget.IntegerTextbox"><parameters><parameter name="localProperties"/><parameter name="frag"/></parameters><chains><chain type="call">dojo.widget.IntegerTextbox.superclass.mixInProperties</chain></chains></function><function name="dojo.widget.IntegerTextbox.isValid" prototype="dojo.widget.IntegerTextbox"><summary>Over-ride for integer validation</summary></function><function name="dojo.widget.IntegerTextbox.isInRange" prototype="dojo.widget.IntegerTextbox"><summary>Over-ride for integer validation</summary></function></resource><resource location="dojo.widget.InternetTextbox"><requires><environment type="common"><require>dojo.widget.ValidationTextbox</require><require>dojo.validate.web</require></environment></requires><function name="dojo.widget.IpAddressTextbox"><summary>A Textbox which tests for a valid IP address</summary><chains><chain type="call">dojo.widget.ValidationTextbox</chain><chain type="prototype">dojo.widget.ValidationTextbox</chain></chains><variables><variable scope="instance" name="flags.allowDottedDecimal"/><variable scope="instance" name="flags.allowDottedHex"/><variable scope="instance" name="flags.allowDottedOctal"/><variable scope="instance" name="flags.allowDecimal"/><variable scope="instance" name="flags.allowHex"/><variable scope="instance" name="flags.allowIPv6"/><variable scope="instance" name="flags.allowHybrid"/></variables><description>Can specify formats for ipv4 or ipv6 as attributes in the markup.</description></function><function name="dojo.widget.IpAddressTextbox.mixInProperties" prototype="dojo.widget.IpAddressTextbox"><summary>see dojo.widget.Widget</summary><parameters><parameter name="localProperties" type="Object"/></parameters><chains><chain type="call">dojo.widget.IpAddressTextbox.superclass.mixInProperties</chain></chains></function><function name="dojo.widget.IpAddressTextbox.isValid" prototype="dojo.widget.IpAddressTextbox"><summary>see dojo.widget.ValidationTextbox</summary></function><function name="dojo.widget.UrlTextbox"><summary>A Textbox which tests for a valid URL</summary><chains><chain type="call">dojo.widget.IpAddressTextbox</chain><chain type="prototype">dojo.widget.IpAddressTextbox</chain></chains><variables><variable scope="instance" name="flags.scheme"/><variable scope="instance" name="flags.allowIP"/><variable scope="instance" name="flags.allowLocal"/><variable scope="instance" name="flags.allowCC"/><variable scope="instance" name="flags.allowGeneric"/></variables></function><function name="dojo.widget.UrlTextbox.mixInProperties" prototype="dojo.widget.UrlTextbox"><summary>see dojo.widget.Widget</summary><parameters><parameter name="localProperties" type="Object"/></parameters><chains><chain type="call">dojo.widget.UrlTextbox.superclass.mixInProperties</chain></chains></function><function name="dojo.widget.UrlTextbox.isValid" prototype="dojo.widget.UrlTextbox"><summary>see dojo.widget.ValidationTextbox</summary></function><function name="dojo.widget.EmailTextbox"><summary>A Textbox which tests for a valid email address</summary><chains><chain type="call">dojo.widget.UrlTextbox</chain><chain type="prototype">dojo.widget.UrlTextbox</chain></chains><variables><variable scope="instance" name="flags.allowCruft"/></variables><description>Can use all markup attributes/properties of UrlTextbox except scheme.</description></function><function name="dojo.widget.EmailTextbox.mixInProperties" prototype="dojo.widget.EmailTextbox"><summary>see dojo.widget.Widget</summary><parameters><parameter name="localProperties" type="Object"/></parameters><chains><chain type="call">dojo.widget.EmailTextbox.superclass.mixInProperties</chain></chains></function><function name="dojo.widget.EmailTextbox.isValid" prototype="dojo.widget.EmailTextbox"><summary>see dojo.widget.ValidationTextbox</summary></function><function name="dojo.widget.EmailListTextbox"><summary>A Textbox which tests for a list of valid email addresses listSeparator: String The character used to separate email addresses. Default is ";", ",", "\n" or " "</summary><chains><chain type="call">dojo.widget.EmailTextbox</chain><chain type="prototype">dojo.widget.EmailTextbox</chain></chains><variables><variable scope="instance" name="flags.listSeparator"/></variables></function><function name="dojo.widget.EmailListTextbox.mixInProperties" prototype="dojo.widget.EmailListTextbox"><summary>see dojo.widget.Widget</summary><parameters><parameter name="localProperties" type="Object"/></parameters><chains><chain type="call">dojo.widget.EmailListTextbox.superclass.mixInProperties</chain></chains></function><function name="dojo.widget.EmailListTextbox.isValid" prototype="dojo.widget.EmailListTextbox"><summary>see dojo.widget.ValidationTextbox</summary></function></resource><resource location="dojo.widget.LayoutContainer"><requires><environment type="common"><require>dojo.widget.*</require><require>dojo.widget.html.layout</require></environment></requires><function name="dojo.widget.LayoutContainer"><summary>Provides Delphi-style panel layout semantics. details A LayoutContainer is a box with a specified size (like style="width: 500px; height: 500px;"), that contains children widgets marked with "layoutAlign" of "left", "right", "bottom", "top", and "client". It takes it's children marked as left/top/bottom/right, and lays them out along the edges of the box, and then it takes the child marked "client" and puts it into the remaining space in the middle. Left/right positioning is similar to CSS's "float: left" and "float: right", and top/bottom positioning would be similar to "float: top" and "float: bottom", if there were such CSS. Note that there can only be one client element, but there can be multiple left, right, top, or bottom elements. usage &lt;style&gt; html, body{ height: 100%; width: 100%; } &lt;/style&gt; &lt;div dojoType="LayoutContainer" style="width: 100%; height: 100%"&gt; &lt;div dojoType="ContentPane" layoutAlign="top"&gt;header text&lt;/div&gt; &lt;div dojoType="ContentPane" layoutAlign="left" style="width: 200px;"&gt;table of contents&lt;/div&gt; &lt;div dojoType="ContentPane" layoutAlign="client"&gt;client area&lt;/div&gt; &lt;/div&gt;</summary><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="isContainer"/><variable name="layoutChildPriority"/><variable scope="instance" name="domNode.style.display"/><variable scope="instance" name="domNode.style.visibility"/><variable scope="prototype" name="isContainer"/><variable scope="prototype" name="layoutChildPriority"/></variables></function><function name="dojo.widget.LayoutContainer.postCreate" prototype="dojo.widget.LayoutContainer"/><function name="dojo.widget.LayoutContainer.addChild" prototype="dojo.widget.LayoutContainer"><parameters><parameter name="child"/><parameter name="overrideContainerNode"/><parameter name="pos"/><parameter name="ref"/><parameter name="insertIndex"/></parameters><chains><chain type="call">dojo.widget.LayoutContainer.superclass.addChild</chain></chains></function><function name="dojo.widget.LayoutContainer.removeChild" prototype="dojo.widget.LayoutContainer"><parameters><parameter name="pane"/></parameters><chains><chain type="call">dojo.widget.LayoutContainer.superclass.removeChild</chain></chains></function><function name="dojo.widget.LayoutContainer.onResized" prototype="dojo.widget.LayoutContainer"/><function name="dojo.widget.LayoutContainer.show" prototype="dojo.widget.LayoutContainer"><chains><chain type="call">dojo.widget.LayoutContainer.superclass.show</chain></chains></function><function name="dojo.widget.Widget"><variables><variable scope="prototype" name="layoutAlign"/></variables></function></resource><resource location="dojo.widget.LinkPane"><requires><environment type="common"><require>dojo.widget.*</require><require>dojo.widget.ContentPane</require><require>dojo.html.style</require></environment></requires><function name="dojo.widget.LinkPane"><summary>LinkPane is just a ContentPane that loads data remotely (via the href attribute), and has markup similar to an anchor. The anchor's body (the words between &lt;a&gt; and &lt;/a&gt;) become the label of the widget (used for TabContainer, AccordionContainer, etc.) usage &lt;a href="foo.html"&gt;my label&lt;/a&gt;</summary><chains><chain type="call">dojo.widget.ContentPane</chain><chain type="prototype">dojo.widget.ContentPane</chain></chains><variables><variable name="templateString"/><variable scope="prototype" name="templateString"/></variables></function><function name="dojo.widget.LinkPane.fillInTemplate" prototype="dojo.widget.LinkPane"><parameters><parameter name="args"/><parameter name="frag"/></parameters></function></resource><resource location="dojo.widget.Manager"><requires><environment type="common"><require>dojo.lang.array</require><require>dojo.lang.func</require><require>dojo.event.*</require></environment></requires><function name="dojo.widget.manager" initialized="true"><returns type="duplicate event"/><variables><variable scope="instance" name="widgets"/><variable scope="instance" name="widgetIds"/><variable scope="instance" name="topWidgets"/><variable scope="instance" name="getUniqueId"/><variable scope="instance" name="add"/><variable scope="instance" name="destroyAll"/><variable scope="instance" name="remove"/><variable scope="instance" name="removeById"/><variable scope="instance" name="getWidgetById"/><variable scope="instance" name="getWidgetsByType"/><variable scope="instance" name="getWidgetsByFilter"/><variable scope="instance" name="getAllWidgets"/><variable scope="instance" name="getWidgetByNode"/><variable scope="instance" name="byId"/><variable scope="instance" name="byType"/><variable scope="instance" name="byFilter"/><variable scope="instance" name="byNode"/><variable scope="instance" name="registerWidgetPackage"/><variable scope="instance" name="getWidgetPackageList"/><variable scope="instance" name="getImplementation"/><variable scope="instance" name="getImplementationName"/><variable scope="instance" name="resizing"/><variable scope="instance" name="onWindowResized"/></variables></function><function name="dojo.widget.manager.getUniqueId" instance="dojo.widget.manager"><parameters><parameter name="widgetType"/></parameters></function><function name="dojo.widget.manager.add" instance="dojo.widget.manager"><parameters><parameter name="widget"/></parameters></function><function name="dojo.widget.manager.destroyAll" instance="dojo.widget.manager"/><function name="dojo.widget.manager.remove" instance="dojo.widget.manager"><parameters><parameter name="widgetIndex"/></parameters></function><function name="dojo.widget.manager.removeById" instance="dojo.widget.manager"><parameters><parameter name="id"/></parameters></function><function name="dojo.widget.manager.getWidgetById" instance="dojo.widget.manager"><parameters><parameter name="id"/></parameters></function><function name="dojo.widget.manager.getWidgetsByType" instance="dojo.widget.manager"><parameters><parameter name="type"/></parameters></function><function name="dojo.widget.manager.getWidgetsByFilter" instance="dojo.widget.manager"><parameters><parameter name="unaryFunc"/><parameter name="onlyOne"/></parameters></function><function name="dojo.widget.manager.getAllWidgets" instance="dojo.widget.manager"/><function name="dojo.widget.manager.getWidgetByNode" instance="dojo.widget.manager"><parameters><parameter name="node" type="DOMNode"/></parameters></function><function name="dojo.widget.manager.registerWidgetPackage" instance="dojo.widget.manager"><parameters><parameter name="pname"/></parameters></function><function name="dojo.widget.manager.getWidgetPackageList" instance="dojo.widget.manager"/><function name="dojo.widget.manager.getImplementation" instance="dojo.widget.manager"><parameters><parameter name="widgetName"/><parameter name="ctorObject"/><parameter name="mixins"/><parameter name="ns"/></parameters></function><function name="dojo.widget.manager.getImplementationName" instance="dojo.widget.manager"><parameters><parameter name="widgetName"/><parameter name="ns"/></parameters></function><function name="dojo.widget.manager.onWindowResized" instance="dojo.widget.manager"><returns type="duplicate event"/></function><function name="g"><parameters><parameter name="oldName"/><parameter name="newName"/></parameters></function><function name="dw.all"><parameters><parameter name="n"/></parameters><chains><chain type="call">dwm.getAllWidgets</chain></chains></function></resource><resource location="dojo.widget.Menu2"><requires><environment type="common"><require>dojo.widget.PopupContainer</require></environment></requires><function name="dojo.widget.PopupMenu2"><summary>provides a menu that can be used as a context menu (typically shown by right-click), or as the drop down on a DropDownButton, ComboButton, etc.</summary><chains><chain type="call">dojo.widget.PopupContainer</chain><chain type="prototype">dojo.widget.PopupContainer</chain></chains><variables><variable name="snarfChildDomOutput"/><variable name="eventNaming"/><variable name="templateString"/><variable name="templateCssPath"/><variable name="templateCssString"/><variable name="submenuDelay"/><variable name="submenuOverlap" type="Integer">a submenu usually appears to the right, but slightly overlapping, it's parent menu; this controls the number of pixels the two menus overlap.</variable><variable name="contextMenuForWindow" type="Boolean">if true, right clicking anywhere on the window will cause this context menu to open; if false, must specify targetNodeIds</variable><variable scope="instance" name="eventNaming"/><variable scope="instance" name="currentSubpopup"/><variable scope="instance" name="currentSubmenuTrigger.is_open"/><variable scope="instance" name="currentSubmenuTrigger"/><variable scope="instance" name="openEvent"/><variable scope="instance" name="openedForWindow"/><variable scope="instance" name="targetNodeIds"/><variable scope="instance" name="eventNames"/><variable scope="prototype" name="snarfChildDomOutput"/><variable scope="prototype" name="eventNaming"/><variable scope="prototype" name="templateString"/><variable scope="prototype" name="templateCssPath"/><variable scope="prototype" name="templateCssString"/><variable scope="prototype" name="submenuDelay"/><variable scope="prototype" name="submenuOverlap">a submenu usually appears to the right, but slightly overlapping, it's parent menu; this controls the number of pixels the two menus overlap.</variable><variable scope="prototype" name="contextMenuForWindow">if true, right clicking anywhere on the window will cause this context menu to open; if false, must specify targetNodeIds</variable></variables></function><function name="dojo.widget.PopupMenu2.initialize" prototype="dojo.widget.PopupMenu2"><parameters><parameter name="args"/><parameter name="frag"/></parameters></function><function name="dojo.widget.PopupMenu2.postCreate" prototype="dojo.widget.PopupMenu2"/><function name="dojo.widget.PopupMenu2._subscribeSubitemsOnOpen" prototype="dojo.widget.PopupMenu2"/><function name="dojo.widget.PopupMenu2.getTopOpenEvent" prototype="dojo.widget.PopupMenu2"><returns type="Event"/><summary>get event that initially caused current chain of menus to open</summary></function><function name="dojo.widget.PopupMenu2.bindDomNode" prototype="dojo.widget.PopupMenu2"><summary>attach menu to given node</summary><parameters><parameter name="node" type="String|DomNode"/></parameters></function><function name="dojo.widget.PopupMenu2.unBindDomNode" prototype="dojo.widget.PopupMenu2"><summary>detach menu from given node</summary><parameters><parameter name="nodeName" type="String|DomNode"/></parameters></function><function name="dojo.widget.PopupMenu2._moveToNext" prototype="dojo.widget.PopupMenu2"><returns type="do not pass to parent menu"/><parameters><parameter name="evt" type="Event"/></parameters></function><function name="dojo.widget.PopupMenu2._moveToPrevious" prototype="dojo.widget.PopupMenu2"><returns type="do not pass to parent menu"/><parameters><parameter name="evt" type="Event"/></parameters></function><function name="dojo.widget.PopupMenu2._moveToParentMenu" prototype="dojo.widget.PopupMenu2"><returns type="do not pass to parent menu"/><parameters><parameter name="evt" type="Event"/></parameters></function><function name="dojo.widget.PopupMenu2._moveToChildMenu" prototype="dojo.widget.PopupMenu2"><returns type="do not pass to parent menu"/><parameters><parameter name="evt" type="Event"/></parameters></function><function name="dojo.widget.PopupMenu2._selectCurrentItem" prototype="dojo.widget.PopupMenu2"><parameters><parameter name="evt" type="Event"/></parameters></function><function name="dojo.widget.PopupMenu2.processKey" prototype="dojo.widget.PopupMenu2"><summary>callback to process key strokes return true to stop the event being processed by the parent popupmenu</summary><parameters><parameter name="evt" type="Event"/></parameters></function><function name="dojo.widget.PopupMenu2._findValidItem" prototype="dojo.widget.PopupMenu2"><parameters><parameter name="dir"/><parameter name="curItem"/></parameters></function><function name="dojo.widget.PopupMenu2._highlightOption" prototype="dojo.widget.PopupMenu2"><parameters><parameter name="dir"/></parameters></function><function name="dojo.widget.PopupMenu2.onItemClick" prototype="dojo.widget.PopupMenu2"><summary>user defined function to handle clicks on an item</summary><parameters><parameter name="item" type="Widget"/></parameters></function><function name="dojo.widget.PopupMenu2.close" prototype="dojo.widget.PopupMenu2"><summary>close the menu</summary><parameters><parameter name="force" type="Boolean"/></parameters><chains><chain type="call">dojo.widget.PopupMenu2.superclass.close</chain></chains></function><function name="dojo.widget.PopupMenu2.closeSubpopup" prototype="dojo.widget.PopupMenu2"><summary>close the currently displayed submenu</summary><parameters><parameter name="force"/></parameters></function><function name="dojo.widget.PopupMenu2._openSubmenu" prototype="dojo.widget.PopupMenu2"><summary>open the menu to the right of the current menu item</summary><parameters><parameter name="submenu"/><parameter name="from_item"/></parameters></function><function name="dojo.widget.PopupMenu2.onOpen" prototype="dojo.widget.PopupMenu2"><summary>callback when menu is opened</summary><parameters><parameter name="e" type="Event"/></parameters></function><function name="dojo.widget.MenuItem2"><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="templateString"/><variable name="is_hovering"/><variable name="hover_timer"/><variable name="is_open"/><variable name="topPosition"/><variable name="caption"/><variable name="accelKey" type="Make">4 columns icon, label, accelerator-key, and right-arrow indicating sub-menu String accelerator key (not supported yet!)</variable><variable name="iconSrc" type="String">path to icon to display to the left of the menu text</variable><variable name="disabledClass" type="String">CSS class for disabled nodes</variable><variable name="iconClass" type="String">CSS class name to use for menu item (if CSS class specifies a background image then iconSrc is not necessary)</variable><variable name="submenuId" type="String">widget ID of Menu2 widget to open when this menu item is clicked</variable><variable name="eventNaming" type="String">event names for announcing when menu item is clicked. if "default", then use the default name, based on the widget ID</variable><variable name="highlightClass" type="String">CSS class for menu item when it's hovered over</variable><variable scope="instance" name="iconStyle"/><variable scope="instance" name="arrowDisplay"/><variable scope="instance" name="eventNaming" type="String">event names for announcing when menu item is clicked. if "default", then use the default name, based on the widget ID</variable><variable scope="instance" name="parent._highlighted_option"/><variable scope="instance" name="is_hovering"/><variable scope="instance" name="hover_timer"/><variable scope="instance" name="disabled"/><variable scope="instance" name="eventNames"/><variable scope="prototype" name="templateString"/><variable scope="prototype" name="is_hovering"/><variable scope="prototype" name="hover_timer"/><variable scope="prototype" name="is_open"/><variable scope="prototype" name="topPosition"/><variable scope="prototype" name="caption"/><variable scope="prototype" name="accelKey">4 columns icon, label, accelerator-key, and right-arrow indicating sub-menu String accelerator key (not supported yet!)</variable><variable scope="prototype" name="iconSrc">path to icon to display to the left of the menu text</variable><variable scope="prototype" name="disabledClass">CSS class for disabled nodes</variable><variable scope="prototype" name="iconClass">CSS class name to use for menu item (if CSS class specifies a background image then iconSrc is not necessary)</variable><variable scope="prototype" name="submenuId">widget ID of Menu2 widget to open when this menu item is clicked</variable><variable scope="prototype" name="eventNaming">event names for announcing when menu item is clicked. if "default", then use the default name, based on the widget ID</variable><variable scope="prototype" name="highlightClass">CSS class for menu item when it's hovered over</variable></variables></function><function name="dojo.widget.MenuItem2.postMixInProperties" prototype="dojo.widget.MenuItem2"><chains><chain type="call">dojo.widget.MenuItem2.superclass.postMixInProperties</chain></chains></function><function name="dojo.widget.MenuItem2.fillInTemplate" prototype="dojo.widget.MenuItem2"/><function name="dojo.widget.MenuItem2.onHover" prototype="dojo.widget.MenuItem2"><summary>callback when mouse is moved onto menu item</summary></function><function name="dojo.widget.MenuItem2.onUnhover" prototype="dojo.widget.MenuItem2"><summary>callback when mouse is moved off of menu item</summary></function><function name="dojo.widget.MenuItem2._onClick" prototype="dojo.widget.MenuItem2"><summary>internal function for clicks</summary><parameters><parameter name="focus"/></parameters></function><function name="dojo.widget.MenuItem2.onClick" prototype="dojo.widget.MenuItem2"><summary>User defined function to handle clicks this default function call the parent menu's onItemClick</summary></function><function name="dojo.widget.MenuItem2._highlightItem" prototype="dojo.widget.MenuItem2"/><function name="dojo.widget.MenuItem2._unhighlightItem" prototype="dojo.widget.MenuItem2"/><function name="dojo.widget.MenuItem2._startSubmenuTimer" prototype="dojo.widget.MenuItem2"/><function name="dojo.widget.MenuItem2._stopSubmenuTimer" prototype="dojo.widget.MenuItem2"/><function name="dojo.widget.MenuItem2._openSubmenu" prototype="dojo.widget.MenuItem2"/><function name="dojo.widget.MenuItem2._closedSubmenu" prototype="dojo.widget.MenuItem2"/><function name="dojo.widget.MenuItem2.setDisabled" prototype="dojo.widget.MenuItem2"><summary>enable or disable this menu item</summary><parameters><parameter name="value" type="Boolean"/></parameters></function><function name="dojo.widget.MenuItem2.enable" prototype="dojo.widget.MenuItem2"><summary>enable this menu item so user can click it</summary></function><function name="dojo.widget.MenuItem2.disable" prototype="dojo.widget.MenuItem2"><summary>disable this menu item so user can't click it</summary></function><function name="dojo.widget.MenuItem2.menuOpen" prototype="dojo.widget.MenuItem2"><summary>callback when menu is opened TODO: I don't see anyone calling this menu item</summary><parameters><parameter name="message"/></parameters></function><function name="dojo.widget.MenuSeparator2"><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="templateString"/><variable scope="prototype" name="templateString"/></variables></function><function name="dojo.widget.MenuSeparator2.postCreate" prototype="dojo.widget.MenuSeparator2"/><function name="dojo.widget.MenuBar2"><chains><chain type="call">dojo.widget.PopupMenu2</chain><chain type="prototype">dojo.widget.PopupMenu2</chain></chains><variables><variable name="menuOverlap"/><variable name="templateString"/><variable scope="instance" name="isShowingNow"/><variable scope="instance" name="currentSubmenuTrigger"/><variable scope="instance" name="currentSubmenuTrigger.is_open"/><variable scope="prototype" name="menuOverlap"/><variable scope="prototype" name="templateString"/></variables></function><function name="dojo.widget.MenuBar2.close" prototype="dojo.widget.MenuBar2"><parameters><parameter name="force"/></parameters></function><function name="dojo.widget.MenuBar2.processKey" prototype="dojo.widget.MenuBar2"><parameters><parameter name="evt" type="Event"/></parameters><chains><chain type="call">dojo.widget.MenuBar2.superclass.processKey</chain></chains></function><function name="dojo.widget.MenuBar2.postCreate" prototype="dojo.widget.MenuBar2"><chains><chain type="call">dojo.widget.MenuBar2.superclass.postCreate</chain></chains></function><function name="dojo.widget.MenuBar2._openSubmenu" prototype="dojo.widget.MenuBar2"><parameters><parameter name="submenu"/><parameter name="from_item"/></parameters></function><function name="dojo.widget.MenuBarItem2"><chains><chain type="call">dojo.widget.MenuItem2</chain><chain type="prototype">dojo.widget.MenuItem2</chain></chains><variables><variable name="templateString"/><variable name="highlightClass"/><variable scope="instance" name="disabled"/><variable scope="prototype" name="templateString"/><variable scope="prototype" name="highlightClass"/></variables></function><function name="dojo.widget.MenuBarItem2.setDisabled" prototype="dojo.widget.MenuBarItem2"><parameters><parameter name="value"/></parameters></function><function name="dojo.widget.Menu2.OperaAndKonqFixer" initialized="true"><variables><variable scope="instance" name="fixNode"/><variable scope="instance" name="cleanNode"/></variables></function><function name="dojo.widget.Menu2.OperaAndKonqFixer.fixNode" instance="dojo.widget.Menu2.OperaAndKonqFixer"><parameters><parameter name="node"/></parameters></function><function name="dojo.widget.Menu2.OperaAndKonqFixer.cleanNode" instance="dojo.widget.Menu2.OperaAndKonqFixer"><parameters><parameter name="node"/></parameters></function></resource><resource location="dojo.widget.MonthlyCalendar"><requires><environment type="common"><require>dojo.date.common</require><require>dojo.date.format</require><require>dojo.widget.*</require><require>dojo.widget.DatePicker</require><require>dojo.event.*</require><require>dojo.html.*</require><require>dojo.experimental</require></environment></requires><function name="dojo.widget.MonthlyCalendar"><chains><chain type="call">dojo.widget.DatePicker</chain><chain type="prototype">dojo.widget.DatePicker</chain></chains><variables><variable name="dayWidth"/><variable name="templatePath"/><variable name="templateCssPath"/><variable scope="instance" name="selectedIsUsed"/><variable scope="instance" name="currentIsUsed"/><variable scope="instance" name="iCalendars"/><variable scope="prototype" name="dayWidth"/><variable scope="prototype" name="templatePath"/><variable scope="prototype" name="templateCssPath"/></variables></function><function name="dojo.widget.MonthlyCalendar.addCalendar" prototype="dojo.widget.MonthlyCalendar"><parameters><parameter name="cal" type="dojo.iCalendar"/></parameters></function><function name="dojo.widget.MonthlyCalendar.createDayContents" prototype="dojo.widget.MonthlyCalendar"><parameters><parameter name="node"/><parameter name="mydate"/></parameters></function><function name="dojo.widget.MonthlyCalendar.initUI" prototype="dojo.widget.MonthlyCalendar"/><function name="dojo.widget.MonthlyCalendar.util" initialized="true"><variables><variable scope="instance" name="toRfcDate"/><variable scope="instance" name="fromRfcDate"/><variable scope="instance" name="initFirstSaturday"/></variables></function><function name="dojo.widget.MonthlyCalendar.util.toRfcDate" instance="dojo.widget.MonthlyCalendar.util"><parameters><parameter name="jsDate"/></parameters></function><function name="dojo.widget.MonthlyCalendar.util.fromRfcDate" instance="dojo.widget.MonthlyCalendar.util"><parameters><parameter name="rfcDate"/></parameters></function><function name="dojo.widget.MonthlyCalendar.util.initFirstSaturday" instance="dojo.widget.MonthlyCalendar.util"><parameters><parameter name="month"/><parameter name="year"/></parameters></function></resource><resource location="dojo.widget.PageContainer"><requires><environment type="common"><require>dojo.lang.func</require><require>dojo.widget.*</require><require>dojo.event.*</require><require>dojo.html.selection</require></environment></requires><function name="dojo.widget.PageContainer"><summary>A container that has multiple children, but shows only one child at a time (like looking at the pages in a book one by one). Publishes topics &lt;widgetId&gt;-addChild, &lt;widgetId&gt;-removeChild, and &lt;widgetId&gt;-selectChild Can be base class for container, Wizard, Show, etc.</summary><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="isContainer"/><variable name="doLayout"/><variable name="templateString"/><variable name="selectedChild"/><variable scope="instance" name="selectedChildWidget"/><variable scope="instance" name="correspondingPageButton"/><variable scope="instance" name="selectedChild"/><variable scope="instance" name="_beingDestroyed"/><variable scope="prototype" name="isContainer"/><variable scope="prototype" name="doLayout"/><variable scope="prototype" name="templateString"/><variable scope="prototype" name="selectedChild"/></variables></function><function name="dojo.widget.PageContainer.fillInTemplate" prototype="dojo.widget.PageContainer"><parameters><parameter name="args"/><parameter name="frag"/></parameters><chains><chain type="call">dojo.widget.PageContainer.superclass.fillInTemplate</chain></chains></function><function name="dojo.widget.PageContainer.postCreate" prototype="dojo.widget.PageContainer"><parameters><parameter name="args"/><parameter name="frag"/></parameters></function><function name="dojo.widget.PageContainer.addChild" prototype="dojo.widget.PageContainer"><parameters><parameter name="child"/></parameters><chains><chain type="call">dojo.widget.PageContainer.superclass.addChild</chain></chains></function><function name="dojo.widget.PageContainer._setupChild" prototype="dojo.widget.PageContainer"><parameters><parameter name="page" type="Widget"/></parameters></function><function name="dojo.widget.PageContainer.removeChild" prototype="dojo.widget.PageContainer"><parameters><parameter name="page" type="Widget"/></parameters><chains><chain type="call">dojo.widget.PageContainer.superclass.removeChild</chain></chains></function><function name="dojo.widget.PageContainer.selectChild" prototype="dojo.widget.PageContainer"><summary>Show the given widget (which must be one of my children)</summary><parameters><parameter name="page" type="Widget"/><parameter name="callingWidget" type="Widget"/></parameters></function><function name="dojo.widget.PageContainer.forward" prototype="dojo.widget.PageContainer"/><function name="dojo.widget.PageContainer.back" prototype="dojo.widget.PageContainer"/><function name="dojo.widget.PageContainer.onResized" prototype="dojo.widget.PageContainer"/><function name="dojo.widget.PageContainer._showChild" prototype="dojo.widget.PageContainer"><parameters><parameter name="page" type="Widget"/></parameters></function><function name="dojo.widget.PageContainer._hideChild" prototype="dojo.widget.PageContainer"><parameters><parameter name="page" type="Widget"/></parameters></function><function name="dojo.widget.PageContainer.closeChild" prototype="dojo.widget.PageContainer"><summary>callback when user clicks the [X] to remove a page if onClose() returns true then remove and destroy the childd</summary><parameters><parameter name="page" type="Widget"/></parameters></function><function name="dojo.widget.PageContainer.destroy" prototype="dojo.widget.PageContainer"><chains><chain type="call">dojo.widget.PageContainer.superclass.destroy</chain></chains></function><function name="dojo.widget.PageController"><summary>Set of buttons to select a page in a page list. Monitors the specified PageContaine, and whenever a page is added, deleted, or selected, updates itself accordingly.</summary><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="templateString"/><variable name="isContainer"/><variable name="containerId"/><variable name="buttonWidget"/><variable name="class"/><variable scope="instance" name="pane2button"/><variable scope="instance" name="_currentChild"/><variable scope="prototype" name="templateString"/><variable scope="prototype" name="isContainer"/><variable scope="prototype" name="containerId"/><variable scope="prototype" name="buttonWidget"/><variable scope="prototype" name="class"/></variables></function><function name="dojo.widget.PageController.fillInTemplate" prototype="dojo.widget.PageController"/><function name="dojo.widget.PageController.postCreate" prototype="dojo.widget.PageController"/><function name="dojo.widget.PageController.destroy" prototype="dojo.widget.PageController"><chains><chain type="call">dojo.widget.PageController.superclass.destroy</chain></chains></function><function name="dojo.widget.PageController.onAddChild" prototype="dojo.widget.PageController"><summary>Called whenever a page is added to the container. Create button corresponding to the page.</summary><parameters><parameter name="page" type="Widget"/></parameters></function><function name="dojo.widget.PageController.onRemoveChild" prototype="dojo.widget.PageController"><summary>Called whenever a page is removed from the container. Remove the button corresponding to the page.</summary><parameters><parameter name="page" type="Widget"/></parameters></function><function name="dojo.widget.PageController.onSelectChild" prototype="dojo.widget.PageController"><parameters><parameter name="page" type="Widget"/></parameters></function><function name="dojo.widget.PageController.onButtonClick" prototype="dojo.widget.PageController"><summary>Called whenever one of my child buttons is pressed in an attempt to select a page</summary><parameters><parameter name="page" type="Widget"/></parameters></function><function name="dojo.widget.PageController.onCloseButtonClick" prototype="dojo.widget.PageController"><summary>Called whenever one of my child buttons [X] is pressed in an attempt to close a page</summary><parameters><parameter name="page" type="Widget"/></parameters></function><function name="dojo.widget.PageController.onKey" prototype="dojo.widget.PageController"><summary>Handle keystrokes on the page list, for advancing to next/previous button</summary><parameters><parameter name="evt" type="Event"/></parameters></function><function name="dojo.widget.PageButton"><summary>Internal widget used by PageList. The button-like or tab-like object you click to select or delete a page</summary><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="templateString"/><variable name="label"/><variable name="closeButton" type="Boolean">true iff we should also print a close icon to destroy corresponding page</variable><variable scope="prototype" name="templateString"/><variable scope="prototype" name="label"/><variable scope="prototype" name="closeButton">true iff we should also print a close icon to destroy corresponding page</variable></variables></function><function name="dojo.widget.PageButton.onClick" prototype="dojo.widget.PageButton"><summary>Basically this is the attach point PageController listens to, to select the page</summary></function><function name="dojo.widget.PageButton.onCloseButtonMouseOver" prototype="dojo.widget.PageButton"><summary>The close button changes color a bit when you mouse over</summary></function><function name="dojo.widget.PageButton.onCloseButtonMouseOut" prototype="dojo.widget.PageButton"><summary>Revert close button to normal color on mouse out</summary></function><function name="dojo.widget.PageButton.onCloseButtonClick" prototype="dojo.widget.PageButton"><summary>Handle clicking the close button for this tab</summary><parameters><parameter name="evt" type="Event"/></parameters></function><function name="dojo.widget.PageButton.setSelected" prototype="dojo.widget.PageButton"><summary>This is run whenever the page corresponding to this button has been selected</summary></function><function name="dojo.widget.PageButton.clearSelected" prototype="dojo.widget.PageButton"><summary>This function is run whenever the page corresponding to this button has been deselected (and another page has been shown)</summary></function><function name="dojo.widget.PageButton.focus" prototype="dojo.widget.PageButton"><summary>This will focus on the this button (for accessibility you need to do this when the button is selected)</summary></function><function name="dojo.widget.Widget"><variables><variable scope="prototype" name="label"/><variable scope="prototype" name="selected"/><variable scope="prototype" name="closable"/></variables></function><function name="dojo.widget.Widget.onClose" prototype="dojo.widget.Widget"><summary>Callback if someone tries to close the child, child will be closed if func returns true</summary></function></resource><resource location="dojo.widget.Parse"><requires><environment type="common"><require>dojo.widget.Manager</require><require>dojo.dom</require></environment></requires><function name="dojo.widget.Parse"><returns type="mixed"/><parameters><parameter name="fragment" type="Object"/></parameters><variables><variable scope="instance" name="propertySetsList"/><variable scope="instance" name="fragment"/><variable scope="instance" name="createComponents"/><variable scope="instance" name="createSubComponents"/><variable scope="instance" name="parsePropertySets"/><variable scope="instance" name="parseProperties"/><variable scope="instance" name="getDataProvider"/><variable scope="instance" name="getPropertySetById"/><variable scope="instance" name="getPropertySetsByType"/><variable scope="instance" name="getPropertySets"/><variable scope="instance" name="createComponentFromScript"/></variables></function><function name="dojo.widget.Parse.createComponents" instance="dojo.widget.Parse"><returns type="Array"/><parameters><parameter name="frag" type="Object"/><parameter name="parentComp" type="Object"/></parameters></function><function name="dojo.widget.Parse.createSubComponents" instance="dojo.widget.Parse"><returns type="Array"/><summary>recurses over a raw JavaScript object structure, and calls the corresponding handler for its normalized tagName if it exists</summary><parameters><parameter name="fragment" type="Object"/><parameter name="parentComp" type="Object"/></parameters></function><function name="dojo.widget.Parse.parsePropertySets" instance="dojo.widget.Parse"><summary>checks the top level of a raw JavaScript object structure for any propertySets. It stores an array of references to propertySets that it finds.</summary><parameters><parameter name="fragment" type="Object"/></parameters></function><function name="dojo.widget.Parse.parseProperties" instance="dojo.widget.Parse"><returns type="Object"/><summary>parseProperties checks a raw JavaScript object structure for properties, and returns a hash of properties that it finds.</summary><parameters><parameter name="fragment" type="Object"/></parameters></function><function name="dojo.widget.Parse.getDataProvider" instance="dojo.widget.Parse"><parameters><parameter name="objRef" type="Object"/><parameter name="dataUrl" type="String"/></parameters></function><function name="dojo.widget.Parse.getPropertySetById" instance="dojo.widget.Parse"><returns type="String"/><summary>returns the propertySet that matches the provided id</summary><parameters><parameter name="propertySetId"/></parameters></function><function name="dojo.widget.Parse.getPropertySetsByType" instance="dojo.widget.Parse"><returns type="Array"/><summary>returns the propertySet(s) that match(es) the provided componentClass</summary><parameters><parameter name="componentType"/></parameters></function><function name="dojo.widget.Parse.getPropertySets" instance="dojo.widget.Parse"><returns type="Array"/><summary>returns the propertySet for a given component fragment</summary><parameters><parameter name="fragment" type="Object"/></parameters></function><function name="dojo.widget.Parse.createComponentFromScript" instance="dojo.widget.Parse"><returns type="Array"/><parameters><parameter name="nodeRef" type="the">node to be replaced... in the future, we might want to add an alternative way to specify an insertion point</parameter><parameter name="componentName" type="the">expected dojo widget name, i.e. Button of ContextMenu</parameter><parameter name="properties" type="an">object of name value pairs</parameter><parameter name="ns" type="the">namespace of the widget. Defaults to "dojo"</parameter></parameters></function><function name="dojo.widget.getParser"><parameters><parameter name="name" optional="true" type="String"/></parameters></function><function name="dojo.widget.createWidget"><returns type="Widget"/><summary>Creates widget</summary><parameters><parameter name="name" type="The">name of the widget to create with optional namespace prefix, e.g."ns:widget", namespace defaults to "dojo".</parameter><parameter name="props" type="Key-Value">pairs of properties of the widget</parameter><parameter name="refNode" type="argument"></parameter><parameter name="position" type="The">position to insert this widget's node relative to the</parameter></parameters></function><object name="dojo.widget._parser_collection"><variables><variable name="dojo"/></variables></object></resource><resource location="dojo.widget.PopupContainer"><requires><environment type="common"><require>dojo.html.style</require><require>dojo.html.layout</require><require>dojo.html.selection</require><require>dojo.html.iframe</require><require>dojo.event.*</require><require>dojo.widget.*</require><require>dojo.widget.HtmlWidget</require></environment></requires><function name="dojo.widget.PopupContainerBase"><variables><variable name="isContainer"/><variable name="templateString"/><variable name="isShowingNow"/><variable name="currentSubpopup"/><variable name="beginZIndex"/><variable name="parentPopup"/><variable name="parent"/><variable name="popupIndex"/><variable name="aroundBox"/><variable name="openedForWindow"/><variable scope="instance" name="parent"/><variable scope="instance" name="isTopLevel"/><variable scope="instance" name="parentPopup"/><variable scope="instance" name="popupIndex"/><variable scope="instance" name="_bookmark"/><variable scope="instance" name="domNode.style.display"/><variable scope="instance" name="explodeSrc"/><variable scope="instance" name="isShowingNow"/><variable scope="instance" name="currentSubpopup"/><variable scope="instance" name="openedSize"/><variable scope="instance" name="bgIframe"/><variable scope="instance" name="queueOnAnimationFinish"/><variable scope="prototype" name="isContainer"/><variable scope="prototype" name="templateString"/><variable scope="prototype" name="isShowingNow"/><variable scope="prototype" name="currentSubpopup"/><variable scope="prototype" name="beginZIndex"/><variable scope="prototype" name="parentPopup"/><variable scope="prototype" name="parent"/><variable scope="prototype" name="popupIndex"/><variable scope="prototype" name="aroundBox"/><variable scope="prototype" name="openedForWindow"/></variables><description>This class can not be used standalone: it should be mixed-in to a dojo.widget.HtmlWidget. Use PopupContainer instead if you want a a standalone popup widget</description></function><function name="dojo.widget.PopupContainerBase.processKey" prototype="dojo.widget.PopupContainerBase"><summary>key event handler</summary><parameters><parameter name="evt" type="Event"/></parameters></function><function name="dojo.widget.PopupContainerBase.applyPopupBasicStyle" prototype="dojo.widget.PopupContainerBase"><summary>apply necessary css rules to the top domNode</summary><description>this function should be called in sub class where a custom templateString/templateStringPath is used (see Tooltip widget)</description></function><function name="dojo.widget.PopupContainerBase.aboutToShow" prototype="dojo.widget.PopupContainerBase"><summary>connect to this stub to modify the content of the popup</summary></function><function name="dojo.widget.PopupContainerBase.open" prototype="dojo.widget.PopupContainerBase"><summary>Open the popup at position (x,y), relative to dojo.body() Or open(node, parent, explodeSrc, aroundOrient) to open around node</summary><parameters><parameter name="x" type="Integer"/><parameter name="y" type="Integer"/><parameter name="parent" type="DomNode"/><parameter name="explodeSrc" type="Object"/><parameter name="orient" optional="true" type="String"/><parameter name="padding" optional="true" type="Array"/></parameters></function><function name="dojo.widget.PopupContainerBase.move" prototype="dojo.widget.PopupContainerBase"><summary>calculate where to place the popup</summary><parameters><parameter name="x" type="Int"/><parameter name="y" type="Int"/><parameter name="padding" optional="true" type="Integer"/><parameter name="orient" optional="true" type="String"/></parameters></function><function name="dojo.widget.PopupContainerBase.close" prototype="dojo.widget.PopupContainerBase"><summary>hide the popup</summary><parameters><parameter name="force" optional="true" type="Boolean"/></parameters></function><function name="dojo.widget.PopupContainerBase.closeAll" prototype="dojo.widget.PopupContainerBase"><summary>hide all popups including sub ones</summary><parameters><parameter name="force" optional="true" type="Boolean"/></parameters></function><function name="dojo.widget.PopupContainerBase.setOpenedSubpopup" prototype="dojo.widget.PopupContainerBase"><summary>used by sub popup to set currentSubpopup in the parent popup</summary><parameters><parameter name="popup" type="Widget"/></parameters></function><function name="dojo.widget.PopupContainerBase.closeSubpopup" prototype="dojo.widget.PopupContainerBase"><summary>close opened sub popup</summary><parameters><parameter name="force" optional="true" type="Boolean"/></parameters></function><function name="dojo.widget.PopupContainerBase.onShow" prototype="dojo.widget.PopupContainerBase"><chains><chain type="call">dojo.widget.PopupContainer.superclass.onShow</chain></chains></function><function name="dojo.widget.PopupContainerBase.processQueue" prototype="dojo.widget.PopupContainerBase"><summary>do events from queue</summary><chains><chain type="call">func</chain></chains></function><function name="dojo.widget.PopupContainerBase.onHide" prototype="dojo.widget.PopupContainerBase"><chains><chain type="call">dojo.widget.HtmlWidget.prototype.onHide</chain></chains></function><function name="dojo.widget.PopupContainer"><summary>dojo.widget.PopupContainer is the widget version of dojo.widget.PopupContainerBase</summary></function><function name="dojo.widget.PopupManager" initialized="true"><summary>the popup manager makes sure we don't have several popups open at once. the root popup in an opening sequence calls opened(). when a root menu closes it calls closed(). then everything works. lovely.</summary><variables><variable scope="instance" name="currentMenu"/><variable scope="instance" name="currentButton"/><variable scope="instance" name="currentFocusMenu"/><variable scope="instance" name="focusNode"/><variable scope="instance" name="registeredWindows"/><variable scope="instance" name="registerWin"/><variable scope="instance" name="registerAllWindows"/><variable scope="instance" name="unRegisterWin"/><variable scope="instance" name="unRegisterAllWindows"/><variable scope="instance" name="closed"/><variable scope="instance" name="opened"/><variable scope="instance" name="setFocusedMenu"/><variable scope="instance" name="onKey"/><variable scope="instance" name="onClick"/></variables></function><function name="dojo.widget.PopupManager.registerWin" instance="dojo.widget.PopupManager"><summary>register a window so that when clicks/scroll in it, the popup can be closed automatically</summary><parameters><parameter name="win" type="Window"/></parameters></function><function name="dojo.widget.PopupManager.registerAllWindows" instance="dojo.widget.PopupManager"><summary>This function register all the iframes and the top window, so that whereever the user clicks in the page, the popup menu will be closed In case you add an iframe after onload event, please call dojo.widget.PopupManager.registerWin manually</summary><parameters><parameter name="targetWindow" type="Window"/></parameters></function><function name="dojo.widget.PopupManager.unRegisterWin" instance="dojo.widget.PopupManager"><summary>remove listeners on the registered window</summary><parameters><parameter name="win" type="Window"/></parameters></function><function name="dojo.widget.PopupManager.unRegisterAllWindows" instance="dojo.widget.PopupManager"><summary>remove listeners on all the registered windows</summary></function><function name="dojo.widget.PopupManager.closed" instance="dojo.widget.PopupManager"><summary>notify the manager that menu is closed</summary><parameters><parameter name="menu" type="Widget"/></parameters></function><function name="dojo.widget.PopupManager.opened" instance="dojo.widget.PopupManager"><summary>sets the current opened popup</summary><parameters><parameter name="menu" type="Widget"/><parameter name="button" type="DomNode"/></parameters></function><function name="dojo.widget.PopupManager.setFocusedMenu" instance="dojo.widget.PopupManager"><summary>Set the current focused popup, This is used by popups which supports keyboard navigation</summary><parameters><parameter name="menu" type="Widget"/></parameters></function><function name="dojo.widget.PopupManager.onKey" instance="dojo.widget.PopupManager"><parameters><parameter name="e" type="Event"/></parameters></function><function name="dojo.widget.PopupManager.onClick" instance="dojo.widget.PopupManager"><parameters><parameter name="e" type="Event"/></parameters></function></resource><resource location="dojo.widget.ProgressBar"><requires><environment type="common"><require>dojo.widget.*</require><require>dojo.event</require><require>dojo.dom</require><require>dojo.html.style</require><require>dojo.string.*</require><require>dojo.lfx.*</require></environment></requires><function name="dojo.widget.ProgressBar"><summary>a progress widget, with some calculation and server polling capabilities</summary><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="progressValue" type="String">initial progress value. with "%": percentual value, 0% &lt;= progressValue &lt;= 100% or without "%": absolute value, 0 &lt;= progressValue &lt;= maxProgressValue</variable><variable name="maxProgressValue" type="Float">max sample number</variable><variable name="width"/><variable name="height"/><variable name="frontPercentClass" type="String">css class for frontPercentLabel (4)</variable><variable name="backPercentClass"/><variable name="frontBarClass"/><variable name="backBarClass" type="frontBarClass=&quot;...">duration="..."</variable><variable name="hasText" type="true|false">isVertical="true|false"</variable><variable name="isVertical"/><variable name="showOnlyIntegers" type="Boolean">if true, the percent label shows only integer values</variable><variable name="dataSource" type="uri">for server polling</variable><variable name="pollInterval" type="Integer">server poll interval</variable><variable name="duration" type="of">the animation attach points private members</variable><variable name="templatePath"/><variable name="templateCssPath"/><variable name="containerNode"/><variable name="internalProgress"/><variable name="_pixelUnitRatio"/><variable name="_pixelPercentRatio"/><variable name="_unitPercentRatio"/><variable name="_unitPixelRatio"/><variable name="_floatDimension"/><variable name="_intDimension"/><variable name="_progressPercentValue"/><variable name="_floatMaxProgressValue"/><variable name="_dimension"/><variable name="_pixelValue"/><variable name="_oInterval"/><variable name="_animation"/><variable name="_animationStopped"/><variable name="_progressValueBak"/><variable name="_hasTextBak"/><variable scope="instance" name="internalProgress.className"/><variable scope="instance" name="containerNode.className"/><variable scope="instance" name="internalProgress.style.bottom"/><variable scope="instance" name="internalProgress.style.left"/><variable scope="instance" name="_dimension"/><variable scope="instance" name="internalProgress.style.top"/><variable scope="instance" name="frontPercentLabel.className"/><variable scope="instance" name="backPercentLabel.className"/><variable scope="instance" name="progressValue" type="String">initial progress value. with "%": percentual value, 0% &lt;= progressValue &lt;= 100% or without "%": absolute value, 0 &lt;= progressValue &lt;= maxProgressValue</variable><variable scope="instance" name="domNode.style.height"/><variable scope="instance" name="domNode.style.width"/><variable scope="instance" name="_intDimension"/><variable scope="instance" name="_floatDimension"/><variable scope="instance" name="_pixelPercentRatio"/><variable scope="instance" name="backPercentLabel.style.display"/><variable scope="instance" name="frontPercentLabel.style.display"/><variable scope="instance" name="hasText" type="true|false">isVertical="true|false"</variable><variable scope="instance" name="_progressValueBak"/><variable scope="instance" name="_hasTextBak"/><variable scope="instance" name="_animation"/><variable scope="instance" name="maxProgressValue" type="Float">max sample number</variable><variable scope="instance" name="_floatMaxProgressValue"/><variable scope="instance" name="_pixelUnitRatio"/><variable scope="instance" name="_unitPercentRatio"/><variable scope="instance" name="_unitPixelRatio"/><variable scope="instance" name="_progressPercentValue"/><variable scope="instance" name="_pixelValue"/><variable scope="instance" name="dataSource" type="uri">for server polling</variable><variable scope="instance" name="pollInterval" type="Integer">server poll interval</variable><variable scope="instance" name="_oInterval"/><variable scope="instance" name="_animationStopped"/><variable scope="instance" name="internalProgress.style.height"/><variable scope="instance" name="frontPercentLabel.style.left"/><variable scope="instance" name="backPercentLabel.style.left"/><variable scope="instance" name="frontPercentLabel.style.bottom"/><variable scope="instance" name="backPercentLabel.style.bottom"/><variable scope="instance" name="showOnlyIntegers" type="Boolean">if true, the percent label shows only integer values</variable><variable scope="prototype" name="progressValue">initial progress value. with "%": percentual value, 0% &lt;= progressValue &lt;= 100% or without "%": absolute value, 0 &lt;= progressValue &lt;= maxProgressValue</variable><variable scope="prototype" name="maxProgressValue">max sample number</variable><variable scope="prototype" name="width"/><variable scope="prototype" name="height"/><variable scope="prototype" name="frontPercentClass">css class for frontPercentLabel (4)</variable><variable scope="prototype" name="backPercentClass"/><variable scope="prototype" name="frontBarClass"/><variable scope="prototype" name="backBarClass">duration="..."</variable><variable scope="prototype" name="hasText">isVertical="true|false"</variable><variable scope="prototype" name="isVertical"/><variable scope="prototype" name="showOnlyIntegers">if true, the percent label shows only integer values</variable><variable scope="prototype" name="dataSource">for server polling</variable><variable scope="prototype" name="pollInterval">server poll interval</variable><variable scope="prototype" name="duration">the animation attach points private members</variable><variable scope="prototype" name="templatePath"/><variable scope="prototype" name="templateCssPath"/><variable scope="prototype" name="containerNode"/><variable scope="prototype" name="internalProgress"/><variable scope="prototype" name="_pixelUnitRatio"/><variable scope="prototype" name="_pixelPercentRatio"/><variable scope="prototype" name="_unitPercentRatio"/><variable scope="prototype" name="_unitPixelRatio"/><variable scope="prototype" name="_floatDimension"/><variable scope="prototype" name="_intDimension"/><variable scope="prototype" name="_progressPercentValue"/><variable scope="prototype" name="_floatMaxProgressValue"/><variable scope="prototype" name="_dimension"/><variable scope="prototype" name="_pixelValue"/><variable scope="prototype" name="_oInterval"/><variable scope="prototype" name="_animation"/><variable scope="prototype" name="_animationStopped"/><variable scope="prototype" name="_progressValueBak"/><variable scope="prototype" name="_hasTextBak"/></variables><description>(implementation) four overlapped divs: (1) lower z-index (4) higher z-index back and front percent label have the same content: when the vertical line (*) partially hides the backPercentLabel, the frontPercentLabel becomes visible ________________________(1)_containerNode_________________________________ |__(3)_internalProgress____________ | | | &lt;--- (*) | | (4) frontPercentLabel | (2) backPercentLabel | |__________________________________| | |__________________________________________________________________________| usage: &lt;div dojoType="ProgressBar" frontBarClass="..." backBarClass="..."</description></function><function name="dojo.widget.ProgressBar.fillInTemplate" prototype="dojo.widget.ProgressBar"><parameters><parameter name="args"/><parameter name="frag"/></parameters></function><function name="dojo.widget.ProgressBar.showText" prototype="dojo.widget.ProgressBar"><summary>shows or hides the labels</summary><parameters><parameter name="visible"/></parameters></function><function name="dojo.widget.ProgressBar.postCreate" prototype="dojo.widget.ProgressBar"><parameters><parameter name="args"/><parameter name="frag"/></parameters></function><function name="dojo.widget.ProgressBar._backupValues" prototype="dojo.widget.ProgressBar"/><function name="dojo.widget.ProgressBar._restoreValues" prototype="dojo.widget.ProgressBar"/><function name="dojo.widget.ProgressBar._setupAnimation" prototype="dojo.widget.ProgressBar"/><function name="dojo.widget.ProgressBar.getMaxProgressValue" prototype="dojo.widget.ProgressBar"><summary>returns the maxProgressValue</summary></function><function name="dojo.widget.ProgressBar.setMaxProgressValue" prototype="dojo.widget.ProgressBar"><summary>sets the maxProgressValue if noRender is true, only sets the internal max progress value</summary><parameters><parameter name="maxValue"/><parameter name="noRender"/></parameters></function><function name="dojo.widget.ProgressBar.setProgressValue" prototype="dojo.widget.ProgressBar"><summary>sets the progressValue if value ends width "%", does a normalization if noRender is true, only sets the internal value: useful if there is a setMaxProgressValue call</summary><parameters><parameter name="value"/><parameter name="noRender"/></parameters></function><function name="dojo.widget.ProgressBar.getProgressValue" prototype="dojo.widget.ProgressBar"><summary>returns the progressValue</summary></function><function name="dojo.widget.ProgressBar.getProgressPercentValue" prototype="dojo.widget.ProgressBar"><summary>returns the percentual progressValue</summary></function><function name="dojo.widget.ProgressBar.setDataSource" prototype="dojo.widget.ProgressBar"><summary>sets the dataSource</summary><parameters><parameter name="dataSource"/></parameters></function><function name="dojo.widget.ProgressBar.setPollInterval" prototype="dojo.widget.ProgressBar"><summary>sets the pollInterval</summary><parameters><parameter name="pollInterval"/></parameters></function><function name="dojo.widget.ProgressBar.start" prototype="dojo.widget.ProgressBar"><summary>starts the server polling</summary></function><function name="dojo.widget.ProgressBar.startAnimation" prototype="dojo.widget.ProgressBar"><summary>starts the left-right animation, useful when the user doesn't know how much time the operation will last</summary></function><function name="dojo.widget.ProgressBar.stopAnimation" prototype="dojo.widget.ProgressBar"><summary>stops the left-right animation</summary></function><function name="dojo.widget.ProgressBar._showRemoteProgress" prototype="dojo.widget.ProgressBar"/><function name="dojo.widget.ProgressBar.render" prototype="dojo.widget.ProgressBar"><summary>renders the ProgressBar, based on current values</summary></function><function name="dojo.widget.ProgressBar._setLabelPosition" prototype="dojo.widget.ProgressBar"/><function name="dojo.widget.ProgressBar._setPercentLabel" prototype="dojo.widget.ProgressBar"><parameters><parameter name="percentValue"/></parameters></function><function name="dojo.widget.ProgressBar._setPixelValue" prototype="dojo.widget.ProgressBar"><parameters><parameter name="value"/></parameters></function><function name="dojo.widget.ProgressBar.onChange" prototype="dojo.widget.ProgressBar"/></resource><resource location="dojo.widget.RadioGroup"><requires><environment type="common"><require>dojo.lang.common</require><require>dojo.event.browser</require><require>dojo.html.selection</require><require>dojo.widget.*</require><require>dojo.widget.HtmlWidget</require></environment></requires><function name="dojo.widget.RadioGroup"><summary>Widget that provides useful/common functionality that may be desirable when interacting with ul/ol html lists. The core behaviour of the lists this widget manages is expected to be determined by the css class names defined: "radioGroup" - Applied to main ol or ul "selected" - Applied to the currently selected li, if any. "itemContent" - Applied to the content contained in a li, this widget embeds a span within each &lt;li&gt;&lt;/li&gt; to contain the contents of the li. This widget was mostly developed under supervision/guidance from Tom Trenka. selectedItem: DomNode: Currently selected li, if any</summary><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="isContainer"/><variable name="templatePath"/><variable name="templateCssPath"/><variable name="postCreate"/><variable name="add"/><variable name="remove"/><variable name="clear"/><variable name="clearSelections"/><variable name="_setup"/><variable name="_setupChildren"/><variable name="_selectItem"/><variable name="getValue"/><variable name="onSelect"/><variable name="onItemSelect"/><variable scope="instance" name="items"/><variable scope="instance" name="selectedItem"/><variable scope="instance" name="selected"/><variable scope="instance" name="groupCssClass"/><variable scope="instance" name="selectedCssClass"/><variable scope="instance" name="itemContentCssClass"/><variable scope="prototype" name="isContainer"/><variable scope="prototype" name="templatePath"/><variable scope="prototype" name="templateCssPath"/><variable scope="prototype" name="postCreate"/><variable scope="prototype" name="add"/><variable scope="prototype" name="remove"/><variable scope="prototype" name="clear"/><variable scope="prototype" name="clearSelections"/><variable scope="prototype" name="_setup"/><variable scope="prototype" name="_setupChildren"/><variable scope="prototype" name="_selectItem"/><variable scope="prototype" name="getValue"/><variable scope="prototype" name="onSelect"/><variable scope="prototype" name="onItemSelect"/></variables></function><function name="dojo.widget.RadioGroup._parseStructure" prototype="dojo.widget.RadioGroup"><summary>Sets local radioGroup and items properties, also validates that domNode contains an expected list. Exception raised if a ul or ol node can't be found in this widgets domNode.</summary></function></resource><resource location="dojo.widget.RealNumberTextbox"><requires><environment type="common"><require>dojo.widget.IntegerTextbox</require><require>dojo.validate.common</require></environment></requires><function name="dojo.widget.RealNumberTextbox"><chains><chain type="call">dojo.widget.IntegerTextbox</chain><chain type="prototype">dojo.widget.IntegerTextbox</chain></chains><variables><variable scope="instance" name="flags.places"/><variable scope="instance" name="flags.exponent"/><variable scope="instance" name="flags.eSigned"/><variable scope="instance" name="flags.min"/><variable scope="instance" name="flags.max"/></variables></function><function name="dojo.widget.RealNumberTextbox.mixInProperties" prototype="dojo.widget.RealNumberTextbox"><parameters><parameter name="localProperties"/><parameter name="frag"/></parameters><chains><chain type="call">dojo.widget.RealNumberTextbox.superclass.mixInProperties</chain></chains></function><function name="dojo.widget.RealNumberTextbox.isValid" prototype="dojo.widget.RealNumberTextbox"/><function name="dojo.widget.RealNumberTextbox.isInRange" prototype="dojo.widget.RealNumberTextbox"/></resource><resource location="dojo.widget.RegexpTextbox"><requires><environment type="common"><require>dojo.widget.ValidationTextbox</require></environment></requires><function name="dojo.widget.RegexpTextbox"><chains><chain type="call">dojo.widget.ValidationTextbox</chain><chain type="prototype">dojo.widget.ValidationTextbox</chain></chains><variables><variable scope="instance" name="flags.regexp"/><variable scope="instance" name="flags.flags"/></variables></function><function name="dojo.widget.RegexpTextbox.mixInProperties" prototype="dojo.widget.RegexpTextbox"><parameters><parameter name="localProperties"/><parameter name="frag"/></parameters><chains><chain type="call">dojo.widget.RegexpTextbox.superclass.mixInProperties</chain></chains></function><function name="dojo.widget.RegexpTextbox.isValid" prototype="dojo.widget.RegexpTextbox"/></resource><resource location="dojo.widget.RemoteTabController"><requires><environment type="common"><require>dojo.widget.*</require><require>dojo.widget.TabContainer</require><require>dojo.event.*</require></environment></requires><function name="dojo.widget.RemoteTabController"><chains><chain type="call">dojo.widget.TabController</chain><chain type="prototype">dojo.widget.TabController</chain></chains><variables><variable name="templateCssPath"/><variable name="templateString"/><variable name="class"/><variable name="tabContainer"/><variable scope="instance" name="containerId"/><variable scope="prototype" name="templateCssPath"/><variable scope="prototype" name="templateString"/><variable scope="prototype" name="class"/><variable scope="prototype" name="tabContainer"/></variables></function><function name="dojo.widget.RemoteTabController.postMixInProperties" prototype="dojo.widget.RemoteTabController"><chains><chain type="call">dojo.widget.RemoteTabController.superclass.postMixInProperties</chain></chains></function><function name="dojo.widget.RemoteTabController.fillInTemplate" prototype="dojo.widget.RemoteTabController"><chains><chain type="call">dojo.widget.RemoteTabController.superclass.fillInTemplate</chain></chains></function></resource><resource location="dojo.widget.Repeater"><requires><environment type="common"><require>dojo.widget.HtmlWidget</require><require>dojo.string</require><require>dojo.event.*</require><require>dojo.experimental</require><require>dojo.dnd.*</require></environment></requires><function name="dojo.widget.Repeater"><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="name"/><variable name="rowTemplate"/><variable name="myObject" type="defines">pattern of the names</variable><variable name="pattern"/><variable name="useDnd" type="if">true, you can change position of rows by DnD you can also remove rows by dragging row away</variable><variable name="isContainer"/><variable scope="instance" name="rowTemplate"/><variable scope="instance" name="myObject" type="defines">pattern of the names</variable><variable scope="prototype" name="name"/><variable scope="prototype" name="rowTemplate"/><variable scope="prototype" name="myObject">pattern of the names</variable><variable scope="prototype" name="pattern"/><variable scope="prototype" name="useDnd">true, you can change position of rows by DnD you can also remove rows by dragging row away</variable><variable scope="prototype" name="isContainer"/></variables></function><function name="dojo.widget.Repeater.initialize" prototype="dojo.widget.Repeater"><parameters><parameter name="args"/><parameter name="frag"/></parameters></function><function name="dojo.widget.Repeater.postCreate" prototype="dojo.widget.Repeater"><parameters><parameter name="args"/><parameter name="frag"/></parameters></function><function name="dojo.widget.Repeater._reIndexRows" prototype="dojo.widget.Repeater"/><function name="dojo.widget.Repeater.onDeleteRow" prototype="dojo.widget.Repeater"><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.Repeater.hasRows" prototype="dojo.widget.Repeater"/><function name="dojo.widget.Repeater.getRowCount" prototype="dojo.widget.Repeater"/><function name="dojo.widget.Repeater.deleteRow" prototype="dojo.widget.Repeater"><parameters><parameter name="idx" type="integer"/></parameters></function><function name="dojo.widget.Repeater._changeRowPosition" prototype="dojo.widget.Repeater"><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.Repeater.setRow" prototype="dojo.widget.Repeater"><parameters><parameter name="template" type="dojo.string.substituteParams(template">{"index": "0"});</parameter><parameter name="myObject" type="object"/></parameters></function><function name="dojo.widget.Repeater.getRow" prototype="dojo.widget.Repeater"/><function name="dojo.widget.Repeater._initRow" prototype="dojo.widget.Repeater"><parameters><parameter name="node" type="integer or dom node"/></parameters></function><function name="dojo.widget.Repeater.onAddRow" prototype="dojo.widget.Repeater"><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.Repeater.addRow" prototype="dojo.widget.Repeater"><parameters><parameter name="doInit" type="boolean"/></parameters></function></resource><resource location="dojo.widget.ResizableTextarea"><requires><environment type="common"><require>dojo.widget.*</require><require>dojo.widget.LayoutContainer</require><require>dojo.widget.ResizeHandle</require></environment></requires><function name="dojo.widget.ResizableTextarea"><summary>A resizable textarea. Takes all the parameters (name, value, etc.) that a vanilla textarea takes. usage &lt;textarea dojoType="ResizableTextArea"&gt;...&lt;/textarea&gt;</summary><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="templatePath"/><variable name="templateCssPath"/><variable scope="instance" name="textAreaNode"/><variable scope="instance" name="rootLayout"/><variable scope="instance" name="textAreaContainer"/><variable scope="instance" name="statusBar"/><variable scope="instance" name="statusLabel"/><variable scope="instance" name="resizeHandle"/><variable scope="prototype" name="templatePath"/><variable scope="prototype" name="templateCssPath"/></variables></function><function name="dojo.widget.ResizableTextarea.fillInTemplate" prototype="dojo.widget.ResizableTextarea"><parameters><parameter name="args"/><parameter name="frag"/></parameters></function></resource><resource location="dojo.widget.ResizeHandle"><requires><environment type="common"><require>dojo.widget.*</require><require>dojo.html.layout</require><require>dojo.event.*</require></environment></requires><function name="dojo.widget.ResizeHandle"><summary>The handle on the bottom-right corner of FloatingPane or other widgets that allows the widget to be resized. Typically not used directly.</summary><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="targetElmId"/><variable name="templateCssPath"/><variable name="templateString"/><variable scope="instance" name="targetWidget"/><variable scope="instance" name="targetDomNode"/><variable scope="instance" name="_isSizing"/><variable scope="instance" name="startPoint"/><variable scope="instance" name="startSize"/><variable scope="prototype" name="targetElmId"/><variable scope="prototype" name="templateCssPath"/><variable scope="prototype" name="templateString"/></variables></function><function name="dojo.widget.ResizeHandle.postCreate" prototype="dojo.widget.ResizeHandle"/><function name="dojo.widget.ResizeHandle._beginSizing" prototype="dojo.widget.ResizeHandle"><parameters><parameter name="e" type="Event"/></parameters></function><function name="dojo.widget.ResizeHandle._changeSizing" prototype="dojo.widget.ResizeHandle"><parameters><parameter name="e" type="Event"/></parameters></function><function name="dojo.widget.ResizeHandle._endSizing" prototype="dojo.widget.ResizeHandle"><parameters><parameter name="e" type="Event"/></parameters></function></resource><resource location="dojo.widget.Rounded"><requires><environment type="common"><require>dojo.widget.*</require><require>dojo.widget.ContentPane</require><require>dojo.html.style</require><require>dojo.html.display</require><require>dojo.gfx.color</require></environment></requires><function name="dojo.widget.Rounded"><chains><chain type="call">dojo.widget.ContentPane</chain><chain type="prototype">dojo.widget.ContentPane</chain></chains><variables><variable name="isSafari"/><variable name="boxMargin"/><variable name="radius" type="margin">outside rounded corner box of corners corner string to render false to disable anti-aliasing gets the hex bits of a number</variable><variable name="domNode"/><variable name="corners"/><variable name="antiAlias"/><variable scope="instance" name="domNode.style.height"/><variable scope="instance" name="domNode.style.width"/><variable scope="instance" name="settings"/><variable scope="instance" name="domNode.style.margin"/><variable scope="instance" name="box"/><variable scope="instance" name="topContainer"/><variable scope="instance" name="bottomContainer"/><variable scope="instance" name="masterCorners"/><variable scope="instance" name="antiAlias"/><variable scope="instance" name="boxHeight"/><variable scope="instance" name="boxWidth"/><variable scope="instance" name="borderWidth"/><variable scope="instance" name="boxColour"/><variable scope="instance" name="borderColour"/><variable scope="instance" name="borderString"/><variable scope="instance" name="backgroundImage"/><variable scope="instance" name="box.style.position"/><variable scope="instance" name="applyCorners"/><variable scope="instance" name="box.style.borderTopWidth"/><variable scope="instance" name="box.style.borderBottomWidth"/><variable scope="instance" name="drawPixel"/><variable scope="prototype" name="isSafari"/><variable scope="prototype" name="boxMargin"/><variable scope="prototype" name="radius">outside rounded corner box of corners corner string to render false to disable anti-aliasing gets the hex bits of a number</variable><variable scope="prototype" name="domNode"/><variable scope="prototype" name="corners"/><variable scope="prototype" name="antiAlias"/></variables></function><function name="dojo.widget.Rounded.fillInTemplate" prototype="dojo.widget.Rounded"><parameters><parameter name="args"/><parameter name="frag"/></parameters><chains><chain type="call">dojo.widget.Rounded.superclass.fillInTemplate</chain></chains></function><function name="dojo.widget.Rounded.curvyCorners" prototype="dojo.widget.Rounded"><parameters><parameter name="settings"/></parameters><variables><variable scope="instance" name="topContainer"/><variable scope="instance" name="bottomContainer"/><variable scope="instance" name="box.style.borderTopWidth"/><variable scope="instance" name="box.style.borderBottomWidth"/><variable scope="instance" name="backgroundImage"/></variables></function><function name="dojo.widget.Rounded.curvyCorners.applyCorners" instance="dojo.widget.Rounded.curvyCorners"/><function name="dojo.widget.Rounded.curvyCorners.drawPixel" instance="dojo.widget.Rounded.curvyCorners"><parameters><parameter name="intx"/><parameter name="inty"/><parameter name="colour"/><parameter name="transAmount"/><parameter name="height"/><parameter name="newCorner"/><parameter name="image"/><parameter name="cornerRadius"/></parameters></function><function name="dojo.widget.Rounded.pixelFraction" prototype="dojo.widget.Rounded"><parameters><parameter name="x"/><parameter name="y"/><parameter name="r"/></parameters></function><function name="dojo.widget.Rounded.rgb2Hex" prototype="dojo.widget.Rounded"><parameters><parameter name="rgbColour"/></parameters></function><function name="dojo.widget.Rounded.intToHex" prototype="dojo.widget.Rounded"><parameters><parameter name="strNum"/></parameters></function><function name="dojo.widget.Rounded.makeHex" prototype="dojo.widget.Rounded"><parameters><parameter name="x"/></parameters></function><function name="dojo.widget.Rounded.rgb2Array" prototype="dojo.widget.Rounded"><parameters><parameter name="rgbColour"/></parameters></function></resource><resource location="dojo.widget.Select"><requires><environment type="common"><require>dojo.widget.ComboBox</require><require>dojo.widget.*</require><require>dojo.widget.html.stabile</require></environment></requires><function name="dojo.widget.Select"><chains><chain type="call">dojo.widget.ComboBox</chain><chain type="prototype">dojo.widget.ComboBox</chain></chains><variables><variable name="forceValidOption"/><variable scope="instance" name="comboBoxValue.value"/><variable scope="instance" name="comboBoxSelectionValue.value"/><variable scope="instance" name="textInputNode.value"/><variable scope="prototype" name="forceValidOption"/></variables></function><function name="dojo.widget.Select.setValue" prototype="dojo.widget.Select"><summary>Sets the value of the combobox. TODO: this doesn't work correctly when a URL is specified, because we can't set the label automatically (based on the specified value)</summary><parameters><parameter name="value"/></parameters></function><function name="dojo.widget.Select.setLabel" prototype="dojo.widget.Select"><summary>FIXME, not sure what to do here! Users shouldn't call this function; they should be calling setValue() instead</summary><parameters><parameter name="value"/></parameters></function><function name="dojo.widget.Select.getLabel" prototype="dojo.widget.Select"><returns type="String"/><summary>returns current label</summary></function><function name="dojo.widget.Select.getState" prototype="dojo.widget.Select"><summary>returns current value and label</summary></function><function name="dojo.widget.Select.onKeyUp" prototype="dojo.widget.Select"><summary>internal function</summary><parameters><parameter name="evt" type="Event"/></parameters></function><function name="dojo.widget.Select.setState" prototype="dojo.widget.Select"><summary>internal function to set both value and label</summary><parameters><parameter name="state" type="Object"/></parameters></function><function name="dojo.widget.Select.setAllValues" prototype="dojo.widget.Select"><summary>internal function to set both value and label</summary><parameters><parameter name="value1" type="String"/><parameter name="value2" type="String"/></parameters></function></resource><resource location="dojo.widget.Show"><requires><environment type="common"><require>dojo.widget.*</require><require>dojo.widget.HtmlWidget</require><require>dojo.uri.Uri</require><require>dojo.event.*</require><require>dojo.lfx.*</require><require>dojo.math.curves</require><require>dojo.lang.common</require><require>dojo.lang.func</require></environment></requires><function name="dojo.widget.Show"><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="isContainer"/><variable name="_slide"/><variable name="body"/><variable name="nav"/><variable name="hider"/><variable name="select"/><variable name="option"/><variable name="inNav"/><variable name="debugPane"/><variable name="noClick"/><variable name="templatePath"/><variable name="templateCssPath"/><variable scope="instance" name="debugPane"/><variable scope="instance" name="sourceNode"/><variable scope="instance" name="sourceNode.className"/><variable scope="instance" name="sourceNode.style.display"/><variable scope="instance" name="_slides"/><variable scope="instance" name="option.text"/><variable scope="instance" name="domNode.style.display"/><variable scope="instance" name="_slide"/><variable scope="instance" name="select.selectedIndex"/><variable scope="instance" name="inNav"/><variable scope="prototype" name="isContainer"/><variable scope="prototype" name="_slide"/><variable scope="prototype" name="body"/><variable scope="prototype" name="nav"/><variable scope="prototype" name="hider"/><variable scope="prototype" name="select"/><variable scope="prototype" name="option"/><variable scope="prototype" name="inNav"/><variable scope="prototype" name="debugPane"/><variable scope="prototype" name="noClick"/><variable scope="prototype" name="templatePath"/><variable scope="prototype" name="templateCssPath"/></variables></function><function name="dojo.widget.Show.fillInTemplate" prototype="dojo.widget.Show"><parameters><parameter name="args"/><parameter name="frag"/></parameters></function><function name="dojo.widget.Show.postCreate" prototype="dojo.widget.Show"/><function name="dojo.widget.Show.gotoSlide" prototype="dojo.widget.Show"><parameters><parameter name="slide" type="int"/><parameter name="preventSetHash" type="Boolean"/></parameters></function><function name="dojo.widget.Show.gotoSlideByEvent" prototype="dojo.widget.Show"><parameters><parameter name="event" type="Event"/></parameters></function><function name="dojo.widget.Show.nextSlide" prototype="dojo.widget.Show"><returns type="boolean"/><parameters><parameter name="event" optional="true" type="Event"/></parameters></function><function name="dojo.widget.Show.previousSlide" prototype="dojo.widget.Show"><returns type="boolean"/><parameters><parameter name="event" optional="true" type="Event"/></parameters></function><function name="dojo.widget.Show.stopEvent" prototype="dojo.widget.Show"><parameters><parameter name="ev" type="Event"/></parameters></function><function name="dojo.widget.Show.popUpNav" prototype="dojo.widget.Show"/><function name="dojo.widget.Show.hideNav" prototype="dojo.widget.Show"/><function name="dojo.widget.Show.resizeWindow" prototype="dojo.widget.Show"><parameters><parameter name="ev" type="Event"/></parameters></function></resource><resource location="dojo.widget.ShowAction"><requires><environment type="common"><require>dojo.widget.*</require></environment></requires><function name="dojo.widget.ShowAction"><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="on"/><variable name="action"/><variable name="duration"/><variable name="from"/><variable name="to"/><variable name="auto"/><variable scope="instance" name="action"/><variable scope="prototype" name="on"/><variable scope="prototype" name="action"/><variable scope="prototype" name="duration"/><variable scope="prototype" name="from"/><variable scope="prototype" name="to"/><variable scope="prototype" name="auto"/></variables></function><function name="dojo.widget.ShowAction.postMixInProperties" prototype="dojo.widget.ShowAction"/></resource><resource location="dojo.widget.ShowSlide"><requires><environment type="common"><require>dojo.widget.*</require><require>dojo.lang.common</require><require>dojo.widget.HtmlWidget</require><require>dojo.lfx.html</require><require>dojo.html.display</require><require>dojo.html.layout</require><require>dojo.animation.Animation</require><require>dojo.gfx.color</require></environment></requires><function name="dojo.widget.ShowSlide"><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="title"/><variable name="_action"/><variable name="isContainer"/><variable name="_actions"/><variable name="htmlTitle"/><variable name="debug"/><variable name="noClick"/><variable name="templatePath"/><variable name="templateCssPath"/><variable scope="instance" name="_action"/><variable scope="instance" name="htmlTitle.innerHTML"/><variable scope="instance" name="_components"/><variable scope="instance" name="_actions"/><variable scope="prototype" name="title"/><variable scope="prototype" name="_action"/><variable scope="prototype" name="isContainer"/><variable scope="prototype" name="_actions"/><variable scope="prototype" name="htmlTitle"/><variable scope="prototype" name="debug"/><variable scope="prototype" name="noClick"/><variable scope="prototype" name="templatePath"/><variable scope="prototype" name="templateCssPath"/></variables></function><function name="dojo.widget.ShowSlide.gotoAction" prototype="dojo.widget.ShowSlide"><parameters><parameter name="action" type="int"/></parameters></function><function name="dojo.widget.ShowSlide._nextAction" prototype="dojo.widget.ShowSlide"><returns type="boolean"/><parameters><parameter name="event" optional="true" type="Event"/></parameters></function><function name="dojo.widget.ShowSlide._previousAction" prototype="dojo.widget.ShowSlide"><returns type="boolean"/><parameters><parameter name="event" optional="true" type="Event"/></parameters></function><function name="dojo.widget.ShowSlide.postCreate" prototype="dojo.widget.ShowSlide"/><function name="dojo.widget.ShowSlide.previousAction" prototype="dojo.widget.ShowSlide"><parameters><parameter name="event" optional="true" type="Event"/></parameters></function><function name="dojo.widget.ShowSlide.hideComponent" prototype="dojo.widget.ShowSlide"><parameters><parameter name="component" type="Node"/></parameters></function><function name="dojo.widget.ShowSlide.nextAction" prototype="dojo.widget.ShowSlide"><parameters><parameter name="event" optional="true" type="Event"/></parameters></function><function name="dojo.widget.ShowSlide.callWith" prototype="dojo.widget.ShowSlide"><parameters><parameter name="node" type="Node"/></parameters></function></resource><resource location="dojo.widget.SlideShow"><requires><environment type="common"><require>dojo.event.*</require><require>dojo.widget.*</require><require>dojo.lfx.*</require><require>dojo.html.display</require></environment></requires><function name="dojo.widget.SlideShow"><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="templatePath"/><variable name="templateCssPath"/><variable name="imgUrls"/><variable name="imgUrlBase" type="String">Path prefix to prepend to each file specified in imgUrls Ex: "/foo/bar/images/"</variable><variable name="delay"/><variable name="transitionInterval"/><variable name="imgWidth" type="Integer">Width of image in pixels</variable><variable name="imgHeight" type="Integer">Height of image in pixels</variable><variable name="preventCache"/><variable name="stopped" type="Boolean">is Animation paused? where in the images we are what's in the bg what's in the fg references our animation</variable><variable name="_urlsIdx"/><variable name="_background"/><variable name="_foreground"/><variable name="fadeAnim"/><variable name="startStopButton"/><variable name="img1"/><variable name="img2"/><variable scope="instance" name="width"/><variable scope="instance" name="height"/><variable scope="instance" name="imgUrls.length"/><variable scope="instance" name="preventCache"/><variable scope="instance" name="img2.src"/><variable scope="instance" name="img1.src"/><variable scope="instance" name="stopped" type="Boolean">is Animation paused? where in the images we are what's in the bg what's in the fg references our animation</variable><variable scope="instance" name="startStopButton.value"/><variable scope="instance" name="fadeAnim"/><variable scope="instance" name="_foreground"/><variable scope="instance" name="_background"/><variable scope="instance" name="_urlsIdx"/><variable scope="prototype" name="templatePath"/><variable scope="prototype" name="templateCssPath"/><variable scope="prototype" name="imgUrls"/><variable scope="prototype" name="imgUrlBase">Path prefix to prepend to each file specified in imgUrls Ex: "/foo/bar/images/"</variable><variable scope="prototype" name="delay"/><variable scope="prototype" name="transitionInterval"/><variable scope="prototype" name="imgWidth">Width of image in pixels</variable><variable scope="prototype" name="imgHeight">Height of image in pixels</variable><variable scope="prototype" name="preventCache"/><variable scope="prototype" name="stopped">is Animation paused? where in the images we are what's in the bg what's in the fg references our animation</variable><variable scope="prototype" name="_urlsIdx"/><variable scope="prototype" name="_background"/><variable scope="prototype" name="_foreground"/><variable scope="prototype" name="fadeAnim"/><variable scope="prototype" name="startStopButton"/><variable scope="prototype" name="img1"/><variable scope="prototype" name="img2"/></variables></function><function name="dojo.widget.SlideShow.postMixInProperties" prototype="dojo.widget.SlideShow"/><function name="dojo.widget.SlideShow.fillInTemplate" prototype="dojo.widget.SlideShow"/><function name="dojo.widget.SlideShow._getUrlSuffix" prototype="dojo.widget.SlideShow"/><function name="dojo.widget.SlideShow.togglePaused" prototype="dojo.widget.SlideShow"><summary>pauses or restarts the slideshow</summary></function><function name="dojo.widget.SlideShow._backgroundImageLoaded" prototype="dojo.widget.SlideShow"/><function name="dojo.widget.SlideShow._endTransition" prototype="dojo.widget.SlideShow"/><function name="dojo.widget.SlideShow._loadNextImage" prototype="dojo.widget.SlideShow"><summary>after specified delay, load a new image in that container, and call _backgroundImageLoaded() when it finishes loading</summary></function></resource><resource location="dojo.widget.Slider"><requires><environment type="common"><require>dojo.event.*</require><require>dojo.dnd.*</require><require>dojo.dnd.HtmlDragMove</require><require>dojo.widget.*</require><require>dojo.html.layout</require></environment></requires><function name="dojo.widget._SliderDragMoveSource"><chains><chain type="call">dojo.dnd.HtmlDragMoveSource</chain><chain type="prototype">dojo.dnd.HtmlDragMoveSource</chain></chains></function><function name="dojo.widget._SliderDragMoveObject"><chains><chain type="call">dojo.dnd.HtmlDragMoveObject</chain><chain type="prototype">dojo.dnd.HtmlDragMoveObject</chain></chains></function><function name="dojo.widget.Slider"><summary>Slider Widget. The slider widget comes in three forms: 1. Base Slider widget which supports movement in x and y dimensions 2. Vertical Slider (SliderVertical) widget which supports movement only in the y dimension. 3. Horizontal Slider (SliderHorizontal) widget which supports movement only in the x dimension. The key objects in the widget are: - a container div which displays a bar in the background (Slider object) - a handle inside the container div, which represents the value (sliderHandle DOM node) - the object which moves the handle (_handleMove is of type SliderDragMoveSource) The values for the slider are calculated by grouping pixels together, based on the number of values to be represented by the slider. The number of pixels in a group is called the _valueSize e.g. if slider is 150 pixels long, and is representing the values 0,1,...10 then pixels are grouped into lots of 15 (_valueSize), where: value 0 maps to pixels 0 - 7 1 8 - 22 2 23 - 37 etc. The accuracy of the slider is limited to the number of pixels (i.e tiles &gt; pixels will result in the slider not being able to represent some values). value size (pixels) in the y dimension left most edge of constraining container (pixels) in the X dimension top most edge of constraining container (pixels) in the Y dimension constrained slider size (pixels) in the x dimension constrained slider size (pixels) in the y dimension progress image right clip value (pixels) in the X dimension progress image left clip value (pixels) in the X dimension progress image top clip value (pixels) in the Y dimension progress image bottom clip value (pixels) in the Y dimension half the size of the slider handle (pixels) in the X dimension half the size of the slider handle (pixels) in the Y dimension compute _valueSizeY &amp; _constraintHeight &amp; default snapValuesY</summary><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="minimumX"/><variable name="minimumY"/><variable name="maximumX"/><variable name="maximumY"/><variable name="snapValuesX"/><variable name="snapValuesY"/><variable name="_snapToGrid"/><variable name="isEnableX"/><variable name="isEnableY"/><variable name="_valueSizeX"/><variable name="_valueSizeY"/><variable name="_minX"/><variable name="_minY"/><variable name="_constraintWidth"/><variable name="_constraintHeight"/><variable name="_clipLeft"/><variable name="_clipRight"/><variable name="_clipTop"/><variable name="_clipBottom"/><variable name="_clipXdelta"/><variable name="_clipYdelta"/><variable name="initialValueX"/><variable name="initialValueY"/><variable name="flipX"/><variable name="flipY"/><variable name="clickSelect"/><variable name="activeDrag"/><variable name="templateCssPath"/><variable name="templatePath"/><variable name="_isDragInProgress"/><variable name="bottomButtonSrc"/><variable name="topButtonSrc"/><variable name="leftButtonSrc"/><variable name="rightButtonSrc"/><variable name="backgroundSrc"/><variable name="progressBackgroundSrc"/><variable name="backgroundSize"/><variable name="backgroundStyle"/><variable name="buttonStyleX"/><variable name="buttonStyleY"/><variable name="handleStyle"/><variable name="handleSrc"/><variable name="showButtons"/><variable name="_eventCount"/><variable name="_typamaticTimer"/><variable name="_typamaticFunction"/><variable name="defaultTimeout"/><variable name="timeoutChangeRate"/><variable name="_currentTimeout"/><variable scope="instance" name="_typamaticNode"/><variable scope="instance" name="_typamaticTimer"/><variable scope="instance" name="_currentTimeout"/><variable scope="instance" name="topBorderNode.style.padding"/><variable scope="instance" name="bottomBorderNode.style.padding"/><variable scope="instance" name="topBorderNode.style.paddingBottom"/><variable scope="instance" name="bottomBorderNode.style.paddingTop"/><variable scope="instance" name="rightBorderNode.style.paddingRight"/><variable scope="instance" name="leftBorderNode.style.paddingLeft"/><variable scope="instance" name="domNode.style.padding"/><variable scope="instance" name="topBorderNode.style.borderStyle"/><variable scope="instance" name="rightBorderNode.style.borderStyle"/><variable scope="instance" name="bottomBorderNode.style.borderStyle"/><variable scope="instance" name="leftBorderNode.style.borderStyle"/><variable scope="instance" name="topBorderNode.style.borderColor"/><variable scope="instance" name="rightBorderNode.style.borderColor"/><variable scope="instance" name="bottomBorderNode.style.borderColor"/><variable scope="instance" name="leftBorderNode.style.borderColor"/><variable scope="instance" name="topBorderNode.style.borderWidth"/><variable scope="instance" name="bottomBorderNode.style.borderWidth"/><variable scope="instance" name="topBorderNode.style.borderBottomWidth"/><variable scope="instance" name="bottomBorderNode.style.borderTopWidth"/><variable scope="instance" name="rightBorderNode.style.borderRightWidth"/><variable scope="instance" name="leftBorderNode.style.borderLeftWidth"/><variable scope="instance" name="domNode.style.borderWidth"/><variable scope="instance" name="_handleMove"/><variable scope="instance" name="rightButtonNode.style.width"/><variable scope="instance" name="rightButtonNode.style.visibility"/><variable scope="instance" name="leftButtonNode.style.width"/><variable scope="instance" name="leftButtonNode.style.visibility"/><variable scope="instance" name="bottomButtonNode.style.width"/><variable scope="instance" name="bottomButtonNode.style.visibility"/><variable scope="instance" name="topButtonNode.style.width"/><variable scope="instance" name="topButtonNode.style.visibility"/><variable scope="instance" name="sliderHandleNode.style.left"/><variable scope="instance" name="_clipLeft"/><variable scope="instance" name="_clipRight"/><variable scope="instance" name="progressBackgroundNode.style.clip"/><variable scope="instance" name="_constraintWidth"/><variable scope="instance" name="_clipXdelta"/><variable scope="instance" name="_clipTop"/><variable scope="instance" name="_clipBottom"/><variable scope="instance" name="snapValuesX"/><variable scope="instance" name="_valueSizeX"/><variable scope="instance" name="sliderHandleNode.style.top"/><variable scope="instance" name="_constraintHeight"/><variable scope="instance" name="_clipYdelta"/><variable scope="instance" name="snapValuesY"/><variable scope="instance" name="_valueSizeY"/><variable scope="prototype" name="minimumX"/><variable scope="prototype" name="minimumY"/><variable scope="prototype" name="maximumX"/><variable scope="prototype" name="maximumY"/><variable scope="prototype" name="snapValuesX"/><variable scope="prototype" name="snapValuesY"/><variable scope="prototype" name="_snapToGrid"/><variable scope="prototype" name="isEnableX"/><variable scope="prototype" name="isEnableY"/><variable scope="prototype" name="_valueSizeX"/><variable scope="prototype" name="_valueSizeY"/><variable scope="prototype" name="_minX"/><variable scope="prototype" name="_minY"/><variable scope="prototype" name="_constraintWidth"/><variable scope="prototype" name="_constraintHeight"/><variable scope="prototype" name="_clipLeft"/><variable scope="prototype" name="_clipRight"/><variable scope="prototype" name="_clipTop"/><variable scope="prototype" name="_clipBottom"/><variable scope="prototype" name="_clipXdelta"/><variable scope="prototype" name="_clipYdelta"/><variable scope="prototype" name="initialValueX"/><variable scope="prototype" name="initialValueY"/><variable scope="prototype" name="flipX"/><variable scope="prototype" name="flipY"/><variable scope="prototype" name="clickSelect"/><variable scope="prototype" name="activeDrag"/><variable scope="prototype" name="templateCssPath"/><variable scope="prototype" name="templatePath"/><variable scope="prototype" name="_isDragInProgress"/><variable scope="prototype" name="bottomButtonSrc"/><variable scope="prototype" name="topButtonSrc"/><variable scope="prototype" name="leftButtonSrc"/><variable scope="prototype" name="rightButtonSrc"/><variable scope="prototype" name="backgroundSrc"/><variable scope="prototype" name="progressBackgroundSrc"/><variable scope="prototype" name="backgroundSize"/><variable scope="prototype" name="backgroundStyle"/><variable scope="prototype" name="buttonStyleX"/><variable scope="prototype" name="buttonStyleY"/><variable scope="prototype" name="handleStyle"/><variable scope="prototype" name="handleSrc"/><variable scope="prototype" name="showButtons"/><variable scope="prototype" name="_eventCount"/><variable scope="prototype" name="_typamaticTimer"/><variable scope="prototype" name="_typamaticFunction"/><variable scope="prototype" name="defaultTimeout"/><variable scope="prototype" name="timeoutChangeRate"/><variable scope="prototype" name="_currentTimeout"/></variables></function><function name="dojo.widget.Slider._handleKeyEvents" prototype="dojo.widget.Slider"><parameters><parameter name="evt" type="Event"/></parameters></function><function name="dojo.widget.Slider._pressButton" prototype="dojo.widget.Slider"><parameters><parameter name="buttonNode" type="DomNode"/></parameters></function><function name="dojo.widget.Slider._releaseButton" prototype="dojo.widget.Slider"><parameters><parameter name="buttonNode" type="DomNode"/></parameters></function><function name="dojo.widget.Slider._buttonPressed" prototype="dojo.widget.Slider"><parameters><parameter name="evt" type="Event"/><parameter name="buttonNode" type="DomNode"/></parameters></function><function name="dojo.widget.Slider._bottomButtonPressed" prototype="dojo.widget.Slider"><parameters><parameter name="evt" type="Event"/></parameters></function><function name="dojo.widget.Slider._bottomButtonDoubleClicked" prototype="dojo.widget.Slider"><parameters><parameter name="evt" type="Event"/></parameters></function><function name="dojo.widget.Slider._topButtonPressed" prototype="dojo.widget.Slider"><parameters><parameter name="evt" type="Event"/></parameters></function><function name="dojo.widget.Slider._topButtonDoubleClicked" prototype="dojo.widget.Slider"><parameters><parameter name="evt" type="Event"/></parameters></function><function name="dojo.widget.Slider._leftButtonPressed" prototype="dojo.widget.Slider"><parameters><parameter name="evt" type="Event"/></parameters></function><function name="dojo.widget.Slider._leftButtonDoubleClicked" prototype="dojo.widget.Slider"><parameters><parameter name="evt" type="Event"/></parameters></function><function name="dojo.widget.Slider._rightButtonPressed" prototype="dojo.widget.Slider"><parameters><parameter name="evt" type="Event"/></parameters></function><function name="dojo.widget.Slider._rightButtonDoubleClicked" prototype="dojo.widget.Slider"><parameters><parameter name="evt" type="Event"/></parameters></function><function name="dojo.widget.Slider._buttonReleased" prototype="dojo.widget.Slider"><parameters><parameter name="evt" type="Event"/></parameters></function><function name="dojo.widget.Slider._mouseWheeled" prototype="dojo.widget.Slider"><parameters><parameter name="evt" type="Event"/></parameters></function><function name="dojo.widget.Slider._discardEvent" prototype="dojo.widget.Slider"><parameters><parameter name="evt" type="Event"/></parameters></function><function name="dojo.widget.Slider._setFocus" prototype="dojo.widget.Slider"/><function name="dojo.widget.Slider.fillInTemplate" prototype="dojo.widget.Slider"><parameters><parameter name="args" type="Object"/><parameter name="frag" type="Object"/></parameters></function><function name="dojo.widget.Slider._snapX" prototype="dojo.widget.Slider"><parameters><parameter name="x" type="Number"/></parameters></function><function name="dojo.widget.Slider._calc_valueSizeX" prototype="dojo.widget.Slider"/><function name="dojo.widget.Slider.setValueX" prototype="dojo.widget.Slider"><parameters><parameter name="value" type="Number"/></parameters></function><function name="dojo.widget.Slider.getValueX" prototype="dojo.widget.Slider"/><function name="dojo.widget.Slider._snapY" prototype="dojo.widget.Slider"><parameters><parameter name="y" type="Number"/></parameters></function><function name="dojo.widget.Slider._calc_valueSizeY" prototype="dojo.widget.Slider"/><function name="dojo.widget.Slider.setValueY" prototype="dojo.widget.Slider"><parameters><parameter name="value" type="Number"/></parameters></function><function name="dojo.widget.Slider.getValueY" prototype="dojo.widget.Slider"/><function name="dojo.widget.Slider._onClick" prototype="dojo.widget.Slider"><parameters><parameter name="evt" type="Event"/></parameters></function><function name="dojo.widget.Slider.notifyListeners" prototype="dojo.widget.Slider"/><function name="dojo.widget.Slider.onValueChanged" prototype="dojo.widget.Slider"><parameters><parameter name="x" type="Number"/><parameter name="y" type="Number"/></parameters></function><function name="dojo.widget.SliderHorizontal"><summary>the horizontal slider widget subclass</summary><chains><chain type="call">dojo.widget.Slider</chain><chain type="prototype">dojo.widget.Slider</chain></chains><variables><variable name="isEnableX"/><variable name="isEnableY"/><variable name="initialValue"/><variable name="snapValues"/><variable name="minimum"/><variable name="maximum"/><variable name="buttonStyle"/><variable name="backgroundSize"/><variable name="backgroundSrc"/><variable name="flip"/><variable scope="instance" name="initialValueX"/><variable scope="instance" name="minimumX"/><variable scope="instance" name="maximumX"/><variable scope="instance" name="snapValuesX"/><variable scope="instance" name="buttonStyleX"/><variable scope="instance" name="flipX"/><variable scope="prototype" name="isEnableX"/><variable scope="prototype" name="isEnableY"/><variable scope="prototype" name="initialValue"/><variable scope="prototype" name="snapValues"/><variable scope="prototype" name="minimum"/><variable scope="prototype" name="maximum"/><variable scope="prototype" name="buttonStyle"/><variable scope="prototype" name="backgroundSize"/><variable scope="prototype" name="backgroundSrc"/><variable scope="prototype" name="flip"/></variables></function><function name="dojo.widget.SliderHorizontal.postMixInProperties" prototype="dojo.widget.SliderHorizontal"><chains><chain type="call">dojo.widget.SliderHorizontal.superclass.postMixInProperties</chain></chains></function><function name="dojo.widget.SliderHorizontal.notifyListeners" prototype="dojo.widget.SliderHorizontal"/><function name="dojo.widget.SliderHorizontal.getValue" prototype="dojo.widget.SliderHorizontal"/><function name="dojo.widget.SliderHorizontal.setValue" prototype="dojo.widget.SliderHorizontal"><parameters><parameter name="value" type="Number"/></parameters></function><function name="dojo.widget.SliderHorizontal.onValueChanged" prototype="dojo.widget.SliderHorizontal"><parameters><parameter name="value" type="Number"/></parameters></function><function name="dojo.widget.SliderVertical"><summary>the vertical slider widget subclass</summary><chains><chain type="call">dojo.widget.Slider</chain><chain type="prototype">dojo.widget.Slider</chain></chains><variables><variable name="isEnableX"/><variable name="isEnableY"/><variable name="initialValue"/><variable name="snapValues"/><variable name="minimum"/><variable name="maximum"/><variable name="buttonStyle"/><variable name="backgroundSize"/><variable name="backgroundSrc"/><variable name="flip"/><variable scope="instance" name="initialValueY"/><variable scope="instance" name="minimumY"/><variable scope="instance" name="maximumY"/><variable scope="instance" name="snapValuesY"/><variable scope="instance" name="buttonStyleY"/><variable scope="instance" name="flipY"/><variable scope="prototype" name="isEnableX"/><variable scope="prototype" name="isEnableY"/><variable scope="prototype" name="initialValue"/><variable scope="prototype" name="snapValues"/><variable scope="prototype" name="minimum"/><variable scope="prototype" name="maximum"/><variable scope="prototype" name="buttonStyle"/><variable scope="prototype" name="backgroundSize"/><variable scope="prototype" name="backgroundSrc"/><variable scope="prototype" name="flip"/></variables></function><function name="dojo.widget.SliderVertical.postMixInProperties" prototype="dojo.widget.SliderVertical"><chains><chain type="call">dojo.widget.SliderVertical.superclass.postMixInProperties</chain></chains></function><function name="dojo.widget.SliderVertical.notifyListeners" prototype="dojo.widget.SliderVertical"/><function name="dojo.widget.SliderVertical.getValue" prototype="dojo.widget.SliderVertical"/><function name="dojo.widget.SliderVertical.setValue" prototype="dojo.widget.SliderVertical"><parameters><parameter name="value" type="Number"/></parameters></function><function name="dojo.widget.SliderVertical.onValueChanged" prototype="dojo.widget.SliderVertical"><parameters><parameter name="value" type="Number"/></parameters></function></resource><resource location="dojo.widget.SortableTable"><requires><environment type="common"><require>dojo.lang.common</require><require>dojo.date.format</require><require>dojo.html.*</require><require>dojo.html.selection</require><require>dojo.html.util</require><require>dojo.html.style</require><require>dojo.event.*</require><require>dojo.widget.*</require><require>dojo.widget.HtmlWidget</require></environment></requires><function name="dojo.widget.SortableTable"><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="enableMultipleSelect"/><variable name="maximumNumberOfSelections"/><variable name="enableAlternateRows"/><variable name="minRows"/><variable name="defaultDateFormat"/><variable name="sortIndex"/><variable name="sortDirection"/><variable name="valueField"/><variable name="headClass"/><variable name="tbodyClass"/><variable name="headerClass"/><variable name="headerSortUpClass"/><variable name="headerSortDownClass"/><variable name="rowClass"/><variable name="rowAlternateClass"/><variable name="rowSelectedClass"/><variable name="columnSelected"/><variable name="isContainer"/><variable name="templatePath"/><variable name="templateCssPath"/><variable name="getTypeFromString"/><variable name="compare"/><variable name="isSelected"/><variable name="removeFromSelected"/><variable name="getSelection"/><variable name="getValue"/><variable name="reset"/><variable name="resetSelections"/><variable name="getObjectFromRow"/><variable name="setSelectionByRow"/><variable name="parseColumns"/><variable name="parseData"/><variable name="parseDataFromTable"/><variable name="showSelections"/><variable name="render"/><variable name="onSelect"/><variable name="onUISelect"/><variable name="onHeaderClick"/><variable name="postCreate"/><variable scope="instance" name="data"/><variable scope="instance" name="selected"/><variable scope="instance" name="columns"/><variable scope="prototype" name="enableMultipleSelect"/><variable scope="prototype" name="maximumNumberOfSelections"/><variable scope="prototype" name="enableAlternateRows"/><variable scope="prototype" name="minRows"/><variable scope="prototype" name="defaultDateFormat"/><variable scope="prototype" name="sortIndex"/><variable scope="prototype" name="sortDirection"/><variable scope="prototype" name="valueField"/><variable scope="prototype" name="headClass"/><variable scope="prototype" name="tbodyClass"/><variable scope="prototype" name="headerClass"/><variable scope="prototype" name="headerSortUpClass"/><variable scope="prototype" name="headerSortDownClass"/><variable scope="prototype" name="rowClass"/><variable scope="prototype" name="rowAlternateClass"/><variable scope="prototype" name="rowSelectedClass"/><variable scope="prototype" name="columnSelected"/><variable scope="prototype" name="isContainer"/><variable scope="prototype" name="templatePath"/><variable scope="prototype" name="templateCssPath"/><variable scope="prototype" name="getTypeFromString"/><variable scope="prototype" name="compare"/><variable scope="prototype" name="isSelected"/><variable scope="prototype" name="removeFromSelected"/><variable scope="prototype" name="getSelection"/><variable scope="prototype" name="getValue"/><variable scope="prototype" name="reset"/><variable scope="prototype" name="resetSelections"/><variable scope="prototype" name="getObjectFromRow"/><variable scope="prototype" name="setSelectionByRow"/><variable scope="prototype" name="parseColumns"/><variable scope="prototype" name="parseData"/><variable scope="prototype" name="parseDataFromTable"/><variable scope="prototype" name="showSelections"/><variable scope="prototype" name="render"/><variable scope="prototype" name="onSelect"/><variable scope="prototype" name="onUISelect"/><variable scope="prototype" name="onHeaderClick"/><variable scope="prototype" name="postCreate"/></variables></function></resource><resource location="dojo.widget.Spinner"><requires><environment type="common"><require>dojo.io.*</require><require>dojo.lfx.*</require><require>dojo.html.*</require><require>dojo.html.layout</require><require>dojo.string</require><require>dojo.widget.*</require><require>dojo.widget.IntegerTextbox</require><require>dojo.widget.RealNumberTextbox</require><require>dojo.widget.DateTextbox</require><require>dojo.experimental</require></environment></requires><function name="dojo.widget.IntegerSpinner"><summary>an IntegerTextbox with +/- buttons</summary><variables><variable name="delta"/><variable scope="instance" name="flags.signed"/><variable scope="prototype" name="delta"/></variables></function><function name="dojo.widget.IntegerSpinner.postMixInProperties" prototype="dojo.widget.IntegerSpinner"><parameters><parameter name="args" type="Object"/><parameter name="frag" type="Object"/></parameters><chains><chain type="call">dojo.widget.IntegerSpinner.superclass.postMixInProperties</chain></chains></function><function name="dojo.widget.IntegerSpinner.postCreate" prototype="dojo.widget.IntegerSpinner"><parameters><parameter name="args" type="Object"/><parameter name="frag" type="Object"/></parameters><chains><chain type="call">dojo.widget.IntegerSpinner.superclass.postCreate</chain></chains></function><function name="dojo.widget.IntegerSpinner.adjustValue" prototype="dojo.widget.IntegerSpinner"><parameters><parameter name="direction" type="Number">revalidate existing value</parameter><parameter name="x" type="Number"/></parameters></function><function name="dojo.widget.RealNumberSpinner"><variables><variable name="delta"/><variable scope="instance" name="flags.eSigned"/><variable scope="instance" name="flags.exponent"/><variable scope="instance" name="flags.places"/><variable scope="instance" name="flags.signed"/><variable scope="prototype" name="delta"/></variables></function><function name="dojo.widget.RealNumberSpinner.postMixInProperties" prototype="dojo.widget.RealNumberSpinner"><parameters><parameter name="args" type="Object"/><parameter name="frag" type="Object"/></parameters><chains><chain type="call">dojo.widget.RealNumberSpinner.superclass.postMixInProperties</chain></chains></function><function name="dojo.widget.RealNumberSpinner.postCreate" prototype="dojo.widget.RealNumberSpinner"><parameters><parameter name="args" type="Object"/><parameter name="frag" type="Object"/></parameters><chains><chain type="call">dojo.widget.RealNumberSpinner.superclass.postCreate</chain></chains></function><function name="dojo.widget.RealNumberSpinner.adjustValue" prototype="dojo.widget.RealNumberSpinner"><parameters><parameter name="direction" type="Number"/><parameter name="x" type="Number"/></parameters></function><function name="dojo.widget.TimeSpinner.postMixInProperties" prototype="dojo.widget.TimeSpinner"><parameters><parameter name="args" type="Object"/><parameter name="frag" type="Object"/></parameters><chains><chain type="call">dojo.widget.TimeSpinner.superclass.postMixInProperties</chain></chains></function><function name="dojo.widget.TimeSpinner.postCreate" prototype="dojo.widget.TimeSpinner"><parameters><parameter name="args" type="Object"/><parameter name="frag" type="Object"/></parameters><chains><chain type="call">dojo.widget.TimeSpinner.superclass.postCreate</chain></chains></function><function name="dojo.widget.TimeSpinner.adjustValue" prototype="dojo.widget.TimeSpinner"><parameters><parameter name="direction" type="Number"/><parameter name="x" type="Number"/></parameters></function><function name="dojo.widget.TimeSpinner"><variables><variable scope="instance" name="flags.amSymbol"/><variable scope="instance" name="flags.pmSymbol"/></variables></function></resource><resource location="dojo.widget.SplitContainer"><requires><environment type="common"><require>dojo.widget.*</require><require>dojo.widget.ContentPane</require><require>dojo.widget.HtmlWidget</require><require>dojo.html.style</require><require>dojo.html.layout</require><require>dojo.html.selection</require><require>dojo.io.cookie</require></environment></requires><function name="dojo.widget.SplitContainer"><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="isContainer"/><variable name="templateCssPath"/><variable name="activeSizing"/><variable name="sizerWidth"/><variable name="orientation" type="String">either 'horizontal' or vertical; indicates whether the children are arranged side-by-side or up/down.</variable><variable name="persist" type="Boolean">Save splitter positions in a cookie</variable><variable scope="instance" name="isHorizontal"/><variable scope="instance" name="domNode.style.overflow"/><variable scope="instance" name="paneWidth"/><variable scope="instance" name="paneHeight"/><variable scope="instance" name="sizerWidth"/><variable scope="instance" name="virtualSizer"/><variable scope="instance" name="virtualSizer.style.position"/><variable scope="instance" name="virtualSizer.style.display"/><variable scope="instance" name="virtualSizer.style.zIndex"/><variable scope="instance" name="virtualSizer.className"/><variable scope="instance" name="sizers.length"/><variable scope="instance" name="children.length"/><variable scope="instance" name="paneBefore"/><variable scope="instance" name="paneAfter"/><variable scope="instance" name="isSizing"/><variable scope="instance" name="sizingSplitter"/><variable scope="instance" name="originPos"/><variable scope="instance" name="startPoint"/><variable scope="instance" name="screenToClientOffset"/><variable scope="instance" name="dragOffset"/><variable scope="instance" name="lastPoint"/><variable scope="instance" name="isDraggingLeft"/><variable scope="instance" name="paneBefore.sizeActual"/><variable scope="instance" name="paneAfter.position"/><variable scope="instance" name="paneAfter.sizeActual"/><variable scope="instance" name="virtualSizer.style.left"/><variable scope="instance" name="virtualSizer.style.top"/><variable scope="instance" name="sizers"/><variable scope="prototype" name="isContainer"/><variable scope="prototype" name="templateCssPath"/><variable scope="prototype" name="activeSizing"/><variable scope="prototype" name="sizerWidth"/><variable scope="prototype" name="orientation">either 'horizontal' or vertical; indicates whether the children are arranged side-by-side or up/down.</variable><variable scope="prototype" name="persist">Save splitter positions in a cookie</variable></variables></function><function name="dojo.widget.SplitContainer.postMixInProperties" prototype="dojo.widget.SplitContainer"><chains><chain type="call">dojo.widget.SplitContainer.superclass.postMixInProperties</chain></chains></function><function name="dojo.widget.SplitContainer.fillInTemplate" prototype="dojo.widget.SplitContainer"><chains><chain type="call">dojo.widget.SplitContainer.superclass.fillInTemplate</chain></chains></function><function name="dojo.widget.SplitContainer.onResized" prototype="dojo.widget.SplitContainer"><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.SplitContainer.postCreate" prototype="dojo.widget.SplitContainer"><parameters><parameter name="args"/><parameter name="fragment"/><parameter name="parentComp"/></parameters><chains><chain type="call">dojo.widget.SplitContainer.superclass.postCreate</chain></chains></function><function name="dojo.widget.SplitContainer._injectChild" prototype="dojo.widget.SplitContainer"><parameters><parameter name="child"/></parameters></function><function name="dojo.widget.SplitContainer._addSizer" prototype="dojo.widget.SplitContainer"/><function name="dojo.widget.SplitContainer.removeChild" prototype="dojo.widget.SplitContainer"><parameters><parameter name="widget"/></parameters><chains><chain type="call">dojo.widget.SplitContainer.superclass.removeChild</chain></chains></function><function name="dojo.widget.SplitContainer.addChild" prototype="dojo.widget.SplitContainer"><parameters><parameter name="widget"/></parameters><chains><chain type="call">dojo.widget.SplitContainer.superclass.addChild</chain></chains></function><function name="dojo.widget.SplitContainer._layoutPanels" prototype="dojo.widget.SplitContainer"/><function name="dojo.widget.SplitContainer._movePanel" prototype="dojo.widget.SplitContainer"><parameters><parameter name="panel" type="Widget"/><parameter name="pos"/><parameter name="size"/></parameters></function><function name="dojo.widget.SplitContainer._moveSlider" prototype="dojo.widget.SplitContainer"><parameters><parameter name="slider" type="DomNode"/><parameter name="pos"/><parameter name="size"/></parameters></function><function name="dojo.widget.SplitContainer._growPane" prototype="dojo.widget.SplitContainer"><parameters><parameter name="growth"/><parameter name="pane"/></parameters></function><function name="dojo.widget.SplitContainer._checkSizes" prototype="dojo.widget.SplitContainer"/><function name="dojo.widget.SplitContainer.beginSizing" prototype="dojo.widget.SplitContainer"><parameters><parameter name="e"/><parameter name="i"/></parameters></function><function name="dojo.widget.SplitContainer.changeSizing" prototype="dojo.widget.SplitContainer"><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.SplitContainer.endSizing" prototype="dojo.widget.SplitContainer"><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.SplitContainer.movePoint" prototype="dojo.widget.SplitContainer"/><function name="dojo.widget.SplitContainer.legaliseSplitPoint" prototype="dojo.widget.SplitContainer"><parameters><parameter name="a"/></parameters></function><function name="dojo.widget.SplitContainer._updateSize" prototype="dojo.widget.SplitContainer"/><function name="dojo.widget.SplitContainer._showSizingLine" prototype="dojo.widget.SplitContainer"/><function name="dojo.widget.SplitContainer._hideSizingLine" prototype="dojo.widget.SplitContainer"/><function name="dojo.widget.SplitContainer._moveSizingLine" prototype="dojo.widget.SplitContainer"/><function name="dojo.widget.SplitContainer._getCookieName" prototype="dojo.widget.SplitContainer"><parameters><parameter name="i"/></parameters></function><function name="dojo.widget.SplitContainer._restoreState" prototype="dojo.widget.SplitContainer"/><function name="dojo.widget.SplitContainer._saveState" prototype="dojo.widget.SplitContainer"/><function name="dojo.widget.SplitContainerPanel"><chains><chain type="call">dojo.widget.ContentPane</chain><chain type="prototype">dojo.widget.ContentPane</chain></chains></function><function name="dojo.widget.Widget"><variables><variable scope="prototype" name="sizeMin"/><variable scope="prototype" name="sizeShare"/></variables></function></resource><resource location="dojo.widget.SvgButton"><requires><environment type="common"><require>dojo.experimental</require></environment></requires><function name="dojo.widget.SvgButton"><chains><chain type="call">dojo.widget.DomButton</chain><chain type="call">dojo.widget.SvgWidget</chain><chain type="prototype">dojo.widget.DomButton</chain></chains><variables><variable scope="instance" name="onFoo"/><variable scope="instance" name="label"/><variable scope="instance" name="setLabel"/><variable scope="instance" name="fillInTemplate"/><variable scope="instance" name="textSize"/></variables></function><function name="dojo.widget.SvgButton.onFoo" instance="dojo.widget.SvgButton"/><function name="dojo.widget.SvgButton.setLabel" instance="dojo.widget.SvgButton"><parameters><parameter name="x"/><parameter name="y"/><parameter name="textSize"/><parameter name="label"/><parameter name="shape"/></parameters></function><function name="dojo.widget.SvgButton.fillInTemplate" instance="dojo.widget.SvgButton"><parameters><parameter name="x"/><parameter name="y"/><parameter name="textSize"/><parameter name="label"/><parameter name="shape"/></parameters></function><function name="dojo.widget.SvgButton.shapeString" prototype="dojo.widget.SvgButton"><parameters><parameter name="x"/><parameter name="y"/><parameter name="textSize"/><parameter name="label"/><parameter name="shape"/></parameters></function><function name="dojo.widget.SvgButton.coordinates" prototype="dojo.widget.SvgButton"><parameters><parameter name="x"/><parameter name="y"/><parameter name="textSize"/><parameter name="label"/><parameter name="shape"/></parameters></function><function name="dojo.widget.SvgButton.labelString" prototype="dojo.widget.SvgButton"><parameters><parameter name="x"/><parameter name="y"/><parameter name="textSize"/><parameter name="label"/><parameter name="shape"/></parameters></function><function name="dojo.widget.SvgButton.templateString" prototype="dojo.widget.SvgButton"><parameters><parameter name="x"/><parameter name="y"/><parameter name="textSize"/><parameter name="label"/><parameter name="shape"/></parameters></function></resource><resource location="dojo.widget.SvgWidget"><requires><environment type="common"><require>dojo.widget.DomWidget</require><require>dojo.dom</require><require>dojo.experimental</require></environment></requires><function name="tf"><chains><chain type="call">dojo.widget.SvgWidget</chain></chains><variables><variable scope="instance" name="buildRendering"/><variable scope="instance" name="destroyRendering"/><variable scope="instance" name="postInitialize"/><variable scope="instance" name="widgetType"/><variable scope="instance" name="domNode"/></variables></function><function name="tf.buildRendering" instance="tf"/><function name="tf.destroyRendering" instance="tf"/><function name="tf.postInitialize" instance="tf"/></resource><resource location="dojo.widget.SwtWidget"><requires><environment type="common"><require>dojo.experimental</require><require>dojo.event.*</require><require>dojo.widget.Widget</require><require>dojo.uri.*</require><require>dojo.lang.func</require><require>dojo.lang.extras</require></environment></requires><function name="dojo.widget.SwtWidget"><chains><chain type="call">dojo.widget.Widget</chain><chain type="prototype">dojo.widget.Widget</chain></chains><variables><variable name="display"/><variable name="shell"/><variable scope="prototype" name="display"/><variable scope="prototype" name="shell"/></variables></function><function name="dojo.widget.SwtWidget.show" prototype="dojo.widget.SwtWidget"/><function name="dojo.widget.SwtWidget.hide" prototype="dojo.widget.SwtWidget"/><function name="dojo.widget.SwtWidget.addChild" prototype="dojo.widget.SwtWidget"/><function name="dojo.widget.SwtWidget.registerChild" prototype="dojo.widget.SwtWidget"/><function name="dojo.widget.SwtWidget.addWidgetAsDirectChild" prototype="dojo.widget.SwtWidget"/><function name="dojo.widget.SwtWidget.removeChild" prototype="dojo.widget.SwtWidget"/><function name="dojo.widget.SwtWidget.destroyRendering" prototype="dojo.widget.SwtWidget"/><function name="dojo.widget.SwtWidget.postInitialize" prototype="dojo.widget.SwtWidget"/><function name="dojo.widget.manager.startShell"/></resource><resource location="dojo.widget.TabContainer"><requires><environment type="common"><require>dojo.lang.func</require><require>dojo.widget.*</require><require>dojo.widget.PageContainer</require><require>dojo.event.*</require><require>dojo.html.selection</require><require>dojo.widget.html.layout</require></environment></requires><function name="dojo.widget.TabContainer"><summary>A TabContainer is a container that has multiple panes, but shows only one pane at a time. There are a set of tabs corresponding to each pane, where each tab has the title (aka label) of the pane, and optionally a close button. Publishes topics &lt;widgetId&gt;-addChild, &lt;widgetId&gt;-removeChild, and &lt;widgetId&gt;-selectChild (where &lt;widgetId&gt; is the id of the TabContainer itself.</summary><chains><chain type="call">dojo.widget.PageContainer</chain><chain type="prototype">dojo.widget.PageContainer</chain></chains><variables><variable name="labelPosition"/><variable name="closeButton" type="String">If closebutton=="tab", then every tab gets a close button. DEPRECATED: Should just say closable=true on each pane you want to be closable. override setting in PageContainer</variable><variable name="templateString"/><variable name="templatePath"/><variable name="templateCssPath"/><variable name="selectedTab"/><variable scope="instance" name="selectedChild"/><variable scope="instance" name="tablist"/><variable scope="instance" name="closeButton" type="String">If closebutton=="tab", then every tab gets a close button. DEPRECATED: Should just say closable=true on each pane you want to be closable. override setting in PageContainer</variable><variable scope="prototype" name="labelPosition"/><variable scope="prototype" name="closeButton">If closebutton=="tab", then every tab gets a close button. DEPRECATED: Should just say closable=true on each pane you want to be closable. override setting in PageContainer</variable><variable scope="prototype" name="templateString"/><variable scope="prototype" name="templatePath"/><variable scope="prototype" name="templateCssPath"/><variable scope="prototype" name="selectedTab"/></variables></function><function name="dojo.widget.TabContainer.postMixInProperties" prototype="dojo.widget.TabContainer"><chains><chain type="call">dojo.widget.TabContainer.superclass.postMixInProperties</chain></chains></function><function name="dojo.widget.TabContainer.fillInTemplate" prototype="dojo.widget.TabContainer"><chains><chain type="call">dojo.widget.TabContainer.superclass.fillInTemplate</chain></chains></function><function name="dojo.widget.TabContainer.postCreate" prototype="dojo.widget.TabContainer"><parameters><parameter name="args"/><parameter name="frag"/></parameters><chains><chain type="call">dojo.widget.TabContainer.superclass.postCreate</chain></chains></function><function name="dojo.widget.TabContainer._setupChild" prototype="dojo.widget.TabContainer"><parameters><parameter name="tab"/></parameters><chains><chain type="call">dojo.widget.TabContainer.superclass._setupChild</chain></chains></function><function name="dojo.widget.TabContainer.onResized" prototype="dojo.widget.TabContainer"/><function name="dojo.widget.TabContainer.selectTab" prototype="dojo.widget.TabContainer"><parameters><parameter name="tab"/><parameter name="callingWidget"/></parameters></function><function name="dojo.widget.TabContainer.onKey" prototype="dojo.widget.TabContainer"><summary>Keystroke handling for keystrokes on the tab panel itself (that were bubbled up to me) Ctrl-up: focus is returned from the pane to the tab button Alt-del: close tab</summary><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.TabContainer.destroy" prototype="dojo.widget.TabContainer"><chains><chain type="call">dojo.widget.TabContainer.superclass.destroy</chain></chains></function><function name="dojo.widget.TabController"><summary>Set of tabs (the things with labels and a close button, that you click to show a tab panel). Lets the user select the currently shown pane in a TabContainer or PageContainer. TabController also monitors the TabContainer, and whenever a pane is added or deleted updates itself accordingly.</summary><chains><chain type="call">dojo.widget.PageController</chain><chain type="prototype">dojo.widget.PageController</chain></chains><variables><variable name="templateString"/><variable name="labelPosition"/><variable name="doLayout"/><variable name="class"/><variable name="buttonWidget"/><variable scope="prototype" name="templateString"/><variable scope="prototype" name="labelPosition"/><variable scope="prototype" name="doLayout"/><variable scope="prototype" name="class"/><variable scope="prototype" name="buttonWidget"/></variables></function><function name="dojo.widget.TabController.postMixInProperties" prototype="dojo.widget.TabController"><chains><chain type="call">dojo.widget.TabController.superclass.postMixInProperties</chain></chains></function><function name="dojo.widget.TabButton"><summary>A tab (the thing you click to select a pane). Contains the title (aka label) of the pane, and optionally a close-button to destroy the pane. This is an internal widget and should not be instantiated directly.</summary><chains><chain type="call">dojo.widget.PageButton</chain><chain type="prototype">dojo.widget.PageButton</chain></chains><variables><variable name="templateString"/><variable scope="instance" name="closeButtonStyle"/><variable scope="prototype" name="templateString"/></variables></function><function name="dojo.widget.TabButton.postMixInProperties" prototype="dojo.widget.TabButton"><chains><chain type="call">dojo.widget.TabButton.superclass.postMixInProperties</chain></chains></function><function name="dojo.widget.TabButton.fillInTemplate" prototype="dojo.widget.TabButton"><chains><chain type="call">dojo.widget.TabButton.superclass.fillInTemplate</chain></chains></function><function name="dojo.widget.TabButton.onCloseButtonClick" prototype="dojo.widget.TabButton"><parameters><parameter name="evt" type="Event"/></parameters><chains><chain type="call">dojo.widget.TabButton.superclass.onCloseButtonClick</chain></chains></function><function name="dojo.widget.a11y.TabButton"><summary>Tab for display in high-contrast mode (where background images don't show up). This is an internal widget and shouldn't be instantiated directly.</summary><chains><chain type="call">dojo.widget.TabButton</chain><chain type="prototype">dojo.widget.TabButton</chain></chains><variables><variable name="imgPath"/><variable name="templateString"/><variable scope="prototype" name="imgPath"/><variable scope="prototype" name="templateString"/></variables></function></resource><resource location="dojo.widget.TaskBar"><requires><environment type="common"><require>dojo.widget.*</require><require>dojo.widget.FloatingPane</require><require>dojo.widget.HtmlWidget</require><require>dojo.event.*</require><require>dojo.html.selection</require></environment></requires><function name="dojo.widget.TaskBarItem"><summary>Widget used internally by the TaskBar; shows an icon associated w/a floating pane</summary><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="iconSrc"/><variable name="caption" type="String">name of associated floating pane</variable><variable name="templatePath"/><variable name="templateCssPath"/><variable scope="instance" name="window"/><variable scope="instance" name="window.explodeSrc"/><variable scope="prototype" name="iconSrc"/><variable scope="prototype" name="caption">name of associated floating pane</variable><variable scope="prototype" name="templatePath"/><variable scope="prototype" name="templateCssPath"/></variables></function><function name="dojo.widget.TaskBarItem.fillInTemplate" prototype="dojo.widget.TaskBarItem"/><function name="dojo.widget.TaskBarItem.postCreate" prototype="dojo.widget.TaskBarItem"/><function name="dojo.widget.TaskBarItem.onClick" prototype="dojo.widget.TaskBarItem"/><function name="dojo.widget.TaskBar"><chains><chain type="call">dojo.widget.FloatingPane</chain><chain type="prototype">dojo.widget.FloatingPane</chain></chains><variables><variable name="resizable"/><variable name="titleBarDisplay"/><variable scope="instance" name="_addChildStack"/><variable scope="prototype" name="resizable"/><variable scope="prototype" name="titleBarDisplay"/></variables></function><function name="dojo.widget.TaskBar.addChild" prototype="dojo.widget.TaskBar"><summary>add taskbar item for specified FloatingPane TODO: this should not be called addChild(), as that has another meaning.</summary><parameters><parameter name="child" type="Widget"/></parameters><chains><chain type="call">dojo.widget.TaskBar.superclass.addChild</chain></chains></function></resource><resource location="dojo.widget.Textbox"><requires><environment type="common"><require>dojo.widget.*</require><require>dojo.widget.HtmlWidget</require><require>dojo.widget.Manager</require><require>dojo.widget.Parse</require><require>dojo.xml.Parse</require><require>dojo.lang.array</require><require>dojo.lang.common</require><require>dojo.i18n.common</require></environment></requires><function name="dojo.widget.Textbox"><summary>A generic textbox field. Serves as a base class to derive more specialized functionality in subclasses.</summary><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="className"/><variable name="name"/><variable name="value"/><variable name="type"/><variable name="trim"/><variable name="uppercase"/><variable name="lowercase"/><variable name="ucFirst"/><variable name="digit"/><variable name="htmlfloat" type="String">"none", "left", or "right". CSS float attribute applied to generated dom node.</variable><variable name="templatePath"/><variable name="textbox" type="DomNode">our DOM node event handlers, you can over-ride these in your own subclasses All functions below are called by create from dojo.widget.Widget</variable><variable scope="instance" name="textbox.value"/><variable scope="instance" name="className"/><variable scope="prototype" name="className"/><variable scope="prototype" name="name"/><variable scope="prototype" name="value"/><variable scope="prototype" name="type"/><variable scope="prototype" name="trim"/><variable scope="prototype" name="uppercase"/><variable scope="prototype" name="lowercase"/><variable scope="prototype" name="ucFirst"/><variable scope="prototype" name="digit"/><variable scope="prototype" name="htmlfloat">"none", "left", or "right". CSS float attribute applied to generated dom node.</variable><variable scope="prototype" name="templatePath"/><variable scope="prototype" name="textbox">our DOM node event handlers, you can over-ride these in your own subclasses All functions below are called by create from dojo.widget.Widget</variable></variables></function><function name="dojo.widget.Textbox.fillInTemplate" prototype="dojo.widget.Textbox"/><function name="dojo.widget.Textbox.filter" prototype="dojo.widget.Textbox"><summary>Apply various filters to textbox value</summary></function><function name="dojo.widget.Textbox.onfocus" prototype="dojo.widget.Textbox"/><function name="dojo.widget.Textbox.onblur" prototype="dojo.widget.Textbox"/><function name="dojo.widget.Textbox.mixInProperties" prototype="dojo.widget.Textbox"><parameters><parameter name="localProperties"/><parameter name="frag"/></parameters><chains><chain type="call">dojo.widget.Textbox.superclass.mixInProperties</chain></chains></function></resource><resource location="dojo.widget.TimePicker"><requires><environment type="common"><require>dojo.widget.*</require><require>dojo.widget.HtmlWidget</require><require>dojo.event.*</require><require>dojo.date.serialize</require><require>dojo.date.format</require><require>dojo.dom</require><require>dojo.html.style</require></environment></requires><function name="dojo.widget.TimePicker"><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="isContainer"/><variable name="templatePath"/><variable name="templateCssPath"/><variable scope="instance" name="calendar"/><variable scope="instance" name="widgetStrings"/><variable scope="instance" name="storedTime"/><variable scope="instance" name="time" type="Date">selected time</variable><variable scope="instance" name="selectedTime.anyTime"/><variable scope="instance" name="selectedTime.amPm"/><variable scope="instance" name="useDefaultTime"/><variable scope="instance" name="useDefaultMinutes"/><variable scope="instance" name="currentTime"/><variable scope="instance" name="classNames"/><variable scope="instance" name="any"/><variable scope="instance" name="selectedTime"/><variable scope="instance" name="hourIndexMap"/><variable scope="instance" name="minuteIndexMap"/><variable scope="prototype" name="isContainer"/><variable scope="prototype" name="templatePath"/><variable scope="prototype" name="templateCssPath"/></variables></function><function name="dojo.widget.TimePicker.postMixInProperties" prototype="dojo.widget.TimePicker"><summary>see dojo.widget.DomWidget</summary><parameters><parameter name="localProperties"/><parameter name="frag"/></parameters><chains><chain type="call">dojo.widget.TimePicker.superclass.postMixInProperties</chain></chains></function><function name="dojo.widget.TimePicker.fillInTemplate" prototype="dojo.widget.TimePicker"><summary>see dojo.widget.DomWidget</summary><parameters><parameter name="args"/><parameter name="frag"/></parameters></function><function name="dojo.widget.TimePicker.initData" prototype="dojo.widget.TimePicker"/><function name="dojo.widget.TimePicker.initUI" prototype="dojo.widget.TimePicker"/><function name="dojo.widget.TimePicker.setTime" prototype="dojo.widget.TimePicker"><summary>set the current date and update the UI</summary><parameters><parameter name="date"/></parameters></function><function name="dojo.widget.TimePicker.setDateTime" prototype="dojo.widget.TimePicker"><parameters><parameter name="rfcDate"/></parameters></function><function name="dojo.widget.TimePicker.onClearSelectedHour" prototype="dojo.widget.TimePicker"><parameters><parameter name="evt"/></parameters></function><function name="dojo.widget.TimePicker.onClearSelectedMinute" prototype="dojo.widget.TimePicker"><parameters><parameter name="evt"/></parameters></function><function name="dojo.widget.TimePicker.onClearSelectedAmPm" prototype="dojo.widget.TimePicker"><parameters><parameter name="evt"/></parameters></function><function name="dojo.widget.TimePicker.onClearSelectedAnyTime" prototype="dojo.widget.TimePicker"><parameters><parameter name="evt"/></parameters></function><function name="dojo.widget.TimePicker.clearSelectedHour" prototype="dojo.widget.TimePicker"/><function name="dojo.widget.TimePicker.clearSelectedMinute" prototype="dojo.widget.TimePicker"/><function name="dojo.widget.TimePicker.clearSelectedAmPm" prototype="dojo.widget.TimePicker"/><function name="dojo.widget.TimePicker.clearSelectedAnyTime" prototype="dojo.widget.TimePicker"/><function name="dojo.widget.TimePicker.onSetSelectedHour" prototype="dojo.widget.TimePicker"><parameters><parameter name="evt"/></parameters></function><function name="dojo.widget.TimePicker.setSelectedHour" prototype="dojo.widget.TimePicker"><parameters><parameter name="evt"/></parameters></function><function name="dojo.widget.TimePicker.onSetSelectedMinute" prototype="dojo.widget.TimePicker"><parameters><parameter name="evt"/></parameters></function><function name="dojo.widget.TimePicker.setSelectedMinute" prototype="dojo.widget.TimePicker"><parameters><parameter name="evt"/></parameters></function><function name="dojo.widget.TimePicker.onSetSelectedAmPm" prototype="dojo.widget.TimePicker"><parameters><parameter name="evt"/></parameters></function><function name="dojo.widget.TimePicker.setSelectedAmPm" prototype="dojo.widget.TimePicker"><parameters><parameter name="evt"/></parameters></function><function name="dojo.widget.TimePicker.onSetSelectedAnyTime" prototype="dojo.widget.TimePicker"><parameters><parameter name="evt"/></parameters></function><function name="dojo.widget.TimePicker.setSelectedAnyTime" prototype="dojo.widget.TimePicker"><parameters><parameter name="evt"/></parameters></function><function name="dojo.widget.TimePicker.onClick" prototype="dojo.widget.TimePicker"><parameters><parameter name="evt"/></parameters></function><function name="dojo.widget.TimePicker.onSetTime" prototype="dojo.widget.TimePicker"/><function name="dojo.widget.TimePicker.onValueChanged" prototype="dojo.widget.TimePicker"><summary>the set date event handler</summary><parameters><parameter name="date" type="Date"/></parameters></function><function name="dojo.widget.TimePicker.util" initialized="true"><returns type="FIXME: use dojo.date.toRfc3339 instead"/><summary>utility functions</summary><variables><variable scope="instance" name="toRfcDateTime"/><variable scope="instance" name="fromRfcDateTime"/><variable scope="instance" name="toAmPmHour"/><variable scope="instance" name="fromAmPmHour"/></variables></function><function name="dojo.widget.TimePicker.util.toRfcDateTime" instance="dojo.widget.TimePicker.util"><returns type="FIXME: use dojo.date.toRfc3339 instead"/><summary>formats a Date object to RFC 3339 string</summary><parameters><parameter name="jsDate"/></parameters></function><function name="dojo.widget.TimePicker.util.fromRfcDateTime" instance="dojo.widget.TimePicker.util"><summary>constructs a Date object from RFC 3339 string</summary><parameters><parameter name="rfcDate"/><parameter name="useDefaultMinutes"/><parameter name="isAnyTime"/></parameters></function><function name="dojo.widget.TimePicker.util.toAmPmHour" instance="dojo.widget.TimePicker.util"><summary>converts a 24-hour-based hour value to a 12-hour-based hour value, and an AM/PM flag</summary><parameters><parameter name="hour"/></parameters></function><function name="dojo.widget.TimePicker.util.fromAmPmHour" instance="dojo.widget.TimePicker.util"><summary>converts a 12-hour-based hour value and an AM/PM flag to a 24-hour-based hour value</summary><parameters><parameter name="amPmHour"/><parameter name="isAm"/></parameters></function></resource><resource location="dojo.widget.TitlePane"><requires><environment type="common"><require>dojo.widget.*</require><require>dojo.widget.ContentPane</require><require>dojo.html.style</require><require>dojo.lfx.*</require></environment></requires><function name="dojo.widget.TitlePane"><summary>A pane with a title on top, that can be opened or collapsed.</summary><chains><chain type="call">dojo.widget.ContentPane</chain><chain type="prototype">dojo.widget.ContentPane</chain></chains><variables><variable name="labelNodeClass" type="String">CSS class name for &lt;div&gt; containing title of the pane.</variable><variable name="containerNodeClass"/><variable name="label"/><variable name="open" type="Boolean">Whether pane is opened or closed.</variable><variable name="templatePath"/><variable scope="instance" name="open" type="Boolean">Whether pane is opened or closed.</variable><variable scope="instance" name="labelNode.innerHTML"/><variable scope="prototype" name="labelNodeClass">CSS class name for &lt;div&gt; containing title of the pane.</variable><variable scope="prototype" name="containerNodeClass"/><variable scope="prototype" name="label"/><variable scope="prototype" name="open">Whether pane is opened or closed.</variable><variable scope="prototype" name="templatePath"/></variables></function><function name="dojo.widget.TitlePane.postCreate" prototype="dojo.widget.TitlePane"><chains><chain type="call">dojo.widget.TitlePane.superclass.postCreate</chain></chains></function><function name="dojo.widget.TitlePane.onLabelClick" prototype="dojo.widget.TitlePane"><summary>callback when label is clicked</summary></function><function name="dojo.widget.TitlePane.setLabel" prototype="dojo.widget.TitlePane"><summary>sets the text of the label</summary><parameters><parameter name="label" type="String"/></parameters></function></resource><resource location="dojo.widget.Toaster"><requires><environment type="common"><require>dojo.widget.*</require><require>dojo.lfx.*</require><require>dojo.html.iframe</require></environment></requires><function name="dojo.widget.Toaster"><summary>Message that slides in from the corner of the screen, used for notifications like "new email".</summary><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="templateString"/><variable name="templateCssPath"/><variable name="messageTopic" type="String">Name of topic; anything published to this topic will be displayed as a message. Message format is either String or an object like {message: "hello word", type: "ERROR", delay: 500} messageTypes: Enumeration Possible message types.</variable><variable name="defaultType" type="String">If message type isn't specified (see "messageTopic" parameter), then display message as this type. Possible values in messageTypes enumeration ("MESSAGE", "WARNING", "ERROR", "FATAL")</variable><variable name="clipCssClass"/><variable name="containerCssClass"/><variable name="contentCssClass"/><variable name="messageCssClass"/><variable name="warningCssClass"/><variable name="errorCssClass"/><variable name="fatalCssClass"/><variable name="positionDirection"/><variable name="positionDirectionTypes" type="Enumeration">Possible values for positionDirection parameter</variable><variable name="showDelay" type="Integer">Number of milliseconds to show message TODO: this is a strange name. "duration" makes more sense</variable><variable scope="instance" name="positionDirection"/><variable scope="instance" name="contentNode.innerHTML"/><variable scope="instance" name="containerNode.style.left"/><variable scope="instance" name="containerNode.style.top"/><variable scope="instance" name="slideAnim"/><variable scope="instance" name="fadeAnim"/><variable scope="instance" name="clipNode.style.height"/><variable scope="instance" name="clipNode.style.width"/><variable scope="instance" name="clipNode.style.top"/><variable scope="instance" name="clipNode.style.left"/><variable scope="instance" name="clipNode.style.clip"/><variable scope="instance" name="bgIframe"/><variable scope="instance" name="_scrollConnected"/><variable scope="prototype" name="templateString"/><variable scope="prototype" name="templateCssPath"/><variable scope="prototype" name="messageTopic">Name of topic; anything published to this topic will be displayed as a message. Message format is either String or an object like {message: "hello word", type: "ERROR", delay: 500} messageTypes: Enumeration Possible message types.</variable><variable scope="prototype" name="defaultType">If message type isn't specified (see "messageTopic" parameter), then display message as this type. Possible values in messageTypes enumeration ("MESSAGE", "WARNING", "ERROR", "FATAL")</variable><variable scope="prototype" name="clipCssClass"/><variable scope="prototype" name="containerCssClass"/><variable scope="prototype" name="contentCssClass"/><variable scope="prototype" name="messageCssClass"/><variable scope="prototype" name="warningCssClass"/><variable scope="prototype" name="errorCssClass"/><variable scope="prototype" name="fatalCssClass"/><variable scope="prototype" name="positionDirection"/><variable scope="prototype" name="positionDirectionTypes">Possible values for positionDirection parameter</variable><variable scope="prototype" name="showDelay">Number of milliseconds to show message TODO: this is a strange name. "duration" makes more sense</variable></variables></function><function name="dojo.widget.Toaster.postCreate" prototype="dojo.widget.Toaster"/><function name="dojo.widget.Toaster._handleMessage" prototype="dojo.widget.Toaster"><parameters><parameter name="msg"/></parameters></function><function name="dojo.widget.Toaster.setContent" prototype="dojo.widget.Toaster"><summary>sets and displays the given message and show duration</summary><parameters><parameter name="msg" type="String">the message</parameter><parameter name="messageType" type="Enumeration">type of message; possible values in messageTypes array ("MESSAGE", "WARNING", "ERROR", "FATAL")</parameter><parameter name="delay" type="Integer">number of milliseconds to display message</parameter></parameters></function><function name="dojo.widget.Toaster._placeClip" prototype="dojo.widget.Toaster"/><function name="dojo.widget.Toaster.onSelect" prototype="dojo.widget.Toaster"><summary>callback for when user clicks the message</summary><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.Toaster.show" prototype="dojo.widget.Toaster"><chains><chain type="call">dojo.widget.Toaster.superclass.show</chain></chains></function><function name="dojo.widget.Toaster.hide" prototype="dojo.widget.Toaster"><chains><chain type="call">dojo.widget.Toaster.superclass.hide</chain></chains></function><object name="dojo.widget.Toaster.messageTypes"><variables><variable name="MESSAGE"/><variable name="WARNING"/><variable name="ERROR"/><variable name="FATAL"/></variables></object></resource><resource location="dojo.widget.Toggler"><requires><environment type="common"><require>dojo.widget.*</require><require>dojo.event.*</require></environment></requires><function name="dojo.widget.Toggler"><summary>clicking on this widget shows/hides another widget</summary><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="targetId"/><variable scope="prototype" name="targetId"/></variables></function><function name="dojo.widget.Toggler.fillInTemplate" prototype="dojo.widget.Toggler"/><function name="dojo.widget.Toggler.onClick" prototype="dojo.widget.Toggler"/></resource><resource location="dojo.widget.Toolbar"><requires><environment type="common"><require>dojo.widget.*</require><require>dojo.html.style</require></environment></requires><function name="dojo.widget.ToolbarContainer"><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="isContainer"/><variable name="templateString"/><variable name="templateCssPath"/><variable scope="prototype" name="isContainer"/><variable scope="prototype" name="templateString"/><variable scope="prototype" name="templateCssPath"/></variables></function><function name="dojo.widget.ToolbarContainer.getItem" prototype="dojo.widget.ToolbarContainer"><parameters><parameter name="name"/></parameters></function><function name="dojo.widget.ToolbarContainer.getItems" prototype="dojo.widget.ToolbarContainer"/><function name="dojo.widget.ToolbarContainer.enable" prototype="dojo.widget.ToolbarContainer"><chains><chain type="call">child.enable</chain></chains></function><function name="dojo.widget.ToolbarContainer.disable" prototype="dojo.widget.ToolbarContainer"><chains><chain type="call">child.disable</chain></chains></function><function name="dojo.widget.ToolbarContainer.select" prototype="dojo.widget.ToolbarContainer"><parameters><parameter name="name"/></parameters></function><function name="dojo.widget.ToolbarContainer.deselect" prototype="dojo.widget.ToolbarContainer"><parameters><parameter name="name"/></parameters></function><function name="dojo.widget.ToolbarContainer.getItemsState" prototype="dojo.widget.ToolbarContainer"/><function name="dojo.widget.ToolbarContainer.getItemsActiveState" prototype="dojo.widget.ToolbarContainer"/><function name="dojo.widget.ToolbarContainer.getItemsSelectedState" prototype="dojo.widget.ToolbarContainer"/><function name="dojo.widget.Toolbar"><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="isContainer"/><variable name="templateString"/><variable scope="prototype" name="isContainer"/><variable scope="prototype" name="templateString"/></variables></function><function name="dojo.widget.Toolbar._getItem" prototype="dojo.widget.Toolbar"><parameters><parameter name="node"/></parameters></function><function name="dojo.widget.Toolbar._onmouseover" prototype="dojo.widget.Toolbar"><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.Toolbar._onmouseout" prototype="dojo.widget.Toolbar"><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.Toolbar._onclick" prototype="dojo.widget.Toolbar"><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.Toolbar._onmousedown" prototype="dojo.widget.Toolbar"><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.Toolbar._onmouseup" prototype="dojo.widget.Toolbar"><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.Toolbar.addChild" prototype="dojo.widget.Toolbar"><parameters><parameter name="item"/><parameter name="pos"/><parameter name="props"/></parameters><chains><chain type="call">dojo.widget.Toolbar.superclass.addChild</chain></chains></function><function name="dojo.widget.Toolbar.push" prototype="dojo.widget.Toolbar"/><function name="dojo.widget.Toolbar.getItem" prototype="dojo.widget.Toolbar"><parameters><parameter name="name"/></parameters></function><function name="dojo.widget.Toolbar.getItems" prototype="dojo.widget.Toolbar"/><function name="dojo.widget.Toolbar.getItemsState" prototype="dojo.widget.Toolbar"/><function name="dojo.widget.Toolbar.getItemsActiveState" prototype="dojo.widget.Toolbar"/><function name="dojo.widget.Toolbar.getItemsSelectedState" prototype="dojo.widget.Toolbar"/><function name="dojo.widget.Toolbar.enable" prototype="dojo.widget.Toolbar"/><function name="dojo.widget.Toolbar.disable" prototype="dojo.widget.Toolbar"/><function name="dojo.widget.Toolbar.select" prototype="dojo.widget.Toolbar"/><function name="dojo.widget.Toolbar.deselect" prototype="dojo.widget.Toolbar"/><function name="dojo.widget.Toolbar.setValue" prototype="dojo.widget.Toolbar"/><function name="dojo.widget.ToolbarItem"><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="templateString"/><variable name="_name"/><variable name="_selected"/><variable name="_toggleItem"/><variable name="_icon"/><variable name="_label"/><variable scope="instance" name="_name"/><variable scope="instance" name="_selected"/><variable scope="instance" name="_toggleItem"/><variable scope="instance" name="disabled"/><variable scope="instance" name="_icon"/><variable scope="instance" name="_label"/><variable scope="instance" name="labelNode"/><variable scope="instance" name="labelNode.innerHTML"/><variable scope="prototype" name="templateString"/><variable scope="prototype" name="_name"/><variable scope="prototype" name="_selected"/><variable scope="prototype" name="_toggleItem"/><variable scope="prototype" name="_icon"/><variable scope="prototype" name="_label"/></variables></function><function name="dojo.widget.ToolbarItem.getName" prototype="dojo.widget.ToolbarItem"/><function name="dojo.widget.ToolbarItem.setName" prototype="dojo.widget.ToolbarItem"><parameters><parameter name="value"/></parameters></function><function name="dojo.widget.ToolbarItem.getValue" prototype="dojo.widget.ToolbarItem"/><function name="dojo.widget.ToolbarItem.setValue" prototype="dojo.widget.ToolbarItem"><parameters><parameter name="value"/></parameters></function><function name="dojo.widget.ToolbarItem.isSelected" prototype="dojo.widget.ToolbarItem"/><function name="dojo.widget.ToolbarItem.setSelected" prototype="dojo.widget.ToolbarItem"><parameters><parameter name="is"/><parameter name="force"/><parameter name="preventEvent"/></parameters></function><function name="dojo.widget.ToolbarItem.select" prototype="dojo.widget.ToolbarItem"><parameters><parameter name="force"/><parameter name="preventEvent"/></parameters></function><function name="dojo.widget.ToolbarItem.deselect" prototype="dojo.widget.ToolbarItem"><parameters><parameter name="force"/><parameter name="preventEvent"/></parameters></function><function name="dojo.widget.ToolbarItem.isToggleItem" prototype="dojo.widget.ToolbarItem"/><function name="dojo.widget.ToolbarItem.setToggleItem" prototype="dojo.widget.ToolbarItem"><parameters><parameter name="value"/></parameters></function><function name="dojo.widget.ToolbarItem.toggleSelected" prototype="dojo.widget.ToolbarItem"><parameters><parameter name="force"/></parameters></function><function name="dojo.widget.ToolbarItem.isEnabled" prototype="dojo.widget.ToolbarItem"/><function name="dojo.widget.ToolbarItem.setEnabled" prototype="dojo.widget.ToolbarItem"><parameters><parameter name="is"/><parameter name="force"/><parameter name="preventEvent"/></parameters></function><function name="dojo.widget.ToolbarItem.enable" prototype="dojo.widget.ToolbarItem"><parameters><parameter name="force"/><parameter name="preventEvent"/></parameters></function><function name="dojo.widget.ToolbarItem.disable" prototype="dojo.widget.ToolbarItem"><parameters><parameter name="force"/><parameter name="preventEvent"/></parameters></function><function name="dojo.widget.ToolbarItem.toggleEnabled" prototype="dojo.widget.ToolbarItem"><parameters><parameter name="force"/><parameter name="preventEvent"/></parameters></function><function name="dojo.widget.ToolbarItem.getIcon" prototype="dojo.widget.ToolbarItem"/><function name="dojo.widget.ToolbarItem.setIcon" prototype="dojo.widget.ToolbarItem"><parameters><parameter name="value"/></parameters></function><function name="dojo.widget.ToolbarItem.getLabel" prototype="dojo.widget.ToolbarItem"/><function name="dojo.widget.ToolbarItem.setLabel" prototype="dojo.widget.ToolbarItem"><parameters><parameter name="value"/></parameters></function><function name="dojo.widget.ToolbarItem.update" prototype="dojo.widget.ToolbarItem"/><function name="dojo.widget.ToolbarItem._updateIcon" prototype="dojo.widget.ToolbarItem"/><function name="dojo.widget.ToolbarItem._fireEvent" prototype="dojo.widget.ToolbarItem"><parameters><parameter name="evt"/></parameters></function><function name="dojo.widget.ToolbarItem._onmouseover" prototype="dojo.widget.ToolbarItem"><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.ToolbarItem._onmouseout" prototype="dojo.widget.ToolbarItem"><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.ToolbarItem._onclick" prototype="dojo.widget.ToolbarItem"><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.ToolbarItem._onmousedown" prototype="dojo.widget.ToolbarItem"><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.ToolbarItem._onmouseup" prototype="dojo.widget.ToolbarItem"><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.ToolbarItem.onClick" prototype="dojo.widget.ToolbarItem"/><function name="dojo.widget.ToolbarItem.onMouseOver" prototype="dojo.widget.ToolbarItem"/><function name="dojo.widget.ToolbarItem.onMouseOut" prototype="dojo.widget.ToolbarItem"/><function name="dojo.widget.ToolbarItem.onMouseDown" prototype="dojo.widget.ToolbarItem"/><function name="dojo.widget.ToolbarItem.onMouseUp" prototype="dojo.widget.ToolbarItem"/><function name="dojo.widget.ToolbarItem.fillInTemplate" prototype="dojo.widget.ToolbarItem"><parameters><parameter name="args"/><parameter name="frag"/></parameters></function><function name="dojo.widget.ToolbarButtonGroup"><chains><chain type="call">dojo.widget.ToolbarItem</chain><chain type="prototype">dojo.widget.ToolbarItem</chain></chains><variables><variable name="isContainer"/><variable name="templateString"/><variable name="defaultButton"/><variable name="_value"/><variable name="setValue"/><variable name="preventDeselect"/><variable scope="instance" name="defaultButton"/><variable scope="instance" name="_value"/><variable scope="prototype" name="isContainer"/><variable scope="prototype" name="templateString"/><variable scope="prototype" name="defaultButton"/><variable scope="prototype" name="_value"/><variable scope="prototype" name="setValue"/><variable scope="prototype" name="preventDeselect"/></variables></function><function name="dojo.widget.ToolbarButtonGroup.postCreate" prototype="dojo.widget.ToolbarButtonGroup"/><function name="dojo.widget.ToolbarButtonGroup.addChild" prototype="dojo.widget.ToolbarButtonGroup"><parameters><parameter name="item"/><parameter name="pos"/><parameter name="props"/></parameters><chains><chain type="call">dojo.widget.ToolbarButtonGroup.superclass.addChild</chain></chains></function><function name="dojo.widget.ToolbarButtonGroup._injectChild" prototype="dojo.widget.ToolbarButtonGroup"><parameters><parameter name="widget"/></parameters></function><function name="dojo.widget.ToolbarButtonGroup.getItem" prototype="dojo.widget.ToolbarButtonGroup"><parameters><parameter name="name"/></parameters></function><function name="dojo.widget.ToolbarButtonGroup.getItems" prototype="dojo.widget.ToolbarButtonGroup"/><function name="dojo.widget.ToolbarButtonGroup.onChildSelected" prototype="dojo.widget.ToolbarButtonGroup"><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.ToolbarButtonGroup.onChildDeSelected" prototype="dojo.widget.ToolbarButtonGroup"><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.ToolbarButtonGroup.enable" prototype="dojo.widget.ToolbarButtonGroup"><parameters><parameter name="force"/><parameter name="preventEvent"/></parameters></function><function name="dojo.widget.ToolbarButtonGroup.disable" prototype="dojo.widget.ToolbarButtonGroup"><parameters><parameter name="force"/><parameter name="preventEvent"/></parameters></function><function name="dojo.widget.ToolbarButtonGroup.getValue" prototype="dojo.widget.ToolbarButtonGroup"/><function name="dojo.widget.ToolbarButtonGroup.select" prototype="dojo.widget.ToolbarButtonGroup"><parameters><parameter name="name"/><parameter name="force"/><parameter name="preventEvent"/></parameters></function><function name="dojo.widget.ToolbarButton"><chains><chain type="call">dojo.widget.ToolbarItem</chain><chain type="prototype">dojo.widget.ToolbarItem</chain></chains><variables><variable scope="instance" name="_name"/></variables></function><function name="dojo.widget.ToolbarButton.fillInTemplate" prototype="dojo.widget.ToolbarButton"><parameters><parameter name="args"/><parameter name="frag"/></parameters><chains><chain type="call">dojo.widget.ToolbarButton.superclass.fillInTemplate</chain></chains></function><function name="dojo.widget.ToolbarDialog"><chains><chain type="call">dojo.widget.ToolbarButton</chain><chain type="prototype">dojo.widget.ToolbarButton</chain></chains></function><function name="dojo.widget.ToolbarDialog.fillInTemplate" prototype="dojo.widget.ToolbarDialog"><parameters><parameter name="args"/><parameter name="frag"/></parameters><chains><chain type="call">dojo.widget.ToolbarDialog.superclass.fillInTemplate</chain></chains></function><function name="dojo.widget.ToolbarDialog.showDialog" prototype="dojo.widget.ToolbarDialog"><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.ToolbarDialog.hideDialog" prototype="dojo.widget.ToolbarDialog"><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.ToolbarMenu"><chains><chain type="call">dojo.widget.ToolbarDialog</chain><chain type="prototype">dojo.widget.ToolbarDialog</chain></chains></function><function name="dojo.widget.ToolbarSeparator"><chains><chain type="call">dojo.widget.ToolbarItem</chain><chain type="prototype">dojo.widget.ToolbarItem</chain></chains><variables><variable name="templateString"/><variable name="defaultIconPath"/><variable name="_onmouseover"/><variable name="_onmouseout"/><variable name="_onclick"/><variable name="_onmousedown"/><variable name="_onmouseup"/><variable scope="instance" name="_name"/><variable scope="prototype" name="templateString"/><variable scope="prototype" name="defaultIconPath"/><variable scope="prototype" name="_onmouseover"/><variable scope="prototype" name="_onmouseout"/><variable scope="prototype" name="_onclick"/><variable scope="prototype" name="_onmousedown"/><variable scope="prototype" name="_onmouseup"/></variables></function><function name="dojo.widget.ToolbarSeparator.fillInTemplate" prototype="dojo.widget.ToolbarSeparator"><parameters><parameter name="args"/><parameter name="frag"/><parameter name="skip"/></parameters><chains><chain type="call">dojo.widget.ToolbarSeparator.superclass.fillInTemplate</chain></chains></function><function name="dojo.widget.ToolbarSpace"><chains><chain type="call">dojo.widget.ToolbarSeparator</chain><chain type="prototype">dojo.widget.ToolbarSeparator</chain></chains></function><function name="dojo.widget.ToolbarSpace.fillInTemplate" prototype="dojo.widget.ToolbarSpace"><parameters><parameter name="args"/><parameter name="frag"/><parameter name="skip"/></parameters><chains><chain type="call">dojo.widget.ToolbarSpace.superclass.fillInTemplate</chain></chains></function><function name="dojo.widget.ToolbarSelect"><chains><chain type="call">dojo.widget.ToolbarItem</chain><chain type="prototype">dojo.widget.ToolbarItem</chain></chains><variables><variable name="templateString"/><variable name="_onmouseover"/><variable name="_onmouseout"/><variable name="_onclick"/><variable name="_onmousedown"/><variable name="_onmouseup"/><variable scope="instance" name="selectBox.disabled"/><variable scope="prototype" name="templateString"/><variable scope="prototype" name="_onmouseover"/><variable scope="prototype" name="_onmouseout"/><variable scope="prototype" name="_onclick"/><variable scope="prototype" name="_onmousedown"/><variable scope="prototype" name="_onmouseup"/></variables></function><function name="dojo.widget.ToolbarSelect.fillInTemplate" prototype="dojo.widget.ToolbarSelect"><parameters><parameter name="args"/><parameter name="frag"/></parameters><chains><chain type="call">dojo.widget.ToolbarSelect.superclass.fillInTemplate</chain></chains></function><function name="dojo.widget.ToolbarSelect.changed" prototype="dojo.widget.ToolbarSelect"><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.ToolbarSelect.setEnabled" prototype="dojo.widget.ToolbarSelect"><parameters><parameter name="is"/><parameter name="force"/><parameter name="preventEvent"/></parameters><chains><chain type="call">dojo.widget.ToolbarSelect.superclass.setEnabled</chain></chains></function><function name="dojo.widget.ToolbarColorDialog"><chains><chain type="call">dojo.widget.ToolbarDialog</chain><chain type="prototype">dojo.widget.ToolbarDialog</chain></chains><variables><variable name="palette"/><variable scope="instance" name="dialog"/><variable scope="instance" name="dialog.domNode.style.position"/><variable scope="instance" name="_value"/><variable scope="prototype" name="palette"/></variables></function><function name="dojo.widget.ToolbarColorDialog.fillInTemplate" prototype="dojo.widget.ToolbarColorDialog"><parameters><parameter name="args"/><parameter name="frag"/></parameters><chains><chain type="call">dojo.widget.ToolbarColorDialog.superclass.fillInTemplate</chain></chains></function><function name="dojo.widget.ToolbarColorDialog._setValue" prototype="dojo.widget.ToolbarColorDialog"><parameters><parameter name="color"/></parameters></function><function name="dojo.widget.ToolbarColorDialog.showDialog" prototype="dojo.widget.ToolbarColorDialog"><parameters><parameter name="e"/></parameters><chains><chain type="call">dojo.widget.ToolbarColorDialog.superclass.showDialog</chain></chains></function><function name="dojo.widget.ToolbarColorDialog.hideDialog" prototype="dojo.widget.ToolbarColorDialog"><parameters><parameter name="e"/></parameters><chains><chain type="call">dojo.widget.ToolbarColorDialog.superclass.hideDialog</chain></chains></function><function name="dojo.widget.ToolbarItem.make"><parameters><parameter name="wh"/><parameter name="whIsType"/><parameter name="props"/></parameters></function><function name="dojo.widget.ToolbarMenuItem"/><function name="dojo.widget.Icon"><parameters><parameter name="enabled"/><parameter name="disabled"/><parameter name="hovered"/><parameter name="selected"/></parameters><variables><variable scope="instance" name="getState"/><variable scope="instance" name="setState"/><variable scope="instance" name="setSrc"/><variable scope="instance" name="setIcon"/><variable scope="instance" name="enable"/><variable scope="instance" name="disable"/><variable scope="instance" name="hover"/><variable scope="instance" name="select"/><variable scope="instance" name="getSize"/><variable scope="instance" name="setSize"/><variable scope="instance" name="getNode"/><variable scope="instance" name="getSrc"/><variable scope="instance" name="update"/></variables></function><function name="dojo.widget.Icon.getState" instance="dojo.widget.Icon"/><function name="dojo.widget.Icon.setState" instance="dojo.widget.Icon"><parameters><parameter name="value"/></parameters></function><function name="dojo.widget.Icon.setSrc" instance="dojo.widget.Icon"><parameters><parameter name="state"/><parameter name="value"/></parameters></function><function name="dojo.widget.Icon.setIcon" instance="dojo.widget.Icon"><parameters><parameter name="icon"/></parameters></function><function name="dojo.widget.Icon.enable" instance="dojo.widget.Icon"/><function name="dojo.widget.Icon.disable" instance="dojo.widget.Icon"/><function name="dojo.widget.Icon.hover" instance="dojo.widget.Icon"/><function name="dojo.widget.Icon.select" instance="dojo.widget.Icon"/><function name="dojo.widget.Icon.getSize" instance="dojo.widget.Icon"/><function name="dojo.widget.Icon.setSize" instance="dojo.widget.Icon"><parameters><parameter name="w"/><parameter name="h"/></parameters></function><function name="dojo.widget.Icon.getNode" instance="dojo.widget.Icon"/><function name="dojo.widget.Icon.getSrc" instance="dojo.widget.Icon"><parameters><parameter name="state"/></parameters></function><function name="dojo.widget.Icon.update" instance="dojo.widget.Icon"/><function name="dojo.widget.Icon.make"><parameters><parameter name="a"/><parameter name="b"/><parameter name="c"/><parameter name="d"/></parameters></function><function name="props||{}"><variables><variable name="icon"/><variable name="icon"/><variable name="label"/><variable name="icon"/><variable name="label"/></variables></function></resource><resource location="dojo.widget.Tooltip"><requires><environment type="common"><require>dojo.widget.ContentPane</require><require>dojo.widget.PopupContainer</require><require>dojo.uri.Uri</require><require>dojo.widget.*</require><require>dojo.event.*</require><require>dojo.html.style</require><require>dojo.html.util</require></environment></requires><function name="dojo.widget.Tooltip"><summary>Pops up a tooltip (a help message) when you hover over a node</summary><variables><variable name="caption"/><variable name="showDelay" type="Integer">Number of milliseconds to wait after hovering over the object, before the tooltip is displayed.</variable><variable name="hideDelay" type="Integer">Number of milliseconds to wait after moving mouse off of the object (or off of the tooltip itself), before erasing the tooltip</variable><variable name="connectId" type="String">Id of domNode to attach the tooltip to. (When user hovers over specified dom node, the tooltip will appear.)</variable><variable name="templateCssPath"/><variable scope="instance" name="_connectNode"/><variable scope="instance" name="_mouse"/><variable scope="instance" name="_tracking"/><variable scope="instance" name="_hover"/><variable scope="instance" name="_showTimer"/><variable scope="instance" name="_hideTimer"/><variable scope="prototype" name="caption"/><variable scope="prototype" name="showDelay">Number of milliseconds to wait after hovering over the object, before the tooltip is displayed.</variable><variable scope="prototype" name="hideDelay">Number of milliseconds to wait after moving mouse off of the object (or off of the tooltip itself), before erasing the tooltip</variable><variable scope="prototype" name="connectId">Id of domNode to attach the tooltip to. (When user hovers over specified dom node, the tooltip will appear.)</variable><variable scope="prototype" name="templateCssPath"/></variables></function><function name="dojo.widget.Tooltip.fillInTemplate" prototype="dojo.widget.Tooltip"><parameters><parameter name="args"/><parameter name="frag"/></parameters><chains><chain type="call">dojo.widget.Tooltip.superclass.fillInTemplate</chain></chains></function><function name="dojo.widget.Tooltip.postCreate" prototype="dojo.widget.Tooltip"><parameters><parameter name="args"/><parameter name="frag"/></parameters><chains><chain type="call">dojo.widget.Tooltip.superclass.postCreate</chain></chains></function><function name="dojo.widget.Tooltip._onMouseOver" prototype="dojo.widget.Tooltip"><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.Tooltip._onMouseMove" prototype="dojo.widget.Tooltip"><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.Tooltip._onHover" prototype="dojo.widget.Tooltip"><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.Tooltip._onUnHover" prototype="dojo.widget.Tooltip"><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.Tooltip.open" prototype="dojo.widget.Tooltip"><summary>display the tooltip; usually not called directly.</summary><chains><chain type="call">dojo.widget.PopupContainerBase.prototype.open</chain></chains></function><function name="dojo.widget.Tooltip.close" prototype="dojo.widget.Tooltip"><summary>hide the tooltip; usually not called directly.</summary><chains><chain type="call">dojo.widget.PopupContainerBase.prototype.close</chain></chains></function><function name="dojo.widget.Tooltip._position" prototype="dojo.widget.Tooltip"/><function name="dojo.widget.Tooltip._loadedContent" prototype="dojo.widget.Tooltip"/><function name="dojo.widget.Tooltip.checkSize" prototype="dojo.widget.Tooltip"/><function name="dojo.widget.Tooltip.uninitialize" prototype="dojo.widget.Tooltip"/></resource><resource location="dojo.widget.Tree"><requires><environment type="common"><require>dojo.widget.*</require><require>dojo.event.*</require><require>dojo.io.*</require><require>dojo.widget.HtmlWidget</require><require>dojo.widget.TreeNode</require><require>dojo.html.common</require><require>dojo.html.selection</require><require>dojo.widget.TreeBasicController</require><require>dojo.widget.TreeSelector</require></environment></requires><function name="dojo.widget.Tree"><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="widgetType"/><variable name="isContainer"/><variable name="DNDMode"/><variable name="lockLevel"/><variable name="strictFolders"/><variable name="DNDAcceptTypes"/><variable name="templateCssPath"/><variable name="templateString"/><variable name="isExpanded"/><variable name="isTree"/><variable name="objectId"/><variable name="controller"/><variable name="selector"/><variable name="menu"/><variable name="expandLevel"/><variable name="blankIconSrc"/><variable name="gridIconSrcT"/><variable name="gridIconSrcL"/><variable name="gridIconSrcV"/><variable name="gridIconSrcP"/><variable name="gridIconSrcC"/><variable name="gridIconSrcX"/><variable name="gridIconSrcY"/><variable name="gridIconSrcZ"/><variable name="expandIconSrcPlus"/><variable name="expandIconSrcMinus"/><variable name="expandIconSrcLoading"/><variable name="iconWidth"/><variable name="iconHeight"/><variable name="showGrid"/><variable name="showRootGrid"/><variable scope="instance" name="controller"/><variable scope="instance" name="selector"/><variable scope="instance" name="DNDMode"/><variable scope="instance" name="expandLevel"/><variable scope="instance" name="menu"/><variable scope="instance" name="containerNode"/><variable scope="instance" name="state"/><variable scope="instance" name="lockLevel"/><variable scope="instance" name="eventNames"/><variable scope="instance" name="tree"/><variable scope="instance" name="DNDAcceptTypes"/><variable scope="instance" name="actionsDisabled"/><variable scope="prototype" name="widgetType"/><variable scope="prototype" name="isContainer"/><variable scope="prototype" name="DNDMode"/><variable scope="prototype" name="lockLevel"/><variable scope="prototype" name="strictFolders"/><variable scope="prototype" name="DNDAcceptTypes"/><variable scope="prototype" name="templateCssPath"/><variable scope="prototype" name="templateString"/><variable scope="prototype" name="isExpanded"/><variable scope="prototype" name="isTree"/><variable scope="prototype" name="objectId"/><variable scope="prototype" name="controller"/><variable scope="prototype" name="selector"/><variable scope="prototype" name="menu"/><variable scope="prototype" name="expandLevel"/><variable scope="prototype" name="blankIconSrc"/><variable scope="prototype" name="gridIconSrcT"/><variable scope="prototype" name="gridIconSrcL"/><variable scope="prototype" name="gridIconSrcV"/><variable scope="prototype" name="gridIconSrcP"/><variable scope="prototype" name="gridIconSrcC"/><variable scope="prototype" name="gridIconSrcX"/><variable scope="prototype" name="gridIconSrcY"/><variable scope="prototype" name="gridIconSrcZ"/><variable scope="prototype" name="expandIconSrcPlus"/><variable scope="prototype" name="expandIconSrcMinus"/><variable scope="prototype" name="expandIconSrcLoading"/><variable scope="prototype" name="iconWidth"/><variable scope="prototype" name="iconHeight"/><variable scope="prototype" name="showGrid"/><variable scope="prototype" name="showRootGrid"/></variables></function><function name="dojo.widget.Tree.actionIsDisabled" prototype="dojo.widget.Tree"><parameters><parameter name="action"/></parameters></function><function name="dojo.widget.Tree.getInfo" prototype="dojo.widget.Tree"/><function name="dojo.widget.Tree.initializeController" prototype="dojo.widget.Tree"/><function name="dojo.widget.Tree.initializeSelector" prototype="dojo.widget.Tree"/><function name="dojo.widget.Tree.initialize" prototype="dojo.widget.Tree"><parameters><parameter name="args"/><parameter name="frag"/></parameters></function><function name="dojo.widget.Tree.postCreate" prototype="dojo.widget.Tree"/><function name="dojo.widget.Tree.createDOMNode" prototype="dojo.widget.Tree"/><function name="dojo.widget.Tree.destroy" prototype="dojo.widget.Tree"><chains><chain type="call">dojo.widget.HtmlWidget.prototype.destroy</chain></chains></function><function name="dojo.widget.Tree.addChild" prototype="dojo.widget.Tree"><parameters><parameter name="child"/><parameter name="index"/></parameters><chains><chain type="call">this.doAddChild</chain></chains></function><function name="dojo.widget.Tree.doAddChild" prototype="dojo.widget.Tree"><parameters><parameter name="child"/><parameter name="index"/></parameters></function><function name="dojo.widget.Tree.makeBlankImg" prototype="dojo.widget.Tree"/><function name="dojo.widget.Tree.updateIconTree" prototype="dojo.widget.Tree"/><function name="dojo.widget.Tree.toString" prototype="dojo.widget.Tree"/><function name="dojo.widget.Tree.move" prototype="dojo.widget.Tree"><parameters><parameter name="child"/><parameter name="newParent"/><parameter name="index"/></parameters><chains><chain type="call">this.doMove</chain></chains></function><function name="dojo.widget.Tree.doMove" prototype="dojo.widget.Tree"><parameters><parameter name="child"/><parameter name="newParent"/><parameter name="index"/></parameters></function><function name="dojo.widget.Tree.removeNode" prototype="dojo.widget.Tree"><parameters><parameter name="child"/></parameters><chains><chain type="call">this.doRemoveNode</chain></chains></function><function name="dojo.widget.Tree.doRemoveNode" prototype="dojo.widget.Tree"><parameters><parameter name="child"/></parameters></function><function name="dojo.widget.Tree.markLoading" prototype="dojo.widget.Tree"/><function name="dojo.widget.Tree.unMarkLoading" prototype="dojo.widget.Tree"/><function name="dojo.widget.Tree.lock" prototype="dojo.widget.Tree"/><function name="dojo.widget.Tree.unlock" prototype="dojo.widget.Tree"/><function name="dojo.widget.Tree.isLocked" prototype="dojo.widget.Tree"/><function name="dojo.widget.Tree.flushLock" prototype="dojo.widget.Tree"/><object name="dojo.widget.Tree.eventNamesDefault"><variables><variable name="createDOMNode"/><variable name="treeCreate"/><variable name="treeDestroy"/><variable name="treeClick"/><variable name="iconClick"/><variable name="titleClick"/><variable name="moveFrom"/><variable name="moveTo"/><variable name="addChild"/><variable name="removeNode"/><variable name="expand" type="new">child does not get domNode filled in (only template draft) until addChild-&gt;createDOMNode is called(program way) OR createDOMNode (html-way) hook events to operate on new DOMNode, create dropTargets etc tree created.. Perform tree-wide actions if needed icon clicked node icon clicked node title clicked</variable><variable name="collapse"/></variables></object><object name="dojo.widget.Tree.DNDModes"><variables><variable name="BETWEEN"/><variable name="ONTO"/></variables></object><object name="dojo.widget.Tree.actions"><variables><variable name="ADDCHILD"/></variables></object></resource><resource location="dojo.widget.TreeBasicController"><requires><environment type="common"><require>dojo.event.*</require><require>dojo.json</require><require>dojo.io.*</require><require>dojo.dnd.TreeDragAndDrop</require></environment></requires><function name="dojo.widget.TreeBasicController"><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="widgetType"/><variable name="DNDController"/><variable name="dieWithTree"/><variable scope="instance" name="DNDController"/><variable scope="instance" name="node"/><variable scope="instance" name="expandLevel"/><variable scope="instance" name="process"/><variable scope="prototype" name="widgetType"/><variable scope="prototype" name="DNDController"/><variable scope="prototype" name="dieWithTree"/></variables></function><function name="dojo.widget.TreeBasicController.initialize" prototype="dojo.widget.TreeBasicController"><parameters><parameter name="args"/><parameter name="frag"/></parameters></function><function name="dojo.widget.TreeBasicController.listenTree" prototype="dojo.widget.TreeBasicController"><parameters><parameter name="tree"/></parameters></function><function name="dojo.widget.TreeBasicController.unlistenTree" prototype="dojo.widget.TreeBasicController"><parameters><parameter name="tree"/></parameters></function><function name="dojo.widget.TreeBasicController.onTreeDestroy" prototype="dojo.widget.TreeBasicController"><parameters><parameter name="message"/></parameters></function><function name="dojo.widget.TreeBasicController.onCreateDOMNode" prototype="dojo.widget.TreeBasicController"><parameters><parameter name="message"/></parameters></function><function name="dojo.widget.TreeBasicController.onTreeCreate" prototype="dojo.widget.TreeBasicController"><parameters><parameter name="message"/></parameters></function><function name="dojo.widget.TreeBasicController.expandToLevel" prototype="dojo.widget.TreeBasicController"><parameters><parameter name="node"/><parameter name="level"/></parameters></function><function name="dojo.widget.TreeBasicController.expandToLevel.process" instance="dojo.widget.TreeBasicController.expandToLevel"/><function name="dojo.widget.TreeBasicController.onTreeClick" prototype="dojo.widget.TreeBasicController"><parameters><parameter name="message"/></parameters></function><function name="dojo.widget.TreeBasicController.expand" prototype="dojo.widget.TreeBasicController"><parameters><parameter name="node"/><parameter name="sync"/><parameter name="callObj"/><parameter name="callFunc"/></parameters><chains><chain type="call">callFunc</chain></chains></function><function name="dojo.widget.TreeBasicController.collapse" prototype="dojo.widget.TreeBasicController"><parameters><parameter name="node"/></parameters></function><function name="dojo.widget.TreeBasicController.canMove" prototype="dojo.widget.TreeBasicController"><parameters><parameter name="child"/><parameter name="newParent"/></parameters></function><function name="dojo.widget.TreeBasicController.move" prototype="dojo.widget.TreeBasicController"><parameters><parameter name="child"/><parameter name="newParent"/><parameter name="index"/></parameters></function><function name="dojo.widget.TreeBasicController.doMove" prototype="dojo.widget.TreeBasicController"><parameters><parameter name="child"/><parameter name="newParent"/><parameter name="index"/></parameters></function><function name="dojo.widget.TreeBasicController.canRemoveNode" prototype="dojo.widget.TreeBasicController"><parameters><parameter name="child"/></parameters></function><function name="dojo.widget.TreeBasicController.removeNode" prototype="dojo.widget.TreeBasicController"><parameters><parameter name="node"/><parameter name="callObj"/><parameter name="callFunc"/></parameters></function><function name="dojo.widget.TreeBasicController.doRemoveNode" prototype="dojo.widget.TreeBasicController"><parameters><parameter name="node"/><parameter name="callObj"/><parameter name="callFunc"/></parameters><chains><chain type="call">callFunc</chain></chains></function><function name="dojo.widget.TreeBasicController.canCreateChild" prototype="dojo.widget.TreeBasicController"><parameters><parameter name="parent"/><parameter name="index"/><parameter name="data"/></parameters></function><function name="dojo.widget.TreeBasicController.createChild" prototype="dojo.widget.TreeBasicController"><parameters><parameter name="parent"/><parameter name="index"/><parameter name="data"/><parameter name="callObj"/><parameter name="callFunc"/></parameters><chains><chain type="call">this.doCreateChild</chain></chains></function><function name="dojo.widget.TreeBasicController.doCreateChild" prototype="dojo.widget.TreeBasicController"><parameters><parameter name="parent"/><parameter name="index"/><parameter name="data"/><parameter name="callObj"/><parameter name="callFunc"/></parameters><chains><chain type="call">callFunc</chain></chains></function></resource><resource location="dojo.widget.TreeBasicControllerV3"><requires><environment type="common"><require>dojo.event.*</require><require>dojo.json</require><require>dojo.io.*</require><require>dojo.widget.TreeCommon</require><require>dojo.widget.TreeNodeV3</require><require>dojo.widget.TreeV3</require><require>dojo.widget.TreeTimeoutIterator</require></environment></requires><function name="dojo.widget.TreeBasicControllerV3"><variables><variable name="listenTreeEvents"/><variable name="editor"/><variable name="batchExpandTimeout"/><variable scope="instance" name="editor"/><variable scope="instance" name="editor.controller"/><variable scope="instance" name="listenedTrees"/><variable scope="prototype" name="listenTreeEvents"/><variable scope="prototype" name="editor"/><variable scope="prototype" name="batchExpandTimeout"/></variables></function><function name="dojo.widget.TreeBasicControllerV3.listenNodeFilter" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="elem"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3.initialize" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="args"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3.getInfo" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="elem"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3.onBeforeTreeDestroy" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="message"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3.onAfterSetFolder" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="message"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3._focusNextVisible" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="nodeWidget"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3._focusPreviousVisible" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="nodeWidget"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3._focusZoomIn" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="nodeWidget"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3._focusZoomOut" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="node"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3.onFocusNode" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3.onBlurNode" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3._focusLabel" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="node"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3.onKey" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3.onFocusTree" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3.onAfterTreeCreate" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="message"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3.onTreeMouseDown" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3.onTreeClick" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3.processExpandClick" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="node"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3.expandAll" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="nodeOrTree"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3.collapseAll" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="nodeOrTree"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3.expandToNode" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="node"/><parameter name="withSelected"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3.expandToLevel" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="nodeOrTree"/><parameter name="level"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3.getWidgetByNode" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="node"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3.expand" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="node"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3.collapse" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="node"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3.canEditLabel" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="node"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3.editLabelStart" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="node"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3.editLabelFinish" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="save"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3.doEditLabelStart" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="node"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3.doEditLabelFinish" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="save"/><parameter name="server_data"/></parameters><chains><chain type="call">dojo.widget.TreeBasicControllerV3.prototype.doCreateChild</chain></chains></function><function name="dojo.widget.TreeBasicControllerV3.makeDefaultNode" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="parent"/><parameter name="index"/></parameters><chains><chain type="call">dojo.widget.TreeBasicControllerV3.prototype.doCreateChild</chain></chains></function><function name="dojo.widget.TreeBasicControllerV3.runStages" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="check"/><parameter name="prepare"/><parameter name="make"/><parameter name="finalize"/><parameter name="expose"/><parameter name="args"/></parameters><chains><chain type="call">check</chain><chain type="call">prepare</chain><chain type="call">make</chain><chain type="call">finalize</chain><chain type="call">expose</chain></chains></function><function name="dojo.widget.TreeBasicControllerV3.createAndEdit" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="parent"/><parameter name="index"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3.canClone" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="child"/><parameter name="newParent"/><parameter name="index"/><parameter name="deep"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3.clone" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="child"/><parameter name="newParent"/><parameter name="index"/><parameter name="deep"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3.exposeClone" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="child"/><parameter name="newParent"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3.doClone" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="child"/><parameter name="newParent"/><parameter name="index"/><parameter name="deep"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3.canDetach" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="child"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3.detach" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="node"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3.doDetach" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="node"/><parameter name="callObj"/><parameter name="callFunc"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3.canDestroyChild" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="child"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3.destroyChild" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="node"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3.doDestroyChild" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="node"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3.canMoveNotANode" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="child"/><parameter name="parent"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3.canMove" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="child"/><parameter name="newParent"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3.move" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="child"/><parameter name="newParent"/><parameter name="index" type=",..."/></parameters></function><function name="dojo.widget.TreeBasicControllerV3.doMove" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="child"/><parameter name="newParent"/><parameter name="index"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3.exposeMove" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="child"/><parameter name="newParent"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3.canCreateChild" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="parent"/><parameter name="index"/><parameter name="data"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3.createChild" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="parent"/><parameter name="index"/><parameter name="data"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3.prepareCreateChild" prototype="dojo.widget.TreeBasicControllerV3"/><function name="dojo.widget.TreeBasicControllerV3.finalizeCreateChild" prototype="dojo.widget.TreeBasicControllerV3"/><function name="dojo.widget.TreeBasicControllerV3.doCreateChild" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="parent"/><parameter name="index"/><parameter name="data"/></parameters></function><function name="dojo.widget.TreeBasicControllerV3.exposeCreateChild" prototype="dojo.widget.TreeBasicControllerV3"><parameters><parameter name="parent"/></parameters></function></resource><resource location="dojo.widget.TreeCommon"><requires><environment type="common"><require>dojo.widget.*</require></environment></requires></resource><resource location="dojo.widget.TreeContextMenu"><requires><environment type="common"><require>dojo.event.*</require><require>dojo.io.*</require><require>dojo.widget.Menu2</require></environment></requires><function name="dojo.widget.TreeContextMenu"><chains><chain type="call">dojo.widget.PopupMenu2</chain><chain type="prototype">dojo.widget.PopupMenu2</chain></chains><variables><variable scope="instance" name="listenedTrees"/></variables></function><function name="dojo.widget.TreeContextMenu.open" prototype="dojo.widget.TreeContextMenu"><parameters><parameter name="x"/><parameter name="y"/><parameter name="parentMenu"/><parameter name="explodeSrc"/></parameters><chains><chain type="call">dojo.widget.PopupMenu2.prototype.open</chain></chains></function><function name="dojo.widget.TreeContextMenu.listenTree" prototype="dojo.widget.TreeContextMenu"><parameters><parameter name="tree"/></parameters></function><function name="dojo.widget.TreeContextMenu.unlistenTree" prototype="dojo.widget.TreeContextMenu"><parameters><parameter name="tree"/></parameters></function><function name="dojo.widget.TreeContextMenu.onTreeDestroy" prototype="dojo.widget.TreeContextMenu"><parameters><parameter name="message"/></parameters></function><function name="dojo.widget.TreeContextMenu.bindTreeNode" prototype="dojo.widget.TreeContextMenu"><parameters><parameter name="node"/></parameters></function><function name="dojo.widget.TreeContextMenu.unBindTreeNode" prototype="dojo.widget.TreeContextMenu"><parameters><parameter name="node"/></parameters></function><function name="dojo.widget.TreeContextMenu.onCreateDOMNode" prototype="dojo.widget.TreeContextMenu"><parameters><parameter name="message"/></parameters></function><function name="dojo.widget.TreeContextMenu.onMoveFrom" prototype="dojo.widget.TreeContextMenu"><parameters><parameter name="message"/></parameters></function><function name="dojo.widget.TreeContextMenu.onMoveTo" prototype="dojo.widget.TreeContextMenu"><parameters><parameter name="message"/></parameters></function><function name="dojo.widget.TreeContextMenu.onRemoveNode" prototype="dojo.widget.TreeContextMenu"><parameters><parameter name="message"/></parameters></function><function name="dojo.widget.TreeContextMenu.onAddChild" prototype="dojo.widget.TreeContextMenu"><parameters><parameter name="message"/></parameters></function><function name="dojo.widget.TreeMenuItem"><chains><chain type="call">dojo.widget.MenuItem2</chain><chain type="prototype">dojo.widget.MenuItem2</chain></chains><variables><variable name="treeActions" type="menu">item performs following actions (to be checked for permissions)</variable><variable scope="instance" name="treeActions" type="menu">item performs following actions (to be checked for permissions)</variable><variable scope="prototype" name="treeActions">item performs following actions (to be checked for permissions)</variable></variables></function><function name="dojo.widget.TreeMenuItem.initialize" prototype="dojo.widget.TreeMenuItem"><parameters><parameter name="args"/><parameter name="frag"/></parameters></function><function name="dojo.widget.TreeMenuItem.getTreeNode" prototype="dojo.widget.TreeMenuItem"/><function name="dojo.widget.TreeMenuItem.menuOpen" prototype="dojo.widget.TreeMenuItem"><parameters><parameter name="message"/></parameters></function><function name="dojo.widget.TreeMenuItem.toString" prototype="dojo.widget.TreeMenuItem"/></resource><resource location="dojo.widget.TreeContextMenuV3"><requires><environment type="common"><require>dojo.event.*</require><require>dojo.io.*</require><require>dojo.widget.*</require><require>dojo.widget.Menu2</require><require>dojo.widget.TreeCommon</require></environment></requires><function name="dojo.widget.TreeContextMenuV3"><variables><variable name="listenTreeEvents"/><variable scope="instance" name="listenedTrees"/><variable scope="prototype" name="listenTreeEvents"/></variables></function><function name="dojo.widget.TreeContextMenuV3.listenNodeFilter" prototype="dojo.widget.TreeContextMenuV3"><parameters><parameter name="elem"/></parameters></function><function name="dojo.widget.TreeContextMenuV3.onAfterTreeCreate" prototype="dojo.widget.TreeContextMenuV3"><parameters><parameter name="message"/></parameters></function><function name="dojo.widget.TreeContextMenuV3.onBeforeTreeDestroy" prototype="dojo.widget.TreeContextMenuV3"><parameters><parameter name="message"/></parameters></function><function name="dojo.widget.TreeContextMenuV3.getTreeNode" prototype="dojo.widget.TreeContextMenuV3"/><function name="dojo.widget.TreeContextMenuV3.open" prototype="dojo.widget.TreeContextMenuV3"><chains><chain type="call">dojo.widget.PopupMenu2.prototype.open</chain></chains></function><function name="dojo.widget.TreeContextMenuV3.close" prototype="dojo.widget.TreeContextMenuV3"><chains><chain type="call">dojo.widget.PopupMenu2.prototype.close</chain></chains></function><function name="dojo.widget.TreeMenuItemV3"><variables><variable name="treeActions" type="menu">item performs following actions (to be checked for permissions)</variable><variable scope="instance" name="treeActions" type="menu">item performs following actions (to be checked for permissions)</variable><variable scope="prototype" name="treeActions">item performs following actions (to be checked for permissions)</variable></variables></function><function name="dojo.widget.TreeMenuItemV3.initialize" prototype="dojo.widget.TreeMenuItemV3"><parameters><parameter name="args"/><parameter name="frag"/></parameters></function><function name="dojo.widget.TreeMenuItemV3.getTreeNode" prototype="dojo.widget.TreeMenuItemV3"/><function name="dojo.widget.TreeMenuItemV3.menuOpen" prototype="dojo.widget.TreeMenuItemV3"><parameters><parameter name="treeNode"/></parameters></function><function name="dojo.widget.TreeMenuItemV3.menuClose" prototype="dojo.widget.TreeMenuItemV3"><parameters><parameter name="treeNode"/></parameters></function><function name="dojo.widget.TreeMenuItemV3.toString" prototype="dojo.widget.TreeMenuItemV3"/></resource><resource location="dojo.widget.TreeDemo"><requires><environment type="common"><require>dojo.Deferred</require></environment></requires><function name="dojo.widget.TreeDemo.reportIfDefered"><parameters><parameter name="res"/></parameters></function><function name="dojo.widget.TreeDemo.resetRandomChildren"><parameters><parameter name="maxCount"/></parameters><variables><variable scope="instance" name="randomChildrenMaxCount"/><variable scope="instance" name="randomChildrenCount"/><variable scope="instance" name="randomChildrenDepth"/></variables></function><function name="dojo.widget.TreeDemo.makeRandomChildren"><parameters><parameter name="title"/></parameters><variables><variable scope="instance" name="randomChildrenDepth"/></variables></function><function name="dojo.widget.TreeDemo.bindDemoMenu"><parameters><parameter name="controller"/></parameters></function></resource><resource location="dojo.widget.TreeDeselectOnDblselect"><requires><environment type="common"><require>dojo.widget.HtmlWidget</require><require>dojo.widget.TreeSelectorV3</require></environment></requires><function name="dojo.widget.TreeDeselectOnDblselect"><variables><variable name="selector"/><variable scope="instance" name="selector"/><variable scope="prototype" name="selector"/></variables></function><function name="dojo.widget.TreeDeselectOnDblselect.initialize" prototype="dojo.widget.TreeDeselectOnDblselect"/><function name="dojo.widget.TreeDeselectOnDblselect.onDblselect" prototype="dojo.widget.TreeDeselectOnDblselect"><parameters><parameter name="message"/></parameters></function></resource><resource location="dojo.widget.TreeDisableWrapExtension"><requires><environment type="common"><require>dojo.widget.HtmlWidget</require><require>dojo.widget.TreeExtension</require></environment></requires><function name="dojo.widget.TreeDisableWrapExtension"><chains><chain type="call">dojo.widget.TreeExtension</chain><chain type="prototype">dojo.widget.TreeExtension</chain></chains><variables><variable name="templateCssPath"/><variable scope="prototype" name="templateCssPath"/></variables></function><function name="dojo.widget.TreeDisableWrapExtension.listenTree" prototype="dojo.widget.TreeDisableWrapExtension"><parameters><parameter name="tree"/></parameters></function></resource><resource location="dojo.widget.TreeDndControllerV3"><requires><environment type="common"><require>dojo.dnd.TreeDragAndDropV3</require><require>dojo.experimental</require></environment></requires><function name="dojo.widget.TreeDndControllerV3"><variables><variable name="listenTreeEvents"/><variable scope="instance" name="treeController"/><variable scope="instance" name="dragSources"/><variable scope="instance" name="dropTargets"/><variable scope="instance" name="listenedTrees"/><variable scope="prototype" name="listenTreeEvents"/></variables></function><function name="dojo.widget.TreeDndControllerV3.listenNodeFilter" prototype="dojo.widget.TreeDndControllerV3"><parameters><parameter name="elem"/></parameters></function><function name="dojo.widget.TreeDndControllerV3.initialize" prototype="dojo.widget.TreeDndControllerV3"><parameters><parameter name="args"/></parameters></function><function name="dojo.widget.TreeDndControllerV3.onBeforeTreeDestroy" prototype="dojo.widget.TreeDndControllerV3"><parameters><parameter name="message"/></parameters></function><function name="dojo.widget.TreeDndControllerV3.onAfterAddChild" prototype="dojo.widget.TreeDndControllerV3"><parameters><parameter name="message"/></parameters></function><function name="dojo.widget.TreeDndControllerV3.onAfterChangeTree" prototype="dojo.widget.TreeDndControllerV3"><parameters><parameter name="message"/></parameters></function><function name="dojo.widget.TreeDndControllerV3.listenNode" prototype="dojo.widget.TreeDndControllerV3"><parameters><parameter name="node"/></parameters></function><function name="dojo.widget.TreeDndControllerV3.makeDragSource" prototype="dojo.widget.TreeDndControllerV3"><parameters><parameter name="node"/></parameters></function><function name="dojo.widget.TreeDndControllerV3.makeDropTarget" prototype="dojo.widget.TreeDndControllerV3"><parameters><parameter name="node"/></parameters></function><function name="dojo.widget.TreeDndControllerV3.unlistenNode" prototype="dojo.widget.TreeDndControllerV3"><parameters><parameter name="node"/></parameters></function></resource><resource location="dojo.widget.TreeDocIconExtension"><requires><environment type="common"><require>dojo.widget.HtmlWidget</require><require>dojo.widget.TreeExtension</require></environment></requires><function name="dojo.widget.TreeDocIconExtension"><variables><variable name="templateCssPath"/><variable name="listenTreeEvents"/><variable scope="prototype" name="templateCssPath"/><variable scope="prototype" name="listenTreeEvents"/></variables></function><function name="dojo.widget.TreeDocIconExtension.listenNodeFilter" prototype="dojo.widget.TreeDocIconExtension"><parameters><parameter name="elem"/></parameters></function><function name="dojo.widget.TreeDocIconExtension.getnodeDocType" prototype="dojo.widget.TreeDocIconExtension"><parameters><parameter name="node"/></parameters></function><function name="dojo.widget.TreeDocIconExtension.setnodeDocTypeClass" prototype="dojo.widget.TreeDocIconExtension"><parameters><parameter name="node"/></parameters></function><function name="dojo.widget.TreeDocIconExtension.onAfterSetFolder" prototype="dojo.widget.TreeDocIconExtension"><parameters><parameter name="message"/></parameters></function><function name="dojo.widget.TreeDocIconExtension.onAfterUnsetFolder" prototype="dojo.widget.TreeDocIconExtension"><parameters><parameter name="message"/></parameters></function><function name="dojo.widget.TreeDocIconExtension.listenNode" prototype="dojo.widget.TreeDocIconExtension"><parameters><parameter name="node"/></parameters></function><function name="dojo.widget.TreeDocIconExtension.onAfterChangeTree" prototype="dojo.widget.TreeDocIconExtension"><parameters><parameter name="message"/></parameters></function></resource><resource location="dojo.widget.TreeEditor"><requires><environment type="common"><require>dojo.widget.*</require><require>dojo.widget.HtmlWidget</require><require>dojo.widget.RichText</require></environment></requires><function name="dojo.widget.TreeEditor"><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="singleLineMode"/><variable name="saveOnBlur"/><variable name="sync"/><variable name="selectOnOpen"/><variable name="controller"/><variable name="node"/><variable scope="instance" name="richText"/><variable scope="instance" name="node"/><variable scope="prototype" name="singleLineMode"/><variable scope="prototype" name="saveOnBlur"/><variable scope="prototype" name="sync"/><variable scope="prototype" name="selectOnOpen"/><variable scope="prototype" name="controller"/><variable scope="prototype" name="node"/></variables></function><function name="dojo.widget.TreeEditor.getContents" prototype="dojo.widget.TreeEditor"/><function name="dojo.widget.TreeEditor.open" prototype="dojo.widget.TreeEditor"><parameters><parameter name="node"/></parameters></function><function name="dojo.widget.TreeEditor.close" prototype="dojo.widget.TreeEditor"><parameters><parameter name="save"/></parameters></function><function name="dojo.widget.TreeEditor.isClosed" prototype="dojo.widget.TreeEditor"/><function name="dojo.widget.TreeEditor.execCommand" prototype="dojo.widget.TreeEditor"><chains><chain type="call">this.richText.execCommand</chain></chains></function><function name="dojo.widget.TreeEditor.richText_onKeyDown" prototype="dojo.widget.TreeEditor"><parameters><parameter name="invocation"/></parameters></function><function name="dojo.widget.TreeEditor.richText_onBlur" prototype="dojo.widget.TreeEditor"/><function name="dojo.widget.TreeEditor.finish" prototype="dojo.widget.TreeEditor"><parameters><parameter name="save"/></parameters></function><object name="dojo.widget.TreeEditor.richTextParams"><variables><variable name="styleSheets"/></variables></object></resource><resource location="dojo.widget.TreeEmphasizeOnSelect"><requires><environment type="common"><require>dojo.widget.HtmlWidget</require><require>dojo.widget.TreeSelectorV3</require><require>dojo.html.selection</require></environment></requires><function name="dojo.widget.TreeEmphasizeOnSelect"><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="selector"/><variable scope="instance" name="selector"/><variable scope="prototype" name="selector"/></variables></function><function name="dojo.widget.TreeEmphasizeOnSelect.initialize" prototype="dojo.widget.TreeEmphasizeOnSelect"/><function name="dojo.widget.TreeEmphasizeOnSelect.onSelect" prototype="dojo.widget.TreeEmphasizeOnSelect"><parameters><parameter name="message"/></parameters></function><function name="dojo.widget.TreeEmphasizeOnSelect.onDeselect" prototype="dojo.widget.TreeEmphasizeOnSelect"><parameters><parameter name="message"/></parameters></function></resource><resource location="dojo.widget.TreeExpandToNodeOnSelect"><requires><environment type="common"><require>dojo.widget.HtmlWidget</require></environment></requires><function name="dojo.widget.TreeExpandToNodeOnSelect"><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="selector"/><variable name="controller"/><variable name="withSelected"/><variable scope="instance" name="selector"/><variable scope="instance" name="controller"/><variable scope="prototype" name="selector"/><variable scope="prototype" name="controller"/><variable scope="prototype" name="withSelected"/></variables></function><function name="dojo.widget.TreeExpandToNodeOnSelect.initialize" prototype="dojo.widget.TreeExpandToNodeOnSelect"/><function name="dojo.widget.TreeExpandToNodeOnSelect.onSelectEvent" prototype="dojo.widget.TreeExpandToNodeOnSelect"><parameters><parameter name="message"/></parameters></function></resource><resource location="dojo.widget.TreeExtension"><requires><environment type="common"><require>dojo.widget.HtmlWidget</require><require>dojo.widget.TreeCommon</require></environment></requires><function name="dojo.widget.TreeExtension"><variables><variable scope="instance" name="listenedTrees"/></variables></function></resource><resource location="dojo.widget.TreeLinkExtension"><requires><environment type="common"><require>dojo.widget.HtmlWidget</require><require>dojo.widget.TreeExtension</require></environment></requires><function name="dojo.widget.TreeLinkExtension"><chains><chain type="call">dojo.widget.TreeExtension</chain><chain type="prototype">dojo.widget.TreeExtension</chain></chains><variables><variable name="listenTreeEvents"/><variable scope="instance" name="params"/><variable scope="prototype" name="listenTreeEvents"/></variables></function><function name="dojo.widget.TreeLinkExtension.listenTree" prototype="dojo.widget.TreeLinkExtension"><parameters><parameter name="tree"/></parameters><chains><chain type="call">dojo.widget.TreeCommon.prototype.listenTree</chain></chains></function><function name="dojo.widget.TreeLinkExtension.makeALabel" prototype="dojo.widget.TreeLinkExtension"/><function name="dojo.widget.TreeLinkExtension.onAfterChangeTree" prototype="dojo.widget.TreeLinkExtension"><parameters><parameter name="message"/></parameters></function><function name="dojo.widget.TreeLinkExtension.listenNode" prototype="dojo.widget.TreeLinkExtension"><parameters><parameter name="node"/></parameters></function></resource><resource location="dojo.widget.TreeLoadingController"><requires><environment type="common"><require>dojo.widget.TreeBasicController</require><require>dojo.event.*</require><require>dojo.json</require><require>dojo.io.*</require></environment></requires><function name="dojo.widget.TreeLoadingController"><chains><chain type="call">dojo.widget.TreeBasicController</chain><chain type="prototype">dojo.widget.TreeBasicController</chain></chains><variables><variable name="RPCUrl"/><variable name="RPCActionParam"/><variable name="preventCache"/><variable scope="instance" name="RPCUrl"/><variable scope="prototype" name="RPCUrl"/><variable scope="prototype" name="RPCActionParam"/><variable scope="prototype" name="preventCache"/></variables></function><function name="dojo.widget.TreeLoadingController.RPCErrorHandler" prototype="dojo.widget.TreeLoadingController"><parameters><parameter name="type"/><parameter name="obj"/><parameter name="evt"/></parameters></function><function name="dojo.widget.TreeLoadingController.getRPCUrl" prototype="dojo.widget.TreeLoadingController"><parameters><parameter name="action"/></parameters></function><function name="dojo.widget.TreeLoadingController.loadProcessResponse" prototype="dojo.widget.TreeLoadingController"><parameters><parameter name="node"/><parameter name="result"/><parameter name="callObj"/><parameter name="callFunc"/></parameters><chains><chain type="call">callFunc</chain></chains></function><function name="dojo.widget.TreeLoadingController.getInfo" prototype="dojo.widget.TreeLoadingController"><parameters><parameter name="obj"/></parameters></function><function name="dojo.widget.TreeLoadingController.runRPC" prototype="dojo.widget.TreeLoadingController"><parameters><parameter name="kw"/></parameters><chains><chain type="call">kw.load</chain></chains></function><function name="dojo.widget.TreeLoadingController.loadRemote" prototype="dojo.widget.TreeLoadingController"><parameters><parameter name="node"/><parameter name="sync"/><parameter name="callObj"/><parameter name="callFunc"/></parameters></function><function name="dojo.widget.TreeLoadingController.expand" prototype="dojo.widget.TreeLoadingController"><parameters><parameter name="node"/><parameter name="sync"/><parameter name="callObj"/><parameter name="callFunc"/></parameters><chains><chain type="call">dojo.widget.TreeBasicController.prototype.expand</chain></chains></function><function name="dojo.widget.TreeLoadingController.doMove" prototype="dojo.widget.TreeLoadingController"><parameters><parameter name="child"/><parameter name="newParent"/><parameter name="index"/></parameters><chains><chain type="call">dojo.widget.TreeBasicController.prototype.doMove</chain></chains></function><function name="dojo.widget.TreeLoadingController.doCreateChild" prototype="dojo.widget.TreeLoadingController"><parameters><parameter name="parent"/><parameter name="index"/><parameter name="data"/><parameter name="callObj"/><parameter name="callFunc"/></parameters><chains><chain type="call">dojo.widget.TreeBasicController.prototype.doCreateChild</chain></chains></function></resource><resource location="dojo.widget.TreeLoadingControllerV3"><requires><environment type="common"><require>dojo.widget.TreeBasicControllerV3</require><require>dojo.event.*</require><require>dojo.json</require><require>dojo.io.*</require><require>dojo.Deferred</require><require>dojo.DeferredList</require></environment></requires><function name="dojo.Error"><parameters><parameter name="message"/><parameter name="extra"/></parameters><chains><chain type="call">Error</chain><chain type="prototype">Error</chain></chains><variables><variable scope="instance" name="message"/><variable scope="instance" name="extra"/><variable scope="instance" name="stack"/></variables></function><function name="dojo.CommunicationError"><chains><chain type="call">dojo.Error</chain><chain type="prototype">dojo.Error</chain></chains><variables><variable scope="instance" name="name"/></variables></function><function name="dojo.LockedError"><chains><chain type="call">dojo.Error</chain><chain type="prototype">dojo.Error</chain></chains><variables><variable scope="instance" name="name"/></variables></function><function name="dojo.FormatError"><chains><chain type="call">dojo.Error</chain><chain type="prototype">dojo.Error</chain></chains><variables><variable scope="instance" name="name"/></variables></function><function name="dojo.RpcError"><chains><chain type="call">dojo.Error</chain><chain type="prototype">dojo.Error</chain></chains><variables><variable scope="instance" name="name"/></variables></function><function name="dojo.widget.TreeLoadingControllerV3"><chains><chain type="call">dojo.widget.TreeBasicControllerV3</chain><chain type="prototype">dojo.widget.TreeBasicControllerV3</chain></chains><variables><variable name="RpcUrl"/><variable name="RpcActionParam"/><variable name="preventCache"/><variable name="batchExpandTimeout"/><variable scope="instance" name="RpcUrl"/><variable scope="prototype" name="RpcUrl"/><variable scope="prototype" name="RpcActionParam"/><variable scope="prototype" name="preventCache"/><variable scope="prototype" name="batchExpandTimeout"/></variables></function><function name="dojo.widget.TreeLoadingControllerV3.checkValidRpcResponse" prototype="dojo.widget.TreeLoadingControllerV3"><parameters><parameter name="type"/><parameter name="obj"/></parameters></function><function name="dojo.widget.TreeLoadingControllerV3.getDeferredBindHandler" prototype="dojo.widget.TreeLoadingControllerV3"><summary>create callback that calls the Deferred's callback method</summary><parameters><parameter name="deferred" type="dojo.rpc.Deferred"/></parameters><chains><chain type="call">this.checkValidRpcResponse</chain></chains></function><function name="dojo.widget.TreeLoadingControllerV3.getRpcUrl" prototype="dojo.widget.TreeLoadingControllerV3"><parameters><parameter name="action"/></parameters></function><function name="dojo.widget.TreeLoadingControllerV3.loadProcessResponse" prototype="dojo.widget.TreeLoadingControllerV3"><parameters><parameter name="node"/><parameter name="result"/></parameters></function><function name="dojo.widget.TreeLoadingControllerV3.runRpc" prototype="dojo.widget.TreeLoadingControllerV3"><parameters><parameter name="kw"/></parameters></function><function name="dojo.widget.TreeLoadingControllerV3.loadRemote" prototype="dojo.widget.TreeLoadingControllerV3"><parameters><parameter name="node"/><parameter name="sync"/></parameters></function><function name="dojo.widget.TreeLoadingControllerV3.recurseToLevel" prototype="dojo.widget.TreeLoadingControllerV3"><parameters><parameter name="widget"/><parameter name="level"/><parameter name="callFunc"/><parameter name="callObj"/><parameter name="skipFirst"/><parameter name="sync"/></parameters><chains><chain type="call">callFunc</chain></chains></function><function name="dojo.widget.TreeLoadingControllerV3.expandToLevel" prototype="dojo.widget.TreeLoadingControllerV3"><parameters><parameter name="nodeOrTree"/><parameter name="level"/><parameter name="sync"/></parameters></function><function name="dojo.widget.TreeLoadingControllerV3.loadToLevel" prototype="dojo.widget.TreeLoadingControllerV3"><parameters><parameter name="nodeOrTree"/><parameter name="level"/><parameter name="sync"/></parameters></function><function name="dojo.widget.TreeLoadingControllerV3.loadAll" prototype="dojo.widget.TreeLoadingControllerV3"><parameters><parameter name="nodeOrTree"/><parameter name="sync"/></parameters></function><function name="dojo.widget.TreeLoadingControllerV3.expand" prototype="dojo.widget.TreeLoadingControllerV3"><parameters><parameter name="node"/><parameter name="sync"/></parameters></function><function name="dojo.widget.TreeLoadingControllerV3.loadIfNeeded" prototype="dojo.widget.TreeLoadingControllerV3"><parameters><parameter name="node"/><parameter name="sync"/></parameters></function><function name="dojo.widget.TreeLoadingControllerV3.runStages" prototype="dojo.widget.TreeLoadingControllerV3"><parameters><parameter name="check"/><parameter name="prepare"/><parameter name="make"/><parameter name="finalize"/><parameter name="expose"/><parameter name="args"/></parameters><chains><chain type="call">check</chain><chain type="call">prepare</chain><chain type="call">make</chain><chain type="call">finalize</chain><chain type="call">expose</chain></chains></function><function name="dojo.widget.TreeLoadingControllerV3.startProcessing" prototype="dojo.widget.TreeLoadingControllerV3"><parameters><parameter name="nodesArray"/></parameters></function><function name="dojo.widget.TreeLoadingControllerV3.finishProcessing" prototype="dojo.widget.TreeLoadingControllerV3"><parameters><parameter name="nodesArray"/></parameters></function><function name="dojo.widget.TreeLoadingControllerV3.refreshChildren" prototype="dojo.widget.TreeLoadingControllerV3"><parameters><parameter name="nodeOrTree"/><parameter name="sync"/></parameters></function><function name="dojo.widget.TreeLoadingControllerV3.prepareRefreshChildren" prototype="dojo.widget.TreeLoadingControllerV3"><parameters><parameter name="nodeOrTree"/><parameter name="sync"/></parameters></function><function name="dojo.widget.TreeLoadingControllerV3.doRefreshChildren" prototype="dojo.widget.TreeLoadingControllerV3"><parameters><parameter name="nodeOrTree"/><parameter name="sync"/></parameters></function><function name="dojo.widget.TreeLoadingControllerV3.finalizeRefreshChildren" prototype="dojo.widget.TreeLoadingControllerV3"><parameters><parameter name="nodeOrTree"/><parameter name="sync"/></parameters></function><function name="dojo.widget.TreeLoadingControllerV3.exposeRefreshChildren" prototype="dojo.widget.TreeLoadingControllerV3"><parameters><parameter name="nodeOrTree"/><parameter name="sync"/></parameters></function><function name="dojo.widget.TreeLoadingControllerV3.move" prototype="dojo.widget.TreeLoadingControllerV3"><parameters><parameter name="child"/><parameter name="newParent"/><parameter name="index" type=",..."/></parameters></function><function name="dojo.widget.TreeLoadingControllerV3.doMove" prototype="dojo.widget.TreeLoadingControllerV3"><parameters><parameter name="child"/><parameter name="newParent"/><parameter name="index"/></parameters></function><function name="dojo.widget.TreeLoadingControllerV3.prepareMove" prototype="dojo.widget.TreeLoadingControllerV3"><parameters><parameter name="child"/><parameter name="newParent"/><parameter name="index"/><parameter name="sync"/></parameters></function><function name="dojo.widget.TreeLoadingControllerV3.finalizeMove" prototype="dojo.widget.TreeLoadingControllerV3"><parameters><parameter name="child"/><parameter name="newParent"/></parameters></function><function name="dojo.widget.TreeLoadingControllerV3.prepareCreateChild" prototype="dojo.widget.TreeLoadingControllerV3"><parameters><parameter name="parent"/><parameter name="index"/><parameter name="data"/><parameter name="sync"/></parameters></function><function name="dojo.widget.TreeLoadingControllerV3.finalizeCreateChild" prototype="dojo.widget.TreeLoadingControllerV3"><parameters><parameter name="parent"/></parameters></function><function name="dojo.widget.TreeLoadingControllerV3.prepareClone" prototype="dojo.widget.TreeLoadingControllerV3"><parameters><parameter name="child"/><parameter name="newParent"/><parameter name="index"/><parameter name="deep"/><parameter name="sync"/></parameters></function><function name="dojo.widget.TreeLoadingControllerV3.finalizeClone" prototype="dojo.widget.TreeLoadingControllerV3"><parameters><parameter name="child"/><parameter name="newParent"/></parameters></function></resource><resource location="dojo.widget.TreeNode"><requires><environment type="common"><require>dojo.html.*</require><require>dojo.event.*</require><require>dojo.io.*</require></environment></requires><function name="dojo.widget.TreeNode"><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="widgetType"/><variable name="isContainer"/><variable name="lockLevel"/><variable name="templateString"/><variable name="childIconSrc"/><variable name="childIconFolderSrc"/><variable name="childIconDocumentSrc"/><variable name="childIcon"/><variable name="isTreeNode"/><variable name="objectId"/><variable name="afterLabel"/><variable name="afterLabelNode"/><variable name="expandIcon"/><variable name="title"/><variable name="object"/><variable name="isFolder"/><variable name="labelNode"/><variable name="titleNode"/><variable name="imgs"/><variable name="expandLevel"/><variable name="tree"/><variable name="depth"/><variable name="isExpanded"/><variable name="state"/><variable name="domNodeInitialized"/><variable scope="instance" name="state"/><variable scope="instance" name="expandLevel"/><variable scope="instance" name="_markLoadingSavedIcon"/><variable scope="instance" name="expandIcon.src"/><variable scope="instance" name="isFolder"/><variable scope="instance" name="tree"/><variable scope="instance" name="depth"/><variable scope="instance" name="imgs"/><variable scope="instance" name="expandIcon"/><variable scope="instance" name="childIcon"/><variable scope="instance" name="domNodeInitialized"/><variable scope="instance" name="childIcon.src"/><variable scope="instance" name="childIcon.style.display"/><variable scope="instance" name="isExpanded"/><variable scope="instance" name="titleNode.innerHTML"/><variable scope="instance" name="afterLabelNode.innerHTML"/><variable scope="instance" name="actionsDisabled"/><variable scope="prototype" name="widgetType"/><variable scope="prototype" name="isContainer"/><variable scope="prototype" name="lockLevel"/><variable scope="prototype" name="templateString"/><variable scope="prototype" name="childIconSrc"/><variable scope="prototype" name="childIconFolderSrc"/><variable scope="prototype" name="childIconDocumentSrc"/><variable scope="prototype" name="childIcon"/><variable scope="prototype" name="isTreeNode"/><variable scope="prototype" name="objectId"/><variable scope="prototype" name="afterLabel"/><variable scope="prototype" name="afterLabelNode"/><variable scope="prototype" name="expandIcon"/><variable scope="prototype" name="title"/><variable scope="prototype" name="object"/><variable scope="prototype" name="isFolder"/><variable scope="prototype" name="labelNode"/><variable scope="prototype" name="titleNode"/><variable scope="prototype" name="imgs"/><variable scope="prototype" name="expandLevel"/><variable scope="prototype" name="tree"/><variable scope="prototype" name="depth"/><variable scope="prototype" name="isExpanded"/><variable scope="prototype" name="state"/><variable scope="prototype" name="domNodeInitialized"/></variables></function><function name="dojo.widget.TreeNode.isFirstChild" prototype="dojo.widget.TreeNode"/><function name="dojo.widget.TreeNode.isLastChild" prototype="dojo.widget.TreeNode"/><function name="dojo.widget.TreeNode.lock" prototype="dojo.widget.TreeNode"><chains><chain type="call">this.tree.lock</chain></chains></function><function name="dojo.widget.TreeNode.unlock" prototype="dojo.widget.TreeNode"><chains><chain type="call">this.tree.unlock</chain></chains></function><function name="dojo.widget.TreeNode.isLocked" prototype="dojo.widget.TreeNode"><chains><chain type="call">this.tree.isLocked</chain></chains></function><function name="dojo.widget.TreeNode.cleanLock" prototype="dojo.widget.TreeNode"><chains><chain type="call">this.tree.cleanLock</chain></chains></function><function name="dojo.widget.TreeNode.actionIsDisabled" prototype="dojo.widget.TreeNode"><parameters><parameter name="action"/></parameters></function><function name="dojo.widget.TreeNode.getInfo" prototype="dojo.widget.TreeNode"/><function name="dojo.widget.TreeNode.initialize" prototype="dojo.widget.TreeNode"><parameters><parameter name="args"/><parameter name="frag"/></parameters></function><function name="dojo.widget.TreeNode.adjustDepth" prototype="dojo.widget.TreeNode"><parameters><parameter name="depthDiff"/></parameters></function><function name="dojo.widget.TreeNode.markLoading" prototype="dojo.widget.TreeNode"/><function name="dojo.widget.TreeNode.unMarkLoading" prototype="dojo.widget.TreeNode"/><function name="dojo.widget.TreeNode.setFolder" prototype="dojo.widget.TreeNode"/><function name="dojo.widget.TreeNode.createDOMNode" prototype="dojo.widget.TreeNode"><parameters><parameter name="tree"/><parameter name="depth"/></parameters></function><function name="dojo.widget.TreeNode.onTreeClick" prototype="dojo.widget.TreeNode"><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.TreeNode.onIconClick" prototype="dojo.widget.TreeNode"><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.TreeNode.onTitleClick" prototype="dojo.widget.TreeNode"><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.TreeNode.markSelected" prototype="dojo.widget.TreeNode"/><function name="dojo.widget.TreeNode.unMarkSelected" prototype="dojo.widget.TreeNode"/><function name="dojo.widget.TreeNode.updateExpandIcon" prototype="dojo.widget.TreeNode"/><function name="dojo.widget.TreeNode.updateExpandGrid" prototype="dojo.widget.TreeNode"/><function name="dojo.widget.TreeNode.updateChildGrid" prototype="dojo.widget.TreeNode"/><function name="dojo.widget.TreeNode.updateParentGrid" prototype="dojo.widget.TreeNode"/><function name="dojo.widget.TreeNode.updateExpandGridColumn" prototype="dojo.widget.TreeNode"/><function name="dojo.widget.TreeNode.updateIcons" prototype="dojo.widget.TreeNode"/><function name="dojo.widget.TreeNode.buildChildIcon" prototype="dojo.widget.TreeNode"/><function name="dojo.widget.TreeNode.setGridImage" prototype="dojo.widget.TreeNode"><parameters><parameter name="idx"/><parameter name="src"/></parameters></function><function name="dojo.widget.TreeNode.updateIconTree" prototype="dojo.widget.TreeNode"><chains><chain type="call">this.tree.updateIconTree</chain></chains></function><function name="dojo.widget.TreeNode.expand" prototype="dojo.widget.TreeNode"/><function name="dojo.widget.TreeNode.collapse" prototype="dojo.widget.TreeNode"/><function name="dojo.widget.TreeNode.hideChildren" prototype="dojo.widget.TreeNode"/><function name="dojo.widget.TreeNode.showChildren" prototype="dojo.widget.TreeNode"/><function name="dojo.widget.TreeNode.addChild" prototype="dojo.widget.TreeNode"><chains><chain type="call">this.tree.addChild</chain></chains></function><function name="dojo.widget.TreeNode.doAddChild" prototype="dojo.widget.TreeNode"><chains><chain type="call">this.tree.doAddChild</chain></chains></function><function name="dojo.widget.TreeNode.edit" prototype="dojo.widget.TreeNode"><parameters><parameter name="props"/></parameters></function><function name="dojo.widget.TreeNode.removeNode" prototype="dojo.widget.TreeNode"><chains><chain type="call">this.tree.removeNode</chain></chains></function><function name="dojo.widget.TreeNode.doRemoveNode" prototype="dojo.widget.TreeNode"><chains><chain type="call">this.tree.doRemoveNode</chain></chains></function><function name="dojo.widget.TreeNode.toString" prototype="dojo.widget.TreeNode"/><object name="dojo.widget.TreeNode.loadStates"><variables><variable name="UNCHECKED"/><variable name="LOADING"/><variable name="LOADED"/></variables></object><object name="dojo.widget.TreeNode.actions"><variables><variable name="MOVE"/><variable name="REMOVE"/><variable name="EDIT"/><variable name="ADDCHILD"/></variables></object></resource><resource location="dojo.widget.TreeNodeV3"><requires><environment type="common"><require>dojo.html.*</require><require>dojo.event.*</require><require>dojo.io.*</require><require>dojo.widget.TreeWithNode</require></environment></requires><function name="dojo.widget.TreeNodeV3"><variables><variable name="tryLazyInit"/><variable name="labelClass"/><variable name="contentClass"/><variable name="expandNode"/><variable name="labelNode"/><variable name="nodeDocType"/><variable name="selected"/><variable name="cloneProperties"/><variable name="isTreeNode"/><variable name="title"/><variable name="isFolder"/><variable name="contentNode"/><variable name="expandClass"/><variable name="isExpanded"/><variable name="containerNode"/><variable scope="instance" name="markProcessingSavedClass"/><variable scope="instance" name="tree"/><variable scope="instance" name="domNode"/><variable scope="instance" name="expandNode"/><variable scope="instance" name="contentNode"/><variable scope="instance" name="labelNode"/><variable scope="instance" name="domNode.widgetId"/><variable scope="instance" name="labelNode.innerHTML"/><variable scope="instance" name="isFolder"/><variable scope="instance" name="containerNode"/><variable scope="instance" name="parent"/><variable scope="instance" name="tryLazyInit"/><variable scope="instance" name="isExpanded"/><variable scope="instance" name="actionsDisabled"/><variable scope="instance" name="object"/><variable scope="prototype" name="tryLazyInit"/><variable scope="prototype" name="labelClass"/><variable scope="prototype" name="contentClass"/><variable scope="prototype" name="expandNode"/><variable scope="prototype" name="labelNode"/><variable scope="prototype" name="nodeDocType"/><variable scope="prototype" name="selected"/><variable scope="prototype" name="cloneProperties"/><variable scope="prototype" name="isTreeNode"/><variable scope="prototype" name="title"/><variable scope="prototype" name="isFolder"/><variable scope="prototype" name="contentNode"/><variable scope="prototype" name="expandClass"/><variable scope="prototype" name="isExpanded"/><variable scope="prototype" name="containerNode"/></variables></function><function name="dojo.widget.TreeNodeV3.getnodeDocType" prototype="dojo.widget.TreeNodeV3"/><function name="dojo.widget.TreeNodeV3.clone" prototype="dojo.widget.TreeNodeV3"><parameters><parameter name="deep"/></parameters></function><function name="dojo.widget.TreeNodeV3.markProcessing" prototype="dojo.widget.TreeNodeV3"/><function name="dojo.widget.TreeNodeV3.unmarkProcessing" prototype="dojo.widget.TreeNodeV3"/><function name="dojo.widget.TreeNodeV3.buildRendering" prototype="dojo.widget.TreeNodeV3"><parameters><parameter name="args"/><parameter name="fragment"/><parameter name="parent"/></parameters></function><function name="dojo.widget.TreeNodeV3.getInfo" prototype="dojo.widget.TreeNodeV3"/><function name="dojo.widget.TreeNodeV3.setFolder" prototype="dojo.widget.TreeNodeV3"/><function name="dojo.widget.TreeNodeV3.initialize" prototype="dojo.widget.TreeNodeV3"><parameters><parameter name="args"/><parameter name="frag"/><parameter name="parent"/></parameters></function><function name="dojo.widget.TreeNodeV3.unsetFolder" prototype="dojo.widget.TreeNodeV3"/><function name="dojo.widget.TreeNodeV3.insertNode" prototype="dojo.widget.TreeNodeV3"><parameters><parameter name="parent"/><parameter name="index"/></parameters></function><function name="dojo.widget.TreeNodeV3.updateTree" prototype="dojo.widget.TreeNodeV3"><parameters><parameter name="newTree"/></parameters></function><function name="dojo.widget.TreeNodeV3.addedTo" prototype="dojo.widget.TreeNodeV3"><parameters><parameter name="parent"/><parameter name="index"/><parameter name="dontPublishEvent"/></parameters></function><function name="dojo.widget.TreeNodeV3.createSimple" prototype="dojo.widget.TreeNodeV3"><parameters><parameter name="args"/><parameter name="parent"/></parameters></function><function name="dojo.widget.TreeNodeV3.viewUpdateLayout" prototype="dojo.widget.TreeNodeV3"/><function name="dojo.widget.TreeNodeV3.viewAddContainer" prototype="dojo.widget.TreeNodeV3"/><function name="dojo.widget.TreeNodeV3.viewAddLayout" prototype="dojo.widget.TreeNodeV3"/><function name="dojo.widget.TreeNodeV3.viewRemoveLayout" prototype="dojo.widget.TreeNodeV3"/><function name="dojo.widget.TreeNodeV3.viewGetExpandClass" prototype="dojo.widget.TreeNodeV3"/><function name="dojo.widget.TreeNodeV3.viewSetExpand" prototype="dojo.widget.TreeNodeV3"/><function name="dojo.widget.TreeNodeV3.viewGetChildrenClass" prototype="dojo.widget.TreeNodeV3"/><function name="dojo.widget.TreeNodeV3.viewSetHasChildren" prototype="dojo.widget.TreeNodeV3"/><function name="dojo.widget.TreeNodeV3.viewSetHasChildrenAndExpand" prototype="dojo.widget.TreeNodeV3"/><function name="dojo.widget.TreeNodeV3.viewUnfocus" prototype="dojo.widget.TreeNodeV3"/><function name="dojo.widget.TreeNodeV3.viewFocus" prototype="dojo.widget.TreeNodeV3"/><function name="dojo.widget.TreeNodeV3.viewEmphasize" prototype="dojo.widget.TreeNodeV3"/><function name="dojo.widget.TreeNodeV3.viewUnemphasize" prototype="dojo.widget.TreeNodeV3"/><function name="dojo.widget.TreeNodeV3.detach" prototype="dojo.widget.TreeNodeV3"><chains><chain type="call">this.doDetach</chain></chains></function><function name="dojo.widget.TreeNodeV3.doDetach" prototype="dojo.widget.TreeNodeV3"><chains><chain type="call">dojo.widget.DomWidget.prototype.removeChild</chain></chains></function><function name="dojo.widget.TreeNodeV3.destroy" prototype="dojo.widget.TreeNodeV3"><chains><chain type="call">dojo.widget.HtmlWidget.prototype.destroy</chain></chains></function><function name="dojo.widget.TreeNodeV3.expand" prototype="dojo.widget.TreeNodeV3"/><function name="dojo.widget.TreeNodeV3.collapse" prototype="dojo.widget.TreeNodeV3"/><function name="dojo.widget.TreeNodeV3.hideChildren" prototype="dojo.widget.TreeNodeV3"/><function name="dojo.widget.TreeNodeV3.showChildren" prototype="dojo.widget.TreeNodeV3"/><function name="dojo.widget.TreeNodeV3.onShowChildren" prototype="dojo.widget.TreeNodeV3"/><function name="dojo.widget.TreeNodeV3.onHideChildren" prototype="dojo.widget.TreeNodeV3"/><function name="dojo.widget.TreeNodeV3.setTitle" prototype="dojo.widget.TreeNodeV3"><parameters><parameter name="title"/></parameters></function><function name="dojo.widget.TreeNodeV3.toString" prototype="dojo.widget.TreeNodeV3"/><object name="dojo.widget.TreeNodeV3.actions"><variables><variable name="MOVE"/><variable name="DETACH"/><variable name="EDIT"/><variable name="ADDCHILD"/><variable name="SELECT"/></variables></object></resource><resource location="dojo.widget.TreeRPCController"><requires><environment type="common"><require>dojo.event.*</require><require>dojo.json</require><require>dojo.io.*</require><require>dojo.widget.TreeLoadingController</require></environment></requires><function name="dojo.widget.TreeRPCController"><chains><chain type="call">dojo.widget.TreeLoadingController</chain><chain type="prototype">dojo.widget.TreeLoadingController</chain></chains></function><function name="dojo.widget.TreeRPCController.doMove" prototype="dojo.widget.TreeRPCController"><parameters><parameter name="child"/><parameter name="newParent"/><parameter name="index"/></parameters></function><function name="dojo.widget.TreeRPCController.doMoveProcessResponse" prototype="dojo.widget.TreeRPCController"><parameters><parameter name="response"/><parameter name="child"/><parameter name="newParent"/><parameter name="index"/></parameters><chains><chain type="call">dojo.widget.TreeLoadingController.prototype.doMove</chain></chains></function><function name="dojo.widget.TreeRPCController.doRemoveNode" prototype="dojo.widget.TreeRPCController"><parameters><parameter name="node"/><parameter name="callObj"/><parameter name="callFunc"/></parameters></function><function name="dojo.widget.TreeRPCController.doRemoveNodeProcessResponse" prototype="dojo.widget.TreeRPCController"><parameters><parameter name="response"/><parameter name="node"/><parameter name="callObj"/><parameter name="callFunc"/></parameters><chains><chain type="call">dojo.widget.TreeLoadingController.prototype.doRemoveNode</chain></chains></function><function name="dojo.widget.TreeRPCController.doCreateChild" prototype="dojo.widget.TreeRPCController"><parameters><parameter name="parent"/><parameter name="index"/><parameter name="output"/><parameter name="callObj"/><parameter name="callFunc"/></parameters></function><function name="dojo.widget.TreeRPCController.doCreateChildProcessResponse" prototype="dojo.widget.TreeRPCController"><parameters><parameter name="response"/><parameter name="parent"/><parameter name="index"/><parameter name="callObj"/><parameter name="callFunc"/></parameters><chains><chain type="call">dojo.widget.TreeLoadingController.prototype.doCreateChild</chain></chains></function></resource><resource location="dojo.widget.TreeRpcControllerV3"><requires><environment type="common"><require>dojo.event.*</require><require>dojo.json</require><require>dojo.io.*</require><require>dojo.widget.TreeLoadingControllerV3</require></environment></requires><function name="dojo.widget.TreeRpcControllerV3"><chains><chain type="call">dojo.widget.TreeLoadingControllerV3</chain><chain type="prototype">dojo.widget.TreeLoadingControllerV3</chain></chains><variables><variable name="extraRpcOnEdit"/><variable scope="prototype" name="extraRpcOnEdit"/></variables></function><function name="dojo.widget.TreeRpcControllerV3.doMove" prototype="dojo.widget.TreeRpcControllerV3"><parameters><parameter name="child"/><parameter name="newParent"/><parameter name="index"/><parameter name="sync"/></parameters><chains><chain type="call">dojo.widget.TreeBasicControllerV3.prototype.doMove</chain></chains></function><function name="dojo.widget.TreeRpcControllerV3.prepareDetach" prototype="dojo.widget.TreeRpcControllerV3"><parameters><parameter name="node"/><parameter name="sync"/></parameters></function><function name="dojo.widget.TreeRpcControllerV3.finalizeDetach" prototype="dojo.widget.TreeRpcControllerV3"><parameters><parameter name="node"/></parameters></function><function name="dojo.widget.TreeRpcControllerV3.doDetach" prototype="dojo.widget.TreeRpcControllerV3"><parameters><parameter name="node"/><parameter name="sync"/></parameters><chains><chain type="call">dojo.widget.TreeBasicControllerV3.prototype.doDetach</chain></chains></function><function name="dojo.widget.TreeRpcControllerV3.requestEditConfirmation" prototype="dojo.widget.TreeRpcControllerV3"><parameters><parameter name="node"/><parameter name="action"/><parameter name="sync"/></parameters></function><function name="dojo.widget.TreeRpcControllerV3.editLabelSave" prototype="dojo.widget.TreeRpcControllerV3"><parameters><parameter name="node"/><parameter name="newContent"/><parameter name="sync"/></parameters></function><function name="dojo.widget.TreeRpcControllerV3.editLabelStart" prototype="dojo.widget.TreeRpcControllerV3"><parameters><parameter name="node"/><parameter name="sync"/></parameters></function><function name="dojo.widget.TreeRpcControllerV3.editLabelFinish" prototype="dojo.widget.TreeRpcControllerV3"><parameters><parameter name="save"/><parameter name="sync"/></parameters></function><function name="dojo.widget.TreeRpcControllerV3.createAndEdit" prototype="dojo.widget.TreeRpcControllerV3"><parameters><parameter name="parent"/><parameter name="index"/><parameter name="sync"/></parameters></function><function name="dojo.widget.TreeRpcControllerV3.prepareDestroyChild" prototype="dojo.widget.TreeRpcControllerV3"><parameters><parameter name="node"/><parameter name="sync"/></parameters></function><function name="dojo.widget.TreeRpcControllerV3.finalizeDestroyChild" prototype="dojo.widget.TreeRpcControllerV3"><parameters><parameter name="node"/></parameters></function><function name="dojo.widget.TreeRpcControllerV3.doDestroyChild" prototype="dojo.widget.TreeRpcControllerV3"><parameters><parameter name="node"/><parameter name="sync"/></parameters><chains><chain type="call">dojo.widget.TreeBasicControllerV3.prototype.doDestroyChild</chain></chains></function><function name="dojo.widget.TreeRpcControllerV3.sendCreateChildRequest" prototype="dojo.widget.TreeRpcControllerV3"><parameters><parameter name="parent"/><parameter name="index"/><parameter name="data"/><parameter name="sync"/></parameters></function><function name="dojo.widget.TreeRpcControllerV3.doCreateChild" prototype="dojo.widget.TreeRpcControllerV3"><parameters><parameter name="parent"/><parameter name="index"/><parameter name="data"/><parameter name="sync"/></parameters><chains><chain type="call">dojo.widget.TreeBasicControllerV3.prototype.doCreateChild</chain></chains></function><function name="dojo.widget.TreeRpcControllerV3.doClone" prototype="dojo.widget.TreeRpcControllerV3"><parameters><parameter name="child"/><parameter name="newParent"/><parameter name="index"/><parameter name="deep"/><parameter name="sync"/></parameters><chains><chain type="call">dojo.widget.TreeBasicControllerV3.prototype.doClone</chain></chains></function></resource><resource location="dojo.widget.TreeSelector"><requires><environment type="common"><require>dojo.widget.HtmlWidget</require></environment></requires><function name="dojo.widget.TreeSelector"><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="widgetType"/><variable name="selectedNode"/><variable name="dieWithTree"/><variable scope="instance" name="selectedNode"/><variable scope="instance" name="eventNames"/><variable scope="instance" name="listenedTrees"/><variable scope="prototype" name="widgetType"/><variable scope="prototype" name="selectedNode"/><variable scope="prototype" name="dieWithTree"/></variables></function><function name="dojo.widget.TreeSelector.initialize" prototype="dojo.widget.TreeSelector"/><function name="dojo.widget.TreeSelector.destroy" prototype="dojo.widget.TreeSelector"><chains><chain type="call">dojo.widget.HtmlWidget.prototype.destroy</chain></chains></function><function name="dojo.widget.TreeSelector.listenTree" prototype="dojo.widget.TreeSelector"><parameters><parameter name="tree"/></parameters></function><function name="dojo.widget.TreeSelector.unlistenTree" prototype="dojo.widget.TreeSelector"><parameters><parameter name="tree"/></parameters></function><function name="dojo.widget.TreeSelector.onTreeDestroy" prototype="dojo.widget.TreeSelector"><parameters><parameter name="message"/></parameters></function><function name="dojo.widget.TreeSelector.onCollapse" prototype="dojo.widget.TreeSelector"><parameters><parameter name="message"/></parameters></function><function name="dojo.widget.TreeSelector.select" prototype="dojo.widget.TreeSelector"><parameters><parameter name="message"/></parameters></function><function name="dojo.widget.TreeSelector.onMoveFrom" prototype="dojo.widget.TreeSelector"><parameters><parameter name="message"/></parameters></function><function name="dojo.widget.TreeSelector.onRemoveNode" prototype="dojo.widget.TreeSelector"><parameters><parameter name="message"/></parameters></function><function name="dojo.widget.TreeSelector.doSelect" prototype="dojo.widget.TreeSelector"><parameters><parameter name="node"/></parameters></function><function name="dojo.widget.TreeSelector.deselect" prototype="dojo.widget.TreeSelector"/><object name="dojo.widget.TreeSelector.eventNamesDefault"><variables><variable name="dblselect"/></variables></object></resource><resource location="dojo.widget.TreeSelectorV3"><requires><environment type="common"><require>dojo.widget.HtmlWidget</require><require>dojo.widget.TreeCommon</require></environment></requires><function name="dojo.widget.TreeSelectorV3"><variables><variable name="listenTreeEvents"/><variable name="allowedMulti"/><variable name="dblselectTimeout"/><variable scope="instance" name="lastClicked"/><variable scope="instance" name="lastClicked.date"/><variable scope="instance" name="lastClicked.node"/><variable scope="instance" name="eventNames"/><variable scope="instance" name="listenedTrees"/><variable scope="instance" name="selectedNodes"/><variable scope="prototype" name="listenTreeEvents"/><variable scope="prototype" name="allowedMulti"/><variable scope="prototype" name="dblselectTimeout"/></variables></function><function name="dojo.widget.TreeSelectorV3.listenNodeFilter" prototype="dojo.widget.TreeSelectorV3"><parameters><parameter name="elem"/></parameters></function><function name="dojo.widget.TreeSelectorV3.onAfterTreeCreate" prototype="dojo.widget.TreeSelectorV3"><parameters><parameter name="message"/></parameters></function><function name="dojo.widget.TreeSelectorV3.onKey" prototype="dojo.widget.TreeSelectorV3"><parameters><parameter name="e"/></parameters></function><function name="dojo.widget.TreeSelectorV3.onAfterChangeTree" prototype="dojo.widget.TreeSelectorV3"><parameters><parameter name="message"/></parameters></function><function name="dojo.widget.TreeSelectorV3.initialize" prototype="dojo.widget.TreeSelectorV3"><parameters><parameter name="args"/></parameters></function><function name="dojo.widget.TreeSelectorV3.onBeforeTreeDestroy" prototype="dojo.widget.TreeSelectorV3"><parameters><parameter name="message"/></parameters></function><function name="dojo.widget.TreeSelectorV3.onAfterCollapse" prototype="dojo.widget.TreeSelectorV3"><parameters><parameter name="message"/></parameters></function><function name="dojo.widget.TreeSelectorV3.onTreeDblClick" prototype="dojo.widget.TreeSelectorV3"><parameters><parameter name="event"/></parameters></function><function name="dojo.widget.TreeSelectorV3.checkSpecialEvent" prototype="dojo.widget.TreeSelectorV3"><parameters><parameter name="event"/></parameters></function><function name="dojo.widget.TreeSelectorV3.onTreeClick" prototype="dojo.widget.TreeSelectorV3"><parameters><parameter name="event"/></parameters></function><function name="dojo.widget.TreeSelectorV3.processNode" prototype="dojo.widget.TreeSelectorV3"><parameters><parameter name="node"/><parameter name="event"/></parameters></function><function name="dojo.widget.TreeSelectorV3.forgetLastClicked" prototype="dojo.widget.TreeSelectorV3"/><function name="dojo.widget.TreeSelectorV3.setLastClicked" prototype="dojo.widget.TreeSelectorV3"><parameters><parameter name="node"/></parameters></function><function name="dojo.widget.TreeSelectorV3.checkRecentClick" prototype="dojo.widget.TreeSelectorV3"><parameters><parameter name="node"/></parameters></function><function name="dojo.widget.TreeSelectorV3.deselectIfNoMulti" prototype="dojo.widget.TreeSelectorV3"><parameters><parameter name="event"/></parameters></function><function name="dojo.widget.TreeSelectorV3.deselectIfAncestorMatch" prototype="dojo.widget.TreeSelectorV3"><parameters><parameter name="ancestor"/></parameters></function><function name="dojo.widget.TreeSelectorV3.onAfterDetach" prototype="dojo.widget.TreeSelectorV3"><parameters><parameter name="message"/></parameters></function><function name="dojo.widget.TreeSelectorV3.select" prototype="dojo.widget.TreeSelectorV3"><returns type="already selected"/><parameters><parameter name="node"/></parameters></function><function name="dojo.widget.TreeSelectorV3.deselect" prototype="dojo.widget.TreeSelectorV3"><returns type="not selected"/><parameters><parameter name="node"/></parameters></function><function name="dojo.widget.TreeSelectorV3.deselectAll" prototype="dojo.widget.TreeSelectorV3"/><object name="dojo.widget.TreeSelectorV3.eventNamesDefault"><variables><variable name="dblselect"/></variables></object></resource><resource location="dojo.widget.TreeTimeoutIterator"><requires><environment type="common"><require>dojo.event.*</require><require>dojo.json</require><require>dojo.io.*</require><require>dojo.widget.TreeCommon</require></environment></requires><function name="dojo.widget.TreeTimeoutIterator"><parameters><parameter name="elem"/><parameter name="callFunc"/><parameter name="callObj"/></parameters><variables><variable name="maxStackDepth"/><variable name="stack"/><variable name="currentParent"/><variable name="currentIndex"/><variable scope="instance" name="filterFunc"/><variable scope="instance" name="filterObj"/><variable scope="instance" name="maxStackDepth"/><variable scope="instance" name="finishFunc"/><variable scope="instance" name="finishObj"/><variable scope="instance" name="currentParent"/><variable scope="instance" name="currentIndex"/><variable scope="instance" name="callFunc"/><variable scope="instance" name="callObj"/><variable scope="instance" name="stack"/><variable scope="prototype" name="maxStackDepth"/><variable scope="prototype" name="stack"/><variable scope="prototype" name="currentParent"/><variable scope="prototype" name="currentIndex"/></variables></function><function name="dojo.widget.TreeTimeoutIterator.filterFunc" prototype="dojo.widget.TreeTimeoutIterator"/><function name="dojo.widget.TreeTimeoutIterator.finishFunc" prototype="dojo.widget.TreeTimeoutIterator"/><function name="dojo.widget.TreeTimeoutIterator.setFilter" prototype="dojo.widget.TreeTimeoutIterator"><parameters><parameter name="func"/><parameter name="obj"/></parameters></function><function name="dojo.widget.TreeTimeoutIterator.setMaxLevel" prototype="dojo.widget.TreeTimeoutIterator"><parameters><parameter name="level"/></parameters></function><function name="dojo.widget.TreeTimeoutIterator.forward" prototype="dojo.widget.TreeTimeoutIterator"><parameters><parameter name="timeout"/></parameters></function><function name="dojo.widget.TreeTimeoutIterator.start" prototype="dojo.widget.TreeTimeoutIterator"><parameters><parameter name="processFirst"/></parameters><chains><chain type="call">this.callFunc</chain></chains></function><function name="dojo.widget.TreeTimeoutIterator.processNext" prototype="dojo.widget.TreeTimeoutIterator"><returns type="process only first cause level=0, do not process children"/><chains><chain type="call">this.filterFunc</chain><chain type="call">this.callFunc</chain><chain type="call">this.finishFunc</chain></chains></function><function name="dojo.widget.TreeTimeoutIterator.setFinish" prototype="dojo.widget.TreeTimeoutIterator"><parameters><parameter name="func"/><parameter name="obj"/></parameters></function><function name="dojo.widget.TreeTimeoutIterator.popParent" prototype="dojo.widget.TreeTimeoutIterator"/><function name="dojo.widget.TreeTimeoutIterator.moveParent" prototype="dojo.widget.TreeTimeoutIterator"><parameters><parameter name="nextParent"/><parameter name="nextIndex"/></parameters></function></resource><resource location="dojo.widget.TreeToggleOnSelect"><requires><environment type="common"><require>dojo.widget.HtmlWidget</require></environment></requires><function name="dojo.widget.TreeToggleOnSelect"><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="selector"/><variable name="controller"/><variable name="selectEvent"/><variable scope="instance" name="selector"/><variable scope="instance" name="controller"/><variable scope="prototype" name="selector"/><variable scope="prototype" name="controller"/><variable scope="prototype" name="selectEvent"/></variables></function><function name="dojo.widget.TreeToggleOnSelect.initialize" prototype="dojo.widget.TreeToggleOnSelect"/><function name="dojo.widget.TreeToggleOnSelect.onSelectEvent" prototype="dojo.widget.TreeToggleOnSelect"><parameters><parameter name="message"/></parameters></function></resource><resource location="dojo.widget.TreeV3"><requires><environment type="common"><require>dojo.widget.TreeWithNode</require><require>dojo.widget.*</require><require>dojo.event.*</require><require>dojo.io.*</require><require>dojo.widget.HtmlWidget</require><require>dojo.widget.TreeNodeV3</require></environment></requires><function name="dojo.widget.TreeV3"><variables><variable name="DndMode"/><variable name="defaultChildWidget"/><variable name="defaultChildTitle"/><variable name="eagerWidgetInstantiation"/><variable name="classPrefix"/><variable name="style"/><variable name="allowAddChildToLeaf"/><variable name="unsetFolderOnEmpty"/><variable name="DndAcceptTypes"/><variable name="templateCssPath"/><variable name="templateString"/><variable name="isExpanded"/><variable name="isTree"/><variable scope="instance" name="nodeTemplate"/><variable scope="instance" name="expandNodeTemplate"/><variable scope="instance" name="labelNodeTemplate"/><variable scope="instance" name="contentNodeTemplate"/><variable scope="instance" name="containerNodeTemplate"/><variable scope="instance" name="DndMode"/><variable scope="instance" name="domNode.widgetId"/><variable scope="instance" name="defaultChildWidget"/><variable scope="instance" name="containerNode"/><variable scope="instance" name="eventNames"/><variable scope="instance" name="DndAcceptTypes"/><variable scope="instance" name="actionsDisabled"/><variable scope="instance" name="listeners"/><variable scope="instance" name="tree"/><variable scope="prototype" name="DndMode"/><variable scope="prototype" name="defaultChildWidget"/><variable scope="prototype" name="defaultChildTitle"/><variable scope="prototype" name="eagerWidgetInstantiation"/><variable scope="prototype" name="classPrefix"/><variable scope="prototype" name="style"/><variable scope="prototype" name="allowAddChildToLeaf"/><variable scope="prototype" name="unsetFolderOnEmpty"/><variable scope="prototype" name="DndAcceptTypes"/><variable scope="prototype" name="templateCssPath"/><variable scope="prototype" name="templateString"/><variable scope="prototype" name="isExpanded"/><variable scope="prototype" name="isTree"/></variables></function><function name="dojo.widget.TreeV3.createNode" prototype="dojo.widget.TreeV3"><parameters><parameter name="data"/></parameters></function><function name="dojo.widget.TreeV3.makeNodeTemplate" prototype="dojo.widget.TreeV3"/><function name="dojo.widget.TreeV3.makeContainerNodeTemplate" prototype="dojo.widget.TreeV3"/><function name="dojo.widget.TreeV3.getInfo" prototype="dojo.widget.TreeV3"/><function name="dojo.widget.TreeV3.adjustEventNames" prototype="dojo.widget.TreeV3"/><function name="dojo.widget.TreeV3.adjustDndMode" prototype="dojo.widget.TreeV3"/><function name="dojo.widget.TreeV3.destroy" prototype="dojo.widget.TreeV3"><chains><chain type="call">dojo.widget.HtmlWidget.prototype.destroy</chain></chains></function><function name="dojo.widget.TreeV3.initialize" prototype="dojo.widget.TreeV3"><parameters><parameter name="args"/></parameters></function><function name="dojo.widget.TreeV3.postCreate" prototype="dojo.widget.TreeV3"/><function name="dojo.widget.TreeV3.move" prototype="dojo.widget.TreeV3"><parameters><parameter name="child"/><parameter name="newParent"/><parameter name="index"/></parameters><chains><chain type="call">this.doMove</chain></chains></function><function name="dojo.widget.TreeV3.doMove" prototype="dojo.widget.TreeV3"><parameters><parameter name="child"/><parameter name="newParent"/><parameter name="index"/></parameters></function><function name="dojo.widget.TreeV3.toString" prototype="dojo.widget.TreeV3"/><object name="dojo.widget.TreeV3.eventNamesDefault"><variables><variable name="afterTreeCreate"/><variable name="beforeTreeDestroy"/><variable name="beforeNodeDestroy"/><variable name="afterChangeTree"/><variable name="afterSetFolder"/><variable name="afterUnsetFolder"/><variable name="beforeMoveFrom"/><variable name="beforeMoveTo"/><variable name="afterMoveFrom"/><variable name="afterMoveTo"/><variable name="afterAddChild"/><variable name="afterDetach"/><variable name="afterExpand"/><variable name="beforeExpand"/><variable name="afterSetTitle"/><variable name="afterCollapse"/><variable name="beforeCollapse"/></variables></object><object name="dojo.widget.TreeV3.DndModes"><variables><variable name="BETWEEN"/><variable name="ONTO"/></variables></object><object name="dojo.widget.TreeV3.actions"><variables><variable name="ADDCHILD"/></variables></object></resource><resource location="dojo.widget.TreeWithNode"><requires><environment type="common"><require>dojo.lang.declare</require></environment></requires><function name="dojo.widget.TreeWithNode"><variables><variable name="state"/><variable name="objectId"/><variable name="isContainer"/><variable name="lockLevel"/><variable name="expandLevel"/><variable name="loadLevel"/><variable scope="instance" name="lockLevel"/><variable scope="instance" name="state"/><variable scope="instance" name="children"/><variable scope="instance" name="animationInProgress"/><variable scope="prototype" name="state"/><variable scope="prototype" name="objectId"/><variable scope="prototype" name="isContainer"/><variable scope="prototype" name="lockLevel"/><variable scope="prototype" name="expandLevel"/><variable scope="prototype" name="loadLevel"/></variables></function><function name="dojo.widget.TreeWithNode.lock" prototype="dojo.widget.TreeWithNode"/><function name="dojo.widget.TreeWithNode.unlock" prototype="dojo.widget.TreeWithNode"/><function name="dojo.widget.TreeWithNode.hasLock" prototype="dojo.widget.TreeWithNode"/><function name="dojo.widget.TreeWithNode.isLocked" prototype="dojo.widget.TreeWithNode"/><function name="dojo.widget.TreeWithNode.flushLock" prototype="dojo.widget.TreeWithNode"/><function name="dojo.widget.TreeWithNode.actionIsDisabled" prototype="dojo.widget.TreeWithNode"><parameters><parameter name="action"/></parameters></function><function name="dojo.widget.TreeWithNode.actionIsDisabledNow" prototype="dojo.widget.TreeWithNode"><parameters><parameter name="action"/></parameters></function><function name="dojo.widget.TreeWithNode.setChildren" prototype="dojo.widget.TreeWithNode"><parameters><parameter name="childrenArray"/></parameters></function><function name="dojo.widget.TreeWithNode.doAddChild" prototype="dojo.widget.TreeWithNode"><parameters><parameter name="child"/><parameter name="index"/></parameters></function><function name="dojo.widget.TreeWithNode.addChild" prototype="dojo.widget.TreeWithNode"><parameters><parameter name="child"/><parameter name="index"/><parameter name="dontPublishEvent"/></parameters></function><function name="dojo.widget.TreeWithNode.onShow" prototype="dojo.widget.TreeWithNode"/><function name="dojo.widget.TreeWithNode.onHide" prototype="dojo.widget.TreeWithNode"/><object name="dojo.widget.TreeWithNode.loadStates"><variables><variable name="UNCHECKED"/><variable name="LOADING"/><variable name="LOADED"/></variables></object></resource><resource location="dojo.widget.UsTextbox"><requires><environment type="common"><require>dojo.widget.ValidationTextbox</require><require>dojo.validate.us</require></environment></requires><function name="dojo.widget.UsStateTextbox"><summary>a Textbox which tests for a United States state abbreviation</summary><chains><chain type="call">dojo.widget.ValidationTextbox</chain><chain type="prototype">dojo.widget.ValidationTextbox</chain></chains><variables><variable scope="instance" name="flags.allowTerritories"/><variable scope="instance" name="flags.allowMilitary"/></variables></function><function name="dojo.widget.UsStateTextbox.mixInProperties" prototype="dojo.widget.UsStateTextbox"><summary>see dojo.widget.Widget</summary><parameters><parameter name="localProperties" type="Object"/></parameters><chains><chain type="call">dojo.widget.UsStateTextbox.superclass.mixInProperties</chain></chains></function><function name="dojo.widget.UsStateTextbox.isValid" prototype="dojo.widget.UsStateTextbox"><summary>see dojo.widget.ValidationTextbox</summary></function><function name="dojo.widget.UsZipTextbox"><summary>a Textbox which tests for a United States postal code</summary><chains><chain type="call">dojo.widget.ValidationTextbox</chain><chain type="prototype">dojo.widget.ValidationTextbox</chain></chains></function><function name="dojo.widget.UsZipTextbox.isValid" prototype="dojo.widget.UsZipTextbox"><summary>see dojo.widget.ValidationTextbox</summary></function><function name="dojo.widget.UsSocialSecurityNumberTextbox"><summary>a Textbox which tests for a United States Social Security number</summary><chains><chain type="call">dojo.widget.ValidationTextbox</chain><chain type="prototype">dojo.widget.ValidationTextbox</chain></chains></function><function name="dojo.widget.UsSocialSecurityNumberTextbox.isValid" prototype="dojo.widget.UsSocialSecurityNumberTextbox"><summary>see dojo.widget.ValidationTextbox</summary></function><function name="dojo.widget.UsPhoneNumberTextbox"><summary>a Textbox which tests for a United States 10-digit telephone number, extension is optional.</summary><chains><chain type="call">dojo.widget.ValidationTextbox</chain><chain type="prototype">dojo.widget.ValidationTextbox</chain></chains></function><function name="dojo.widget.UsPhoneNumberTextbox.isValid" prototype="dojo.widget.UsPhoneNumberTextbox"><summary>see dojo.widget.ValidationTextbox</summary></function></resource><resource location="dojo.widget.ValidationTextbox"><requires><environment type="common"><require>dojo.widget.Textbox</require><require>dojo.i18n.common</require></environment></requires><function name="dojo.widget.ValidationTextbox"><summary>A subclass of Textbox. Over-ride isValid in subclasses to perform specific kinds of validation. this property isn't a primitive and needs to be created on a per-item basis.</summary><chains><chain type="call">dojo.widget.Textbox</chain><chain type="prototype">dojo.widget.Textbox</chain></chains><variables><variable name="required" type="default">values for new subclass properties Boolean Can be true or false, default is false.</variable><variable name="rangeClass"/><variable name="invalidClass" type="String">Class used to format displayed text in page if necessary to override default class</variable><variable name="missingClass" type="String">Override default class used for missing input data</variable><variable name="classPrefix"/><variable name="size" type="String">Basic input tag size declaration.</variable><variable name="maxlength" type="String">Basic input tag maxlength declaration.</variable><variable name="promptMessage" type="String">Will not issue invalid message if field is populated with default user-prompt text</variable><variable name="invalidMessage" type="String">The message to display if value is invalid.</variable><variable name="missingMessage" type="String">The message to display if value is missing.</variable><variable name="rangeMessage"/><variable name="listenOnKeyPress" type="Boolean">Updates messages on each key press. Default is true. new DOM nodes</variable><variable name="htmlfloat"/><variable name="lastCheckedValue"/><variable name="templatePath"/><variable name="templateCssPath"/><variable name="invalidSpan"/><variable name="missingSpan"/><variable name="rangeSpan"/><variable scope="instance" name="textbox.value"/><variable scope="instance" name="lastCheckedValue"/><variable scope="instance" name="missingSpan.style.display"/><variable scope="instance" name="invalidSpan.style.display"/><variable scope="instance" name="rangeSpan.style.display"/><variable scope="instance" name="messages"/><variable scope="instance" name="textbox.isValid"/><variable scope="instance" name="textbox.isMissing"/><variable scope="instance" name="textbox.isInRange"/><variable scope="instance" name="flags"/><variable scope="prototype" name="required">values for new subclass properties Boolean Can be true or false, default is false.</variable><variable scope="prototype" name="rangeClass"/><variable scope="prototype" name="invalidClass">Class used to format displayed text in page if necessary to override default class</variable><variable scope="prototype" name="missingClass">Override default class used for missing input data</variable><variable scope="prototype" name="classPrefix"/><variable scope="prototype" name="size">Basic input tag size declaration.</variable><variable scope="prototype" name="maxlength">Basic input tag maxlength declaration.</variable><variable scope="prototype" name="promptMessage">Will not issue invalid message if field is populated with default user-prompt text</variable><variable scope="prototype" name="invalidMessage">The message to display if value is invalid.</variable><variable scope="prototype" name="missingMessage">The message to display if value is missing.</variable><variable scope="prototype" name="rangeMessage"/><variable scope="prototype" name="listenOnKeyPress">Updates messages on each key press. Default is true. new DOM nodes</variable><variable scope="prototype" name="htmlfloat"/><variable scope="prototype" name="lastCheckedValue"/><variable scope="prototype" name="templatePath"/><variable scope="prototype" name="templateCssPath"/><variable scope="prototype" name="invalidSpan"/><variable scope="prototype" name="missingSpan"/><variable scope="prototype" name="rangeSpan"/></variables></function><function name="dojo.widget.ValidationTextbox.getValue" prototype="dojo.widget.ValidationTextbox"/><function name="dojo.widget.ValidationTextbox.setValue" prototype="dojo.widget.ValidationTextbox"><parameters><parameter name="value"/></parameters></function><function name="dojo.widget.ValidationTextbox.isValid" prototype="dojo.widget.ValidationTextbox"><summary>Need to over-ride with your own validation code in subclasses</summary></function><function name="dojo.widget.ValidationTextbox.isInRange" prototype="dojo.widget.ValidationTextbox"><summary>Need to over-ride with your own validation code in subclasses</summary></function><function name="dojo.widget.ValidationTextbox.isEmpty" prototype="dojo.widget.ValidationTextbox"><returns type="Boolean"/><summary>Checks for whitespace</summary></function><function name="dojo.widget.ValidationTextbox.isMissing" prototype="dojo.widget.ValidationTextbox"><returns type="Boolean"/><summary>Checks to see if value is required and is whitespace</summary></function><function name="dojo.widget.ValidationTextbox.update" prototype="dojo.widget.ValidationTextbox"><summary>Called by oninit, onblur, and onkeypress.</summary><description>Show missing or invalid messages if appropriate, and highlight textbox field.</description></function><function name="dojo.widget.ValidationTextbox.updateClass" prototype="dojo.widget.ValidationTextbox"><summary>used to ensure that only 1 validation class is set at a time</summary><parameters><parameter name="className"/></parameters></function><function name="dojo.widget.ValidationTextbox.highlight" prototype="dojo.widget.ValidationTextbox"><summary>by Called oninit, and onblur. highlight textbox background</summary></function><function name="dojo.widget.ValidationTextbox.onfocus" prototype="dojo.widget.ValidationTextbox"><parameters><parameter name="evt"/></parameters></function><function name="dojo.widget.ValidationTextbox.onblur" prototype="dojo.widget.ValidationTextbox"><parameters><parameter name="evt"/></parameters></function><function name="dojo.widget.ValidationTextbox.onkeyup" prototype="dojo.widget.ValidationTextbox"><parameters><parameter name="evt"/></parameters></function><function name="dojo.widget.ValidationTextbox.postMixInProperties" prototype="dojo.widget.ValidationTextbox"><parameters><parameter name="localProperties"/><parameter name="frag"/></parameters><chains><chain type="call">dojo.widget.ValidationTextbox.superclass.postMixInProperties</chain></chains></function><function name="dojo.widget.ValidationTextbox.fillInTemplate" prototype="dojo.widget.ValidationTextbox"><chains><chain type="call">dojo.widget.ValidationTextbox.superclass.fillInTemplate</chain><chain type="call">this.isValid</chain><chain type="call">this.isMissing</chain><chain type="call">this.isInRange</chain></chains></function><function name="dojo.widget.ValidationTextbox.fillInTemplate.textbox.isValid" instance="dojo.widget.ValidationTextbox.fillInTemplate"><chains><chain type="call">this.isValid</chain></chains></function><function name="dojo.widget.ValidationTextbox.fillInTemplate.textbox.isMissing" instance="dojo.widget.ValidationTextbox.fillInTemplate"><chains><chain type="call">this.isMissing</chain></chains></function><function name="dojo.widget.ValidationTextbox.fillInTemplate.textbox.isInRange" instance="dojo.widget.ValidationTextbox.fillInTemplate"><chains><chain type="call">this.isInRange</chain></chains></function></resource><resource location="dojo.widget.Widget"><requires><environment type="common"><require>dojo.lang.func</require><require>dojo.lang.array</require><require>dojo.lang.extras</require><require>dojo.lang.declare</require><require>dojo.ns</require><require>dojo.widget.Manager</require><require>dojo.event.*</require><require>dojo.a11y</require></environment></requires><function name="dojo.widget.Widget"><variables><variable name="parent" type="Widget">the parent of this widget</variable><variable name="isTopLevel"/><variable name="disabled"/><variable name="isContainer"/><variable name="widgetId"/><variable name="widgetType"/><variable name="ns"/><variable scope="instance" name="disabled"/><variable scope="instance" name="ns"/><variable scope="instance" name="children"/><variable scope="instance" name="extraArgs"/><variable scope="prototype" name="parent">the parent of this widget</variable><variable scope="prototype" name="isTopLevel"/><variable scope="prototype" name="disabled"/><variable scope="prototype" name="isContainer"/><variable scope="prototype" name="widgetId"/><variable scope="prototype" name="widgetType"/><variable scope="prototype" name="ns"/></variables></function><function name="dojo.widget.Widget.getNamespacedType" prototype="dojo.widget.Widget"><returns type="String"/><summary>get the "full" name of the widget. If the widget comes from the "dojo" namespace and is a Button, calling this method will return "dojo:button", all lower-case</summary></function><function name="dojo.widget.Widget.toString" prototype="dojo.widget.Widget"><returns type="String">a string that represents the widget. When a widget is cast to a string, this method will be used to generate the output. Currently, it does not implement any sort of reversable serialization.</returns></function><function name="dojo.widget.Widget.repr" prototype="dojo.widget.Widget"><returns type="String"/><summary>returns the string representation of the widget.</summary></function><function name="dojo.widget.Widget.enable" prototype="dojo.widget.Widget"><summary>enables the widget, usually involving unmasking inputs and turning on event handlers. Not implemented here.</summary></function><function name="dojo.widget.Widget.disable" prototype="dojo.widget.Widget"><summary>disables the widget, usually involves masking inputs and unsetting event handlers. Not implemented here.</summary></function><function name="dojo.widget.Widget.onResized" prototype="dojo.widget.Widget"><summary>A signal that widgets will call when they have been resized. Can be connected to for determining if a layout needs to be reflowed. Clients should override this function to do special processing, then call this.notifyChildrenOfResize() to notify children of resize.</summary></function><function name="dojo.widget.Widget.notifyChildrenOfResize" prototype="dojo.widget.Widget"><summary>dispatches resized events to all children of this widget</summary></function><function name="dojo.widget.Widget.create" prototype="dojo.widget.Widget"><summary>'create' manages the initialization part of the widget lifecycle. It's called implicitly when any widget is created. All other initialization functions for widgets, except for the constructor, are called as a result of 'create' being fired.</summary><parameters><parameter name="args" type="Object">a normalized view of the parameters that the widget should take</parameter><parameter name="fragment" type="Object">if the widget is being instantiated from markup, this object</parameter><parameter name="parent" optional="true" type="Widget">the widget, if any, that this widget will be the child of. If none is passed, the global default widget is used.</parameter><parameter name="ns"/></parameters><description>to understand the process by which widgets are instantiated, it is critical to understand what other methods 'create' calls and which of them you'll want to over-ride. Of course, adventurous developers could over-ride 'create' entirely, but this should only be done as a last resort. Below is a list of the methods that are called, in the order they are fired, along with notes about what they do and if/when you should over-ride them in your widget: mixInProperties: takes the args and does lightweight type introspection on pre-existing object properties to initialize widget values by casting the values that are passed in args postMixInProperties: a stub function that you can over-ride to modify variables that may have been naively assigned by mixInProperties # widget is added to manager object here buildRendering subclasses use this method to handle all UI initialization initialize: a stub function that you can over-ride. postInitialize: a stub function that you can over-ride. postCreate a stub function that you can over-ride to modify take actions once the widget has been placed in the UI all of these functions are passed the same arguments as are passed to 'create'</description></function><function name="dojo.widget.Widget.destroy" prototype="dojo.widget.Widget"><summary>Destroy this widget and it's descendants. This is the generic "destructor" function that all widget users should call to clealy discard with a widget. Once a widget is destroyed, it's removed from the manager object.</summary><parameters><parameter name="finalize" type="Boolean">is this function being called part of global environment tear-down?</parameter></parameters></function><function name="dojo.widget.Widget.destroyChildren" prototype="dojo.widget.Widget"><summary>Recursively destroy the children of this widget and their descendents.</summary></function><function name="dojo.widget.Widget.getChildrenOfType" prototype="dojo.widget.Widget"><returns type="Array"/><summary>return an array of descendant widgets who match the passed type</summary><parameters><parameter name="type" type="String"/><parameter name="recurse" type="Boolean">should we try to get all descendants that match? Defaults to false.</parameter></parameters></function><function name="dojo.widget.Widget.getDescendants" prototype="dojo.widget.Widget"><returns type="Array">a flattened array of all direct descendants including self</returns></function><function name="dojo.widget.Widget.isFirstChild" prototype="dojo.widget.Widget"><returns type="Boolean"/></function><function name="dojo.widget.Widget.isLastChild" prototype="dojo.widget.Widget"><returns type="Boolean"/></function><function name="dojo.widget.Widget.satisfyPropertySets" prototype="dojo.widget.Widget"><returns type="pull out propsets from the parser's return structure"/><summary>not implemented!</summary><parameters><parameter name="args"/></parameters></function><function name="dojo.widget.Widget.mixInProperties" prototype="dojo.widget.Widget"><summary>takes the list of properties listed in args and sets values of the current object based on existence of properties with the same name (case insensitive) and the type of the pre-existing property. This is a lightweight conversion and is not intended to capture custom type semantics.</summary><parameters><parameter name="args" type="Object">A map of properties and values to set on the current object. By default it is assumed that properties in args are in string form and need to be converted. However, if there is a 'fastMixIn' property with the value 'true' in the args param, this assumption is ignored and all values in args are copied directly to the current object without any form of type casting.</parameter><parameter name="frag" type="Object"/></parameters><description>The mix-in code attempts to do some type-assignment based on PRE-EXISTING properties of the "this" object. When a named property of args is located, it is first tested to make sure that the current object already "has one". Properties which are undefined in the base widget are NOT settable here. The next step is to try to determine type of the pre-existing property. If it's a string, the property value is simply assigned. If a function, it is first cast using "new Function()" and the execution scope modified such that it always evaluates in the context of the current object. This listener is then added to the original function via dojo.event.connect(). If an Array, the system attempts to split the string value on ";" chars, and no further processing is attempted (conversion of array elements to a integers, for instance). If the property value is an Object (testObj.constructor === Object), the property is split first on ";" chars, secondly on ":" chars, and the resulting key/value pairs are assigned to an object in a map style. The onus is on the property user to ensure that all property values are converted to the expected type before usage. Properties which do not occur in the "this" object are assigned to the this.extraArgs map using both the original name and the lower-case name of the property. This allows for consistent access semantics regardless of the case preservation of the source of the property names.</description></function><function name="dojo.widget.Widget.postMixInProperties" prototype="dojo.widget.Widget"><summary>Called after the parameters to the widget have been read-in, but before the widget template is instantiated. Especially useful to set properties that are referenced in the widget template.</summary><parameters><parameter name="args" type="Object"/><parameter name="frag" type="Object"/><parameter name="parent" type="Widget"/></parameters></function><function name="dojo.widget.Widget.initialize" prototype="dojo.widget.Widget"><summary>stub function.</summary><parameters><parameter name="args" type="Object"/><parameter name="frag" type="Object"/><parameter name="parent" type="Widget"/></parameters></function><function name="dojo.widget.Widget.postInitialize" prototype="dojo.widget.Widget"><summary>stub function.</summary><parameters><parameter name="args" type="Object"/><parameter name="frag" type="Object"/><parameter name="parent" type="Widget"/></parameters></function><function name="dojo.widget.Widget.postCreate" prototype="dojo.widget.Widget"><summary>stub function.</summary><parameters><parameter name="args" type="Object"/><parameter name="frag" type="Object"/><parameter name="parent" type="Widget"/></parameters></function><function name="dojo.widget.Widget.uninitialize" prototype="dojo.widget.Widget"><summary>stub function. Over-ride to implement custom widget tear-down behavior.</summary></function><function name="dojo.widget.Widget.buildRendering" prototype="dojo.widget.Widget"><summary>stub function. SUBCLASSES MUST IMPLEMENT</summary><parameters><parameter name="args" type="Object"/><parameter name="frag" type="Object"/><parameter name="parent" type="Widget"/></parameters></function><function name="dojo.widget.Widget.destroyRendering" prototype="dojo.widget.Widget"><summary>stub function. SUBCLASSES MUST IMPLEMENT</summary></function><function name="dojo.widget.Widget.addedTo" prototype="dojo.widget.Widget"><summary>stub function this is just a signal that can be caught</summary><parameters><parameter name="parent" type="Widget">instance of dojo.widget.Widget that we were added to</parameter></parameters></function><function name="dojo.widget.Widget.addChild" prototype="dojo.widget.Widget"><summary>stub function. SUBCLASSES MUST IMPLEMENT</summary><parameters><parameter name="child"/></parameters></function><function name="dojo.widget.Widget.removeChild" prototype="dojo.widget.Widget"><returns type="Widget"/><summary>removes the passed widget instance from this widget but does not destroy it</summary><parameters><parameter name="widget" type="Widget"/></parameters></function><function name="dojo.widget.Widget.getPreviousSibling" prototype="dojo.widget.Widget"><returns type="Widget">null if this is the first child of the parent, otherwise returns the next sibling to the "left".</returns></function><function name="dojo.widget.Widget.getSiblings" prototype="dojo.widget.Widget"><returns type="Array"/><summary>gets an array of all children of our parent, including "this"</summary></function><function name="dojo.widget.Widget.getParentIndex" prototype="dojo.widget.Widget"><returns type="int"/><summary>what index are we at in the parent's children array?</summary></function><function name="dojo.widget.Widget.getNextSibling" prototype="dojo.widget.Widget"><returns type="mixed">null if this is the last child of the parent, otherwise returns the next sibling to the "right".</returns></function><function name=""><chains><chain type="call">superclasses</chain><chain type="prototype">superclasses</chain></chains></function><function name="dojo.widget.tags.addParseTreeHandler"><summary>deprecated!</summary><parameters><parameter name="type" type="String"/></parameters></function><function name="dojo.widget.buildWidgetFromParseTree"><summary>creates a tree of widgets from the data structure produced by the first-pass parser (frag) test for accessibility mode</summary><parameters><parameter name="type" type="String"/><parameter name="frag" type="Object"/><parameter name="parser" type="dojo.widget.Parse"/><parameter name="parentComp" type="Widget, optional"/><parameter name="insertionIndex" type="int, optional"/><parameter name="localProps" type="Object"/></parameters></function><function name="dojo.widget.defineWidget"><summary>Create a widget constructor function (aka widgetClass)</summary><parameters><parameter name="widgetClass" type="String">the location in the object hierarchy to place the new widget class constructor</parameter><parameter name="renderer" type="String">usually "html", determines when this delcaration will be used</parameter><parameter name="superclasses" type="Function||Function[">can be either a single function or an array of functions to be mixed in as superclasses. If an array, only the first will be used to set prototype inheritance.</parameter><parameter name="init" type="Function">an optional constructor function. Will be called after superclasses are mixed in.</parameter><parameter name="props" type="Object">a map of properties and functions to extend the class prototype with</parameter></parameters><chains><chain type="call">dojo.widget._defineWidget</chain></chains></function><function name="dojo.widget._defineWidget"><parameters><parameter name="widgetClass" type="FIXME">uncomment next line to test parameter juggling ... remove when confidence improves dojo.debug('(c:)' + widgetClass + '\n\n(r:)' + renderer + '\n\n(i:)' + init + '\n\n(p:)' + props); takes the form foo.bar.baz&lt;.renderer&gt;.WidgetName (e.g. foo.bar.baz.WidgetName or foo.bar.baz.html.WidgetName)</parameter><parameter name="renderer" type="string"/><parameter name="superclasses" type="function||array"/><parameter name="init" type="function"/><parameter name="props" type="object"/></parameters></function></resource><resource location="dojo.widget.Wizard"><requires><environment type="common"><require>dojo.widget.*</require><require>dojo.widget.LayoutContainer</require><require>dojo.widget.ContentPane</require><require>dojo.event.*</require><require>dojo.html.style</require></environment></requires><function name="dojo.widget.WizardContainer"><summary>A set of panels that display sequentially, typically notating a step-by-step procedure like an install</summary><chains><chain type="call">dojo.widget.LayoutContainer</chain><chain type="prototype">dojo.widget.LayoutContainer</chain></chains><variables><variable name="templatePath"/><variable name="templateCssPath"/><variable name="selected"/><variable name="nextButtonLabel"/><variable name="previousButtonLabel"/><variable name="cancelButtonLabel"/><variable name="doneButtonLabel"/><variable name="cancelFunction"/><variable name="hideDisabledButtons"/><variable scope="instance" name="cancelButton.style.display"/><variable scope="instance" name="nextButton.value"/><variable scope="instance" name="previousButton.value"/><variable scope="instance" name="cancelButton.value"/><variable scope="instance" name="doneButton.value"/><variable scope="instance" name="nextButton.disabled"/><variable scope="instance" name="doneButton.style.display"/><variable scope="instance" name="nextButton.style.display"/><variable scope="instance" name="previousButton.disabled"/><variable scope="instance" name="selected"/><variable scope="prototype" name="templatePath"/><variable scope="prototype" name="templateCssPath"/><variable scope="prototype" name="selected"/><variable scope="prototype" name="nextButtonLabel"/><variable scope="prototype" name="previousButtonLabel"/><variable scope="prototype" name="cancelButtonLabel"/><variable scope="prototype" name="doneButtonLabel"/><variable scope="prototype" name="cancelFunction"/><variable scope="prototype" name="hideDisabledButtons"/></variables></function><function name="dojo.widget.WizardContainer.fillInTemplate" prototype="dojo.widget.WizardContainer"><parameters><parameter name="args"/><parameter name="frag"/></parameters></function><function name="dojo.widget.WizardContainer._checkButtons" prototype="dojo.widget.WizardContainer"/><function name="dojo.widget.WizardContainer._setButtonClass" prototype="dojo.widget.WizardContainer"><parameters><parameter name="button"/></parameters></function><function name="dojo.widget.WizardContainer.registerChild" prototype="dojo.widget.WizardContainer"><parameters><parameter name="panel"/><parameter name="insertionIndex"/></parameters><chains><chain type="call">dojo.widget.WizardContainer.superclass.registerChild</chain></chains></function><function name="dojo.widget.WizardContainer.onSelected" prototype="dojo.widget.WizardContainer"><summary>Callback when new panel is selected.. Deselect old panel and select new one</summary><parameters><parameter name="panel" type="WizardPanel"/></parameters></function><function name="dojo.widget.WizardContainer.getPanels" prototype="dojo.widget.WizardContainer"><returns type="WizardPane[]"/><summary>returns array of WizardPane children</summary></function><function name="dojo.widget.WizardContainer.selectedIndex" prototype="dojo.widget.WizardContainer"><returns type="Integer"/><summary>Returns index (into this.children[]) for currently selected child.</summary></function><function name="dojo.widget.WizardContainer._onNextButtonClick" prototype="dojo.widget.WizardContainer"><summary>callback when next button is clicked</summary></function><function name="dojo.widget.WizardContainer._onPreviousButtonClick" prototype="dojo.widget.WizardContainer"><summary>callback when previous button is clicked</summary></function><function name="dojo.widget.WizardContainer.hasNextPanel" prototype="dojo.widget.WizardContainer"><summary>Returns true if there's a another panel after the current panel</summary></function><function name="dojo.widget.WizardContainer.hasPreviousPanel" prototype="dojo.widget.WizardContainer"><summary>Returns true if there's a panel before the current panel</summary></function><function name="dojo.widget.WizardContainer.done" prototype="dojo.widget.WizardContainer"><summary>Finish the wizard's operation</summary></function><function name="dojo.widget.WizardPane"><summary>a panel in a WizardContainer</summary><chains><chain type="call">dojo.widget.ContentPane</chain><chain type="prototype">dojo.widget.ContentPane</chain></chains><variables><variable name="canGoBack"/><variable name="passFunction"/><variable name="doneFunction" type="String">Name of function that is run if you press the "Done" button from this panel</variable><variable scope="instance" name="passFunction"/><variable scope="instance" name="doneFunction" type="String">Name of function that is run if you press the "Done" button from this panel</variable><variable scope="prototype" name="canGoBack"/><variable scope="prototype" name="passFunction"/><variable scope="prototype" name="doneFunction">Name of function that is run if you press the "Done" button from this panel</variable></variables></function><function name="dojo.widget.WizardPane.postMixInProperties" prototype="dojo.widget.WizardPane"><parameters><parameter name="args"/><parameter name="frag"/></parameters><chains><chain type="call">dojo.widget.WizardPane.superclass.postMixInProperties</chain></chains></function><function name="dojo.widget.WizardPane._checkPass" prototype="dojo.widget.WizardPane"><summary>Called when the user presses the "next" button. Calls passFunction to see if it's OK to advance to next panel, and if it isn't, then display error. Returns true to advance, false to not advance.</summary></function><function name="dojo.widget.WizardPane.done" prototype="dojo.widget.WizardPane"/></resource><resource location="dojo.widget.YahooMap"><requires><environment type="common"><require>dojo.event.*</require><require>dojo.math</require><require>dojo.widget.*</require><require>dojo.widget.HtmlWidget</require></environment></requires><function name="dojo.widget.YahooMap"><summary>Creates a widget that wraps the Yahoo Map API.</summary><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="isContainer"/><variable name="templatePath"/><variable name="templateCssPath"/><variable name="findCenter"/><variable name="setControls"/><variable name="parse"/><variable name="render"/><variable name="initialize"/><variable name="postCreate"/><variable scope="instance" name="map"/><variable scope="instance" name="datasrc"/><variable scope="instance" name="data"/><variable scope="instance" name="width"/><variable scope="instance" name="height"/><variable scope="instance" name="controls"/><variable scope="prototype" name="isContainer"/><variable scope="prototype" name="templatePath"/><variable scope="prototype" name="templateCssPath"/><variable scope="prototype" name="findCenter"/><variable scope="prototype" name="setControls"/><variable scope="prototype" name="parse"/><variable scope="prototype" name="render"/><variable scope="prototype" name="initialize"/><variable scope="prototype" name="postCreate"/></variables><description>Widget wrapper for the Yahoo Map API; it allows you to easily embed a Yahoo Map within your Dojo application. map: YMap Reference to the Yahoo Map object. datasrc: String Reference to an external (to the widget) source for point data. data: Object[] Array of point information objects. width: Number Width of the map control. height: Number Height of the map control controls: String[] Array of strings that map to corresponding controls on a Yahoo Map.</description></function></resource><resource location="dojo.widget._"><requires><environment type="common"><require>dojo.xml.Parse</require><require>dojo.widget.Widget</require><require>dojo.widget.Parse</require><require>dojo.widget.Manager</require></environment></requires><requires><environment type="browser"><require>dojo.widget.DomWidget</require><require>dojo.widget.HtmlWidget</require></environment></requires><requires><environment type="dashboard"><require>dojo.widget.DomWidget</require><require>dojo.widget.HtmlWidget</require></environment></requires><requires><environment type="svg"><require>dojo.widget.SvgWidget</require></environment></requires><requires><environment type="rhino"><require>dojo.widget.SwtWidget</require></environment></requires></resource><resource location="dojo.widget.demoEngine.DemoContainer"><requires><environment type="common"><require>dojo.widget.*</require><require>dojo.widget.HtmlWidget</require><require>dojo.widget.demoEngine.DemoPane</require><require>dojo.widget.demoEngine.SourcePane</require><require>dojo.widget.TabContainer</require></environment></requires><function name="my.widget.demoEngine.DemoContainer"><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="templatePath"/><variable name="templateCssPath"/><variable scope="instance" name="returnImageNode.src"/><variable scope="instance" name="tabContainer"/><variable scope="instance" name="demoTab"/><variable scope="instance" name="sourceTab"/><variable scope="prototype" name="templatePath"/><variable scope="prototype" name="templateCssPath"/></variables></function><function name="my.widget.demoEngine.DemoContainer.postCreate" prototype="my.widget.demoEngine.DemoContainer"/><function name="my.widget.demoEngine.DemoContainer.loadDemo" prototype="my.widget.demoEngine.DemoContainer"><parameters><parameter name="url"/></parameters></function><function name="my.widget.demoEngine.DemoContainer.setName" prototype="my.widget.demoEngine.DemoContainer"><parameters><parameter name="name"/></parameters></function><function name="my.widget.demoEngine.DemoContainer.setSummary" prototype="my.widget.demoEngine.DemoContainer"><parameters><parameter name="summary"/></parameters></function><function name="my.widget.demoEngine.DemoContainer.showSource" prototype="my.widget.demoEngine.DemoContainer"/><function name="my.widget.demoEngine.DemoContainer.showDemo" prototype="my.widget.demoEngine.DemoContainer"/><function name="my.widget.demoEngine.DemoContainer.returnToDemos" prototype="my.widget.demoEngine.DemoContainer"/><function name="my.widget.demoEngine.DemoContainer.show" prototype="my.widget.demoEngine.DemoContainer"/></resource><resource location="dojo.widget.demoEngine.DemoItem"><requires><environment type="common"><require>dojo.widget.*</require><require>dojo.widget.HtmlWidget</require></environment></requires><function name="my.widget.demoEngine.DemoItem"><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="templatePath"/><variable name="templateCssPath"/><variable scope="instance" name="thumbnailImageNode.src"/><variable scope="instance" name="thumbnailImageNode.name"/><variable scope="instance" name="viewDemoImageNode.src"/><variable scope="instance" name="viewDemoImageNode.name"/><variable scope="prototype" name="templatePath"/><variable scope="prototype" name="templateCssPath"/></variables></function><function name="my.widget.demoEngine.DemoItem.postCreate" prototype="my.widget.demoEngine.DemoItem"/><function name="my.widget.demoEngine.DemoItem.onSelectDemo" prototype="my.widget.demoEngine.DemoItem"/></resource><resource location="dojo.widget.demoEngine.DemoNavigator"><requires><environment type="common"><require>dojo.widget.*</require><require>dojo.widget.HtmlWidget</require><require>dojo.widget.Button</require><require>dojo.widget.demoEngine.DemoItem</require><require>dojo.io.*</require><require>dojo.lfx.*</require><require>dojo.lang.common</require></environment></requires><function name="my.widget.demoEngine.DemoNavigator"><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="templatePath"/><variable name="templateCssPath"/><variable scope="instance" name="demoContainer"/><variable scope="instance" name="registry"/><variable scope="instance" name="demoListChildren"/><variable scope="prototype" name="templatePath"/><variable scope="prototype" name="templateCssPath"/></variables></function><function name="my.widget.demoEngine.DemoNavigator.postCreate" prototype="my.widget.demoEngine.DemoNavigator"/><function name="my.widget.demoEngine.DemoNavigator.returnToDemos" prototype="my.widget.demoEngine.DemoNavigator"/><function name="my.widget.demoEngine.DemoNavigator.show" prototype="my.widget.demoEngine.DemoNavigator"/><function name="my.widget.demoEngine.DemoNavigator.getRegistry" prototype="my.widget.demoEngine.DemoNavigator"><parameters><parameter name="url"/></parameters></function><function name="my.widget.demoEngine.DemoNavigator.processRegistry" prototype="my.widget.demoEngine.DemoNavigator"><parameters><parameter name="type"/><parameter name="registry"/><parameter name="e"/></parameters></function><function name="my.widget.demoEngine.DemoNavigator.addCategory" prototype="my.widget.demoEngine.DemoNavigator"><parameters><parameter name="category"/></parameters></function><function name="my.widget.demoEngine.DemoNavigator.addCategory.registry.categories" instance="my.widget.demoEngine.DemoNavigator.addCategory"/><function name="my.widget.demoEngine.DemoNavigator.addDemo" prototype="my.widget.demoEngine.DemoNavigator"><parameters><parameter name="demoName"/></parameters></function><function name="my.widget.demoEngine.DemoNavigator.onSelectCategory" prototype="my.widget.demoEngine.DemoNavigator"><parameters><parameter name="e"/></parameters></function><function name="my.widget.demoEngine.DemoNavigator.onSelectDemo" prototype="my.widget.demoEngine.DemoNavigator"><parameters><parameter name="e"/></parameters></function></resource><resource location="dojo.widget.demoEngine.DemoPane"><requires><environment type="common"><require>dojo.widget.*</require><require>dojo.widget.HtmlWidget</require></environment></requires><function name="my.widget.demoEngine.DemoPane"><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="templatePath"/><variable name="templateCssPath"/><variable scope="instance" name="demoNode.src"/><variable scope="instance" name="href"/><variable scope="prototype" name="templatePath"/><variable scope="prototype" name="templateCssPath"/></variables></function><function name="my.widget.demoEngine.DemoPane.postCreate" prototype="my.widget.demoEngine.DemoPane"/><function name="my.widget.demoEngine.DemoPane._launchDemo" prototype="my.widget.demoEngine.DemoPane"/><function name="my.widget.demoEngine.DemoPane.setHref" prototype="my.widget.demoEngine.DemoPane"><parameters><parameter name="url"/></parameters></function></resource><resource location="dojo.widget.demoEngine.SourcePane"><requires><environment type="common"><require>dojo.widget.*</require><require>dojo.widget.HtmlWidget</require><require>dojo.io.*</require></environment></requires><function name="my.widget.demoEngine.SourcePane"><chains><chain type="call">dojo.widget.HtmlWidget</chain><chain type="prototype">dojo.widget.HtmlWidget</chain></chains><variables><variable name="templatePath"/><variable name="templateCssPath"/><variable scope="instance" name="sourceNode.value"/><variable scope="instance" name="href"/><variable scope="prototype" name="templatePath"/><variable scope="prototype" name="templateCssPath"/></variables></function><function name="my.widget.demoEngine.SourcePane.postCreate" prototype="my.widget.demoEngine.SourcePane"/><function name="my.widget.demoEngine.SourcePane.getSource" prototype="my.widget.demoEngine.SourcePane"/><function name="my.widget.demoEngine.SourcePane.fillInSource" prototype="my.widget.demoEngine.SourcePane"><parameters><parameter name="type"/><parameter name="source"/><parameter name="e"/></parameters></function><function name="my.widget.demoEngine.SourcePane.setHref" prototype="my.widget.demoEngine.SourcePane"><parameters><parameter name="url"/></parameters></function></resource><resource location="dojo.widget.demoEngine._"><requires><environment type="browser"><require>dojo.widget.demoEngine.DemoItem</require><require>dojo.widget.demoEngine.DemoNavigator</require><require>dojo.widget.demoEngine.DemoPane</require><require>dojo.widget.demoEngine.SourcePane</require><require>dojo.widget.demoEngine.DemoContainer</require></environment></requires></resource><resource location="dojo.widget.html.layout"><requires><environment type="common"><require>dojo.lang.common</require><require>dojo.string.extras</require><require>dojo.html.style</require><require>dojo.html.layout</require></environment></requires><function name="dojo.widget.html.layout"><parameters><parameter name="container" type="DomNode"/><parameter name="children" type="Object[]"/><parameter name="layoutPriority" type="String"/></parameters></function></resource><resource location="dojo.widget.html.loader"><requires><environment type="common"><require>dojo.widget.HtmlWidget</require><require>dojo.io.*</require><require>dojo.lang.common</require><require>dojo.lang.extras</require><require>dojo.experimental</require></environment></requires><function name=".toString"/><function name="trackerObj"><parameters><parameter name="id"/><parameter name="data"/></parameters><variables><variable scope="instance" name="id"/><variable scope="instance" name="data"/></variables></function><function name="trackerObj.handle" prototype="trackerObj"><returns type="wtf? how can dojo become undef?"/><parameters><parameter name="type"/></parameters></function><function name="._log"><parameters><parameter name="widget"/><parameter name="data"/></parameters></function><function name="handleDefaults"><parameters><parameter name="e"/><parameter name="handler"/><parameter name="useAlert"/></parameters><chains><chain type="call">this.loader.callOnUnLoad</chain></chains><variables><variable scope="instance" name="returnValue"/></variables></function><function name="downloader"><parameters><parameter name="bindArgs"/></parameters><variables><variable scope="instance" name="loader.bindObj"/></variables></function><function name="stackRunner"><parameters><parameter name="st"/></parameters><chains><chain type="call">func</chain><chain type="call">handleDefaults</chain></chains></function><function name="stackPusher"><parameters><parameter name="st"/><parameter name="obj"/><parameter name="func"/></parameters></function><function name="refreshed"><variables><variable scope="instance" name="isLoaded"/></variables></function><function name="asyncParse"><parameters><parameter name="data"/></parameters><chains><chain type="call">this.onExecScript</chain><chain type="call">this.onContentParse</chain><chain type="call">refreshed</chain></chains></function><function name="runHandler"><chains><chain type="call">refreshed</chain></chains></function><function name=".htmlContentBasicFix"><returns type="object"/><summary>strips out &lt;style, &lt;link rel=stylesheet and &lt;title tags intended to take out tags that might cause DOM faults</summary><parameters><parameter name="s" type="string"/><parameter name="url" type="string||dojo.uri.Uri"/></parameters></function><function name=".htmlContentAdjustPaths"><returns type="string"/><summary>adjusts relative paths in content to be relative to current page</summary><parameters><parameter name="s" type="string"/><parameter name="url" type="string||dojo.uri.Uri"/></parameters></function><function name=".htmlContentScripts"><returns type="object"/><summary>handles scripts and dojo .require(...) etc calls NOTE: we need to go through here even if we have executeScripts=false and if we have parseWidgets true</summary><parameters><parameter name="s" type="string"/><parameter name="collectScripts" type="boolean"/></parameters></function><function name=".splitAndFixPaths"><returns type="object"/><summary>pathfixes, require calls, css stuff and neccesary content clean</summary><parameters><parameter name="args" type="content">string url string? or dojo.uri.Uri that that pulled the content in, for path adjust adjustPaths boolean, if true adjust relative paths in content to match this page collectScripts boolean, if true it takes out all &lt;script and &lt;script src=.. tags and collects dojo.require calls in a separate array, useful for eval collectRequires boolean, if true and collectScripts is false it still collects scripts along with dojo.require calls bodyExtract boolean, if true only return content inside of the body tag</parameter></parameters><chains><chain type="call">_loader.htmlContentAdjustPaths</chain><chain type="call">_loader.htmlContentBasicFix</chain><chain type="call">_loader.htmlContentScripts</chain></chains></function><function name=".hookUp"><summary>mixin or extend loader into a widget</summary><parameters><parameter name="args" type="widget">widget reference mixin: boolean, default false if mixin true, it will only extend the current widget, not its prototype</parameter></parameters><chains><chain type="call">postCreate</chain><chain type="call">widgetProto.constructor.superclass.postCreate</chain><chain type="call">widgetProto.constructor.superclass.show</chain><chain type="call">show</chain><chain type="call">destroy</chain><chain type="call">widgetProto.constructor.superclass.destroy</chain><chain type="call">runHandler</chain><chain type="call">handleDefaults</chain><chain type="call">downloader</chain><chain type="call">self.onDownloadEnd</chain><chain type="call">stackRunner</chain><chain type="call">stackPusher</chain><chain type="call">_loader.splitAndFixPaths</chain><chain type="call">this.loader.callOnUnLoad</chain><chain type="call">refreshed</chain><chain type="call">asyncParse</chain><chain type="call">fcn</chain></chains><variables><variable scope="instance" name="loader.isLoaded"/><variable scope="instance" name="loader.bindObj"/><variable scope="instance" name="loader._onSetContent_err"/><variable scope="instance" name="href"/><variable scope="instance" name="url"/><variable scope="instance" name="scriptScope"/><variable scope="instance" name="handler"/></variables></function><function name=".hookUp.handler" instance=".hookUp"><chains><chain type="call">fcn</chain></chains></function><function name="widgetProto"><variables><variable name="isContainer"/><variable name="adjustPaths"/><variable name="href"/><variable name="extractContent"/><variable name="parseContent"/><variable name="cacheContent"/><variable name="bindArgs"/><variable name="preload"/><variable name="refreshOnShow"/><variable name="handler"/><variable name="executeScripts"/><variable name="trackHistory"/><variable name="scriptScope"/></variables></function></resource><resource location="dojo.widget.html.stabile"><function name="dojo.widget.html.stabile.getState"><summary>Get the state stored for the widget with the given ID, or undefined if none.</summary><parameters><parameter name="id"/></parameters></function><function name="dojo.widget.html.stabile.setState"><summary>Set the state stored for the widget with the given ID. If isCommit is true, commits all widget state to more stable storage.</summary><parameters><parameter name="id"/><parameter name="state"/><parameter name="isCommit"/></parameters></function><function name="dojo.widget.html.stabile.setup"><summary>Sets up widgetState: a hash keyed by widgetId, maps to an object or array writable with "describe". If there is data in the widget storage area, use it, otherwise initialize an empty object.</summary></function><function name="dojo.widget.html.stabile.commit"><summary>Commits all widget state to more stable storage, so if the user navigates away and returns, it can be restored.</summary><parameters><parameter name="state"/></parameters></function><function name="dojo.widget.html.stabile.description"><summary>Return a JSON "description string" for the given value. Supports only core JavaScript types with literals, plus Date, and cyclic structures are unsupported.</summary><parameters><parameter name="v"/><parameter name="showAll" type="defaults">to false -- if true, this becomes a simple symbolic object dumper, but you cannot "eval" the output.</parameter></parameters><chains><chain type="call">objectToString</chain></chains></function><function name="dojo.widget.html.stabile._getStorage"><summary>Gets an object (form field) with a read/write "value" property.</summary></function><object name="dojo.widget.html.stabile"><summary>Maintain state of widgets when user hits back/forward button</summary><variables><variable name="_sqQuotables"/><variable name="_depth"/><variable name="_recur"/><variable name="depthLimit"/></variables></object></resource><resource location="dojo.widget.svg.Chart"><requires><environment type="common"><require>dojo.widget.HtmlWidget</require><require>dojo.widget.Chart</require><require>dojo.html.layout</require><require>dojo.math</require><require>dojo.svg</require><require>dojo.gfx.color</require><require>dojo.json</require></environment></requires><function name="dojo.widget.svg.Chart"><summary>Creates a chart based on the passed data and plotter choice, using SVG.</summary><variables><variable name="parseProperties"/><variable name="setAxesPlot"/><variable name="drawVectorNode"/><variable name="drawPlotArea"/><variable name="drawDataGroup"/><variable name="drawAxes"/><variable name="init"/><variable name="destroy"/><variable name="render"/><variable name="postCreate"/><variable scope="instance" name="templatePath"/><variable scope="instance" name="templateCssPath"/><variable scope="instance" name="_isInitialize"/><variable scope="instance" name="hasData"/><variable scope="instance" name="vectorNode"/><variable scope="instance" name="plotArea"/><variable scope="instance" name="dataGroup"/><variable scope="instance" name="axisGroup"/><variable scope="instance" name="properties"/><variable scope="prototype" name="parseProperties"/><variable scope="prototype" name="setAxesPlot"/><variable scope="prototype" name="drawVectorNode"/><variable scope="prototype" name="drawPlotArea"/><variable scope="prototype" name="drawDataGroup"/><variable scope="prototype" name="drawAxes"/><variable scope="prototype" name="init"/><variable scope="prototype" name="destroy"/><variable scope="prototype" name="render"/><variable scope="prototype" name="postCreate"/></variables><description>Renders a basic chart set based on the chosen data source and plotter, using SVG. Note that a lot of the public properties are not meant to be altered, and that some usable attributes passed with the HTML widget definition do not correspond to equivilent properties that are used.</description></function><function name="dojo.widget.svg.Chart.Plotter" initialized="true"><returns type="mixed"/><summary>Singleton for plotting series of data.</summary></function><function name="dojo.widget.svg.Chart.Plotter.getX" instance="dojo.widget.svg.Chart.Plotter"><returns type="float"/><summary>Calculate the x coord on the passed chart for the passed value</summary><parameters><parameter name="value" type="string||number"/><parameter name="chart" type="dojo.widget.Chart"/></parameters></function><function name="dojo.widget.svg.Chart.Plotter.getY" instance="dojo.widget.svg.Chart.Plotter"><returns type="float"/><summary>Calculate the y coord on the passed chart for the passed value</summary><parameters><parameter name="value" type="string||number"/><parameter name="chart" type="dojo.widget.Chart"/></parameters></function><function name="dojo.widget.svg.Chart.Plotter.addPlotter" instance="dojo.widget.svg.Chart.Plotter"><summary>add a custom plotter function to this object.</summary><parameters><parameter name="name" type="string"/><parameter name="func" type="function"/></parameters></function><function name="dojo.widget.svg.Chart.Plotter.plot" instance="dojo.widget.svg.Chart.Plotter"><returns type="void"/><summary>plot the passed series.</summary><parameters><parameter name="series" type="dojo.widget.Chart.DataSeries"/><parameter name="chart" type="dojo.widget.Chart"/></parameters></function></resource><resource location="dojo.widget.vml.Chart"><requires><environment type="common"><require>dojo.widget.HtmlWidget</require><require>dojo.widget.Chart</require><require>dojo.math</require><require>dojo.html.layout</require><require>dojo.gfx.color</require></environment></requires><function name="dojo.widget.vml.Chart"><summary>Creates a chart based on the passed data and plotter choice, using VML.</summary><variables><variable name="parseProperties"/><variable name="setAxesPlot"/><variable name="drawVectorNode"/><variable name="drawPlotArea"/><variable name="drawDataGroup"/><variable name="drawAxes"/><variable name="init"/><variable name="destroy"/><variable name="render"/><variable name="postCreate"/><variable scope="instance" name="templatePath"/><variable scope="instance" name="templateCssPath"/><variable scope="instance" name="_isInitialize"/><variable scope="instance" name="hasData"/><variable scope="instance" name="vectorNode"/><variable scope="instance" name="plotArea"/><variable scope="instance" name="dataGroup"/><variable scope="instance" name="axisGroup"/><variable scope="instance" name="properties"/><variable scope="prototype" name="parseProperties"/><variable scope="prototype" name="setAxesPlot"/><variable scope="prototype" name="drawVectorNode"/><variable scope="prototype" name="drawPlotArea"/><variable scope="prototype" name="drawDataGroup"/><variable scope="prototype" name="drawAxes"/><variable scope="prototype" name="init"/><variable scope="prototype" name="destroy"/><variable scope="prototype" name="render"/><variable scope="prototype" name="postCreate"/></variables><description>Renders a basic chart set based on the chosen data source and plotter, using VML. Note that a lot of the public properties are not meant to be altered, and that some usable attributes passed with the HTML widget definition do not correspond to equivilent properties that are used.</description></function><function name="dojo.widget.vml.Chart.Plotter" initialized="true"><returns type="void"/><summary>Singleton for plotting series of data.</summary></function><function name="dojo.widget.vml.Chart.Plotter.getX" instance="dojo.widget.vml.Chart.Plotter"><summary>Calculate the x coord on the passed chart for the passed value</summary><parameters><parameter name="value" type="string||number"/><parameter name="chart" type="dojo.widget.Chart"/></parameters></function><function name="dojo.widget.vml.Chart.Plotter.getY" instance="dojo.widget.vml.Chart.Plotter"><summary>Calculate the y coord on the passed chart for the passed value</summary><parameters><parameter name="value" type="string||number"/><parameter name="chart" type="dojo.widget.Chart"/></parameters></function><function name="dojo.widget.vml.Chart.Plotter.addPlotter" instance="dojo.widget.vml.Chart.Plotter"><summary>add a custom plotter function to this object.</summary><parameters><parameter name="name" type="string"/><parameter name="func" type="function"/></parameters></function><function name="dojo.widget.vml.Chart.Plotter.plot" instance="dojo.widget.vml.Chart.Plotter"><returns type="void"/><summary>plot the passed series.</summary><parameters><parameter name="series" type="dojo.widget.Chart.DataSeries"/><parameter name="chart" type="dojo.widget.Chart"/></parameters></function></resource><resource location="dojo.xml.Parse"><requires><environment type="common"><require>dojo.dom</require></environment></requires><function name="dojo.xml.Parse"><summary>generic class for taking a DOM node and parsing it into an object based on the "dojo tag name" of that node. supported dojoTagName's: &lt;prefix:tag&gt; =&gt; prefix:tag &lt;dojo:tag&gt; =&gt; dojo:tag &lt;dojoTag&gt; =&gt; dojo:tag &lt;tag dojoType="type"&gt; =&gt; dojo:type &lt;tag dojoType="prefix:type"&gt; =&gt; prefix:type &lt;tag dojo:type="type"&gt; =&gt; dojo:type &lt;tag class="classa dojo-type classb"&gt; =&gt; dojo:type</summary><variables><variable scope="instance" name="parseElement"/><variable scope="instance" name="parseAttributes"/></variables></function><function name="dojo.xml.Parse.parseElement" instance="dojo.xml.Parse"><summary>recursively parse the passed node, returning a normalized data structure that represents the "attributes of interest" of said elements. If optimizeForDojoML is true, only nodes that contain a "dojo tag name" will be inspected for attributes.</summary><parameters><parameter name="node" type="the">DomNode to be treated as the root of inspection</parameter><parameter name="hasParentNodeSet" type="no-op">please pass "null"</parameter><parameter name="optimizeForDojoML" type="should">we ignore non-Dojo nodes? Defaults to false.</parameter><parameter name="thisIdx" type="a">way to specify a synthetic "index" property in the resulting data structure. Otherwise the index property of the top-level return element is always "0".</parameter></parameters></function><function name="dojo.xml.Parse.parseAttributes" instance="dojo.xml.Parse"><summary>creates an attribute object that maps attribute values for the passed node. Note that this is similar to creating a JSON representation of a DOM node. usage: a node with the following serialization: &lt;div foo="bar" baz="thud"&gt;...&lt;/div&gt; would yeild the following return structure when passed into this function: { "foo": { "value": "bar" }, "baz": { "value": "thud" } }</summary><parameters><parameter name="node" type="DomNode"/></parameters></function></resource><resource location="dojo.xml.XslTransform"><function name="dojo.xml.XslTransform"><returns type="XMLDocument"/><summary>dojo.xml.XslTransform is a convenience object that takes the URI String of an XSL file as a constructor argument. After each transformation all parameters will be cleared. Transformation is supported by IE, Mozilla, and partially by Opera. Other browsers (notably Safari) have not yet exposed their transformation primtives well enough to be useful.</summary><parameters><parameter name="xsltUri" type="Url">of the xslt document to transform nodes with. Transformation is acheived with the transformTo* methods on instances of this class.</parameter></parameters><variables><variable scope="instance" name="getResultString"/><variable scope="instance" name="transformToContentPane"/><variable scope="instance" name="transformToRegion"/><variable scope="instance" name="transformToDocument"/><variable scope="instance" name="transformToWindow"/></variables></function><function name="dojo.xml.XslTransform.getResultString" instance="dojo.xml.XslTransform"><summary>transform the xmlDoc and return the result as a string.</summary><parameters><parameter name="xmlDoc" type="an">XML Document to transform</parameter><parameter name="params" type="a">set of configuration parameters to pass to the transformation engine.</parameter><parameter name="parentDoc" type="The">HTML docuemnt to transform the subdocument "under"</parameter></parameters></function><function name="dojo.xml.XslTransform.transformToContentPane" instance="dojo.xml.XslTransform"><summary>transform the xmlDoc and put the result into the passed ContentPane instance</summary><parameters><parameter name="xmlDoc" type="an">XML Document to transform</parameter><parameter name="params" type="a">set of configuration parameters to pass to the transformation engine.</parameter><parameter name="contentPane" type="instance">of dojo.widget.ContentPane to assign the transform results to</parameter><parameter name="parentDoc" type="The">HTML docuemnt to transform the subdocument "under" FIXME: do we need this function?</parameter></parameters></function><function name="dojo.xml.XslTransform.transformToRegion" instance="dojo.xml.XslTransform"><summary>transform the xmlDoc and put the result into the passed DomNode using innerHTML</summary><parameters><parameter name="xmlDoc" type="an">XML Document to transform</parameter><parameter name="params" type="a">set of configuration parameters to pass to the transformation engine.</parameter><parameter name="region" type="node">to put transform results in</parameter><parameter name="parentDoc" type="The">HTML docuemnt to transform the subdocument "under"</parameter></parameters></function><function name="dojo.xml.XslTransform.transformToDocument" instance="dojo.xml.XslTransform"><returns type="XMLDocument"/><summary>transform the xmlDoc and return a new XML document containing the result</summary><parameters><parameter name="xmlDoc" type="an">XML Document to transform</parameter><parameter name="params" type="a">set of configuration parameters to pass to the transformation engine.</parameter></parameters></function><function name="dojo.xml.XslTransform.transformToWindow" instance="dojo.xml.XslTransform"><summary>transform the xmlDoc and put the contents in the passed</summary><parameters><parameter name="xmlDoc" type="an">XML Document to transform</parameter><parameter name="params" type="a">set of configuration parameters to pass to the transformation engine.</parameter><parameter name="windowDoc" type="the">HTMLDocument to assign the contents to</parameter><parameter name="parentDoc" type="The">HTML docuemnt to transform the subdocument "under"</parameter></parameters></function></resource><resource location="dojo.xml._"><requires><environment type="common"><require>dojo.dom</require><require>dojo.xml.Parse</require></environment></requires><requires><environment type="browser"><require>dojo.html.*</require></environment></requires><requires><environment type="dashboard"><require>dojo.html.*</require></environment></requires></resource></dojo>
