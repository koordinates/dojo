{"dojo.hostenv_rhino":{"meta":{"functions":{"dojo.hostenv.println":{"meta":{"summary":"","parameters":{"line":{"type":""}},"src":" if(arguments.length > 0){\n\t\tprint(arguments[0]);\n\t\tfor(var i=1; i<arguments.length; i++){\n\t\t\tvar valid=false;\n\t\t\tfor (var p in arguments[i]){valid=true;break;}\n\t\t\tif(valid){\n\t\t\t\tdojo.debugShallow(arguments[i]);\n\t\t\t}\n\t\t}\n\t} else {\n\t\tprint(line);\n\t}"}},"dojo.hostenv.getVersion":{"meta":{"summary":"","src":" ojo.hostenv.getVersion = function() {return version();   "}},"dojo.byId":{"meta":{"summary":"","parameters":{"id":{"type":""},"doc":{"type":""}},"src":" \tif(id && (typeof id == \"string\" || id instanceof String)){\n\t\t\tif(!doc){ doc = document; }\n\t\t\treturn doc.getElementById(id);\n\t\t}\n\t\treturn id; \/\/ assume it's a node","returns":"assume it's a node"}},"dojo.hostenv.loadUri":{"meta":{"summary":"","parameters":{"uri":{"type":""},"cb":{"type":""}},"src":" try{\n\t\tvar local = (new java.io.File(uri)).exists();\n\t\tif(!local){\n\t\t\ttry{\n\t\t\t\t\/\/ try it as a file first, URL second\n\t\t\t\tvar stream = (new java.net.URL(uri)).openStream();\n\t\t\t\t\/\/ close the stream so we don't leak resources\n\t\t\t\tstream.close();\n\t\t\t}catch(e){\n\t\t\t\t\/\/ no debug output; this failure just means the uri was not found.\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\/\/FIXME: Use Rhino 1.6 native readFile\/readUrl if available?\n\t\tif(cb){\n\t\t\tvar contents = (local ? readText : readUri)(uri, \"UTF-8\");\n\t\t\tcb(eval('('+contents+')'));\n\t\t}else{\n\t\t\tload(uri);\n\t\t}\n\t\treturn true;\n\t}catch(e){\n\t\tdojo.debug(\"rhino load('\" + uri + \"') failed. Exception: \" + e);\n\t\treturn false;\n\t}"}},"dojo.hostenv.exit":{"meta":{"summary":"","parameters":{"exitcode":{"type":""}},"src":" quit(exitcode);"}},"dj_rhino_current_script_via_java":{"meta":{"summary":"","parameters":{"depth":{"type":""}},"src":"    var optLevel = Packages.org.mozilla.javascript.Context.getCurrentContext().getOptimizationLevel();  \n   \/\/ if (optLevel == -1){ dojo.unimplemented(\"getCurrentScriptURI (determine current script path for rhino when interpreter mode)\", ''); }\n    var caw = new java.io.CharArrayWriter();\n    var pw = new java.io.PrintWriter(caw);\n    var exc = new java.lang.Exception();\n    var s = caw.toString();\n    \/\/ we have to exclude the ones with or without line numbers because they put double entries in:\n    \/\/   at org.mozilla.javascript.gen.c3._c4(\/Users\/mda\/Sites\/burstproject\/burst\/Runtime.js:56)\n    \/\/   at org.mozilla.javascript.gen.c3.call(\/Users\/mda\/Sites\/burstproject\/burst\/Runtime.js)\n    var matches = s.match(\/[^\\(]*\\.js\\)\/gi);\n    if(!matches){\n\t\tthrow Error(\"cannot parse printStackTrace output: \" + s);\n\t}\n    \/\/ matches[0] is entire string, matches[1] is this function, matches[2] is caller, ...\n    var fname = ((typeof depth != 'undefined')&&(depth)) ? matches[depth + 1] : matches[matches.length - 1];\n    var fname = matches[3];\n\tif(!fname){ fname = matches[1]; }\n    \/\/ print(\"got fname '\" + fname + \"' from stack string '\" + s + \"'\");\n    if (!fname){ throw Error(\"could not find js file in printStackTrace output: \" + s); }\n    \/\/print(\"Rhino getCurrentScriptURI returning '\" + fname + \"' from: \" + s); \n    return fname;"}},"readText":{"meta":{"summary":"","parameters":{"path":{"type":""},"encoding":{"type":""}},"src":" encoding = encoding || \"utf-8\";\n\t\/\/ NOTE: we intentionally avoid handling exceptions, since the caller will\n\t\/\/ want to know\n\tvar jf = new java.io.File(path);\n\tvar is = new java.io.FileInputStream(jf);\n\treturn dj_readInputStream(is, encoding);"}},"readUri":{"meta":{"summary":"","parameters":{"uri":{"type":""},"encoding":{"type":""}},"src":" var conn = (new java.net.URL(uri)).openConnection();\n\tencoding = encoding || conn.getContentEncoding() || \"utf-8\";\n\tvar is = conn.getInputStream();\n\treturn dj_readInputStream(is, encoding);"}},"dj_readInputStream":{"meta":{"summary":"","parameters":{"is":{"type":""},"encoding":{"type":""}},"src":" var input = new java.io.BufferedReader(new java.io.InputStreamReader(is, encoding));\n\ttry {\n\t\tvar sb = new java.lang.StringBuffer();\n\t\tvar line = \"\";\n\t\twhile((line = input.readLine()) !== null){\n\t\t\tsb.append(line);\n\t\t\tsb.append(java.lang.System.getProperty(\"line.separator\"));\n\t\t}\n\t\treturn sb.toString();\n\t} finally {\n\t\tinput.close();\n\t}"}},"dojo.doc":{"meta":{"summary":"return the document object associated with the dojo.global()","src":" return document;"}},"dojo.body":{"meta":{"summary":"","src":" return document.body;\t"}},"setTimeout":{"meta":{"summary":"provides timed callbacks using Java threads","parameters":{"func":{"type":""},"delay":{"type":""}},"src":"\tvar def={\n\t\tsleepTime:delay,\n\t\thasSlept:false,\n\t\trun:function(){\n\t\t\tif (!this.hasSlept){\n\t\t\t\tthis.hasSlept=true;\n\t\t\t\tjava.lang.Thread.currentThread().sleep(this.sleepTime);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tfunc();\n\t\t\t} catch(e){dojo.debug(\"Error running setTimeout thread:\" + e);}\n\t\t}\n\t};\n\tvar runnable=new java.lang.Runnable(def);\n\tvar thread=new java.lang.Thread(runnable);\n\tthread.start();","instance_variables":["hasSlept"]}}}}}}