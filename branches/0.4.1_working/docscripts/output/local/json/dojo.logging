{"dojo.logging.ConsoleLogger":{"meta":{"requires":{"common":["dojo.logging.Logger"]},"functions":{"dojo.logging.MemoryLogHandler":{"meta":{"prototype_variables":["debug","info","warn","error","critical","emit","debug","info","warn","error","critical"]}},"dojo.logging.Logger.exception":{"meta":{"summary":"","parameters":{"msg":{"type":""},"e":{"type":""},"squelch":{"type":""}},"src":" \tvar args=[msg];\n\t\tif(e){\n\t\t\tmsg+=\" : \"+ e.name + \" \" + (e.description||e.message);\n\t\t\targs.push(e);\n\t\t}\n\t\tthis.logType(\"ERROR\", args);\n\t\tif(!squelch){\n\t\t\tthrow e;\n\t\t}","prototype":"dojo.logging.Logger"}}}}},"dojo.logging.Logger":{"meta":{"requires":{"common":["dojo.lang.common"]},"functions":{"dojo.logging.Record":{"meta":{"summary":"","parameters":{"lvl":{"type":""},"msg":{"type":""}},"src":" this.level = lvl;\n\tthis.message = \"\";\n\tthis.msgArgs = [];\n\tthis.time = new Date();\n\tif(dojo.lang.isArray(msg)){\n\t\tif(msg.length > 0 && dojo.lang.isString(msg[0])){\n\t\t\tthis.message=msg.shift();\n\t\t}\n\t\tthis.msgArgs=msg;\n\t}else{\n\t\tthis.message=msg;\n\t}\n\t\/\/ FIXME: what other information can we receive\/discover here?","instance_variables":["level","message","msgArgs","time"]}},"dojo.logging.LogFilter":{"meta":{"summary":"","parameters":{"loggerChain":{"type":""}},"src":" this.passChain = loggerChain || \"\";\n\tthis.filter = function(record){\n\t\t\/\/ FIXME: need to figure out a way to enforce the loggerChain\n\t\t\/\/ restriction\n\t\treturn true; \/\/ pass all records\n\t}","instance_variables":["passChain","filter"],"returns":"pass all records"}},"dojo.logging.Logger.filter":{"meta":{"summary":"","parameters":{"record":{"type":""},"rec":{"type":""}},"src":" \tfor(var x=0; x<this.filters.length; x++){\n\t\t\tif((this.filters[x][\"filter\"])&&\n\t\t\t   (!this.filters[x].filter(rec))||\n\t\t\t   (rec.level<this.cutOffLevel)){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;","returns":"pass all records"}},"dojo.logging.Logger":{"meta":{"summary":"","src":" this.cutOffLevel = 0;\n\tthis.propagate = true;\n\tthis.parent = null;\n\t\/\/ storage for dojo.logging.Record objects seen and accepted by this logger\n\tthis.data = [];\n\tthis.filters = [];\n\tthis.handlers = [];","instance_variables":["cutOffLevel","propagate","parent","data","filters","handlers"],"prototype_variables":["debug","warn","err","crit"]}},"dojo.logging.LogHandler":{"meta":{"summary":"","parameters":{"level":{"type":""}},"src":" this.cutOffLevel = (level) ? level : 0;\n\tthis.formatter = null; \/\/ FIXME: default formatter?\n\tthis.data = [];\n\tthis.filters = [];","instance_variables":["cutOffLevel","formatter","data","filters"],"prototype_variables":["setFormatter","flush","close","handleError","handle","emit"]}},"dojo.logging.log.getLogger":{"meta":{"summary":"","parameters":{"name":{"type":""}},"src":" if(!this.loggers[name]){\n\t\tthis.loggers[name] = new dojo.logging.Logger();\n\t\tthis.loggers[name].parent = this;\n\t}\n\treturn this.loggers[name];"}},"dojo.logging.log.getLevelName":{"meta":{"summary":"","parameters":{"lvl":{"type":""}},"src":" for(var x=0; x<this.levels.length; x++){\n\t\tif(this.levels[x].level == lvl){\n\t\t\treturn this.levels[x].name;\n\t\t}\n\t}\n\treturn null;"}},"dojo.logging.log.addLevelName":{"meta":{"summary":"","parameters":{"name":{"type":""},"lvl":{"type":""}},"src":" if(this.getLevelName(name)){\n\t\tthis.err(\"could not add log level \"+name+\" because a level with that name already exists\");\n\t\treturn false;\n\t}\n\tthis.levels.append({\"name\": name, \"level\": parseInt(lvl)});\n\treturn true;"}},"dojo.logging.log.getLevel":{"meta":{"summary":"","parameters":{"name":{"type":""}},"src":" for(var x=0; x<this.levels.length; x++){\n\t\tif(this.levels[x].name.toUpperCase() == name.toUpperCase()){\n\t\t\treturn this.levels[x].level;\n\t\t}\n\t}\n\treturn null;"}},"dojo.logging.MemoryLogHandler":{"meta":{"summary":"","parameters":{"level":{"type":""},"recordsToKeep":{"type":""},"postType":{"type":""},"postInterval":{"type":""}},"src":" dojo.logging.LogHandler.call(this, level);\n\t\/\/ default is unlimited\n\tthis.numRecords = (typeof djConfig['loggingNumRecords'] != 'undefined') ? djConfig['loggingNumRecords'] : ((recordsToKeep) ? recordsToKeep : -1);\n\t\/\/ 0=count, 1=time, -1=don't post TODO: move this to a better location for prefs\n\tthis.postType = (typeof djConfig['loggingPostType'] != 'undefined') ? djConfig['loggingPostType'] : ( postType || -1);\n\t\/\/ milliseconds for time, interger for number of records, -1 for non-posting,\n\tthis.postInterval = (typeof djConfig['loggingPostInterval'] != 'undefined') ? djConfig['loggingPostInterval'] : ( postType || -1);","instance_variables":["numRecords","postType","postInterval"],"call_chain":["dojo.logging.LogHandler"],"prototype_variables":["emit"]}},"dojo.logging.Logger.argsToArr":{"meta":{"summary":"","parameters":{"args":{"type":""}},"src":" \tvar ret = [];\n\t\tfor(var x=0; x<args.length; x++){\n\t\t\tret.push(args[x]);\n\t\t}\n\t\treturn ret;"}},"dojo.logging.Logger.setLevel":{"meta":{"summary":"","parameters":{"lvl":{"type":""}},"src":" \tthis.cutOffLevel = parseInt(lvl);","instance_variables":["cutOffLevel"]}},"dojo.logging.Logger.isEnabledFor":{"meta":{"summary":"","parameters":{"lvl":{"type":""}},"src":" \treturn parseInt(lvl) >= this.cutOffLevel;"}},"dojo.logging.Logger.getEffectiveLevel":{"meta":{"summary":"","src":" \tif((this.cutOffLevel==0)&&(this.parent)){\n\t\t\treturn this.parent.getEffectiveLevel();\n\t\t}\n\t\treturn this.cutOffLevel;","instance_variables":["cutOffLevel"]}},"dojo.logging.Logger.addFilter":{"meta":{"summary":"","parameters":{"flt":{"type":""}},"src":" \tthis.filters.push(flt);\n\t\treturn this.filters.length-1;"}},"dojo.logging.Logger.removeFilterByIndex":{"meta":{"summary":"","parameters":{"fltIndex":{"type":""}},"src":" \tif(this.filters[fltIndex]){\n\t\t\tdelete this.filters[fltIndex];\n\t\t\treturn true;\n\t\t}\n\t\treturn false;"}},"dojo.logging.Logger.removeFilter":{"meta":{"summary":"","parameters":{"fltRef":{"type":""}},"src":" \tfor(var x=0; x<this.filters.length; x++){\n\t\t\tif(this.filters[x]===fltRef){\n\t\t\t\tdelete this.filters[x];\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;"}},"dojo.logging.Logger.removeAllFilters":{"meta":{"summary":"","src":" \tthis.filters = []; \/\/ clobber all of them","instance_variables":["filters"]}},"dojo.logging.Logger.addHandler":{"meta":{"summary":"","parameters":{"hdlr":{"type":""}},"src":" \tthis.handlers.push(hdlr);\n\t\treturn this.handlers.length-1;"}},"dojo.logging.Logger.handle":{"meta":{"summary":"","parameters":{"rec":{"type":""}},"src":" \tif((!this.filter(rec))||(rec.level<this.cutOffLevel)){ return false; }\n\t\tfor(var x=0; x<this.handlers.length; x++){\n\t\t\tif(this.handlers[x][\"handle\"]){\n\t\t\t   this.handlers[x].handle(rec);\n\t\t\t}\n\t\t}\n\t\t\/\/ FIXME: not sure what to do about records to be propagated that may have\n\t\t\/\/ been modified by the handlers or the filters at this logger. Should\n\t\t\/\/ parents always have pristine copies? or is passing the modified record\n\t\t\/\/ OK?\n\t\t\/\/ if((this.propagate)&&(this.parent)){ this.parent.handle(rec); }\n\t\treturn true;"}},"dojo.logging.Logger.log":{"meta":{"summary":"","parameters":{"lvl":{"type":""},"msg":{"type":""}},"src":" \tif(\t(this.propagate)&&(this.parent)&&\n\t\t\t(this.parent.rec.level>=this.cutOffLevel)){\n\t\t\tthis.parent.log(lvl, msg);\n\t\t\treturn false;\n\t\t}\n\t\t\/\/ FIXME: need to call logging providers here!\n\t\tthis.handle(new dojo.logging.Record(lvl, msg));\n\t\treturn true;"}},"dojo.logging.Logger.info":{"meta":{"summary":"","parameters":{"msg":{"type":""}},"src":" \treturn this.logType(\"INFO\", this.argsToArr(arguments));"}},"dojo.logging.Logger.warning":{"meta":{"summary":"","parameters":{"msg":{"type":""}},"src":" \treturn this.logType(\"WARNING\", this.argsToArr(arguments));"}},"dojo.logging.Logger.error":{"meta":{"summary":"","parameters":{"msg":{"type":""}},"src":" \treturn this.logType(\"ERROR\", this.argsToArr(arguments));"}},"dojo.logging.Logger.critical":{"meta":{"summary":"","parameters":{"msg":{"type":""}},"src":" \treturn this.logType(\"CRITICAL\", this.argsToArr(arguments));"}},"dojo.logging.Logger.exception":{"meta":{"summary":"","parameters":{"msg":{"type":""},"e":{"type":""},"squelch":{"type":""}},"src":" \tif(e){\n\t\t\tvar eparts = [e.name, (e.description||e.message)];\n\t\t\tif(e.fileName){\n\t\t\t\teparts.push(e.fileName);\n\t\t\t\teparts.push(\"line \"+e.lineNumber);\n\t\t\t\t\/\/ eparts.push(e.stack);\n\t\t\t}\n\t\t\tmsg += \" \"+eparts.join(\" : \");\n\t\t}\n\t\tthis.logType(\"ERROR\", msg);\n\t\tif(!squelch){\n\t\t\tthrow e;\n\t\t}","description":"FIXME: this needs to be modified to put the exception in the msg if we're on Moz, we can get the following from the exception object: lineNumber message fileName stack name on IE, we get: name message (from MDA?) number same as message!)"}},"dojo.logging.Logger.logType":{"meta":{"summary":"","parameters":{"type":{"type":""},"args":{"type":""}},"src":" \treturn this.log.apply(this, [dojo.logging.log.getLevel(type), \n\t\t\targs]);","call_chain":["this.log"]}}}}},"dojo.logging._":{"meta":{"requires":{"rhino":["dojo.logging.RhinoLogger"]}}}}