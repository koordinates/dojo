{"dojo.debug.Firebug":{"meta":{"functions":{"consoleLog":{"meta":{"summary":"","src":" \t\tif (!djConfig.isDebug) { return ; }\n\t\t\tvar args = dojo.lang.toArray(arguments);\n\t\t\targs.splice(0,0, \"DEBUG: \");\n\t\t\tconsole.log.apply(console, args);","call_chain":["console.log"]}},"dojo.debugShallow":{"meta":{"summary":"","parameters":{"obj":{"type":""}},"src":" \t\tif (!djConfig.isDebug) { return; }\n\t\t\tif (dojo.lang.isArray(obj)) {\n\t\t\t\tconsole.log('Array: ', obj);\n\t\t\t\tfor (var i=0; x<obj.length; i++) {\n\t\t\t\t\tconsole.log('    ', '['+i+']', obj[i]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.log('Object: ', obj);\n\t\t\t\tvar propNames = [];\n\t\t\t\tfor (var prop in obj) {\n\t\t\t\t\tpropNames.push(prop);\n\t\t\t\t}\n\t\t\t\tpropNames.sort();\n\t\t\t\tdojo.lang.forEach(propNames, function(prop) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconsole.log('    ', prop, obj[prop]);\n\t\t\t\t\t} catch(e) {\n\t\t\t\t\t\tconsole.log('    ', prop, 'ERROR', e.message, e);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}"}}}}},"dojo.debug.console":{"meta":{"requires":{"common":["dojo.logging.ConsoleLogger"]},"functions":{"dojo.hostenv.println":{"meta":{"summary":"","src":" \t\tif (!djConfig.isDebug) { return ; }\n\t\t\t\/\/ make sure we're only writing a single string to Safari's console\n\t\t\tvar args = dojo.lang.toArray(arguments);\n\t\t\tconsole.log(\"DEBUG: \" + args.join(\" \"));"}},"dojo.debugShallow":{"meta":{"summary":"Write first-level properties of obj to the console.","parameters":{"obj":{"type":"Object"},"showMethods":{"type":"Boolean?"},"sort":{"type":"Boolean?"}},"src":" \t\tif (!djConfig.isDebug) { return; }\n\t\t\tshowMethods = (showMethods != false);\n\t\t\tsort = (sort != false);\n\t\t\t\/\/ handle null or something without a constructor (in which case we don't know the type)\n\t\t\tif (obj == null || obj.constructor == null) {\n\t\t\t\treturn dojo.debug(obj);\n\t\t\t}\n\t\t\t\/\/ figure out type via a standard constructor (Object, String, Date, etc)\n\t\t\tvar type = obj.declaredClass;\n\t\t\tif (type == null) {\n\t\t\t\ttype = obj.constructor.toString().match(\/function\\s*(.*)\\(\/);\n\t\t\t\tif (type) {\ttype = type[1]\t};\n\t\t\t}\n\t\t\t\/\/ if we got a viable type, use Firebug's interactive property dump feature\n\t\t\tif (type) {\n\t\t\t\tif (type == \"String\" || type == \"Number\") {\n\t\t\t\t\treturn dojo.debug(type+\": \", obj);\n\t\t\t\t}\n\t\t\t\tif (showMethods && !sort) {\n\t\t\t\t\tvar sortedObj = obj;\n\t\t\t\t} else {\n\t\t\t\t\tvar propNames = [];\n\t\t\t\t\tif (showMethods) {\n\t\t\t\t\t\tfor (var prop in obj) {\t\n\t\t\t\t\t\t\tpropNames.push(prop);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (var prop in obj) {\t\n\t\t\t\t\t\t\tif (typeof obj[prop] != \"function\") { propNames.push(prop);\t}\n\t\t\t\t\t\t\telse dojo.debug(prop);\n\t\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\tif (sort) propNames.sort();\n\t\t\t\t\tvar sortedObj = {};\n\t\t\t\t\tdojo.lang.forEach(propNames, function(prop) {\n\t\t\t\t\t\tsortedObj[prop] = obj[prop];\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn dojo.debug(type+\": %o\\n%2.o\",obj,sortedObj);\n\t\t\t}\n\t\t\t\/\/ otherwise just output the constructor + object, \n\t\t\t\/\/\twhich is nice for a DOM element, etc\n\t\t\treturn dojo.debug(obj.constructor + \": \", obj);"},"extra":{"parameters":{"obj":{"type":"Object","summary":"or Array to debug"},"showMethods":{"type":"Pass","summary":"false to skip outputing methods of object, any other value will output them."},"sort":{"type":"Pass","summary":"false to skip sorting properties, any other value will sort."}}}}}}},"dojo.debug":{"meta":{"functions":{"dojo.debug":{"meta":{"summary":"Produce a line of debug output. Does nothing unless djConfig.isDebug is true. Accepts any nubmer of args, joined with ' ' to produce a single line of debugging output. Caller should not supply a trailing \"\\n\".","src":" if (!djConfig.isDebug) { return; }\n\tvar args = arguments;\n\tif(dj_undef(\"println\", dojo.hostenv)){\n\t\tdojo.raise(\"dojo.debug not available (yet?)\");\n\t}\n\tvar isJUM = dj_global[\"jum\"] && !dj_global[\"jum\"].isBrowser;\n\tvar s = [(isJUM ? \"\": \"DEBUG: \")];\n\tfor(var i=0;i<args.length;++i){\n\t\tif(!false && args[i] && args[i] instanceof Error){\n\t\t\tvar msg = \"[\" + args[i].name + \": \" + dojo.errorToString(args[i]) +\n\t\t\t\t(args[i].fileName ? \", file: \" + args[i].fileName : \"\") +\n\t\t\t\t(args[i].lineNumber ? \", line: \" + args[i].lineNumber : \"\") + \"]\";\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tvar msg = String(args[i]);\n\t\t\t} catch(e) {\n\t\t\t\tif(dojo.render.html.ie) {\n\t\t\t\t\tvar msg = \"[ActiveXObject]\";\n\t\t\t\t} else {\n\t\t\t\t\tvar msg = \"[unknown]\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ts.push(msg);\n\t}\n\tdojo.hostenv.println(s.join(\" \"));"}},"dojo.debugShallow":{"meta":{"summary":"outputs a \"name: value\" style listing of all enumerable properties in obj. Does nothing if djConfig.isDebug == false.","parameters":{"obj":{"type":"Object"}},"src":" if (!djConfig.isDebug) { return; }\n\tdojo.debug('------------------------------------------------------------');\n\tdojo.debug('Object: '+obj);\n\tvar props = [];\n\tfor(var prop in obj){\n\t\ttry {\n\t\t\tprops.push(prop + ': ' + obj[prop]);\n\t\t} catch(E) {\n\t\t\tprops.push(prop + ': ERROR - ' + E.message);\n\t\t}\n\t}\n\tprops.sort();\n\tfor(var i = 0; i < props.length; i++) {\n\t\tdojo.debug(props[i]);\n\t}\n\tdojo.debug('------------------------------------------------------------');"},"extra":{"parameters":{"obj":{"type":"the","summary":"object to be enumerated"}}}},"dojo.debugDeep":{"meta":{"summary":"provides an \"object explorer\" view of the passed obj in a popup window.","parameters":{"obj":{"type":"Object"}},"src":" if (!djConfig.isDebug) { return; }\n\tif (!dojo.uri || !dojo.uri.dojoUri){ return dojo.debug(\"You'll need to load dojo.uri.* for deep debugging - sorry!\"); }\n\tif (!window.open){ return dojo.debug('Deep debugging is only supported in host environments with window.open'); }\n\tvar idx = dojo.debugDeep.debugVars.length;\n\tdojo.debugDeep.debugVars.push(obj);\n\t\/\/ dojo.undo.browser back and forward breaks relpaths\n\tvar url = new dojo.uri.Uri(location, dojo.uri.dojoUri(\"src\/debug\/deep.html?var=\"+idx)).toString();\n\tvar win = window.open(url, '_blank', 'width=600, height=400, resizable=yes, scrollbars=yes, status=yes');\n\ttry{\n\t\twin.debugVar = obj;\n\t}catch(e){}"},"extra":{"parameters":{"obj":{"type":"the","summary":"object to be examined"}}}}}}}}