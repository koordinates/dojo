{"dojo.dnd.DragAndDrop":{"meta":{"requires":{"common":["dojo.lang.common","dojo.lang.func","dojo.lang.declare"]},"functions":{"dojo.dnd.DragEvent":{"meta":{"summary":"","src":" this.dragSource = null;\n\tthis.dragObject = null;\n\tthis.target = null;\n\tthis.eventStatus = \"success\";\n\t\/\/\n\t\/\/ can be one of:\n\t\/\/\t[\t\"dropSuccess\", \"dropFailure\", \"dragMove\",\n\t\/\/\t\t\"dragStart\", \"dragEnter\", \"dragLeave\"]\n\t\/\/","instance_variables":["dragSource","dragObject","target","eventStatus"]}}}}},"dojo.dnd.HtmlDragAndDrop":{"meta":{"requires":{"common":["dojo.dnd.HtmlDragManager","dojo.dnd.DragAndDrop","dojo.html.*","dojo.html.display","dojo.html.util","dojo.html.selection","dojo.html.iframe","dojo.lang.extras","dojo.lfx.*","dojo.event.*"]},"functions":{"dojo.dnd.HtmlDragSource":{"meta":{"prototype_chain":["dojo.dnd.DragSource"],"call_chain":["dojo.dnd.DragSource"]}},"dojo.dnd.HtmlDragObject":{"meta":{"prototype_chain":["dojo.dnd.DragObject"],"call_chain":["dojo.dnd.DragObject"]}},"dojo.dnd.HtmlDropTarget":{"meta":{"prototype_chain":["dojo.dnd.DropTarget"],"call_chain":["dojo.dnd.DropTarget"]}}}}},"dojo.dnd.HtmlDragCopy":{"meta":{"requires":{"common":["dojo.dnd.*"]},"functions":{"dojo.dnd.HtmlDragCopySource":{"meta":{"prototype_chain":["dojo.dnd.HtmlDragSource"],"call_chain":["dojo.dnd.HtmlDragSource"],"summary":"","parameters":{"node":{"type":""},"type":{"type":""},"copyOnce":{"type":""}},"src":" \tthis.copyOnce = copyOnce;\n\t\tthis.makeCopy = true;","instance_variables":["copyOnce","makeCopy"]}},"dojo.dnd.HtmlDragCopySource.onDragStart":{"meta":{"summary":"","src":" \tvar dragObj = new dojo.dnd.HtmlDragCopyObject(this.dragObject, this.type, this);\n\t\tif(this.dragClass) { dragObj.dragClass = this.dragClass; }\n\t\tif (this.constrainToContainer) {\n\t\t\tdragObj.constrainTo(this.constrainingContainer || this.domNode.parentNode);\n\t\t}\n\t\treturn dragObj;","prototype":"dojo.dnd.HtmlDragCopySource"}},"dojo.dnd.HtmlDragCopySource.onSelected":{"meta":{"summary":"","src":" \tfor (var i=0; i<this.dragObjects.length; i++) {\n\t\t\tdojo.dnd.dragManager.selectedSources.push(new dojo.dnd.HtmlDragCopySource(this.dragObjects[i]));\n\t\t}","prototype":"dojo.dnd.HtmlDragCopySource"}},"dojo.dnd.HtmlDragCopyObject":{"meta":{"prototype_chain":["dojo.dnd.HtmlDragObject"],"call_chain":["dojo.dnd.HtmlDragObject"],"instance_variables":["sourceNode","domNode","copySource.dragObject","copySource.makeCopy","copySource"],"summary":"","parameters":{"dragObject":{"type":""},"type":{"type":""},"source":{"type":""}},"src":" \tthis.copySource = source;"}},"dojo.dnd.HtmlDragCopyObject.onDragStart":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":" \tdojo.dnd.HtmlDragCopyObject.superclass.onDragStart.apply(this, arguments);\n\t\tif(this.copySource.makeCopy) {\n\t\t\tthis.sourceNode = this.domNode;\n\t\t\tthis.domNode    = this.domNode.cloneNode(true);\n\t\t}","call_chain":["dojo.dnd.HtmlDragCopyObject.superclass.onDragStart"],"prototype":"dojo.dnd.HtmlDragCopyObject"}},"dojo.dnd.HtmlDragCopyObject.onDragEnd":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":" \tswitch(e.dragStatus){\n\t\t\tcase \"dropFailure\": \/\/ slide back to the start\n\t\t\t\tvar startCoords = dojo.html.getAbsolutePosition(this.dragClone, true);\n\t\t\t\t\/\/ offset the end so the effect can be seen\n\t\t\t\tvar endCoords = { left: this.dragStartPosition.x + 1,\n\t\t\t\t\ttop: this.dragStartPosition.y + 1};\n\t\t\t\t\/\/ animate\n\t\t\t\tvar anim = dojo.lfx.slideTo(this.dragClone, endCoords, 500, dojo.lfx.easeOut);\n\t\t\t\tvar dragObject = this;\n\t\t\t\tdojo.event.connect(anim, \"onEnd\", function (e) {\n\t\t\t\t\t\/\/ pause for a second (not literally) and disappear\n\t\t\t\t\tdojo.lang.setTimeout(function() {\n\t\t\t\t\t\t\tdojo.html.removeNode(dragObject.dragClone);\n\t\t\t\t\t\t\tdragObject.dragClone = null;\n\t\t\t\t\t\t\tif(dragObject.copySource.makeCopy) {\n\t\t\t\t\t\t\t\tdojo.html.removeNode(dragObject.domNode);\n\t\t\t\t\t\t\t\tdragObject.domNode = dragObject.sourceNode;\n\t\t\t\t\t\t\t\tdragObject.sourceNode = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t200);\n\t\t\t\t});\n\t\t\t\tanim.play();\n\t\t\t\tdojo.event.topic.publish('dragEnd', { source: this } );\n\t\t\t\treturn;\n\t\t}\n\t\tdojo.dnd.HtmlDragCopyObject.superclass.onDragEnd.apply(this, arguments);\n\t\tthis.copySource.dragObject = this.domNode;\n\t\tif(this.copySource.copyOnce){\n\t\t\tthis.copySource.makeCopy = false;\n\t\t}\n\t\tnew dojo.dnd.HtmlDragCopySource(this.sourceNode, this.type, this.copySource.copyOnce);\n\t\tthis.sourceNode = null;","call_chain":["dojo.dnd.HtmlDragCopyObject.superclass.onDragEnd"],"prototype":"dojo.dnd.HtmlDragCopyObject"}}}}},"dojo.dnd.HtmlDragManager":{"meta":{"requires":{"common":["dojo.dnd.DragAndDrop","dojo.event.*","dojo.lang.array","dojo.html.common","dojo.html.layout"]},"functions":{"dojo.dnd.HtmlDragManager":{"meta":{"prototype_chain":["dojo.dnd.DragManager"],"call_chain":["dojo.dnd.DragManager"]}}}}},"dojo.dnd.HtmlDragMove":{"meta":{"requires":{"common":["dojo.dnd.*"]},"functions":{"dojo.dnd.HtmlDragMoveSource":{"meta":{"prototype_chain":["dojo.dnd.HtmlDragSource"],"call_chain":["dojo.dnd.HtmlDragSource"]}},"dojo.dnd.HtmlDragMoveObject":{"meta":{"prototype_chain":["dojo.dnd.HtmlDragObject"],"call_chain":["dojo.dnd.HtmlDragObject"]}}}}},"dojo.dnd.Sortable":{"meta":{"requires":{"common":["dojo.dnd.*"]},"functions":{"dojo.dnd.Sortable":{"meta":{"summary":"","src":""}},"dojo.dnd.Sortable.ondragstart":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":" \tvar dragObject = e.target;\n\t\twhile (dragObject.parentNode && dragObject.parentNode != this) {\n\t\t\tdragObject = dragObject.parentNode;\n\t\t}\n\t\t\/\/ TODO: should apply HtmlDropTarget interface to self\n\t\t\/\/ TODO: should apply HtmlDragObject interface?\n\t\treturn dragObject;","prototype":"dojo.dnd.Sortable"}}}}},"dojo.dnd.TreeDragAndDrop":{"meta":{"requires":{"common":["dojo.dnd.HtmlDragAndDrop","dojo.lang.func","dojo.lang.array","dojo.lang.extras","dojo.html.layout"]},"functions":{"dojo.dnd.TreeDragSource":{"meta":{"summary":"","parameters":{"node":{"type":""},"syncController":{"type":""},"type":{"type":""},"treeNode":{"type":""}},"src":" this.controller = syncController;\n\tthis.treeNode = treeNode;\n\tdojo.dnd.HtmlDragSource.call(this, node, type);","instance_variables":["controller","treeNode","savedSelectedNode"],"call_chain":["dojo.dnd.HtmlDragSource"],"prototype_chain":["dojo.dnd.HtmlDragSource"]}},"dojo.dnd.TreeDropTarget":{"meta":{"summary":"","parameters":{"domNode":{"type":""},"controller":{"type":""},"type":{"type":""},"treeNode":{"type":""}},"src":" this.treeNode = treeNode;\n\tthis.controller = controller; \/\/ I will sync-ly process drops\n\tdojo.dnd.HtmlDropTarget.apply(this, [domNode, type]);","instance_variables":["treeNode","controller","position","treeNode.labelNode.style.borderTop","treeNode.labelNode.style.borderBottom","autoExpandTimer","treeNode.parent"],"call_chain":["dojo.dnd.HtmlDropTarget"],"prototype_chain":["dojo.dnd.HtmlDropTarget"],"prototype_variables":["autoExpandDelay","autoExpandTimer","position","indicatorStyle"]}},"dojo.dnd.TreeDNDController":{"meta":{"summary":"","parameters":{"treeController":{"type":""}},"src":" this.treeController = treeController;\n\tthis.dragSources = {};\n\tthis.dropTargets = {};","instance_variables":["treeController","dragSources","dropTargets"]}},"dojo.dnd.TreeDragSource.onDragStart":{"meta":{"summary":"","src":" \tvar dragObject = dojo.dnd.HtmlDragSource.prototype.onDragStart.call(this);\n\t\t\/\/dojo.debugShallow(dragObject)\n\t\tdragObject.treeNode = this.treeNode;\n\t\tdragObject.onDragStart = dojo.lang.hitch(dragObject, function(e) {\n\t\t\t\/* save selection *\/\n\t\t\tthis.savedSelectedNode = this.treeNode.tree.selector.selectedNode;\n\t\t\tif (this.savedSelectedNode) {\n\t\t\t\tthis.savedSelectedNode.unMarkSelected();\n\t\t\t}\n\t\t\tvar result = dojo.dnd.HtmlDragObject.prototype.onDragStart.apply(this, arguments);\n\t\t\t\/* remove background grid from cloned object *\/\n\t\t\tvar cloneGrid = this.dragClone.getElementsByTagName('img');\n\t\t\tfor(var i=0; i<cloneGrid.length; i++) {\n\t\t\t\tcloneGrid.item(i).style.backgroundImage='url()';\n\t\t\t}\n\t\t\treturn result;\n\t\t});\n\t\tdragObject.onDragEnd = function(e) {\n\t\t\t\/* restore selection *\/\n\t\t\tif (this.savedSelectedNode) {\n\t\t\t\tthis.savedSelectedNode.markSelected();\n\t\t\t}\n\t\t\t\/\/dojo.debug(e.dragStatus);\n\t\t\treturn dojo.dnd.HtmlDragObject.prototype.onDragEnd.apply(this, arguments);\n\t\t}\n\t\t\/\/dojo.debug(dragObject.domNode.outerHTML)\n\t\treturn dragObject;","call_chain":["dojo.dnd.HtmlDragSource.prototype.onDragStart","dojo.dnd.HtmlDragObject.prototype.onDragStart","dojo.dnd.HtmlDragObject.prototype.onDragEnd"],"prototype":"dojo.dnd.TreeDragSource"}},"dojo.dnd.TreeDragSource.onDragEnd":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":" \t var res = dojo.dnd.HtmlDragSource.prototype.onDragEnd.call(this, e);\n\t\t return res;","call_chain":["dojo.dnd.HtmlDragSource.prototype.onDragEnd"],"prototype":"dojo.dnd.TreeDragSource"}},"dojo.dnd.TreeDropTarget.showIndicator":{"meta":{"summary":"","parameters":{"position":{"type":""}},"src":" \tif (this.position == position) {\n\t\t\treturn;\n\t\t}\n\t\t\/\/dojo.debug(position)\n\t\tthis.hideIndicator();\n\t\tthis.position = position;\n\t\tif (position == \"before\") {\n\t\t\tthis.treeNode.labelNode.style.borderTop = this.indicatorStyle;\n\t\t} else if (position == \"after\") {\n\t\t\tthis.treeNode.labelNode.style.borderBottom = this.indicatorStyle;\n\t\t} else if (position == \"onto\") {\n\t\t\tthis.treeNode.markSelected();\n\t\t}","prototype":"dojo.dnd.TreeDropTarget"}},"dojo.dnd.TreeDropTarget.hideIndicator":{"meta":{"summary":"","src":" \tthis.treeNode.labelNode.style.borderBottom=\"\";\n\t\tthis.treeNode.labelNode.style.borderTop=\"\";\n\t\tthis.treeNode.unMarkSelected();\n\t\tthis.position = null;","prototype":"dojo.dnd.TreeDropTarget"}},"dojo.dnd.TreeDropTarget.onDragOver":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":"\t\tvar accepts = dojo.dnd.HtmlDropTarget.prototype.onDragOver.apply(this, arguments);\n\t\t\/\/dojo.debug(\"TreeDropTarget.onDragOver accepts:\"+accepts)\n\t\tif (accepts && this.treeNode.isFolder && !this.treeNode.isExpanded) {\n\t\t\tthis.setAutoExpandTimer();\n\t\t}\n\t\treturn accepts;","call_chain":["dojo.dnd.HtmlDropTarget.prototype.onDragOver"],"prototype":"dojo.dnd.TreeDropTarget"}},"dojo.dnd.TreeDropTarget.accepts":{"meta":{"summary":"","parameters":{"dragObjects":{"type":""}},"src":" \tvar accepts = dojo.dnd.HtmlDropTarget.prototype.accepts.apply(this, arguments);\n\t\tif (!accepts) return false;\n\t\tvar sourceTreeNode = dragObjects[0].treeNode;\n\t\tif (dojo.lang.isUndefined(sourceTreeNode) || !sourceTreeNode || !sourceTreeNode.isTreeNode) {\n\t\t\tdojo.raise(\"Source is not TreeNode or not found\");\n\t\t}\n\t\tif (sourceTreeNode === this.treeNode) return false;\n\t\treturn true;","call_chain":["dojo.dnd.HtmlDropTarget.prototype.accepts"],"prototype":"dojo.dnd.TreeDropTarget"}},"dojo.dnd.TreeDropTarget.setAutoExpandTimer":{"meta":{"summary":"","src":" \tvar _this = this;\n\t\tvar autoExpand = function () {\n\t\t\tif (dojo.dnd.dragManager.currentDropTarget === _this) {\n\t\t\t\t_this.controller.expand(_this.treeNode);\n\t\t\t}\n\t\t}\n\t\tthis.autoExpandTimer = dojo.lang.setTimeout(autoExpand, _this.autoExpandDelay);","prototype":"dojo.dnd.TreeDropTarget"}},"dojo.dnd.TreeDropTarget.getDNDMode":{"meta":{"summary":"","src":" \treturn this.treeNode.tree.DNDMode;","prototype":"dojo.dnd.TreeDropTarget"}},"dojo.dnd.TreeDropTarget.getAcceptPosition":{"meta":{"summary":"","parameters":{"e":{"type":""},"sourceTreeNode":{"type":""}},"src":" \tvar DNDMode = this.getDNDMode();\n\t\tif (DNDMode & dojo.widget.Tree.prototype.DNDModes.ONTO &&\n\t\t\t\/\/ check if ONTO is allowed localy\n\t\t\t!(\n\t\t\t  !this.treeNode.actionIsDisabled(dojo.widget.TreeNode.prototype.actions.ADDCHILD) \/\/ check dynamically cause may change w\/o regeneration of dropTarget\n\t\t\t  && sourceTreeNode.parent !== this.treeNode\n\t\t\t  && this.controller.canMove(sourceTreeNode, this.treeNode)\n\t\t\t )\n\t\t) {\n\t\t\t\/\/ disable ONTO if can't move\n\t\t\tDNDMode &= ~dojo.widget.Tree.prototype.DNDModes.ONTO;\n\t\t}\n\t\tvar position = this.getPosition(e, DNDMode);\n\t\t\/\/dojo.debug(DNDMode & +\" : \"+position);\n\t\t\/\/ if onto is here => it was allowed before, no accept check is needed\n\t\tif (position==\"onto\" ||\n\t\t\t(!this.isAdjacentNode(sourceTreeNode, position)\n\t\t\t && this.controller.canMove(sourceTreeNode, this.treeNode.parent)\n\t\t\t)\n\t\t) {\n\t\t\treturn position;\n\t\t} else {\n\t\t\treturn false;\n\t\t}","prototype":"dojo.dnd.TreeDropTarget"}},"dojo.dnd.TreeDropTarget.onDragOut":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":" \tthis.clearAutoExpandTimer();\n\t\tthis.hideIndicator();","prototype":"dojo.dnd.TreeDropTarget"}},"dojo.dnd.TreeDropTarget.clearAutoExpandTimer":{"meta":{"summary":"","src":" \tif (this.autoExpandTimer) {\n\t\t\tclearTimeout(this.autoExpandTimer);\n\t\t\tthis.autoExpandTimer = null;\n\t\t}","prototype":"dojo.dnd.TreeDropTarget"}},"dojo.dnd.TreeDropTarget.onDragMove":{"meta":{"summary":"","parameters":{"e":{"type":""},"dragObjects":{"type":""}},"src":" \tvar sourceTreeNode = dragObjects[0].treeNode;\n\t\tvar position = this.getAcceptPosition(e, sourceTreeNode);\n\t\tif (position) {\n\t\t\tthis.showIndicator(position);\n\t\t}","prototype":"dojo.dnd.TreeDropTarget"}},"dojo.dnd.TreeDropTarget.isAdjacentNode":{"meta":{"summary":"","parameters":{"sourceNode":{"type":""},"position":{"type":""}},"src":" \tif (sourceNode === this.treeNode) return true;\n\t\tif (sourceNode.getNextSibling() === this.treeNode && position==\"before\") return true;\n\t\tif (sourceNode.getPreviousSibling() === this.treeNode && position==\"after\") return true;\n\t\treturn false;","prototype":"dojo.dnd.TreeDropTarget"}},"dojo.dnd.TreeDropTarget.getPosition":{"meta":{"summary":"","parameters":{"e":{"type":""},"DNDMode":{"type":""}},"src":" \tvar node = dojo.byId(this.treeNode.labelNode);\n\t\tvar mousey = e.pageY || e.clientY + dojo.body().scrollTop;\n\t\tvar nodey = dojo.html.getAbsolutePosition(node).y;\n\t\tvar height = dojo.html.getBorderBox(node).height;\n\t\tvar relY = mousey - nodey;\n\t\tvar p = relY \/ height;\n\t\tvar position = \"\"; \/\/ \"\" <=> forbidden\n\t\tif (DNDMode & dojo.widget.Tree.prototype.DNDModes.ONTO\n\t\t  && DNDMode & dojo.widget.Tree.prototype.DNDModes.BETWEEN) {\n\t\t\tif (p<=0.3) {\n\t\t\t\tposition = \"before\";\n\t\t\t} else if (p<=0.7) {\n\t\t\t\tposition = \"onto\";\n\t\t\t} else {\n\t\t\t\tposition = \"after\";\n\t\t\t}\n\t\t} else if (DNDMode & dojo.widget.Tree.prototype.DNDModes.BETWEEN) {\n\t\t\tif (p<=0.5) {\n\t\t\t\tposition = \"before\";\n\t\t\t} else {\n\t\t\t\tposition = \"after\";\n\t\t\t}\n\t\t}\n\t\telse if (DNDMode & dojo.widget.Tree.prototype.DNDModes.ONTO) {\n\t\t\tposition = \"onto\";\n\t\t}\n\t\treturn position;","prototype":"dojo.dnd.TreeDropTarget"}},"dojo.dnd.TreeDropTarget.getTargetParentIndex":{"meta":{"summary":"","parameters":{"sourceTreeNode":{"type":""},"position":{"type":""}},"src":" \tvar index = position == \"before\" ? this.treeNode.getParentIndex() : this.treeNode.getParentIndex()+1;\n\t\tif (this.treeNode.parent === sourceTreeNode.parent\n\t\t  && this.treeNode.getParentIndex() > sourceTreeNode.getParentIndex()) {\n\t\t  \tindex--;  \/\/ dragging a node is different for simple move bacause of before-after issues\n\t\t}\n\t\treturn index;","prototype":"dojo.dnd.TreeDropTarget"}},"dojo.dnd.TreeDropTarget.onDrop":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":"\t\tvar position = this.position;\n\/\/dojo.debug(position);\n\t\tthis.onDragOut(e);\n\t\tvar sourceTreeNode = e.dragObject.treeNode;\n\t\tif (!dojo.lang.isObject(sourceTreeNode)) {\n\t\t\tdojo.raise(\"TreeNode not found in dragObject\")\n\t\t}\n\t\tif (position == \"onto\") {\n\t\t\treturn this.controller.move(sourceTreeNode, this.treeNode, 0);\n\t\t} else {\n\t\t\tvar index = this.getTargetParentIndex(sourceTreeNode, position);\n\t\t\treturn this.controller.move(sourceTreeNode, this.treeNode.parent, index);\n\t\t}\n\t\t\/\/dojo.debug('drop2');","prototype":"dojo.dnd.TreeDropTarget"}},"dojo.dnd.TreeDNDController.listenTree":{"meta":{"summary":"","parameters":{"tree":{"type":""}},"src":" \tdojo.event.topic.subscribe(tree.eventNames.createDOMNode, this, \"onCreateDOMNode\");\n\t\tdojo.event.topic.subscribe(tree.eventNames.moveFrom, this, \"onMoveFrom\");\n\t\tdojo.event.topic.subscribe(tree.eventNames.moveTo, this, \"onMoveTo\");\n\t\tdojo.event.topic.subscribe(tree.eventNames.addChild, this, \"onAddChild\");\n\t\tdojo.event.topic.subscribe(tree.eventNames.removeNode, this, \"onRemoveNode\");\n\t\tdojo.event.topic.subscribe(tree.eventNames.treeDestroy, this, \"onTreeDestroy\");","prototype":"dojo.dnd.TreeDNDController"}},"dojo.dnd.TreeDNDController.unlistenTree":{"meta":{"summary":"","parameters":{"tree":{"type":""}},"src":" \tdojo.event.topic.unsubscribe(tree.eventNames.createDOMNode, this, \"onCreateDOMNode\");\n\t\tdojo.event.topic.unsubscribe(tree.eventNames.moveFrom, this, \"onMoveFrom\");\n\t\tdojo.event.topic.unsubscribe(tree.eventNames.moveTo, this, \"onMoveTo\");\n\t\tdojo.event.topic.unsubscribe(tree.eventNames.addChild, this, \"onAddChild\");\n\t\tdojo.event.topic.unsubscribe(tree.eventNames.removeNode, this, \"onRemoveNode\");\n\t\tdojo.event.topic.unsubscribe(tree.eventNames.treeDestroy, this, \"onTreeDestroy\");","prototype":"dojo.dnd.TreeDNDController"}},"dojo.dnd.TreeDNDController.onTreeDestroy":{"meta":{"summary":"","parameters":{"message":{"type":""}},"src":" \tthis.unlistenTree(message.source);\n\t\t\/\/ I'm not widget so don't use destroy() call and dieWithTree","prototype":"dojo.dnd.TreeDNDController"}},"dojo.dnd.TreeDNDController.onCreateDOMNode":{"meta":{"summary":"","parameters":{"message":{"type":""}},"src":" \tthis.registerDNDNode(message.source);","prototype":"dojo.dnd.TreeDNDController"}},"dojo.dnd.TreeDNDController.onAddChild":{"meta":{"summary":"","parameters":{"message":{"type":""}},"src":" \tthis.registerDNDNode(message.child);","prototype":"dojo.dnd.TreeDNDController"}},"dojo.dnd.TreeDNDController.onMoveFrom":{"meta":{"summary":"","parameters":{"message":{"type":""}},"src":" \tvar _this = this;\n\t\tdojo.lang.forEach(\n\t\t\tmessage.child.getDescendants(),\n\t\t\tfunction(node) { _this.unregisterDNDNode(node); }\n\t\t);","prototype":"dojo.dnd.TreeDNDController"}},"dojo.dnd.TreeDNDController.onMoveTo":{"meta":{"summary":"","parameters":{"message":{"type":""}},"src":" \tvar _this = this;\n\t\tdojo.lang.forEach(\n\t\t\tmessage.child.getDescendants(),\n\t\t\tfunction(node) { _this.registerDNDNode(node); }\n\t\t);","prototype":"dojo.dnd.TreeDNDController"}},"dojo.dnd.TreeDNDController.registerDNDNode":{"meta":{"summary":"","parameters":{"node":{"type":""}},"src":" \tif (!node.tree.DNDMode) return;\n\/\/dojo.debug(\"registerDNDNode \"+node);\n\t\t\/* I drag label, not domNode, because large domNodes are very slow to copy and large to drag *\/\n\t\tvar source = null;\n\t\tvar target = null;\n\t\tif (!node.actionIsDisabled(node.actions.MOVE)) {\n\t\t\t\/\/dojo.debug(\"reg source\")\n\t\t\tvar source = new dojo.dnd.TreeDragSource(node.labelNode, this, node.tree.widgetId, node);\n\t\t\tthis.dragSources[node.widgetId] = source;\n\t\t}\n\t\tvar target = new dojo.dnd.TreeDropTarget(node.labelNode, this.treeController, node.tree.DNDAcceptTypes, node);\n\t\tthis.dropTargets[node.widgetId] = target;","prototype":"dojo.dnd.TreeDNDController"}},"dojo.dnd.TreeDNDController.unregisterDNDNode":{"meta":{"summary":"","parameters":{"node":{"type":""}},"src":" \tif (this.dragSources[node.widgetId]) {\n\t\t\tdojo.dnd.dragManager.unregisterDragSource(this.dragSources[node.widgetId]);\n\t\t\tdelete this.dragSources[node.widgetId];\n\t\t}\n\t\tif (this.dropTargets[node.widgetId]) {\n\t\t\tdojo.dnd.dragManager.unregisterDropTarget(this.dropTargets[node.widgetId]);\n\t\t\tdelete this.dropTargets[node.widgetId];\n\t\t}","prototype":"dojo.dnd.TreeDNDController"}}}}},"dojo.dnd.TreeDragAndDropV3":{"meta":{"requires":{"common":["dojo.dnd.HtmlDragAndDrop","dojo.lang.func","dojo.lang.array","dojo.lang.extras","dojo.Deferred","dojo.html.layout"]},"functions":{"dojo.dnd.TreeDragSourceV3":{"meta":{"summary":"","parameters":{"node":{"type":""},"syncController":{"type":""},"type":{"type":""},"treeNode":{"type":""}},"src":" this.controller = syncController;\n\tthis.treeNode = treeNode;\n\tdojo.dnd.HtmlDragSource.call(this, node, type);\n\t\/\/dojo.profile.end(\"TreeDragSourceV3 \"+treeNode);","instance_variables":["controller","treeNode"],"call_chain":["dojo.dnd.HtmlDragSource"],"prototype_chain":["dojo.dnd.HtmlDragSource"]}},"dojo.dnd.TreeDropTargetV3":{"meta":{"summary":"","parameters":{"domNode":{"type":""},"controller":{"type":""},"type":{"type":""},"treeNode":{"type":""}},"src":" this.treeNode = treeNode;\n\tthis.controller = controller; \/\/ I will sync-ly process drops\n\tdojo.dnd.HtmlDropTarget.call(this, domNode, type);","instance_variables":["treeNode","controller","position","treeNode.contentNode.style.borderBottom","treeNode.contentNode.style.borderTop","treeNode.contentNode.style.border","treeNode.contentNode.style.width","autoExpandTimer","cachedNodeY","cachedNodeHeight","treeNode.parent"],"call_chain":["dojo.dnd.HtmlDropTarget"],"prototype_chain":["dojo.dnd.HtmlDropTarget"],"prototype_variables":["autoExpandDelay","autoExpandTimer","position","indicatorStyle"]}},"dojo.dnd.TreeDropTargetV3.showIndicator":{"meta":{"summary":"","parameters":{"position":{"type":""}},"src":" \tif (this.position == position) {\n\t\t\treturn;\n\t\t}\n\t\t\/\/dojo.debug(\"set position for \"+this.treeNode)\n\t\tthis.hideIndicator();\n\t\tthis.position = position;\n\t\tvar node = this.treeNode;\n\t\tnode.contentNode.style.width = dojo.html.getBorderBox(node.labelNode).width + \"px\";\n\t\tif (position == \"onto\") {\t\t\t\t\t\n\t\t\tnode.contentNode.style.border = this.indicatorStyle;\n\t\t} else {\n\t\t\t\/\/ FIXME: bottom-top or highlight should cover ONLY top\/bottom or div itself,\n\t\t\t\/\/ not span whole line (try Dnd)\n\t\t\t\/\/ FAILURE: Can't put span inside div: multiline bottom-top will span multiple lines\n\t\t\tif (position == \"before\") {\n\t\t\t\tnode.contentNode.style.borderTop = this.indicatorStyle;\n\t\t\t} else if (position == \"after\") {\n\t\t\t\tnode.contentNode.style.borderBottom = this.indicatorStyle;\n\t\t\t}\t\t\t\t\t\t\t\t\t\n\t\t}  ","prototype":"dojo.dnd.TreeDropTargetV3"}},"dojo.dnd.TreeDropTargetV3.hideIndicator":{"meta":{"summary":"","src":" \tthis.treeNode.contentNode.style.borderBottom = \"\";\n\t\tthis.treeNode.contentNode.style.borderTop = \"\";\n\t\tthis.treeNode.contentNode.style.border = \"\";\n\t\tthis.treeNode.contentNode.style.width=\"\"\n\t\tthis.position = null;","prototype":"dojo.dnd.TreeDropTargetV3"}},"dojo.dnd.TreeDropTargetV3.onDragOver":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":"\t\tvar accepts = dojo.dnd.HtmlDropTarget.prototype.onDragOver.apply(this, arguments);\n\t\t\/\/dojo.debug(\"TreeDropTarget.onDragOver accepts:\"+accepts)\n\t\tif (accepts && this.treeNode.isFolder && !this.treeNode.isExpanded) {\n\t\t\tthis.setAutoExpandTimer();\n\t\t}\n\t\tif (accepts) {\n\t\t\tthis.cacheNodeCoords();\n\t\t}\n\t\treturn accepts;","call_chain":["dojo.dnd.HtmlDropTarget.prototype.onDragOver"],"prototype":"dojo.dnd.TreeDropTargetV3"}},"dojo.dnd.TreeDropTargetV3.accepts":{"meta":{"summary":"","parameters":{"dragObjects":{"type":""}},"src":" \tvar accepts = dojo.dnd.HtmlDropTarget.prototype.accepts.apply(this, arguments);\n\t\t\/\/dojo.debug(\"accepts \"+accepts);\n\t\tif (!accepts) return false;\n\t\tfor(var i=0; i<dragObjects.length; i++) {\n\t\t\t\/\/ there may be NO treeNode\n\t\t\tvar sourceTreeNode = dragObjects[i].treeNode;\n\t\t\tif (sourceTreeNode === this.treeNode) return false;\n\t\t}\n\t\treturn true;","call_chain":["dojo.dnd.HtmlDropTarget.prototype.accepts"],"prototype":"dojo.dnd.TreeDropTargetV3"}},"dojo.dnd.TreeDropTargetV3.setAutoExpandTimer":{"meta":{"summary":"","src":" \tvar _this = this;\n\t\tvar autoExpand = function () {\n\t\t\tif (dojo.dnd.dragManager.currentDropTarget === _this) {\n\t\t\t\t_this.controller.expand(_this.treeNode);\n\t\t\t\t\/\/ SLOW. Coordinates will not be recalculated if collapse occurs, or\n\t\t\t\t\/\/ other (generic) resize. So that's a kind of hack.\n\t\t\t\tdojo.dnd.dragManager.cacheTargetLocations();\n\t\t\t}\n\t\t}\n\t\tthis.autoExpandTimer = dojo.lang.setTimeout(autoExpand, _this.autoExpandDelay);","prototype":"dojo.dnd.TreeDropTargetV3"}},"dojo.dnd.TreeDropTargetV3.getAcceptPosition":{"meta":{"summary":"","parameters":{"e":{"type":""},"dragObjects":{"type":""}},"src":" \tvar DndMode = this.treeNode.tree.DndMode;\n\t\t\/\/ disable ONTO mode possibility if impossible \n\t\tif (DndMode & dojo.widget.TreeV3.prototype.DndModes.ONTO &&\n\t\t\t\/\/ check if ONTO is allowed localy\n\t\t\t\/\/ check dynamically cause may change w\/o regeneration of dropTarget\n\t\t\tthis.treeNode.actionIsDisabledNow(this.treeNode.actions.ADDCHILD) \n\t\t) {\n\t\t\t\/\/ disable ONTO if can't move\n\t\t\tDndMode &= ~dojo.widget.TreeV3.prototype.DndModes.ONTO;\n\t\t}\n\t\tvar position = this.getPosition(e, DndMode);\n\t\t\/\/dojo.debug(DndMode & +\" : \"+position);\n\t\t\/\/ if onto is here => it was allowed before, no accept check is needed\n\t\tif (position==\"onto\") {\n\t\t\treturn position;\n\t\t}\n\t\tfor(var i=0; i<dragObjects.length; i++) {\n\t\t\tvar source = dragObjects[i].dragSource;\n\t\t\tif (source.treeNode && this.isAdjacentNode(source.treeNode, position)) { \/\/ skip check if same parent\n\t\t\t\tcontinue;\n\t\t\t}\t\t\n\t\t\tif (!this.controller.canMove(source.treeNode ? source.treeNode : source, this.treeNode.parent)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn position;","prototype":"dojo.dnd.TreeDropTargetV3"}},"dojo.dnd.TreeDropTargetV3.onDropEnd":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":" \tthis.clearAutoExpandTimer();\n\t\tthis.hideIndicator();","prototype":"dojo.dnd.TreeDropTargetV3"}},"dojo.dnd.TreeDropTargetV3.onDragOut":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":" \tthis.clearAutoExpandTimer();\n\t\tthis.hideIndicator();","prototype":"dojo.dnd.TreeDropTargetV3"}},"dojo.dnd.TreeDropTargetV3.clearAutoExpandTimer":{"meta":{"summary":"","src":" \tif (this.autoExpandTimer) {\n\t\t\tclearTimeout(this.autoExpandTimer);\n\t\t\tthis.autoExpandTimer = null;\n\t\t}","prototype":"dojo.dnd.TreeDropTargetV3"}},"dojo.dnd.TreeDropTargetV3.onDragMove":{"meta":{"summary":"","parameters":{"e":{"type":""},"dragObjects":{"type":""}},"src":" \tvar position = this.getAcceptPosition(e, dragObjects);\n\t\tif (position) {\n\t\t\tthis.showIndicator(position);\n\t\t}","prototype":"dojo.dnd.TreeDropTargetV3"}},"dojo.dnd.TreeDropTargetV3.isAdjacentNode":{"meta":{"summary":"","parameters":{"sourceNode":{"type":""},"position":{"type":""}},"src":" \tif (sourceNode === this.treeNode) return true;\n\t\tif (sourceNode.getNextSibling() === this.treeNode && position==\"before\") return true;\n\t\tif (sourceNode.getPreviousSibling() === this.treeNode && position==\"after\") return true;\n\t\treturn false;","prototype":"dojo.dnd.TreeDropTargetV3"}},"dojo.dnd.TreeDropTargetV3.cacheNodeCoords":{"meta":{"summary":"","src":" \tvar node = this.treeNode.contentNode;\n\t\tthis.cachedNodeY = dojo.html.getAbsolutePosition(node).y;\n\t\tthis.cachedNodeHeight = dojo.html.getBorderBox(node).height;","prototype":"dojo.dnd.TreeDropTargetV3"}},"dojo.dnd.TreeDropTargetV3.getPosition":{"meta":{"summary":"","parameters":{"e":{"type":""},"DndMode":{"type":""}},"src":" \tvar mousey = e.pageY || e.clientY + dojo.body().scrollTop;\n\t\tvar relY = mousey - this.cachedNodeY;\n\t\tvar p = relY \/ this.cachedNodeHeight;\n\t\tvar position = \"\"; \/\/ \"\" <=> forbidden\n\t\tif (DndMode & dojo.widget.TreeV3.prototype.DndModes.ONTO\n\t\t  && DndMode & dojo.widget.TreeV3.prototype.DndModes.BETWEEN) {\n\t\t\t\/\/dojo.debug(\"BOTH\");\n\t\t\tif (p<=0.33) {\n\t\t\t\tposition = \"before\";\n\t\t\t\t\/\/ if children are expanded then I ignore understrike, cause it is confusing with firstChild\n\t\t\t\t\/\/ but for last nodes I put understrike there\n\t\t\t} else if (p<=0.66 || this.treeNode.isExpanded && this.treeNode.children.length && !this.treeNode.isLastChild()) {\n\t\t\t\tposition = \"onto\";\n\t\t\t} else {\n\t\t\t\tposition = \"after\";\n\t\t\t}\n\t\t} else if (DndMode & dojo.widget.TreeV3.prototype.DndModes.BETWEEN) {\n\t\t\t\/\/dojo.debug(\"BETWEEN\");\n\t\t\tif (p<=0.5 || this.treeNode.isExpanded && this.treeNode.children.length && !this.treeNode.isLastChild()) {\n\t\t\t\tposition = \"before\";\n\t\t\t} else {\n\t\t\t\tposition = \"after\";\n\t\t\t}\n\t\t}\n\t\telse if (DndMode & dojo.widget.TreeV3.prototype.DndModes.ONTO) {\n\t\t\t\/\/dojo.debug(\"ONTO\");\n\t\t\tposition = \"onto\";\n\t\t}\n\t\t\/\/dojo.debug(position);\n\t\treturn position;","prototype":"dojo.dnd.TreeDropTargetV3"}},"dojo.dnd.TreeDropTargetV3.getTargetParentIndex":{"meta":{"summary":"","parameters":{"source":{"type":""},"position":{"type":""}},"src":" \tvar index = position == \"before\" ? this.treeNode.getParentIndex() : this.treeNode.getParentIndex()+1;\n\t\tif (source.treeNode\n\t\t  && this.treeNode.parent === source.treeNode.parent\n\t\t  && this.treeNode.getParentIndex() > source.treeNode.getParentIndex()) {\n\t\t  \tindex--;  \/\/ dragging a node is different for simple move bacause of before-after issues\n\t\t}\n\t\treturn index;","prototype":"dojo.dnd.TreeDropTargetV3"}},"dojo.dnd.TreeDropTargetV3.onDrop":{"meta":{"summary":"","parameters":{"e":{"type":""}},"src":"\t\tvar position = this.position;\n\/\/dojo.debug(position);\n\t\tvar source = e.dragObject.dragSource;\n\t\t\/\/dojo.debug(\"onDrop \"+source.treeNode+\" \" + position + \" \"+this.treeNode);\n\t\tvar targetParent, targetIndex;\n\t\tif (position == \"onto\") {\n\t\t\ttargetParent = this.treeNode;\n\t\t\ttargetIndex = 0;\n\t\t} else {\n\t\t\ttargetIndex = this.getTargetParentIndex(source, position);\n\t\t\ttargetParent = this.treeNode.parent;\n\t\t}\n\t\t\/\/dojo.profile.start(\"onDrop \"+sourceTreeNode);\n\t\tvar r = this.getDropHandler(e, source, targetParent, targetIndex)();\n\t\t\/\/dojo.profile.end(\"onDrop \"+sourceTreeNode);\n\t\treturn r;","prototype":"dojo.dnd.TreeDropTargetV3"}},"dojo.dnd.TreeDropTargetV3.getDropHandler":{"meta":{"summary":"","parameters":{"e":{"type":""},"source":{"type":""},"targetParent":{"type":""},"targetIndex":{"type":""}},"src":" \tvar handler;\n\t\tvar _this = this;\n\t\thandler = function () {\n\t\t\tvar result;\n\t\t\t\/\/dojo.debug(\"Move \"+source.treeNode+\" to parent \"+targetParent+\":\"+targetIndex);\n\t\t\tif (source.treeNode) {\n\t\t\t\tresult = _this.controller.move(source.treeNode, targetParent, targetIndex, true);\n\t\t\t\t\/\/dojo.debug(\"moved \"+result);\n\t\t\t} else {\n\t\t\t\tif (dojo.lang.isFunction(source.onDrop)) {\n\t\t\t\t\tsource.onDrop(targetParent, targetIndex);\n\t\t\t\t}\n\t\t\t\tvar treeNode = source.getTreeNode();\n\t\t\t\tif (treeNode) {\n\t\t\t\t\tresult = _this.controller.createChild(targetParent, targetIndex, treeNode, true);\n\t\t\t\t} else {\n\t\t\t\t\tresult = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (result instanceof dojo.Deferred) {\n\t\t\t\t\/\/ this Deferred is always sync\n\t\t\t\tvar isSuccess = result.fired == 0;\n\t\t\t\tif (!isSuccess) {\n\t\t\t\t\t_this.handleDropError(source, targetParent, targetIndex, result);\n\t\t\t\t}\n\t\t\t\treturn isSuccess;\t\t\t\t\n\t\t\t} else {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\treturn handler;","prototype":"dojo.dnd.TreeDropTargetV3"}},"dojo.dnd.TreeDropTargetV3.handleDropError":{"meta":{"summary":"","parameters":{"source":{"type":""},"parent":{"type":""},"index":{"type":""},"result":{"type":""}},"src":" \tdojo.debug(\"TreeDropTargetV3.handleDropError: DND error occured\");\n\t\tdojo.debugShallow(result);","prototype":"dojo.dnd.TreeDropTargetV3"}}}}},"dojo.dnd._":{"meta":{"requires":{"common":["dojo.dnd.DragAndDrop"],"browser":["dojo.dnd.HtmlDragAndDrop"],"dashboard":["dojo.dnd.HtmlDragAndDrop"]}}}}