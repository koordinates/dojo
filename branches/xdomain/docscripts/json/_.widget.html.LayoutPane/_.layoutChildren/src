var kids = {'left':[], 'right':[], 'top':[], 'bottom':[], 'client':[], 'flood':[]};
var hits = 0;

for(var i=0; i<this.children.length; i++){
	if (this.hasLayoutAlign(this.children[i])){
		kids[this.children[i].layoutAlign].push(this.children[i]);
		hits++;
	}
}

if (!hits){
	return;
}

var container = this.containerNode || this.domNode;

 calc layout space

this.clientWidth  = dojo.style.getContentWidth(container);
this.clientHeight = dojo.style.getContentHeight(container);

 note: don't setup clientRect as a member of the prototype because that
 would make the contents shared between instances
this.clientRect={};
this.clientRect['left']   = dojo.style.getPixelValue(container, "padding-left", true);
this.clientRect['right']  = dojo.style.getPixelValue(container, "padding-right", true);
this.clientRect['top']    = dojo.style.getPixelValue(container, "padding-top", true);
this.clientRect['bottom'] = dojo.style.getPixelValue(container, "padding-bottom", true);

 arrange them in order
this._layoutCenter(kids, "flood");
if (this.layoutChildPriority == 'top-bottom'){
	this._layoutFloat(kids, "top");
	this._layoutFloat(kids, "bottom");
	this._layoutFloat(kids, "left");
	this._layoutFloat(kids, "right");
}else{
	this._layoutFloat(kids, "left");
	this._layoutFloat(kids, "right");
	this._layoutFloat(kids, "top");
	this._layoutFloat(kids, "bottom");
}
this._layoutCenter(kids, "client");