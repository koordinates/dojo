var avoidCache = false;
if(args["templatecsspath"]){
	args["templateCssPath"] = args["templatecsspath"];
}
if(args["templatepath"]){
	avoidCache = true;
	args["templatePath"] = args["templatepath"];
}
dojo.widget.fillFromTemplateCache(	this, 
									args["templatePath"], 
									args["templateCssPath"],
									null,
									avoidCache);
var ts = dojo.widget._templateCache[this.widgetType];
if((ts)&&(!avoidCache)){
	if(!this.templateString.length){
		this.templateString = ts["string"];
	}
	if(!this.templateNode){
		this.templateNode = ts["node"];
	}
}
var matches = false;
var node = null;
 var tstr = new String(this.templateString); 
var tstr = this.templateString; 
 attempt to clone a template node, if there is one
if((!this.templateNode)&&(this.templateString)){
	matches = this.templateString.match(/\$\{([^\}]+)\}/g);
	if(matches) {
		 if we do property replacement, don't create a templateNode
		 to clone from.
		var hash = this.strings || {};
		 FIXME: should this hash of default replacements be cached in
		 templateString?
		for(var key in dojo.widget.defaultStrings) {
			if(dojo.lang.isUndefined(hash[key])) {
				hash[key] = dojo.widget.defaultStrings[key];
			}
		}
		 FIXME: this is a lot of string munging. Can we make it faster?
		for(var i = 0; i < matches.length; i++) {
			var key = matches[i];
			key = key.substring(2, key.length-1);
			var kval = (key.substring(0, 5) == "this.") ? this[key.substring(5)] : hash[key];
			var value;
			if((kval)||(dojo.lang.isString(kval))){
				value = (dojo.lang.isFunction(kval)) ? kval.call(this, key, this.templateString) : kval;
				tstr = tstr.replace(matches[i], value);
			}
		}
	}else{
		 otherwise, we are required to instantiate a copy of the template
		 string if one is provided.
		
		 FIXME: need to be able to distinguish here what should be done
		 or provide a generic interface across all DOM implementations
		 FIMXE: this breaks if the template has whitespace as its first 
		 characters
		 node = this.createNodesFromText(this.templateString, true);
		 this.templateNode = node[0].cloneNode(true);  we're optimistic here
		this.templateNode = this.createNodesFromText(this.templateString, true)[0];
		ts.node = this.templateNode;
	}