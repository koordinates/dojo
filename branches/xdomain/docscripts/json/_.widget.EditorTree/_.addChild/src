dojo.profile.start("AddChild");

if (dojo.lang.isUndefined(index)) {
	index = this.children.length;
}

if (!child.isTreeNode){
	dojo.raise("You can only add EditorTreeNode widgets to a "+this.widgetType+" widget!");
	return;
}

 usually it is impossible to change "isFolder" state, but if anyone wants to add a child to leaf,
 it is possible program-way.
if (this.isTreeNode){
	if (!this.isFolder) {  just became a folder.
		this.setFolder();
	}
}

 adjust tree
var _this = this;
dojo.lang.forEach(child.getDescendants(), function(elem) { elem.tree = _this.tree; });

 fix parent
child.parent = this;

 no dynamic loading for those who are parents already
if (this.isTreeNode) {
	this.state = this.loadStates.LOADED;
}

 if node exists - adjust its depth, otherwise build it
if (child.domNodeInitialized) {
	dojo.debug(this.widgetType)
	var d = this.isTreeNode ? this.depth : -1;
	dojo.debug('Depth is '+this.depth);
	child.adjustDepth( d - child.depth + 1 );
} else {
	child.depth = this.isTreeNode ? this.depth+1 : 0;
	child.buildNode(child.tree, child.depth);
}

dojo.debug(child.domNode.outerHTML)

if (index < this.children.length) {

	dojo.debug('insert '+index)
	dojo.debugShallow(child);

	 insert
	dojo.dom.insertBefore(child.domNode, this.children[index].domNode);
} else {
	this.containerNode.appendChild(child.domNode);
}

if (index == this.children.length && this.children.length == 0) {
	this.containerNode.style.display = 'block';
}

this.children.splice(index, 0, child);

dojo.profile.end("AddChild");

dojo.profile.start("updateIconTree");

this.updateIconTree();
dojo.debug("Update my icons: "+child)
child.updateIcons();
if (child.isFirstNode() && child.getNextSibling()) {
	dojo.debug("Update expand for"+child.getNextSibling())
	child.getNextSibling().updateExpandIcon();
}
if (child.isLastNode() && child.getPreviousSibling()) {
	dojo.debug("Update expand for"+child.getPreviousSibling())
	child.getPreviousSibling().updateExpandIcon();
}

dojo.profile.end("updateIconTree");
