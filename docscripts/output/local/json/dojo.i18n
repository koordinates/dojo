{"dojo.i18n.common":{"meta":{"functions":{"dojo.i18n.getLocalization":{"meta":{"summary":"Returns an Object containing the localization for a given resource bundle in a package, matching the specified locale.","parameters":{"packageName":{"type":"String"},"bundleName":{"type":"String"},"locale":{"type":"String?"}},"src":"\tdojo.hostenv.preloadLocalizations();\n\tlocale = dojo.hostenv.normalizeLocale(locale);\n\t\/\/ look for nearest locale match\n\tvar elements = locale.split('-');\n\tvar module = [packageName,\"nls\",bundleName].join('.');\n\tvar bundle = dojo.hostenv.findModule(module, true);\n\tvar localization;\n\tfor(var i = elements.length; i > 0; i--){\n\t\tvar loc = elements.slice(0, i).join('_');\n\t\tif(bundle[loc]){\n\t\t\tlocalization = bundle[loc];\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(!localization){\n\t\tlocalization = bundle.ROOT;\n\t}\n\t\/\/ make a singleton prototype so that the caller won't accidentally change the values globally\n\tif(localization){\n\t\tvar clazz = function(){};\n\t\tclazz.prototype = localization;\n\t\treturn new clazz(); \/\/ Object\n\t}\n\tdojo.raise(\"Bundle not found: \" + bundleName + \" in \" + packageName+\" , locale=\" + locale);","description":"Returns a hash containing name\/value pairs in its prototypesuch that values can be easily overridden. Throws an exception if the bundle is not found. Bundle must have already been loaded by dojo.requireLocalization() or by a build optimization step.","returns":"Object"},"extra":{"parameters":{"packageName":{"type":"package","summary":"which is associated with this resource"},"bundleName":{"type":"the","summary":"base filename of the resource bundle (without the \".js\" suffix)"},"locale":{"type":"the","summary":"variant to load (optional). By default, the locale defined by the host environment: dojo.locale"}}}},"dojo.i18n.isLTR":{"meta":{"summary":"Is the language read left-to-right? Most exceptions are for middle eastern languages.","parameters":{"locale":{"type":"String?"}},"src":"\tvar lang = dojo.hostenv.normalizeLocale(locale).split('-')[0];\n\tvar RTL = {ar:true,fa:true,he:true,ur:true,yi:true};\n\treturn !RTL[lang]; \/\/ Boolean","returns":"Boolean"},"extra":{"parameters":{"locale":{"type":"a","summary":"string representing the locale. By default, the locale defined by the host environment: dojo.locale"}}}}}}},"dojo.i18n.currency.common":{"meta":{"requires":{"common":["dojo.experimental","dojo.regexp","dojo.i18n.common","dojo.i18n.number","dojo.lang.common"]},"functions":{"dojo.i18n.currency.format":{"meta":{"summary":"","parameters":{"value":{"type":""},"iso":{"type":""},"flags":{"type":"optional"},"locale":{"type":"optional"}},"src":" flags = (typeof flags == \"object\") ? flags : {};\n\tvar formatData = dojo.i18n.currency._mapToLocalizedFormatData(dojo.i18n.currency.FORMAT_TABLE, iso, locale);\n\tif (typeof flags.places == \"undefined\") {flags.places = formatData.places;}\n\tif (typeof flags.places == \"undefined\") {flags.places = 2;}\n\tflags.signed = false;\n\tvar result = dojo.i18n.number.format(value, flags, locale);\n\tvar sym = formatData.symbol;\n\tif (formatData.adjSpace == \"symbol\"){ \n\t\tif (formatData.placement == \"after\"){\n\t\t\tsym = \" \" + sym;\/\/ TODO: nbsp?\n\t\t}else{\n\t\t\tsym = sym + \" \";\/\/ TODO: nbsp?\n\t\t}\n\t}\n\tif (value < 0){\n\t\tif (formatData.signPlacement == \"before\"){\n\t\t\tsym = \"-\" + sym;\n\t\t}else if (formatData.signPlacement == \"after\"){\n\t\t\tsym = sym + \"-\";\n\t\t}\n\t}\n\tvar spc = (formatData.adjSpace == \"number\") ? \" \" : \"\"; \/\/ TODO: nbsp?\n\tif (formatData.placement == \"after\"){\n\t\tresult = result + spc + sym;\n\t}else{\n\t\tresult = sym + spc + result;\n\t}\n\tif (value < 0){\n\t\tif (formatData.signPlacement == \"around\"){\n\t\t\tresult = \"(\" + result + \")\";\n\t\t}else if (formatData.signPlacement == \"end\"){\n\t\t\tresult = result + \"-\";\n\t\t}else if (!formatData.signPlacement || formatData.signPlacement == \"begin\"){\n\t\t\tresult = \"-\" + result;\n\t\t}\n\t}\n\treturn result;"}},"dojo.i18n.currency.parse":{"meta":{"summary":"","parameters":{"value":{"type":""},"iso":{"type":""},"locale":{"type":""},"flags":{"type":"optional"}},"src":" if (typeof flags.validate == \"undefined\") {flags.validate = true;}\n\tif (flags.validate && !dojo.i18n.number.isCurrency(value, iso, locale, flags)) {\n\t\treturn Number.NaN;\n\t}\n\tvar sign = (value.indexOf('-') != -1);\n\tvar abs = abs.replace(\/\\-\/, \"\");\n\tvar formatData = dojo.i18n.currency._mapToLocalizedFormatData(dojo.i18n.currency.FORMAT_TABLE, iso, locale);\n\tabs = abs.replace(new RegExp(\"\\\\\" + formatData.symbol), \"\");\n\t\/\/TODO: trim?\n\tvar number = dojo.i18n.number.parse(abs, locale, flags);\n\tif (sign){number = number * -1;}\n\treturn number;"}},"dojo.i18n.currency.isCurrency":{"meta":{"summary":"","parameters":{"value":{"type":""},"iso":{"type":""},"locale":{"type":"optional"},"flags":{"type":""}},"src":" flags = (typeof flags == \"object\") ? flags : {};\n\tvar numberFormatData = dojo.i18n.number._mapToLocalizedFormatData(dojo.i18n.number.FORMAT_TABLE, locale);\n\tif (typeof flags.separator == \"undefined\") {flags.separator = numberFormatData[0];}\n\telse if (dojo.lang.isArray(flags.separator) && flags.separator.length == 0){flags.separator = [numberFormatData[0],\"\"];}\n\tif (typeof flags.decimal == \"undefined\") {flags.decimal = numberFormatData[2];}\n\tif (typeof flags.groupSize == \"undefined\") {flags.groupSize = numberFormatData[3];}\n\tif (typeof flags.groupSize2 == \"undefined\") {flags.groupSize2 = numberFormatData[4];}\n\tvar formatData = dojo.i18n.currency._mapToLocalizedFormatData(dojo.i18n.currency.FORMAT_TABLE, iso, locale);\n\tif (typeof flags.places == \"undefined\") {flags.places = formatData.places;}\n\tif (typeof flags.places == \"undefined\") {flags.places = 2;}\n\tif (typeof flags.symbol == \"undefined\") {flags.symbol = formatData.symbol;}\n\telse if (dojo.lang.isArray(flags.symbol) && flags.symbol.length == 0){flags.symbol = [formatData.symbol,\"\"];}\n\tif (typeof flags.placement == \"undefined\") {flags.placement = formatData.placement;}\n\t\/\/TODO more... or mixin?\n\tvar re = new RegExp(\"^\" + dojo.regexp.currency(flags) + \"$\");\n\/\/dojo.debug(value+\":\"+dojo.regexp.currency(flags)+\"=\"+re.test(value));\n\treturn re.test(value);"}},"dojo.i18n.currency._mapToLocalizedFormatData":{"meta":{"summary":"","parameters":{"table":{"type":""},"iso":{"type":""},"locale":{"type":"optional"}},"src":" var formatData = dojo.i18n.currency.FORMAT_TABLE[iso];\n\tif (!dojo.lang.isArray(formatData)){\n\t\treturn formatData;\n\t}\n\treturn dojo.i18n.number._mapToLocalizedFormatData(formatData[0], locale);"}}}}},"dojo.i18n.currency":{"meta":{"requires":{"common":["dojo.experimental","dojo.regexp","dojo.i18n.common","dojo.i18n.number","dojo.lang.common"]},"functions":{"dojo.i18n.currency.format":{"meta":{"summary":"","parameters":{"value":{"type":""},"iso":{"type":""},"flags":{"type":"optional"},"locale":{"type":"optional"}},"src":" flags = (typeof flags == \"object\") ? flags : {};\n\tvar formatData = dojo.i18n.currency._mapToLocalizedFormatData(dojo.i18n.currency.FORMAT_TABLE, iso, locale);\n\tif (typeof flags.places == \"undefined\") {flags.places = formatData.places;}\n\tif (typeof flags.places == \"undefined\") {flags.places = 2;}\n\tflags.signed = false;\n\tvar result = dojo.i18n.number.format(value, flags, locale);\n\tvar sym = formatData.symbol;\n\tif (formatData.adjSpace == \"symbol\"){ \n\t\tif (formatData.placement == \"after\"){\n\t\t\tsym = \" \" + sym;\/\/ TODO: nbsp?\n\t\t}else{\n\t\t\tsym = sym + \" \";\/\/ TODO: nbsp?\n\t\t}\n\t}\n\tif (value < 0){\n\t\tif (formatData.signPlacement == \"before\"){\n\t\t\tsym = \"-\" + sym;\n\t\t}else if (formatData.signPlacement == \"after\"){\n\t\t\tsym = sym + \"-\";\n\t\t}\n\t}\n\tvar spc = (formatData.adjSpace == \"number\") ? \" \" : \"\"; \/\/ TODO: nbsp?\n\tif (formatData.placement == \"after\"){\n\t\tresult = result + spc + sym;\n\t}else{\n\t\tresult = sym + spc + result;\n\t}\n\tif (value < 0){\n\t\tif (formatData.signPlacement == \"around\"){\n\t\t\tresult = \"(\" + result + \")\";\n\t\t}else if (formatData.signPlacement == \"end\"){\n\t\t\tresult = result + \"-\";\n\t\t}else if (!formatData.signPlacement || formatData.signPlacement == \"begin\"){\n\t\t\tresult = \"-\" + result;\n\t\t}\n\t}\n\treturn result;"}},"dojo.i18n.currency.parse":{"meta":{"summary":"","parameters":{"value":{"type":""},"iso":{"type":""},"locale":{"type":""},"flags":{"type":"optional"}},"src":" if (typeof flags.validate == \"undefined\") {flags.validate = true;}\n\tif (flags.validate && !dojo.i18n.number.isCurrency(value, iso, locale, flags)) {\n\t\treturn Number.NaN;\n\t}\n\tvar sign = (value.indexOf('-') != -1);\n\tvar abs = abs.replace(\/\\-\/, \"\");\n\tvar formatData = dojo.i18n.currency._mapToLocalizedFormatData(dojo.i18n.currency.FORMAT_TABLE, iso, locale);\n\tabs = abs.replace(new RegExp(\"\\\\\" + formatData.symbol), \"\");\n\t\/\/TODO: trim?\n\tvar number = dojo.i18n.number.parse(abs, locale, flags);\n\tif (sign){number = number * -1;}\n\treturn number;"}},"dojo.i18n.currency.isCurrency":{"meta":{"summary":"","parameters":{"value":{"type":""},"iso":{"type":""},"locale":{"type":"optional"},"flags":{"type":""}},"src":" flags = (typeof flags == \"object\") ? flags : {};\n\tvar numberFormatData = dojo.i18n.number._mapToLocalizedFormatData(dojo.i18n.number.FORMAT_TABLE, locale);\n\tif (typeof flags.separator == \"undefined\") {flags.separator = numberFormatData[0];}\n\telse if (dojo.lang.isArray(flags.separator) && flags.separator.length == 0){flags.separator = [numberFormatData[0],\"\"];}\n\tif (typeof flags.decimal == \"undefined\") {flags.decimal = numberFormatData[2];}\n\tif (typeof flags.groupSize == \"undefined\") {flags.groupSize = numberFormatData[3];}\n\tif (typeof flags.groupSize2 == \"undefined\") {flags.groupSize2 = numberFormatData[4];}\n\tvar formatData = dojo.i18n.currency._mapToLocalizedFormatData(dojo.i18n.currency.FORMAT_TABLE, iso, locale);\n\tif (typeof flags.places == \"undefined\") {flags.places = formatData.places;}\n\tif (typeof flags.places == \"undefined\") {flags.places = 2;}\n\tif (typeof flags.symbol == \"undefined\") {flags.symbol = formatData.symbol;}\n\telse if (dojo.lang.isArray(flags.symbol) && flags.symbol.length == 0){flags.symbol = [formatData.symbol,\"\"];}\n\tif (typeof flags.placement == \"undefined\") {flags.placement = formatData.placement;}\n\t\/\/TODO more... or mixin?\n\tvar re = new RegExp(\"^\" + dojo.regexp.currency(flags) + \"$\");\n\/\/dojo.debug(value+\":\"+dojo.regexp.currency(flags)+\"=\"+re.test(value));\n\treturn re.test(value);"}},"dojo.i18n.currency._mapToLocalizedFormatData":{"meta":{"summary":"","parameters":{"table":{"type":""},"iso":{"type":""},"locale":{"type":"optional"}},"src":" var formatData = dojo.i18n.currency.FORMAT_TABLE[iso];\n\tif (!dojo.lang.isArray(formatData)){\n\t\treturn formatData;\n\t}\n\treturn dojo.i18n.number._mapToLocalizedFormatData(formatData[0], locale);"}}}}},"dojo.i18n.number":{"meta":{"requires":{"common":["dojo.experimental","dojo.regexp","dojo.i18n.common","dojo.lang.common"]},"functions":{"dojo.i18n.number.format":{"meta":{"summary":"","parameters":{"value":{"type":""},"flags":{"type":"optional"},"locale":{"type":"optional"}},"src":" flags = (typeof flags == \"object\") ? flags : {};\n\tvar formatData = dojo.i18n.number._mapToLocalizedFormatData(dojo.i18n.number.FORMAT_TABLE, locale);\n\tif (typeof flags.separator == \"undefined\") {flags.separator = formatData[1];}\n\tif (typeof flags.decimal == \"undefined\") {flags.decimal = formatData[2];}\n\tif (typeof flags.groupSize == \"undefined\") {flags.groupSize = formatData[3];}\n\tif (typeof flags.groupSize2 == \"undefined\") {flags.groupSize2 = formatData[4];}\n\tif (typeof flags.round == \"undefined\") {flags.round = true;}\n\tif (typeof flags.signed == \"undefined\") {flags.signed = true;}\n\tvar output = (flags.signed && (value < 0)) ? \"-\" : \"\";\n\tvalue = Math.abs(value);\n\tvar whole = String((((flags.places > 0) || !flags.round) ? Math.floor : Math.round)(value));\n\t\/\/ Splits str into substrings of size count, starting from right to left.  Is there a more clever way to do this in JS?\n\tfunction splitSubstrings(str, count){\n\t\tfor(var subs = []; str.length >= count; str = str.substr(0, str.length - count)){\n\t\t\tsubs.push(str.substr(-count));\n\t\t}\n\t\tif (str.length > 0){subs.push(str);}\n\t\treturn subs.reverse();\n\t}\n\tif (flags.groupSize2 && (whole.length > flags.groupSize)){\n\t\tvar groups = splitSubstrings(whole.substr(0, whole.length - flags.groupSize), flags.groupSize2);\n\t\tgroups.push(whole.substr(-flags.groupSize));\n\t\toutput = output + groups.join(flags.separator);\n\t}else if (flags.groupSize){\n\t\toutput = output + splitSubstrings(whole, flags.groupSize).join(flags.separator);\n\t}else{\n\t\toutput = output + whole;\n\t}\n\/\/TODO: what if flags.places is Infinity?\n\tif (flags.places > 0){\n\t\/\/Q: Is it safe to convert to a string and split on \".\", or might that be locale dependent?  Use Math for now.\n\t\tvar fract = value - Math.floor(value);\n\t\tfract = (flags.round ? Math.round : Math.floor)(fract * Math.pow(10, flags.places));\n\t\toutput = output + flags.decimal + fract;\n\t}\n\/\/TODO: exp\n\treturn output;"}},"dojo.i18n.number.parse":{"meta":{"summary":"","parameters":{"value":{"type":""},"locale":{"type":"optional"},"flags":{"type":"optional"}},"src":" flags = (typeof flags == \"object\") ? flags : {};\n\tvar formatData = dojo.i18n.number._mapToLocalizedFormatData(dojo.i18n.number.FORMAT_TABLE, locale);\n\tif (typeof flags.separator == \"undefined\") {flags.separator = formatData[1];}\n\tif (typeof flags.decimal == \"undefined\") {flags.decimal = formatData[2];}\n\tif (typeof flags.groupSize == \"undefined\") {flags.groupSize = formatData[3];}\n\tif (typeof flags.groupSize2 == \"undefined\") {flags.groupSize2 = formatData[4];}\n\tif (typeof flags.validate == \"undefined\") {flags.validate = true;}\n\tif (flags.validate && !dojo.i18n.number.isReal(value, locale, flags)) {\n\t\treturn Number.NaN;\n\t}\n\tvar numbers = value.split(flags.decimal);\n\tif (numbers.length > 2){return Number.NaN; }\n\tvar whole = Number(numbers[0].replace(new RegExp(\"\\\\\" + flags.separator, \"g\"), \"\"));\n\tvar fract = (numbers.length == 1) ? 0 : Number(numbers[1]) \/ Math.pow(10, String(numbers[1]).length); \/\/ could also do Number(whole + \".\" + numbers[1]) if whole != NaN\n\/\/TODO: exp\n\treturn whole + fract;"}},"dojo.i18n.number.isInteger":{"meta":{"summary":"","parameters":{"value":{"type":""},"locale":{"type":"optional"},"flags":{"type":"optional"}},"src":" flags = (typeof flags == \"object\") ? flags : {};\n\tvar formatData = dojo.i18n.number._mapToLocalizedFormatData(dojo.i18n.number.FORMAT_TABLE, locale);\n\tif (typeof flags.separator == \"undefined\") {flags.separator = formatData[1];}\n\telse if (dojo.lang.isArray(flags.separator) && flags.separator.length ===0){\n\t\tflags.separator = [formatData[1],\"\"];\n\t}\n\tif (typeof flags.groupSize == \"undefined\") {flags.groupSize = formatData[3];}\n\tif (typeof flags.groupSize2 == \"undefined\") {flags.groupSize2 = formatData[4];}\n\tvar re = new RegExp(\"^\" + dojo.regexp.integer(flags) + \"$\");\n\treturn re.test(value);"}},"dojo.i18n.number.isReal":{"meta":{"summary":"","parameters":{"value":{"type":""},"locale":{"type":"optional"},"flags":{"type":"optional"}},"src":" flags = (typeof flags == \"object\") ? flags : {};\n\tvar formatData = dojo.i18n.number._mapToLocalizedFormatData(dojo.i18n.number.FORMAT_TABLE, locale);\n\tif (typeof flags.separator == \"undefined\") {flags.separator = formatData[1];}\n\telse if (dojo.lang.isArray(flags.separator) && flags.separator.length ===0){\n\t\tflags.separator = [formatData[1],\"\"];\n\t}\n\tif (typeof flags.decimal == \"undefined\") {flags.decimal = formatData[2];}\n\tif (typeof flags.groupSize == \"undefined\") {flags.groupSize = formatData[3];}\n\tif (typeof flags.groupSize2 == \"undefined\") {flags.groupSize2 = formatData[4];}\n\tvar re = new RegExp(\"^\" + dojo.regexp.realNumber(flags) + \"$\");\n\treturn re.test(value);"}},"dojo.i18n.number._mapToLocalizedFormatData":{"meta":{"summary":"","parameters":{"table":{"type":""},"locale":{"type":""}},"src":" locale = dojo.hostenv.normalizeLocale(locale);\n\/\/TODO: most- to least-specific search? search by country code?\n\/\/TODO: implement aliases to simplify and shorten tables\n\tvar data = table[locale];\n\tif (typeof data == 'undefined'){data = table['*'];}\n\treturn data;"}}}}}}